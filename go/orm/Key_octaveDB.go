// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Key_octave_sql sql.NullBool
var dummy_Key_octave_time time.Duration
var dummy_Key_octave_sort sort.Float64Slice

// Key_octaveAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model key_octaveAPI
type Key_octaveAPI struct {
	gorm.Model

	models.Key_octave_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Key_octavePointersEncoding Key_octavePointersEncoding
}

// Key_octavePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Key_octavePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Key_octaveDB describes a key_octave in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model key_octaveDB
type Key_octaveDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field key_octaveDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Key_octavePointersEncoding
}

// Key_octaveDBs arrays key_octaveDBs
// swagger:response key_octaveDBsResponse
type Key_octaveDBs []Key_octaveDB

// Key_octaveDBResponse provides response
// swagger:response key_octaveDBResponse
type Key_octaveDBResponse struct {
	Key_octaveDB
}

// Key_octaveWOP is a Key_octave without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Key_octaveWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Key_octave_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoKey_octaveStruct struct {
	// stores Key_octaveDB according to their gorm ID
	Map_Key_octaveDBID_Key_octaveDB map[uint]*Key_octaveDB

	// stores Key_octaveDB ID according to Key_octave address
	Map_Key_octavePtr_Key_octaveDBID map[*models.Key_octave]uint

	// stores Key_octave according to their gorm ID
	Map_Key_octaveDBID_Key_octavePtr map[uint]*models.Key_octave

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoKey_octave *BackRepoKey_octaveStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoKey_octave.stage
	return
}

func (backRepoKey_octave *BackRepoKey_octaveStruct) GetDB() *gorm.DB {
	return backRepoKey_octave.db
}

// GetKey_octaveDBFromKey_octavePtr is a handy function to access the back repo instance from the stage instance
func (backRepoKey_octave *BackRepoKey_octaveStruct) GetKey_octaveDBFromKey_octavePtr(key_octave *models.Key_octave) (key_octaveDB *Key_octaveDB) {
	id := backRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave]
	key_octaveDB = backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[id]
	return
}

// BackRepoKey_octave.CommitPhaseOne commits all staged instances of Key_octave to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKey_octave *BackRepoKey_octaveStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for key_octave := range stage.Key_octaves {
		backRepoKey_octave.CommitPhaseOneInstance(key_octave)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, key_octave := range backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr {
		if _, ok := stage.Key_octaves[key_octave]; !ok {
			backRepoKey_octave.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKey_octave.CommitDeleteInstance commits deletion of Key_octave to the BackRepo
func (backRepoKey_octave *BackRepoKey_octaveStruct) CommitDeleteInstance(id uint) (Error error) {

	key_octave := backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr[id]

	// key_octave is not staged anymore, remove key_octaveDB
	key_octaveDB := backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[id]
	query := backRepoKey_octave.db.Unscoped().Delete(&key_octaveDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID, key_octave)
	delete(backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr, id)
	delete(backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB, id)

	return
}

// BackRepoKey_octave.CommitPhaseOneInstance commits key_octave staged instances of Key_octave to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKey_octave *BackRepoKey_octaveStruct) CommitPhaseOneInstance(key_octave *models.Key_octave) (Error error) {

	// check if the key_octave is not commited yet
	if _, ok := backRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave]; ok {
		return
	}

	// initiate key_octave
	var key_octaveDB Key_octaveDB
	key_octaveDB.CopyBasicFieldsFromKey_octave(key_octave)

	query := backRepoKey_octave.db.Create(&key_octaveDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave] = key_octaveDB.ID
	backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr[key_octaveDB.ID] = key_octave
	backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[key_octaveDB.ID] = &key_octaveDB

	return
}

// BackRepoKey_octave.CommitPhaseTwo commits all staged instances of Key_octave to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_octave *BackRepoKey_octaveStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, key_octave := range backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr {
		backRepoKey_octave.CommitPhaseTwoInstance(backRepo, idx, key_octave)
	}

	return
}

// BackRepoKey_octave.CommitPhaseTwoInstance commits {{structname }} of models.Key_octave to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_octave *BackRepoKey_octaveStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, key_octave *models.Key_octave) (Error error) {

	// fetch matching key_octaveDB
	if key_octaveDB, ok := backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[idx]; ok {

		key_octaveDB.CopyBasicFieldsFromKey_octave(key_octave)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoKey_octave.db.Save(&key_octaveDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Key_octave intance %s", key_octave.Name))
		return err
	}

	return
}

// BackRepoKey_octave.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKey_octave *BackRepoKey_octaveStruct) CheckoutPhaseOne() (Error error) {

	key_octaveDBArray := make([]Key_octaveDB, 0)
	query := backRepoKey_octave.db.Find(&key_octaveDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	key_octaveInstancesToBeRemovedFromTheStage := make(map[*models.Key_octave]any)
	for key, value := range backRepoKey_octave.stage.Key_octaves {
		key_octaveInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, key_octaveDB := range key_octaveDBArray {
		backRepoKey_octave.CheckoutPhaseOneInstance(&key_octaveDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		key_octave, ok := backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr[key_octaveDB.ID]
		if ok {
			delete(key_octaveInstancesToBeRemovedFromTheStage, key_octave)
		}
	}

	// remove from stage and back repo's 3 maps all key_octaves that are not in the checkout
	for key_octave := range key_octaveInstancesToBeRemovedFromTheStage {
		key_octave.Unstage(backRepoKey_octave.GetStage())

		// remove instance from the back repo 3 maps
		key_octaveID := backRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave]
		delete(backRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID, key_octave)
		delete(backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB, key_octaveID)
		delete(backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr, key_octaveID)
	}

	return
}

// CheckoutPhaseOneInstance takes a key_octaveDB that has been found in the DB, updates the backRepo and stages the
// models version of the key_octaveDB
func (backRepoKey_octave *BackRepoKey_octaveStruct) CheckoutPhaseOneInstance(key_octaveDB *Key_octaveDB) (Error error) {

	key_octave, ok := backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr[key_octaveDB.ID]
	if !ok {
		key_octave = new(models.Key_octave)

		backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr[key_octaveDB.ID] = key_octave
		backRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave] = key_octaveDB.ID

		// append model store with the new element
		key_octave.Name = key_octaveDB.Name_Data.String
		key_octave.Stage(backRepoKey_octave.GetStage())
	}
	key_octaveDB.CopyBasicFieldsToKey_octave(key_octave)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	key_octave.Stage(backRepoKey_octave.GetStage())

	// preserve pointer to key_octaveDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Key_octaveDBID_Key_octaveDB)[key_octaveDB hold variable pointers
	key_octaveDB_Data := *key_octaveDB
	preservedPtrToKey_octave := &key_octaveDB_Data
	backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[key_octaveDB.ID] = preservedPtrToKey_octave

	return
}

// BackRepoKey_octave.CheckoutPhaseTwo Checkouts all staged instances of Key_octave to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_octave *BackRepoKey_octaveStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, key_octaveDB := range backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB {
		backRepoKey_octave.CheckoutPhaseTwoInstance(backRepo, key_octaveDB)
	}
	return
}

// BackRepoKey_octave.CheckoutPhaseTwoInstance Checkouts staged instances of Key_octave to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_octave *BackRepoKey_octaveStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, key_octaveDB *Key_octaveDB) (Error error) {

	key_octave := backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr[key_octaveDB.ID]

	key_octaveDB.DecodePointers(backRepo, key_octave)

	return
}

func (key_octaveDB *Key_octaveDB) DecodePointers(backRepo *BackRepoStruct, key_octave *models.Key_octave) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitKey_octave allows commit of a single key_octave (if already staged)
func (backRepo *BackRepoStruct) CommitKey_octave(key_octave *models.Key_octave) {
	backRepo.BackRepoKey_octave.CommitPhaseOneInstance(key_octave)
	if id, ok := backRepo.BackRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave]; ok {
		backRepo.BackRepoKey_octave.CommitPhaseTwoInstance(backRepo, id, key_octave)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKey_octave allows checkout of a single key_octave (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKey_octave(key_octave *models.Key_octave) {
	// check if the key_octave is staged
	if _, ok := backRepo.BackRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave]; ok {

		if id, ok := backRepo.BackRepoKey_octave.Map_Key_octavePtr_Key_octaveDBID[key_octave]; ok {
			var key_octaveDB Key_octaveDB
			key_octaveDB.ID = id

			if err := backRepo.BackRepoKey_octave.db.First(&key_octaveDB, id).Error; err != nil {
				log.Fatalln("CheckoutKey_octave : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKey_octave.CheckoutPhaseOneInstance(&key_octaveDB)
			backRepo.BackRepoKey_octave.CheckoutPhaseTwoInstance(backRepo, &key_octaveDB)
		}
	}
}

// CopyBasicFieldsFromKey_octave
func (key_octaveDB *Key_octaveDB) CopyBasicFieldsFromKey_octave(key_octave *models.Key_octave) {
	// insertion point for fields commit

	key_octaveDB.Name_Data.String = key_octave.Name
	key_octaveDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromKey_octave_WOP
func (key_octaveDB *Key_octaveDB) CopyBasicFieldsFromKey_octave_WOP(key_octave *models.Key_octave_WOP) {
	// insertion point for fields commit

	key_octaveDB.Name_Data.String = key_octave.Name
	key_octaveDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromKey_octaveWOP
func (key_octaveDB *Key_octaveDB) CopyBasicFieldsFromKey_octaveWOP(key_octave *Key_octaveWOP) {
	// insertion point for fields commit

	key_octaveDB.Name_Data.String = key_octave.Name
	key_octaveDB.Name_Data.Valid = true
}

// CopyBasicFieldsToKey_octave
func (key_octaveDB *Key_octaveDB) CopyBasicFieldsToKey_octave(key_octave *models.Key_octave) {
	// insertion point for checkout of basic fields (back repo to stage)
	key_octave.Name = key_octaveDB.Name_Data.String
}

// CopyBasicFieldsToKey_octave_WOP
func (key_octaveDB *Key_octaveDB) CopyBasicFieldsToKey_octave_WOP(key_octave *models.Key_octave_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	key_octave.Name = key_octaveDB.Name_Data.String
}

// CopyBasicFieldsToKey_octaveWOP
func (key_octaveDB *Key_octaveDB) CopyBasicFieldsToKey_octaveWOP(key_octave *Key_octaveWOP) {
	key_octave.ID = int(key_octaveDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	key_octave.Name = key_octaveDB.Name_Data.String
}

// Backup generates a json file from a slice of all Key_octaveDB instances in the backrepo
func (backRepoKey_octave *BackRepoKey_octaveStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Key_octaveDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Key_octaveDB, 0)
	for _, key_octaveDB := range backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB {
		forBackup = append(forBackup, key_octaveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Key_octave ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Key_octave file", err.Error())
	}
}

// Backup generates a json file from a slice of all Key_octaveDB instances in the backrepo
func (backRepoKey_octave *BackRepoKey_octaveStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Key_octaveDB, 0)
	for _, key_octaveDB := range backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB {
		forBackup = append(forBackup, key_octaveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Key_octave")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Key_octave_Fields, -1)
	for _, key_octaveDB := range forBackup {

		var key_octaveWOP Key_octaveWOP
		key_octaveDB.CopyBasicFieldsToKey_octaveWOP(&key_octaveWOP)

		row := sh.AddRow()
		row.WriteStruct(&key_octaveWOP, -1)
	}
}

// RestoreXL from the "Key_octave" sheet all Key_octaveDB instances
func (backRepoKey_octave *BackRepoKey_octaveStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKey_octaveid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Key_octave"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKey_octave.rowVisitorKey_octave)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKey_octave *BackRepoKey_octaveStruct) rowVisitorKey_octave(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var key_octaveWOP Key_octaveWOP
		row.ReadStruct(&key_octaveWOP)

		// add the unmarshalled struct to the stage
		key_octaveDB := new(Key_octaveDB)
		key_octaveDB.CopyBasicFieldsFromKey_octaveWOP(&key_octaveWOP)

		key_octaveDB_ID_atBackupTime := key_octaveDB.ID
		key_octaveDB.ID = 0
		query := backRepoKey_octave.db.Create(key_octaveDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[key_octaveDB.ID] = key_octaveDB
		BackRepoKey_octaveid_atBckpTime_newID[key_octaveDB_ID_atBackupTime] = key_octaveDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Key_octaveDB.json" in dirPath that stores an array
// of Key_octaveDB and stores it in the database
// the map BackRepoKey_octaveid_atBckpTime_newID is updated accordingly
func (backRepoKey_octave *BackRepoKey_octaveStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKey_octaveid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Key_octaveDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Key_octave file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Key_octaveDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Key_octaveDBID_Key_octaveDB
	for _, key_octaveDB := range forRestore {

		key_octaveDB_ID_atBackupTime := key_octaveDB.ID
		key_octaveDB.ID = 0
		query := backRepoKey_octave.db.Create(key_octaveDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[key_octaveDB.ID] = key_octaveDB
		BackRepoKey_octaveid_atBckpTime_newID[key_octaveDB_ID_atBackupTime] = key_octaveDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Key_octave file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Key_octave>id_atBckpTime_newID
// to compute new index
func (backRepoKey_octave *BackRepoKey_octaveStruct) RestorePhaseTwo() {

	for _, key_octaveDB := range backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB {

		// next line of code is to avert unused variable compilation error
		_ = key_octaveDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoKey_octave.db.Model(key_octaveDB).Updates(*key_octaveDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoKey_octave.ResetReversePointers commits all staged instances of Key_octave to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_octave *BackRepoKey_octaveStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, key_octave := range backRepoKey_octave.Map_Key_octaveDBID_Key_octavePtr {
		backRepoKey_octave.ResetReversePointersInstance(backRepo, idx, key_octave)
	}

	return
}

func (backRepoKey_octave *BackRepoKey_octaveStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, key_octave *models.Key_octave) (Error error) {

	// fetch matching key_octaveDB
	if key_octaveDB, ok := backRepoKey_octave.Map_Key_octaveDBID_Key_octaveDB[idx]; ok {
		_ = key_octaveDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKey_octaveid_atBckpTime_newID map[uint]uint
