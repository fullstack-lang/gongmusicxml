// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Group_barline_sql sql.NullBool
var dummy_Group_barline_time time.Duration
var dummy_Group_barline_sort sort.Float64Slice

// Group_barlineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model group_barlineAPI
type Group_barlineAPI struct {
	gorm.Model

	models.Group_barline_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Group_barlinePointersEncoding Group_barlinePointersEncoding
}

// Group_barlinePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Group_barlinePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Group_barlineDB describes a group_barline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model group_barlineDB
type Group_barlineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field group_barlineDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Group_barlinePointersEncoding
}

// Group_barlineDBs arrays group_barlineDBs
// swagger:response group_barlineDBsResponse
type Group_barlineDBs []Group_barlineDB

// Group_barlineDBResponse provides response
// swagger:response group_barlineDBResponse
type Group_barlineDBResponse struct {
	Group_barlineDB
}

// Group_barlineWOP is a Group_barline without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Group_barlineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Group_barline_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGroup_barlineStruct struct {
	// stores Group_barlineDB according to their gorm ID
	Map_Group_barlineDBID_Group_barlineDB map[uint]*Group_barlineDB

	// stores Group_barlineDB ID according to Group_barline address
	Map_Group_barlinePtr_Group_barlineDBID map[*models.Group_barline]uint

	// stores Group_barline according to their gorm ID
	Map_Group_barlineDBID_Group_barlinePtr map[uint]*models.Group_barline

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGroup_barline *BackRepoGroup_barlineStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGroup_barline.stage
	return
}

func (backRepoGroup_barline *BackRepoGroup_barlineStruct) GetDB() *gorm.DB {
	return backRepoGroup_barline.db
}

// GetGroup_barlineDBFromGroup_barlinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) GetGroup_barlineDBFromGroup_barlinePtr(group_barline *models.Group_barline) (group_barlineDB *Group_barlineDB) {
	id := backRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline]
	group_barlineDB = backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[id]
	return
}

// BackRepoGroup_barline.CommitPhaseOne commits all staged instances of Group_barline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for group_barline := range stage.Group_barlines {
		backRepoGroup_barline.CommitPhaseOneInstance(group_barline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, group_barline := range backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr {
		if _, ok := stage.Group_barlines[group_barline]; !ok {
			backRepoGroup_barline.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGroup_barline.CommitDeleteInstance commits deletion of Group_barline to the BackRepo
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CommitDeleteInstance(id uint) (Error error) {

	group_barline := backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr[id]

	// group_barline is not staged anymore, remove group_barlineDB
	group_barlineDB := backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[id]
	query := backRepoGroup_barline.db.Unscoped().Delete(&group_barlineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID, group_barline)
	delete(backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr, id)
	delete(backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB, id)

	return
}

// BackRepoGroup_barline.CommitPhaseOneInstance commits group_barline staged instances of Group_barline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CommitPhaseOneInstance(group_barline *models.Group_barline) (Error error) {

	// check if the group_barline is not commited yet
	if _, ok := backRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline]; ok {
		return
	}

	// initiate group_barline
	var group_barlineDB Group_barlineDB
	group_barlineDB.CopyBasicFieldsFromGroup_barline(group_barline)

	query := backRepoGroup_barline.db.Create(&group_barlineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline] = group_barlineDB.ID
	backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr[group_barlineDB.ID] = group_barline
	backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[group_barlineDB.ID] = &group_barlineDB

	return
}

// BackRepoGroup_barline.CommitPhaseTwo commits all staged instances of Group_barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, group_barline := range backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr {
		backRepoGroup_barline.CommitPhaseTwoInstance(backRepo, idx, group_barline)
	}

	return
}

// BackRepoGroup_barline.CommitPhaseTwoInstance commits {{structname }} of models.Group_barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, group_barline *models.Group_barline) (Error error) {

	// fetch matching group_barlineDB
	if group_barlineDB, ok := backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[idx]; ok {

		group_barlineDB.CopyBasicFieldsFromGroup_barline(group_barline)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGroup_barline.db.Save(&group_barlineDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Group_barline intance %s", group_barline.Name))
		return err
	}

	return
}

// BackRepoGroup_barline.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CheckoutPhaseOne() (Error error) {

	group_barlineDBArray := make([]Group_barlineDB, 0)
	query := backRepoGroup_barline.db.Find(&group_barlineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	group_barlineInstancesToBeRemovedFromTheStage := make(map[*models.Group_barline]any)
	for key, value := range backRepoGroup_barline.stage.Group_barlines {
		group_barlineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, group_barlineDB := range group_barlineDBArray {
		backRepoGroup_barline.CheckoutPhaseOneInstance(&group_barlineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		group_barline, ok := backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr[group_barlineDB.ID]
		if ok {
			delete(group_barlineInstancesToBeRemovedFromTheStage, group_barline)
		}
	}

	// remove from stage and back repo's 3 maps all group_barlines that are not in the checkout
	for group_barline := range group_barlineInstancesToBeRemovedFromTheStage {
		group_barline.Unstage(backRepoGroup_barline.GetStage())

		// remove instance from the back repo 3 maps
		group_barlineID := backRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline]
		delete(backRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID, group_barline)
		delete(backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB, group_barlineID)
		delete(backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr, group_barlineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a group_barlineDB that has been found in the DB, updates the backRepo and stages the
// models version of the group_barlineDB
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CheckoutPhaseOneInstance(group_barlineDB *Group_barlineDB) (Error error) {

	group_barline, ok := backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr[group_barlineDB.ID]
	if !ok {
		group_barline = new(models.Group_barline)

		backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr[group_barlineDB.ID] = group_barline
		backRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline] = group_barlineDB.ID

		// append model store with the new element
		group_barline.Name = group_barlineDB.Name_Data.String
		group_barline.Stage(backRepoGroup_barline.GetStage())
	}
	group_barlineDB.CopyBasicFieldsToGroup_barline(group_barline)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	group_barline.Stage(backRepoGroup_barline.GetStage())

	// preserve pointer to group_barlineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Group_barlineDBID_Group_barlineDB)[group_barlineDB hold variable pointers
	group_barlineDB_Data := *group_barlineDB
	preservedPtrToGroup_barline := &group_barlineDB_Data
	backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[group_barlineDB.ID] = preservedPtrToGroup_barline

	return
}

// BackRepoGroup_barline.CheckoutPhaseTwo Checkouts all staged instances of Group_barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, group_barlineDB := range backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB {
		backRepoGroup_barline.CheckoutPhaseTwoInstance(backRepo, group_barlineDB)
	}
	return
}

// BackRepoGroup_barline.CheckoutPhaseTwoInstance Checkouts staged instances of Group_barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, group_barlineDB *Group_barlineDB) (Error error) {

	group_barline := backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr[group_barlineDB.ID]

	group_barlineDB.DecodePointers(backRepo, group_barline)

	return
}

func (group_barlineDB *Group_barlineDB) DecodePointers(backRepo *BackRepoStruct, group_barline *models.Group_barline) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGroup_barline allows commit of a single group_barline (if already staged)
func (backRepo *BackRepoStruct) CommitGroup_barline(group_barline *models.Group_barline) {
	backRepo.BackRepoGroup_barline.CommitPhaseOneInstance(group_barline)
	if id, ok := backRepo.BackRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline]; ok {
		backRepo.BackRepoGroup_barline.CommitPhaseTwoInstance(backRepo, id, group_barline)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGroup_barline allows checkout of a single group_barline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGroup_barline(group_barline *models.Group_barline) {
	// check if the group_barline is staged
	if _, ok := backRepo.BackRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline]; ok {

		if id, ok := backRepo.BackRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[group_barline]; ok {
			var group_barlineDB Group_barlineDB
			group_barlineDB.ID = id

			if err := backRepo.BackRepoGroup_barline.db.First(&group_barlineDB, id).Error; err != nil {
				log.Fatalln("CheckoutGroup_barline : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGroup_barline.CheckoutPhaseOneInstance(&group_barlineDB)
			backRepo.BackRepoGroup_barline.CheckoutPhaseTwoInstance(backRepo, &group_barlineDB)
		}
	}
}

// CopyBasicFieldsFromGroup_barline
func (group_barlineDB *Group_barlineDB) CopyBasicFieldsFromGroup_barline(group_barline *models.Group_barline) {
	// insertion point for fields commit

	group_barlineDB.Name_Data.String = group_barline.Name
	group_barlineDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGroup_barline_WOP
func (group_barlineDB *Group_barlineDB) CopyBasicFieldsFromGroup_barline_WOP(group_barline *models.Group_barline_WOP) {
	// insertion point for fields commit

	group_barlineDB.Name_Data.String = group_barline.Name
	group_barlineDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGroup_barlineWOP
func (group_barlineDB *Group_barlineDB) CopyBasicFieldsFromGroup_barlineWOP(group_barline *Group_barlineWOP) {
	// insertion point for fields commit

	group_barlineDB.Name_Data.String = group_barline.Name
	group_barlineDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGroup_barline
func (group_barlineDB *Group_barlineDB) CopyBasicFieldsToGroup_barline(group_barline *models.Group_barline) {
	// insertion point for checkout of basic fields (back repo to stage)
	group_barline.Name = group_barlineDB.Name_Data.String
}

// CopyBasicFieldsToGroup_barline_WOP
func (group_barlineDB *Group_barlineDB) CopyBasicFieldsToGroup_barline_WOP(group_barline *models.Group_barline_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	group_barline.Name = group_barlineDB.Name_Data.String
}

// CopyBasicFieldsToGroup_barlineWOP
func (group_barlineDB *Group_barlineDB) CopyBasicFieldsToGroup_barlineWOP(group_barline *Group_barlineWOP) {
	group_barline.ID = int(group_barlineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	group_barline.Name = group_barlineDB.Name_Data.String
}

// Backup generates a json file from a slice of all Group_barlineDB instances in the backrepo
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Group_barlineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Group_barlineDB, 0)
	for _, group_barlineDB := range backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB {
		forBackup = append(forBackup, group_barlineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Group_barline ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Group_barline file", err.Error())
	}
}

// Backup generates a json file from a slice of all Group_barlineDB instances in the backrepo
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Group_barlineDB, 0)
	for _, group_barlineDB := range backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB {
		forBackup = append(forBackup, group_barlineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Group_barline")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Group_barline_Fields, -1)
	for _, group_barlineDB := range forBackup {

		var group_barlineWOP Group_barlineWOP
		group_barlineDB.CopyBasicFieldsToGroup_barlineWOP(&group_barlineWOP)

		row := sh.AddRow()
		row.WriteStruct(&group_barlineWOP, -1)
	}
}

// RestoreXL from the "Group_barline" sheet all Group_barlineDB instances
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGroup_barlineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Group_barline"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGroup_barline.rowVisitorGroup_barline)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGroup_barline *BackRepoGroup_barlineStruct) rowVisitorGroup_barline(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var group_barlineWOP Group_barlineWOP
		row.ReadStruct(&group_barlineWOP)

		// add the unmarshalled struct to the stage
		group_barlineDB := new(Group_barlineDB)
		group_barlineDB.CopyBasicFieldsFromGroup_barlineWOP(&group_barlineWOP)

		group_barlineDB_ID_atBackupTime := group_barlineDB.ID
		group_barlineDB.ID = 0
		query := backRepoGroup_barline.db.Create(group_barlineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[group_barlineDB.ID] = group_barlineDB
		BackRepoGroup_barlineid_atBckpTime_newID[group_barlineDB_ID_atBackupTime] = group_barlineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Group_barlineDB.json" in dirPath that stores an array
// of Group_barlineDB and stores it in the database
// the map BackRepoGroup_barlineid_atBckpTime_newID is updated accordingly
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGroup_barlineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Group_barlineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Group_barline file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Group_barlineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Group_barlineDBID_Group_barlineDB
	for _, group_barlineDB := range forRestore {

		group_barlineDB_ID_atBackupTime := group_barlineDB.ID
		group_barlineDB.ID = 0
		query := backRepoGroup_barline.db.Create(group_barlineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[group_barlineDB.ID] = group_barlineDB
		BackRepoGroup_barlineid_atBckpTime_newID[group_barlineDB_ID_atBackupTime] = group_barlineDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Group_barline file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Group_barline>id_atBckpTime_newID
// to compute new index
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) RestorePhaseTwo() {

	for _, group_barlineDB := range backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB {

		// next line of code is to avert unused variable compilation error
		_ = group_barlineDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGroup_barline.db.Model(group_barlineDB).Updates(*group_barlineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGroup_barline.ResetReversePointers commits all staged instances of Group_barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_barline *BackRepoGroup_barlineStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, group_barline := range backRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr {
		backRepoGroup_barline.ResetReversePointersInstance(backRepo, idx, group_barline)
	}

	return
}

func (backRepoGroup_barline *BackRepoGroup_barlineStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, group_barline *models.Group_barline) (Error error) {

	// fetch matching group_barlineDB
	if group_barlineDB, ok := backRepoGroup_barline.Map_Group_barlineDBID_Group_barlineDB[idx]; ok {
		_ = group_barlineDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGroup_barlineid_atBckpTime_newID map[uint]uint
