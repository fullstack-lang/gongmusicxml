// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_First_fret_sql sql.NullBool
var dummy_First_fret_time time.Duration
var dummy_First_fret_sort sort.Float64Slice

// First_fretAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model first_fretAPI
type First_fretAPI struct {
	gorm.Model

	models.First_fret_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	First_fretPointersEncoding First_fretPointersEncoding
}

// First_fretPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type First_fretPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// First_fretDB describes a first_fret in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model first_fretDB
type First_fretDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field first_fretDB.Name
	Name_Data sql.NullString

	// Declation for basic field first_fretDB.Text
	Text_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	First_fretPointersEncoding
}

// First_fretDBs arrays first_fretDBs
// swagger:response first_fretDBsResponse
type First_fretDBs []First_fretDB

// First_fretDBResponse provides response
// swagger:response first_fretDBResponse
type First_fretDBResponse struct {
	First_fretDB
}

// First_fretWOP is a First_fret without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type First_fretWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var First_fret_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoFirst_fretStruct struct {
	// stores First_fretDB according to their gorm ID
	Map_First_fretDBID_First_fretDB map[uint]*First_fretDB

	// stores First_fretDB ID according to First_fret address
	Map_First_fretPtr_First_fretDBID map[*models.First_fret]uint

	// stores First_fret according to their gorm ID
	Map_First_fretDBID_First_fretPtr map[uint]*models.First_fret

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFirst_fret *BackRepoFirst_fretStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFirst_fret.stage
	return
}

func (backRepoFirst_fret *BackRepoFirst_fretStruct) GetDB() *gorm.DB {
	return backRepoFirst_fret.db
}

// GetFirst_fretDBFromFirst_fretPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFirst_fret *BackRepoFirst_fretStruct) GetFirst_fretDBFromFirst_fretPtr(first_fret *models.First_fret) (first_fretDB *First_fretDB) {
	id := backRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret]
	first_fretDB = backRepoFirst_fret.Map_First_fretDBID_First_fretDB[id]
	return
}

// BackRepoFirst_fret.CommitPhaseOne commits all staged instances of First_fret to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for first_fret := range stage.First_frets {
		backRepoFirst_fret.CommitPhaseOneInstance(first_fret)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, first_fret := range backRepoFirst_fret.Map_First_fretDBID_First_fretPtr {
		if _, ok := stage.First_frets[first_fret]; !ok {
			backRepoFirst_fret.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFirst_fret.CommitDeleteInstance commits deletion of First_fret to the BackRepo
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CommitDeleteInstance(id uint) (Error error) {

	first_fret := backRepoFirst_fret.Map_First_fretDBID_First_fretPtr[id]

	// first_fret is not staged anymore, remove first_fretDB
	first_fretDB := backRepoFirst_fret.Map_First_fretDBID_First_fretDB[id]
	query := backRepoFirst_fret.db.Unscoped().Delete(&first_fretDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFirst_fret.Map_First_fretPtr_First_fretDBID, first_fret)
	delete(backRepoFirst_fret.Map_First_fretDBID_First_fretPtr, id)
	delete(backRepoFirst_fret.Map_First_fretDBID_First_fretDB, id)

	return
}

// BackRepoFirst_fret.CommitPhaseOneInstance commits first_fret staged instances of First_fret to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CommitPhaseOneInstance(first_fret *models.First_fret) (Error error) {

	// check if the first_fret is not commited yet
	if _, ok := backRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret]; ok {
		return
	}

	// initiate first_fret
	var first_fretDB First_fretDB
	first_fretDB.CopyBasicFieldsFromFirst_fret(first_fret)

	query := backRepoFirst_fret.db.Create(&first_fretDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret] = first_fretDB.ID
	backRepoFirst_fret.Map_First_fretDBID_First_fretPtr[first_fretDB.ID] = first_fret
	backRepoFirst_fret.Map_First_fretDBID_First_fretDB[first_fretDB.ID] = &first_fretDB

	return
}

// BackRepoFirst_fret.CommitPhaseTwo commits all staged instances of First_fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, first_fret := range backRepoFirst_fret.Map_First_fretDBID_First_fretPtr {
		backRepoFirst_fret.CommitPhaseTwoInstance(backRepo, idx, first_fret)
	}

	return
}

// BackRepoFirst_fret.CommitPhaseTwoInstance commits {{structname }} of models.First_fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, first_fret *models.First_fret) (Error error) {

	// fetch matching first_fretDB
	if first_fretDB, ok := backRepoFirst_fret.Map_First_fretDBID_First_fretDB[idx]; ok {

		first_fretDB.CopyBasicFieldsFromFirst_fret(first_fret)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFirst_fret.db.Save(&first_fretDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown First_fret intance %s", first_fret.Name))
		return err
	}

	return
}

// BackRepoFirst_fret.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CheckoutPhaseOne() (Error error) {

	first_fretDBArray := make([]First_fretDB, 0)
	query := backRepoFirst_fret.db.Find(&first_fretDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	first_fretInstancesToBeRemovedFromTheStage := make(map[*models.First_fret]any)
	for key, value := range backRepoFirst_fret.stage.First_frets {
		first_fretInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, first_fretDB := range first_fretDBArray {
		backRepoFirst_fret.CheckoutPhaseOneInstance(&first_fretDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		first_fret, ok := backRepoFirst_fret.Map_First_fretDBID_First_fretPtr[first_fretDB.ID]
		if ok {
			delete(first_fretInstancesToBeRemovedFromTheStage, first_fret)
		}
	}

	// remove from stage and back repo's 3 maps all first_frets that are not in the checkout
	for first_fret := range first_fretInstancesToBeRemovedFromTheStage {
		first_fret.Unstage(backRepoFirst_fret.GetStage())

		// remove instance from the back repo 3 maps
		first_fretID := backRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret]
		delete(backRepoFirst_fret.Map_First_fretPtr_First_fretDBID, first_fret)
		delete(backRepoFirst_fret.Map_First_fretDBID_First_fretDB, first_fretID)
		delete(backRepoFirst_fret.Map_First_fretDBID_First_fretPtr, first_fretID)
	}

	return
}

// CheckoutPhaseOneInstance takes a first_fretDB that has been found in the DB, updates the backRepo and stages the
// models version of the first_fretDB
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CheckoutPhaseOneInstance(first_fretDB *First_fretDB) (Error error) {

	first_fret, ok := backRepoFirst_fret.Map_First_fretDBID_First_fretPtr[first_fretDB.ID]
	if !ok {
		first_fret = new(models.First_fret)

		backRepoFirst_fret.Map_First_fretDBID_First_fretPtr[first_fretDB.ID] = first_fret
		backRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret] = first_fretDB.ID

		// append model store with the new element
		first_fret.Name = first_fretDB.Name_Data.String
		first_fret.Stage(backRepoFirst_fret.GetStage())
	}
	first_fretDB.CopyBasicFieldsToFirst_fret(first_fret)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	first_fret.Stage(backRepoFirst_fret.GetStage())

	// preserve pointer to first_fretDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_First_fretDBID_First_fretDB)[first_fretDB hold variable pointers
	first_fretDB_Data := *first_fretDB
	preservedPtrToFirst_fret := &first_fretDB_Data
	backRepoFirst_fret.Map_First_fretDBID_First_fretDB[first_fretDB.ID] = preservedPtrToFirst_fret

	return
}

// BackRepoFirst_fret.CheckoutPhaseTwo Checkouts all staged instances of First_fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, first_fretDB := range backRepoFirst_fret.Map_First_fretDBID_First_fretDB {
		backRepoFirst_fret.CheckoutPhaseTwoInstance(backRepo, first_fretDB)
	}
	return
}

// BackRepoFirst_fret.CheckoutPhaseTwoInstance Checkouts staged instances of First_fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFirst_fret *BackRepoFirst_fretStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, first_fretDB *First_fretDB) (Error error) {

	first_fret := backRepoFirst_fret.Map_First_fretDBID_First_fretPtr[first_fretDB.ID]

	first_fretDB.DecodePointers(backRepo, first_fret)

	return
}

func (first_fretDB *First_fretDB) DecodePointers(backRepo *BackRepoStruct, first_fret *models.First_fret) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFirst_fret allows commit of a single first_fret (if already staged)
func (backRepo *BackRepoStruct) CommitFirst_fret(first_fret *models.First_fret) {
	backRepo.BackRepoFirst_fret.CommitPhaseOneInstance(first_fret)
	if id, ok := backRepo.BackRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret]; ok {
		backRepo.BackRepoFirst_fret.CommitPhaseTwoInstance(backRepo, id, first_fret)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFirst_fret allows checkout of a single first_fret (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFirst_fret(first_fret *models.First_fret) {
	// check if the first_fret is staged
	if _, ok := backRepo.BackRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret]; ok {

		if id, ok := backRepo.BackRepoFirst_fret.Map_First_fretPtr_First_fretDBID[first_fret]; ok {
			var first_fretDB First_fretDB
			first_fretDB.ID = id

			if err := backRepo.BackRepoFirst_fret.db.First(&first_fretDB, id).Error; err != nil {
				log.Fatalln("CheckoutFirst_fret : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFirst_fret.CheckoutPhaseOneInstance(&first_fretDB)
			backRepo.BackRepoFirst_fret.CheckoutPhaseTwoInstance(backRepo, &first_fretDB)
		}
	}
}

// CopyBasicFieldsFromFirst_fret
func (first_fretDB *First_fretDB) CopyBasicFieldsFromFirst_fret(first_fret *models.First_fret) {
	// insertion point for fields commit

	first_fretDB.Name_Data.String = first_fret.Name
	first_fretDB.Name_Data.Valid = true

	first_fretDB.Text_Data.String = first_fret.Text
	first_fretDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromFirst_fret_WOP
func (first_fretDB *First_fretDB) CopyBasicFieldsFromFirst_fret_WOP(first_fret *models.First_fret_WOP) {
	// insertion point for fields commit

	first_fretDB.Name_Data.String = first_fret.Name
	first_fretDB.Name_Data.Valid = true

	first_fretDB.Text_Data.String = first_fret.Text
	first_fretDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromFirst_fretWOP
func (first_fretDB *First_fretDB) CopyBasicFieldsFromFirst_fretWOP(first_fret *First_fretWOP) {
	// insertion point for fields commit

	first_fretDB.Name_Data.String = first_fret.Name
	first_fretDB.Name_Data.Valid = true

	first_fretDB.Text_Data.String = first_fret.Text
	first_fretDB.Text_Data.Valid = true
}

// CopyBasicFieldsToFirst_fret
func (first_fretDB *First_fretDB) CopyBasicFieldsToFirst_fret(first_fret *models.First_fret) {
	// insertion point for checkout of basic fields (back repo to stage)
	first_fret.Name = first_fretDB.Name_Data.String
	first_fret.Text = first_fretDB.Text_Data.String
}

// CopyBasicFieldsToFirst_fret_WOP
func (first_fretDB *First_fretDB) CopyBasicFieldsToFirst_fret_WOP(first_fret *models.First_fret_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	first_fret.Name = first_fretDB.Name_Data.String
	first_fret.Text = first_fretDB.Text_Data.String
}

// CopyBasicFieldsToFirst_fretWOP
func (first_fretDB *First_fretDB) CopyBasicFieldsToFirst_fretWOP(first_fret *First_fretWOP) {
	first_fret.ID = int(first_fretDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	first_fret.Name = first_fretDB.Name_Data.String
	first_fret.Text = first_fretDB.Text_Data.String
}

// Backup generates a json file from a slice of all First_fretDB instances in the backrepo
func (backRepoFirst_fret *BackRepoFirst_fretStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "First_fretDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*First_fretDB, 0)
	for _, first_fretDB := range backRepoFirst_fret.Map_First_fretDBID_First_fretDB {
		forBackup = append(forBackup, first_fretDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json First_fret ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json First_fret file", err.Error())
	}
}

// Backup generates a json file from a slice of all First_fretDB instances in the backrepo
func (backRepoFirst_fret *BackRepoFirst_fretStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*First_fretDB, 0)
	for _, first_fretDB := range backRepoFirst_fret.Map_First_fretDBID_First_fretDB {
		forBackup = append(forBackup, first_fretDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("First_fret")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&First_fret_Fields, -1)
	for _, first_fretDB := range forBackup {

		var first_fretWOP First_fretWOP
		first_fretDB.CopyBasicFieldsToFirst_fretWOP(&first_fretWOP)

		row := sh.AddRow()
		row.WriteStruct(&first_fretWOP, -1)
	}
}

// RestoreXL from the "First_fret" sheet all First_fretDB instances
func (backRepoFirst_fret *BackRepoFirst_fretStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFirst_fretid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["First_fret"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFirst_fret.rowVisitorFirst_fret)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFirst_fret *BackRepoFirst_fretStruct) rowVisitorFirst_fret(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var first_fretWOP First_fretWOP
		row.ReadStruct(&first_fretWOP)

		// add the unmarshalled struct to the stage
		first_fretDB := new(First_fretDB)
		first_fretDB.CopyBasicFieldsFromFirst_fretWOP(&first_fretWOP)

		first_fretDB_ID_atBackupTime := first_fretDB.ID
		first_fretDB.ID = 0
		query := backRepoFirst_fret.db.Create(first_fretDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFirst_fret.Map_First_fretDBID_First_fretDB[first_fretDB.ID] = first_fretDB
		BackRepoFirst_fretid_atBckpTime_newID[first_fretDB_ID_atBackupTime] = first_fretDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "First_fretDB.json" in dirPath that stores an array
// of First_fretDB and stores it in the database
// the map BackRepoFirst_fretid_atBckpTime_newID is updated accordingly
func (backRepoFirst_fret *BackRepoFirst_fretStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFirst_fretid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "First_fretDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json First_fret file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*First_fretDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_First_fretDBID_First_fretDB
	for _, first_fretDB := range forRestore {

		first_fretDB_ID_atBackupTime := first_fretDB.ID
		first_fretDB.ID = 0
		query := backRepoFirst_fret.db.Create(first_fretDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFirst_fret.Map_First_fretDBID_First_fretDB[first_fretDB.ID] = first_fretDB
		BackRepoFirst_fretid_atBckpTime_newID[first_fretDB_ID_atBackupTime] = first_fretDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json First_fret file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<First_fret>id_atBckpTime_newID
// to compute new index
func (backRepoFirst_fret *BackRepoFirst_fretStruct) RestorePhaseTwo() {

	for _, first_fretDB := range backRepoFirst_fret.Map_First_fretDBID_First_fretDB {

		// next line of code is to avert unused variable compilation error
		_ = first_fretDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFirst_fret.db.Model(first_fretDB).Updates(*first_fretDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFirst_fret.ResetReversePointers commits all staged instances of First_fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFirst_fret *BackRepoFirst_fretStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, first_fret := range backRepoFirst_fret.Map_First_fretDBID_First_fretPtr {
		backRepoFirst_fret.ResetReversePointersInstance(backRepo, idx, first_fret)
	}

	return
}

func (backRepoFirst_fret *BackRepoFirst_fretStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, first_fret *models.First_fret) (Error error) {

	// fetch matching first_fretDB
	if first_fretDB, ok := backRepoFirst_fret.Map_First_fretDBID_First_fretDB[idx]; ok {
		_ = first_fretDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFirst_fretid_atBckpTime_newID map[uint]uint
