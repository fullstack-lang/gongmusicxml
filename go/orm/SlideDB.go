// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Slide_sql sql.NullBool
var dummy_Slide_time time.Duration
var dummy_Slide_sort sort.Float64Slice

// SlideAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model slideAPI
type SlideAPI struct {
	gorm.Model

	models.Slide_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SlidePointersEncoding SlidePointersEncoding
}

// SlidePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SlidePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SlideDB describes a slide in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model slideDB
type SlideDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field slideDB.Name
	Name_Data sql.NullString

	// Declation for basic field slideDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SlidePointersEncoding
}

// SlideDBs arrays slideDBs
// swagger:response slideDBsResponse
type SlideDBs []SlideDB

// SlideDBResponse provides response
// swagger:response slideDBResponse
type SlideDBResponse struct {
	SlideDB
}

// SlideWOP is a Slide without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SlideWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Slide_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoSlideStruct struct {
	// stores SlideDB according to their gorm ID
	Map_SlideDBID_SlideDB map[uint]*SlideDB

	// stores SlideDB ID according to Slide address
	Map_SlidePtr_SlideDBID map[*models.Slide]uint

	// stores Slide according to their gorm ID
	Map_SlideDBID_SlidePtr map[uint]*models.Slide

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSlide *BackRepoSlideStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSlide.stage
	return
}

func (backRepoSlide *BackRepoSlideStruct) GetDB() *gorm.DB {
	return backRepoSlide.db
}

// GetSlideDBFromSlidePtr is a handy function to access the back repo instance from the stage instance
func (backRepoSlide *BackRepoSlideStruct) GetSlideDBFromSlidePtr(slide *models.Slide) (slideDB *SlideDB) {
	id := backRepoSlide.Map_SlidePtr_SlideDBID[slide]
	slideDB = backRepoSlide.Map_SlideDBID_SlideDB[id]
	return
}

// BackRepoSlide.CommitPhaseOne commits all staged instances of Slide to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSlide *BackRepoSlideStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for slide := range stage.Slides {
		backRepoSlide.CommitPhaseOneInstance(slide)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, slide := range backRepoSlide.Map_SlideDBID_SlidePtr {
		if _, ok := stage.Slides[slide]; !ok {
			backRepoSlide.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSlide.CommitDeleteInstance commits deletion of Slide to the BackRepo
func (backRepoSlide *BackRepoSlideStruct) CommitDeleteInstance(id uint) (Error error) {

	slide := backRepoSlide.Map_SlideDBID_SlidePtr[id]

	// slide is not staged anymore, remove slideDB
	slideDB := backRepoSlide.Map_SlideDBID_SlideDB[id]
	query := backRepoSlide.db.Unscoped().Delete(&slideDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSlide.Map_SlidePtr_SlideDBID, slide)
	delete(backRepoSlide.Map_SlideDBID_SlidePtr, id)
	delete(backRepoSlide.Map_SlideDBID_SlideDB, id)

	return
}

// BackRepoSlide.CommitPhaseOneInstance commits slide staged instances of Slide to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSlide *BackRepoSlideStruct) CommitPhaseOneInstance(slide *models.Slide) (Error error) {

	// check if the slide is not commited yet
	if _, ok := backRepoSlide.Map_SlidePtr_SlideDBID[slide]; ok {
		return
	}

	// initiate slide
	var slideDB SlideDB
	slideDB.CopyBasicFieldsFromSlide(slide)

	query := backRepoSlide.db.Create(&slideDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSlide.Map_SlidePtr_SlideDBID[slide] = slideDB.ID
	backRepoSlide.Map_SlideDBID_SlidePtr[slideDB.ID] = slide
	backRepoSlide.Map_SlideDBID_SlideDB[slideDB.ID] = &slideDB

	return
}

// BackRepoSlide.CommitPhaseTwo commits all staged instances of Slide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlide *BackRepoSlideStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, slide := range backRepoSlide.Map_SlideDBID_SlidePtr {
		backRepoSlide.CommitPhaseTwoInstance(backRepo, idx, slide)
	}

	return
}

// BackRepoSlide.CommitPhaseTwoInstance commits {{structname }} of models.Slide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlide *BackRepoSlideStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, slide *models.Slide) (Error error) {

	// fetch matching slideDB
	if slideDB, ok := backRepoSlide.Map_SlideDBID_SlideDB[idx]; ok {

		slideDB.CopyBasicFieldsFromSlide(slide)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSlide.db.Save(&slideDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Slide intance %s", slide.Name))
		return err
	}

	return
}

// BackRepoSlide.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSlide *BackRepoSlideStruct) CheckoutPhaseOne() (Error error) {

	slideDBArray := make([]SlideDB, 0)
	query := backRepoSlide.db.Find(&slideDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	slideInstancesToBeRemovedFromTheStage := make(map[*models.Slide]any)
	for key, value := range backRepoSlide.stage.Slides {
		slideInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, slideDB := range slideDBArray {
		backRepoSlide.CheckoutPhaseOneInstance(&slideDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		slide, ok := backRepoSlide.Map_SlideDBID_SlidePtr[slideDB.ID]
		if ok {
			delete(slideInstancesToBeRemovedFromTheStage, slide)
		}
	}

	// remove from stage and back repo's 3 maps all slides that are not in the checkout
	for slide := range slideInstancesToBeRemovedFromTheStage {
		slide.Unstage(backRepoSlide.GetStage())

		// remove instance from the back repo 3 maps
		slideID := backRepoSlide.Map_SlidePtr_SlideDBID[slide]
		delete(backRepoSlide.Map_SlidePtr_SlideDBID, slide)
		delete(backRepoSlide.Map_SlideDBID_SlideDB, slideID)
		delete(backRepoSlide.Map_SlideDBID_SlidePtr, slideID)
	}

	return
}

// CheckoutPhaseOneInstance takes a slideDB that has been found in the DB, updates the backRepo and stages the
// models version of the slideDB
func (backRepoSlide *BackRepoSlideStruct) CheckoutPhaseOneInstance(slideDB *SlideDB) (Error error) {

	slide, ok := backRepoSlide.Map_SlideDBID_SlidePtr[slideDB.ID]
	if !ok {
		slide = new(models.Slide)

		backRepoSlide.Map_SlideDBID_SlidePtr[slideDB.ID] = slide
		backRepoSlide.Map_SlidePtr_SlideDBID[slide] = slideDB.ID

		// append model store with the new element
		slide.Name = slideDB.Name_Data.String
		slide.Stage(backRepoSlide.GetStage())
	}
	slideDB.CopyBasicFieldsToSlide(slide)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	slide.Stage(backRepoSlide.GetStage())

	// preserve pointer to slideDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SlideDBID_SlideDB)[slideDB hold variable pointers
	slideDB_Data := *slideDB
	preservedPtrToSlide := &slideDB_Data
	backRepoSlide.Map_SlideDBID_SlideDB[slideDB.ID] = preservedPtrToSlide

	return
}

// BackRepoSlide.CheckoutPhaseTwo Checkouts all staged instances of Slide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlide *BackRepoSlideStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, slideDB := range backRepoSlide.Map_SlideDBID_SlideDB {
		backRepoSlide.CheckoutPhaseTwoInstance(backRepo, slideDB)
	}
	return
}

// BackRepoSlide.CheckoutPhaseTwoInstance Checkouts staged instances of Slide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlide *BackRepoSlideStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, slideDB *SlideDB) (Error error) {

	slide := backRepoSlide.Map_SlideDBID_SlidePtr[slideDB.ID]

	slideDB.DecodePointers(backRepo, slide)

	return
}

func (slideDB *SlideDB) DecodePointers(backRepo *BackRepoStruct, slide *models.Slide) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSlide allows commit of a single slide (if already staged)
func (backRepo *BackRepoStruct) CommitSlide(slide *models.Slide) {
	backRepo.BackRepoSlide.CommitPhaseOneInstance(slide)
	if id, ok := backRepo.BackRepoSlide.Map_SlidePtr_SlideDBID[slide]; ok {
		backRepo.BackRepoSlide.CommitPhaseTwoInstance(backRepo, id, slide)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSlide allows checkout of a single slide (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSlide(slide *models.Slide) {
	// check if the slide is staged
	if _, ok := backRepo.BackRepoSlide.Map_SlidePtr_SlideDBID[slide]; ok {

		if id, ok := backRepo.BackRepoSlide.Map_SlidePtr_SlideDBID[slide]; ok {
			var slideDB SlideDB
			slideDB.ID = id

			if err := backRepo.BackRepoSlide.db.First(&slideDB, id).Error; err != nil {
				log.Fatalln("CheckoutSlide : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSlide.CheckoutPhaseOneInstance(&slideDB)
			backRepo.BackRepoSlide.CheckoutPhaseTwoInstance(backRepo, &slideDB)
		}
	}
}

// CopyBasicFieldsFromSlide
func (slideDB *SlideDB) CopyBasicFieldsFromSlide(slide *models.Slide) {
	// insertion point for fields commit

	slideDB.Name_Data.String = slide.Name
	slideDB.Name_Data.Valid = true

	slideDB.Value_Data.String = slide.Value
	slideDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromSlide_WOP
func (slideDB *SlideDB) CopyBasicFieldsFromSlide_WOP(slide *models.Slide_WOP) {
	// insertion point for fields commit

	slideDB.Name_Data.String = slide.Name
	slideDB.Name_Data.Valid = true

	slideDB.Value_Data.String = slide.Value
	slideDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromSlideWOP
func (slideDB *SlideDB) CopyBasicFieldsFromSlideWOP(slide *SlideWOP) {
	// insertion point for fields commit

	slideDB.Name_Data.String = slide.Name
	slideDB.Name_Data.Valid = true

	slideDB.Value_Data.String = slide.Value
	slideDB.Value_Data.Valid = true
}

// CopyBasicFieldsToSlide
func (slideDB *SlideDB) CopyBasicFieldsToSlide(slide *models.Slide) {
	// insertion point for checkout of basic fields (back repo to stage)
	slide.Name = slideDB.Name_Data.String
	slide.Value = slideDB.Value_Data.String
}

// CopyBasicFieldsToSlide_WOP
func (slideDB *SlideDB) CopyBasicFieldsToSlide_WOP(slide *models.Slide_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	slide.Name = slideDB.Name_Data.String
	slide.Value = slideDB.Value_Data.String
}

// CopyBasicFieldsToSlideWOP
func (slideDB *SlideDB) CopyBasicFieldsToSlideWOP(slide *SlideWOP) {
	slide.ID = int(slideDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	slide.Name = slideDB.Name_Data.String
	slide.Value = slideDB.Value_Data.String
}

// Backup generates a json file from a slice of all SlideDB instances in the backrepo
func (backRepoSlide *BackRepoSlideStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SlideDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SlideDB, 0)
	for _, slideDB := range backRepoSlide.Map_SlideDBID_SlideDB {
		forBackup = append(forBackup, slideDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Slide ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Slide file", err.Error())
	}
}

// Backup generates a json file from a slice of all SlideDB instances in the backrepo
func (backRepoSlide *BackRepoSlideStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SlideDB, 0)
	for _, slideDB := range backRepoSlide.Map_SlideDBID_SlideDB {
		forBackup = append(forBackup, slideDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Slide")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Slide_Fields, -1)
	for _, slideDB := range forBackup {

		var slideWOP SlideWOP
		slideDB.CopyBasicFieldsToSlideWOP(&slideWOP)

		row := sh.AddRow()
		row.WriteStruct(&slideWOP, -1)
	}
}

// RestoreXL from the "Slide" sheet all SlideDB instances
func (backRepoSlide *BackRepoSlideStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSlideid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Slide"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSlide.rowVisitorSlide)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSlide *BackRepoSlideStruct) rowVisitorSlide(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var slideWOP SlideWOP
		row.ReadStruct(&slideWOP)

		// add the unmarshalled struct to the stage
		slideDB := new(SlideDB)
		slideDB.CopyBasicFieldsFromSlideWOP(&slideWOP)

		slideDB_ID_atBackupTime := slideDB.ID
		slideDB.ID = 0
		query := backRepoSlide.db.Create(slideDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSlide.Map_SlideDBID_SlideDB[slideDB.ID] = slideDB
		BackRepoSlideid_atBckpTime_newID[slideDB_ID_atBackupTime] = slideDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SlideDB.json" in dirPath that stores an array
// of SlideDB and stores it in the database
// the map BackRepoSlideid_atBckpTime_newID is updated accordingly
func (backRepoSlide *BackRepoSlideStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSlideid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SlideDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Slide file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SlideDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SlideDBID_SlideDB
	for _, slideDB := range forRestore {

		slideDB_ID_atBackupTime := slideDB.ID
		slideDB.ID = 0
		query := backRepoSlide.db.Create(slideDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSlide.Map_SlideDBID_SlideDB[slideDB.ID] = slideDB
		BackRepoSlideid_atBckpTime_newID[slideDB_ID_atBackupTime] = slideDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Slide file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Slide>id_atBckpTime_newID
// to compute new index
func (backRepoSlide *BackRepoSlideStruct) RestorePhaseTwo() {

	for _, slideDB := range backRepoSlide.Map_SlideDBID_SlideDB {

		// next line of code is to avert unused variable compilation error
		_ = slideDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSlide.db.Model(slideDB).Updates(*slideDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSlide.ResetReversePointers commits all staged instances of Slide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlide *BackRepoSlideStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, slide := range backRepoSlide.Map_SlideDBID_SlidePtr {
		backRepoSlide.ResetReversePointersInstance(backRepo, idx, slide)
	}

	return
}

func (backRepoSlide *BackRepoSlideStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, slide *models.Slide) (Error error) {

	// fetch matching slideDB
	if slideDB, ok := backRepoSlide.Map_SlideDBID_SlideDB[idx]; ok {
		_ = slideDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSlideid_atBckpTime_newID map[uint]uint
