// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Scordatura_sql sql.NullBool
var dummy_Scordatura_time time.Duration
var dummy_Scordatura_sort sort.Float64Slice

// ScordaturaAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model scordaturaAPI
type ScordaturaAPI struct {
	gorm.Model

	models.Scordatura_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ScordaturaPointersEncoding ScordaturaPointersEncoding
}

// ScordaturaPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ScordaturaPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Accord is a slice of pointers to another Struct (optional or 0..1)
	Accord IntSlice `gorm:"type:TEXT"`
}

// ScordaturaDB describes a scordatura in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model scordaturaDB
type ScordaturaDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field scordaturaDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ScordaturaPointersEncoding
}

// ScordaturaDBs arrays scordaturaDBs
// swagger:response scordaturaDBsResponse
type ScordaturaDBs []ScordaturaDB

// ScordaturaDBResponse provides response
// swagger:response scordaturaDBResponse
type ScordaturaDBResponse struct {
	ScordaturaDB
}

// ScordaturaWOP is a Scordatura without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ScordaturaWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Scordatura_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoScordaturaStruct struct {
	// stores ScordaturaDB according to their gorm ID
	Map_ScordaturaDBID_ScordaturaDB map[uint]*ScordaturaDB

	// stores ScordaturaDB ID according to Scordatura address
	Map_ScordaturaPtr_ScordaturaDBID map[*models.Scordatura]uint

	// stores Scordatura according to their gorm ID
	Map_ScordaturaDBID_ScordaturaPtr map[uint]*models.Scordatura

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoScordatura *BackRepoScordaturaStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoScordatura.stage
	return
}

func (backRepoScordatura *BackRepoScordaturaStruct) GetDB() *gorm.DB {
	return backRepoScordatura.db
}

// GetScordaturaDBFromScordaturaPtr is a handy function to access the back repo instance from the stage instance
func (backRepoScordatura *BackRepoScordaturaStruct) GetScordaturaDBFromScordaturaPtr(scordatura *models.Scordatura) (scordaturaDB *ScordaturaDB) {
	id := backRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura]
	scordaturaDB = backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[id]
	return
}

// BackRepoScordatura.CommitPhaseOne commits all staged instances of Scordatura to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScordatura *BackRepoScordaturaStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for scordatura := range stage.Scordaturas {
		backRepoScordatura.CommitPhaseOneInstance(scordatura)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, scordatura := range backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr {
		if _, ok := stage.Scordaturas[scordatura]; !ok {
			backRepoScordatura.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoScordatura.CommitDeleteInstance commits deletion of Scordatura to the BackRepo
func (backRepoScordatura *BackRepoScordaturaStruct) CommitDeleteInstance(id uint) (Error error) {

	scordatura := backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr[id]

	// scordatura is not staged anymore, remove scordaturaDB
	scordaturaDB := backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[id]
	query := backRepoScordatura.db.Unscoped().Delete(&scordaturaDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID, scordatura)
	delete(backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr, id)
	delete(backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB, id)

	return
}

// BackRepoScordatura.CommitPhaseOneInstance commits scordatura staged instances of Scordatura to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScordatura *BackRepoScordaturaStruct) CommitPhaseOneInstance(scordatura *models.Scordatura) (Error error) {

	// check if the scordatura is not commited yet
	if _, ok := backRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura]; ok {
		return
	}

	// initiate scordatura
	var scordaturaDB ScordaturaDB
	scordaturaDB.CopyBasicFieldsFromScordatura(scordatura)

	query := backRepoScordatura.db.Create(&scordaturaDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura] = scordaturaDB.ID
	backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr[scordaturaDB.ID] = scordatura
	backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[scordaturaDB.ID] = &scordaturaDB

	return
}

// BackRepoScordatura.CommitPhaseTwo commits all staged instances of Scordatura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScordatura *BackRepoScordaturaStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, scordatura := range backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr {
		backRepoScordatura.CommitPhaseTwoInstance(backRepo, idx, scordatura)
	}

	return
}

// BackRepoScordatura.CommitPhaseTwoInstance commits {{structname }} of models.Scordatura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScordatura *BackRepoScordaturaStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, scordatura *models.Scordatura) (Error error) {

	// fetch matching scordaturaDB
	if scordaturaDB, ok := backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[idx]; ok {

		scordaturaDB.CopyBasicFieldsFromScordatura(scordatura)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		scordaturaDB.ScordaturaPointersEncoding.Accord = make([]int, 0)
		// 2. encode
		for _, accordAssocEnd := range scordatura.Accord {
			accordAssocEnd_DB :=
				backRepo.BackRepoAccord.GetAccordDBFromAccordPtr(accordAssocEnd)
			
			// the stage might be inconsistant, meaning that the accordAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if accordAssocEnd_DB == nil {
				continue
			}
			
			scordaturaDB.ScordaturaPointersEncoding.Accord =
				append(scordaturaDB.ScordaturaPointersEncoding.Accord, int(accordAssocEnd_DB.ID))
		}

		query := backRepoScordatura.db.Save(&scordaturaDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Scordatura intance %s", scordatura.Name))
		return err
	}

	return
}

// BackRepoScordatura.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoScordatura *BackRepoScordaturaStruct) CheckoutPhaseOne() (Error error) {

	scordaturaDBArray := make([]ScordaturaDB, 0)
	query := backRepoScordatura.db.Find(&scordaturaDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	scordaturaInstancesToBeRemovedFromTheStage := make(map[*models.Scordatura]any)
	for key, value := range backRepoScordatura.stage.Scordaturas {
		scordaturaInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, scordaturaDB := range scordaturaDBArray {
		backRepoScordatura.CheckoutPhaseOneInstance(&scordaturaDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		scordatura, ok := backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr[scordaturaDB.ID]
		if ok {
			delete(scordaturaInstancesToBeRemovedFromTheStage, scordatura)
		}
	}

	// remove from stage and back repo's 3 maps all scordaturas that are not in the checkout
	for scordatura := range scordaturaInstancesToBeRemovedFromTheStage {
		scordatura.Unstage(backRepoScordatura.GetStage())

		// remove instance from the back repo 3 maps
		scordaturaID := backRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura]
		delete(backRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID, scordatura)
		delete(backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB, scordaturaID)
		delete(backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr, scordaturaID)
	}

	return
}

// CheckoutPhaseOneInstance takes a scordaturaDB that has been found in the DB, updates the backRepo and stages the
// models version of the scordaturaDB
func (backRepoScordatura *BackRepoScordaturaStruct) CheckoutPhaseOneInstance(scordaturaDB *ScordaturaDB) (Error error) {

	scordatura, ok := backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr[scordaturaDB.ID]
	if !ok {
		scordatura = new(models.Scordatura)

		backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr[scordaturaDB.ID] = scordatura
		backRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura] = scordaturaDB.ID

		// append model store with the new element
		scordatura.Name = scordaturaDB.Name_Data.String
		scordatura.Stage(backRepoScordatura.GetStage())
	}
	scordaturaDB.CopyBasicFieldsToScordatura(scordatura)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	scordatura.Stage(backRepoScordatura.GetStage())

	// preserve pointer to scordaturaDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ScordaturaDBID_ScordaturaDB)[scordaturaDB hold variable pointers
	scordaturaDB_Data := *scordaturaDB
	preservedPtrToScordatura := &scordaturaDB_Data
	backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[scordaturaDB.ID] = preservedPtrToScordatura

	return
}

// BackRepoScordatura.CheckoutPhaseTwo Checkouts all staged instances of Scordatura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScordatura *BackRepoScordaturaStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, scordaturaDB := range backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB {
		backRepoScordatura.CheckoutPhaseTwoInstance(backRepo, scordaturaDB)
	}
	return
}

// BackRepoScordatura.CheckoutPhaseTwoInstance Checkouts staged instances of Scordatura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScordatura *BackRepoScordaturaStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, scordaturaDB *ScordaturaDB) (Error error) {

	scordatura := backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr[scordaturaDB.ID]

	scordaturaDB.DecodePointers(backRepo, scordatura)

	return
}

func (scordaturaDB *ScordaturaDB) DecodePointers(backRepo *BackRepoStruct, scordatura *models.Scordatura) {

	// insertion point for checkout of pointer encoding
	// This loop redeem scordatura.Accord in the stage from the encode in the back repo
	// It parses all AccordDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	scordatura.Accord = scordatura.Accord[:0]
	for _, _Accordid := range scordaturaDB.ScordaturaPointersEncoding.Accord {
		scordatura.Accord = append(scordatura.Accord, backRepo.BackRepoAccord.Map_AccordDBID_AccordPtr[uint(_Accordid)])
	}

	return
}

// CommitScordatura allows commit of a single scordatura (if already staged)
func (backRepo *BackRepoStruct) CommitScordatura(scordatura *models.Scordatura) {
	backRepo.BackRepoScordatura.CommitPhaseOneInstance(scordatura)
	if id, ok := backRepo.BackRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura]; ok {
		backRepo.BackRepoScordatura.CommitPhaseTwoInstance(backRepo, id, scordatura)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitScordatura allows checkout of a single scordatura (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutScordatura(scordatura *models.Scordatura) {
	// check if the scordatura is staged
	if _, ok := backRepo.BackRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura]; ok {

		if id, ok := backRepo.BackRepoScordatura.Map_ScordaturaPtr_ScordaturaDBID[scordatura]; ok {
			var scordaturaDB ScordaturaDB
			scordaturaDB.ID = id

			if err := backRepo.BackRepoScordatura.db.First(&scordaturaDB, id).Error; err != nil {
				log.Fatalln("CheckoutScordatura : Problem with getting object with id:", id)
			}
			backRepo.BackRepoScordatura.CheckoutPhaseOneInstance(&scordaturaDB)
			backRepo.BackRepoScordatura.CheckoutPhaseTwoInstance(backRepo, &scordaturaDB)
		}
	}
}

// CopyBasicFieldsFromScordatura
func (scordaturaDB *ScordaturaDB) CopyBasicFieldsFromScordatura(scordatura *models.Scordatura) {
	// insertion point for fields commit

	scordaturaDB.Name_Data.String = scordatura.Name
	scordaturaDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScordatura_WOP
func (scordaturaDB *ScordaturaDB) CopyBasicFieldsFromScordatura_WOP(scordatura *models.Scordatura_WOP) {
	// insertion point for fields commit

	scordaturaDB.Name_Data.String = scordatura.Name
	scordaturaDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScordaturaWOP
func (scordaturaDB *ScordaturaDB) CopyBasicFieldsFromScordaturaWOP(scordatura *ScordaturaWOP) {
	// insertion point for fields commit

	scordaturaDB.Name_Data.String = scordatura.Name
	scordaturaDB.Name_Data.Valid = true
}

// CopyBasicFieldsToScordatura
func (scordaturaDB *ScordaturaDB) CopyBasicFieldsToScordatura(scordatura *models.Scordatura) {
	// insertion point for checkout of basic fields (back repo to stage)
	scordatura.Name = scordaturaDB.Name_Data.String
}

// CopyBasicFieldsToScordatura_WOP
func (scordaturaDB *ScordaturaDB) CopyBasicFieldsToScordatura_WOP(scordatura *models.Scordatura_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	scordatura.Name = scordaturaDB.Name_Data.String
}

// CopyBasicFieldsToScordaturaWOP
func (scordaturaDB *ScordaturaDB) CopyBasicFieldsToScordaturaWOP(scordatura *ScordaturaWOP) {
	scordatura.ID = int(scordaturaDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	scordatura.Name = scordaturaDB.Name_Data.String
}

// Backup generates a json file from a slice of all ScordaturaDB instances in the backrepo
func (backRepoScordatura *BackRepoScordaturaStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ScordaturaDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScordaturaDB, 0)
	for _, scordaturaDB := range backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB {
		forBackup = append(forBackup, scordaturaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Scordatura ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Scordatura file", err.Error())
	}
}

// Backup generates a json file from a slice of all ScordaturaDB instances in the backrepo
func (backRepoScordatura *BackRepoScordaturaStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScordaturaDB, 0)
	for _, scordaturaDB := range backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB {
		forBackup = append(forBackup, scordaturaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Scordatura")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Scordatura_Fields, -1)
	for _, scordaturaDB := range forBackup {

		var scordaturaWOP ScordaturaWOP
		scordaturaDB.CopyBasicFieldsToScordaturaWOP(&scordaturaWOP)

		row := sh.AddRow()
		row.WriteStruct(&scordaturaWOP, -1)
	}
}

// RestoreXL from the "Scordatura" sheet all ScordaturaDB instances
func (backRepoScordatura *BackRepoScordaturaStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoScordaturaid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Scordatura"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoScordatura.rowVisitorScordatura)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoScordatura *BackRepoScordaturaStruct) rowVisitorScordatura(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var scordaturaWOP ScordaturaWOP
		row.ReadStruct(&scordaturaWOP)

		// add the unmarshalled struct to the stage
		scordaturaDB := new(ScordaturaDB)
		scordaturaDB.CopyBasicFieldsFromScordaturaWOP(&scordaturaWOP)

		scordaturaDB_ID_atBackupTime := scordaturaDB.ID
		scordaturaDB.ID = 0
		query := backRepoScordatura.db.Create(scordaturaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[scordaturaDB.ID] = scordaturaDB
		BackRepoScordaturaid_atBckpTime_newID[scordaturaDB_ID_atBackupTime] = scordaturaDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ScordaturaDB.json" in dirPath that stores an array
// of ScordaturaDB and stores it in the database
// the map BackRepoScordaturaid_atBckpTime_newID is updated accordingly
func (backRepoScordatura *BackRepoScordaturaStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoScordaturaid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ScordaturaDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Scordatura file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ScordaturaDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ScordaturaDBID_ScordaturaDB
	for _, scordaturaDB := range forRestore {

		scordaturaDB_ID_atBackupTime := scordaturaDB.ID
		scordaturaDB.ID = 0
		query := backRepoScordatura.db.Create(scordaturaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[scordaturaDB.ID] = scordaturaDB
		BackRepoScordaturaid_atBckpTime_newID[scordaturaDB_ID_atBackupTime] = scordaturaDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Scordatura file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Scordatura>id_atBckpTime_newID
// to compute new index
func (backRepoScordatura *BackRepoScordaturaStruct) RestorePhaseTwo() {

	for _, scordaturaDB := range backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB {

		// next line of code is to avert unused variable compilation error
		_ = scordaturaDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoScordatura.db.Model(scordaturaDB).Updates(*scordaturaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoScordatura.ResetReversePointers commits all staged instances of Scordatura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScordatura *BackRepoScordaturaStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, scordatura := range backRepoScordatura.Map_ScordaturaDBID_ScordaturaPtr {
		backRepoScordatura.ResetReversePointersInstance(backRepo, idx, scordatura)
	}

	return
}

func (backRepoScordatura *BackRepoScordaturaStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, scordatura *models.Scordatura) (Error error) {

	// fetch matching scordaturaDB
	if scordaturaDB, ok := backRepoScordatura.Map_ScordaturaDBID_ScordaturaDB[idx]; ok {
		_ = scordaturaDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoScordaturaid_atBckpTime_newID map[uint]uint
