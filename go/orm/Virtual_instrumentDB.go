// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Virtual_instrument_sql sql.NullBool
var dummy_Virtual_instrument_time time.Duration
var dummy_Virtual_instrument_sort sort.Float64Slice

// Virtual_instrumentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model virtual_instrumentAPI
type Virtual_instrumentAPI struct {
	gorm.Model

	models.Virtual_instrument_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Virtual_instrumentPointersEncoding Virtual_instrumentPointersEncoding
}

// Virtual_instrumentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Virtual_instrumentPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Virtual_instrumentDB describes a virtual_instrument in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model virtual_instrumentDB
type Virtual_instrumentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field virtual_instrumentDB.Name
	Name_Data sql.NullString

	// Declation for basic field virtual_instrumentDB.Virtual_library
	Virtual_library_Data sql.NullString

	// Declation for basic field virtual_instrumentDB.Virtual_name
	Virtual_name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Virtual_instrumentPointersEncoding
}

// Virtual_instrumentDBs arrays virtual_instrumentDBs
// swagger:response virtual_instrumentDBsResponse
type Virtual_instrumentDBs []Virtual_instrumentDB

// Virtual_instrumentDBResponse provides response
// swagger:response virtual_instrumentDBResponse
type Virtual_instrumentDBResponse struct {
	Virtual_instrumentDB
}

// Virtual_instrumentWOP is a Virtual_instrument without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Virtual_instrumentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Virtual_library string `xlsx:"2"`

	Virtual_name string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Virtual_instrument_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Virtual_library",
	"Virtual_name",
}

type BackRepoVirtual_instrumentStruct struct {
	// stores Virtual_instrumentDB according to their gorm ID
	Map_Virtual_instrumentDBID_Virtual_instrumentDB map[uint]*Virtual_instrumentDB

	// stores Virtual_instrumentDB ID according to Virtual_instrument address
	Map_Virtual_instrumentPtr_Virtual_instrumentDBID map[*models.Virtual_instrument]uint

	// stores Virtual_instrument according to their gorm ID
	Map_Virtual_instrumentDBID_Virtual_instrumentPtr map[uint]*models.Virtual_instrument

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoVirtual_instrument.stage
	return
}

func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) GetDB() *gorm.DB {
	return backRepoVirtual_instrument.db
}

// GetVirtual_instrumentDBFromVirtual_instrumentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) GetVirtual_instrumentDBFromVirtual_instrumentPtr(virtual_instrument *models.Virtual_instrument) (virtual_instrumentDB *Virtual_instrumentDB) {
	id := backRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument]
	virtual_instrumentDB = backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[id]
	return
}

// BackRepoVirtual_instrument.CommitPhaseOne commits all staged instances of Virtual_instrument to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for virtual_instrument := range stage.Virtual_instruments {
		backRepoVirtual_instrument.CommitPhaseOneInstance(virtual_instrument)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, virtual_instrument := range backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr {
		if _, ok := stage.Virtual_instruments[virtual_instrument]; !ok {
			backRepoVirtual_instrument.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVirtual_instrument.CommitDeleteInstance commits deletion of Virtual_instrument to the BackRepo
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CommitDeleteInstance(id uint) (Error error) {

	virtual_instrument := backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr[id]

	// virtual_instrument is not staged anymore, remove virtual_instrumentDB
	virtual_instrumentDB := backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[id]
	query := backRepoVirtual_instrument.db.Unscoped().Delete(&virtual_instrumentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID, virtual_instrument)
	delete(backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr, id)
	delete(backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB, id)

	return
}

// BackRepoVirtual_instrument.CommitPhaseOneInstance commits virtual_instrument staged instances of Virtual_instrument to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CommitPhaseOneInstance(virtual_instrument *models.Virtual_instrument) (Error error) {

	// check if the virtual_instrument is not commited yet
	if _, ok := backRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument]; ok {
		return
	}

	// initiate virtual_instrument
	var virtual_instrumentDB Virtual_instrumentDB
	virtual_instrumentDB.CopyBasicFieldsFromVirtual_instrument(virtual_instrument)

	query := backRepoVirtual_instrument.db.Create(&virtual_instrumentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument] = virtual_instrumentDB.ID
	backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr[virtual_instrumentDB.ID] = virtual_instrument
	backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[virtual_instrumentDB.ID] = &virtual_instrumentDB

	return
}

// BackRepoVirtual_instrument.CommitPhaseTwo commits all staged instances of Virtual_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, virtual_instrument := range backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr {
		backRepoVirtual_instrument.CommitPhaseTwoInstance(backRepo, idx, virtual_instrument)
	}

	return
}

// BackRepoVirtual_instrument.CommitPhaseTwoInstance commits {{structname }} of models.Virtual_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, virtual_instrument *models.Virtual_instrument) (Error error) {

	// fetch matching virtual_instrumentDB
	if virtual_instrumentDB, ok := backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[idx]; ok {

		virtual_instrumentDB.CopyBasicFieldsFromVirtual_instrument(virtual_instrument)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoVirtual_instrument.db.Save(&virtual_instrumentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Virtual_instrument intance %s", virtual_instrument.Name))
		return err
	}

	return
}

// BackRepoVirtual_instrument.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CheckoutPhaseOne() (Error error) {

	virtual_instrumentDBArray := make([]Virtual_instrumentDB, 0)
	query := backRepoVirtual_instrument.db.Find(&virtual_instrumentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	virtual_instrumentInstancesToBeRemovedFromTheStage := make(map[*models.Virtual_instrument]any)
	for key, value := range backRepoVirtual_instrument.stage.Virtual_instruments {
		virtual_instrumentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, virtual_instrumentDB := range virtual_instrumentDBArray {
		backRepoVirtual_instrument.CheckoutPhaseOneInstance(&virtual_instrumentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		virtual_instrument, ok := backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr[virtual_instrumentDB.ID]
		if ok {
			delete(virtual_instrumentInstancesToBeRemovedFromTheStage, virtual_instrument)
		}
	}

	// remove from stage and back repo's 3 maps all virtual_instruments that are not in the checkout
	for virtual_instrument := range virtual_instrumentInstancesToBeRemovedFromTheStage {
		virtual_instrument.Unstage(backRepoVirtual_instrument.GetStage())

		// remove instance from the back repo 3 maps
		virtual_instrumentID := backRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument]
		delete(backRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID, virtual_instrument)
		delete(backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB, virtual_instrumentID)
		delete(backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr, virtual_instrumentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a virtual_instrumentDB that has been found in the DB, updates the backRepo and stages the
// models version of the virtual_instrumentDB
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CheckoutPhaseOneInstance(virtual_instrumentDB *Virtual_instrumentDB) (Error error) {

	virtual_instrument, ok := backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr[virtual_instrumentDB.ID]
	if !ok {
		virtual_instrument = new(models.Virtual_instrument)

		backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr[virtual_instrumentDB.ID] = virtual_instrument
		backRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument] = virtual_instrumentDB.ID

		// append model store with the new element
		virtual_instrument.Name = virtual_instrumentDB.Name_Data.String
		virtual_instrument.Stage(backRepoVirtual_instrument.GetStage())
	}
	virtual_instrumentDB.CopyBasicFieldsToVirtual_instrument(virtual_instrument)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	virtual_instrument.Stage(backRepoVirtual_instrument.GetStage())

	// preserve pointer to virtual_instrumentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Virtual_instrumentDBID_Virtual_instrumentDB)[virtual_instrumentDB hold variable pointers
	virtual_instrumentDB_Data := *virtual_instrumentDB
	preservedPtrToVirtual_instrument := &virtual_instrumentDB_Data
	backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[virtual_instrumentDB.ID] = preservedPtrToVirtual_instrument

	return
}

// BackRepoVirtual_instrument.CheckoutPhaseTwo Checkouts all staged instances of Virtual_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, virtual_instrumentDB := range backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB {
		backRepoVirtual_instrument.CheckoutPhaseTwoInstance(backRepo, virtual_instrumentDB)
	}
	return
}

// BackRepoVirtual_instrument.CheckoutPhaseTwoInstance Checkouts staged instances of Virtual_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, virtual_instrumentDB *Virtual_instrumentDB) (Error error) {

	virtual_instrument := backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr[virtual_instrumentDB.ID]

	virtual_instrumentDB.DecodePointers(backRepo, virtual_instrument)

	return
}

func (virtual_instrumentDB *Virtual_instrumentDB) DecodePointers(backRepo *BackRepoStruct, virtual_instrument *models.Virtual_instrument) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitVirtual_instrument allows commit of a single virtual_instrument (if already staged)
func (backRepo *BackRepoStruct) CommitVirtual_instrument(virtual_instrument *models.Virtual_instrument) {
	backRepo.BackRepoVirtual_instrument.CommitPhaseOneInstance(virtual_instrument)
	if id, ok := backRepo.BackRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument]; ok {
		backRepo.BackRepoVirtual_instrument.CommitPhaseTwoInstance(backRepo, id, virtual_instrument)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitVirtual_instrument allows checkout of a single virtual_instrument (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVirtual_instrument(virtual_instrument *models.Virtual_instrument) {
	// check if the virtual_instrument is staged
	if _, ok := backRepo.BackRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument]; ok {

		if id, ok := backRepo.BackRepoVirtual_instrument.Map_Virtual_instrumentPtr_Virtual_instrumentDBID[virtual_instrument]; ok {
			var virtual_instrumentDB Virtual_instrumentDB
			virtual_instrumentDB.ID = id

			if err := backRepo.BackRepoVirtual_instrument.db.First(&virtual_instrumentDB, id).Error; err != nil {
				log.Fatalln("CheckoutVirtual_instrument : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVirtual_instrument.CheckoutPhaseOneInstance(&virtual_instrumentDB)
			backRepo.BackRepoVirtual_instrument.CheckoutPhaseTwoInstance(backRepo, &virtual_instrumentDB)
		}
	}
}

// CopyBasicFieldsFromVirtual_instrument
func (virtual_instrumentDB *Virtual_instrumentDB) CopyBasicFieldsFromVirtual_instrument(virtual_instrument *models.Virtual_instrument) {
	// insertion point for fields commit

	virtual_instrumentDB.Name_Data.String = virtual_instrument.Name
	virtual_instrumentDB.Name_Data.Valid = true

	virtual_instrumentDB.Virtual_library_Data.String = virtual_instrument.Virtual_library
	virtual_instrumentDB.Virtual_library_Data.Valid = true

	virtual_instrumentDB.Virtual_name_Data.String = virtual_instrument.Virtual_name
	virtual_instrumentDB.Virtual_name_Data.Valid = true
}

// CopyBasicFieldsFromVirtual_instrument_WOP
func (virtual_instrumentDB *Virtual_instrumentDB) CopyBasicFieldsFromVirtual_instrument_WOP(virtual_instrument *models.Virtual_instrument_WOP) {
	// insertion point for fields commit

	virtual_instrumentDB.Name_Data.String = virtual_instrument.Name
	virtual_instrumentDB.Name_Data.Valid = true

	virtual_instrumentDB.Virtual_library_Data.String = virtual_instrument.Virtual_library
	virtual_instrumentDB.Virtual_library_Data.Valid = true

	virtual_instrumentDB.Virtual_name_Data.String = virtual_instrument.Virtual_name
	virtual_instrumentDB.Virtual_name_Data.Valid = true
}

// CopyBasicFieldsFromVirtual_instrumentWOP
func (virtual_instrumentDB *Virtual_instrumentDB) CopyBasicFieldsFromVirtual_instrumentWOP(virtual_instrument *Virtual_instrumentWOP) {
	// insertion point for fields commit

	virtual_instrumentDB.Name_Data.String = virtual_instrument.Name
	virtual_instrumentDB.Name_Data.Valid = true

	virtual_instrumentDB.Virtual_library_Data.String = virtual_instrument.Virtual_library
	virtual_instrumentDB.Virtual_library_Data.Valid = true

	virtual_instrumentDB.Virtual_name_Data.String = virtual_instrument.Virtual_name
	virtual_instrumentDB.Virtual_name_Data.Valid = true
}

// CopyBasicFieldsToVirtual_instrument
func (virtual_instrumentDB *Virtual_instrumentDB) CopyBasicFieldsToVirtual_instrument(virtual_instrument *models.Virtual_instrument) {
	// insertion point for checkout of basic fields (back repo to stage)
	virtual_instrument.Name = virtual_instrumentDB.Name_Data.String
	virtual_instrument.Virtual_library = virtual_instrumentDB.Virtual_library_Data.String
	virtual_instrument.Virtual_name = virtual_instrumentDB.Virtual_name_Data.String
}

// CopyBasicFieldsToVirtual_instrument_WOP
func (virtual_instrumentDB *Virtual_instrumentDB) CopyBasicFieldsToVirtual_instrument_WOP(virtual_instrument *models.Virtual_instrument_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	virtual_instrument.Name = virtual_instrumentDB.Name_Data.String
	virtual_instrument.Virtual_library = virtual_instrumentDB.Virtual_library_Data.String
	virtual_instrument.Virtual_name = virtual_instrumentDB.Virtual_name_Data.String
}

// CopyBasicFieldsToVirtual_instrumentWOP
func (virtual_instrumentDB *Virtual_instrumentDB) CopyBasicFieldsToVirtual_instrumentWOP(virtual_instrument *Virtual_instrumentWOP) {
	virtual_instrument.ID = int(virtual_instrumentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	virtual_instrument.Name = virtual_instrumentDB.Name_Data.String
	virtual_instrument.Virtual_library = virtual_instrumentDB.Virtual_library_Data.String
	virtual_instrument.Virtual_name = virtual_instrumentDB.Virtual_name_Data.String
}

// Backup generates a json file from a slice of all Virtual_instrumentDB instances in the backrepo
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Virtual_instrumentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Virtual_instrumentDB, 0)
	for _, virtual_instrumentDB := range backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB {
		forBackup = append(forBackup, virtual_instrumentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Virtual_instrument ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Virtual_instrument file", err.Error())
	}
}

// Backup generates a json file from a slice of all Virtual_instrumentDB instances in the backrepo
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Virtual_instrumentDB, 0)
	for _, virtual_instrumentDB := range backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB {
		forBackup = append(forBackup, virtual_instrumentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Virtual_instrument")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Virtual_instrument_Fields, -1)
	for _, virtual_instrumentDB := range forBackup {

		var virtual_instrumentWOP Virtual_instrumentWOP
		virtual_instrumentDB.CopyBasicFieldsToVirtual_instrumentWOP(&virtual_instrumentWOP)

		row := sh.AddRow()
		row.WriteStruct(&virtual_instrumentWOP, -1)
	}
}

// RestoreXL from the "Virtual_instrument" sheet all Virtual_instrumentDB instances
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoVirtual_instrumentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Virtual_instrument"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoVirtual_instrument.rowVisitorVirtual_instrument)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) rowVisitorVirtual_instrument(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var virtual_instrumentWOP Virtual_instrumentWOP
		row.ReadStruct(&virtual_instrumentWOP)

		// add the unmarshalled struct to the stage
		virtual_instrumentDB := new(Virtual_instrumentDB)
		virtual_instrumentDB.CopyBasicFieldsFromVirtual_instrumentWOP(&virtual_instrumentWOP)

		virtual_instrumentDB_ID_atBackupTime := virtual_instrumentDB.ID
		virtual_instrumentDB.ID = 0
		query := backRepoVirtual_instrument.db.Create(virtual_instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[virtual_instrumentDB.ID] = virtual_instrumentDB
		BackRepoVirtual_instrumentid_atBckpTime_newID[virtual_instrumentDB_ID_atBackupTime] = virtual_instrumentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Virtual_instrumentDB.json" in dirPath that stores an array
// of Virtual_instrumentDB and stores it in the database
// the map BackRepoVirtual_instrumentid_atBckpTime_newID is updated accordingly
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVirtual_instrumentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Virtual_instrumentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Virtual_instrument file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Virtual_instrumentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Virtual_instrumentDBID_Virtual_instrumentDB
	for _, virtual_instrumentDB := range forRestore {

		virtual_instrumentDB_ID_atBackupTime := virtual_instrumentDB.ID
		virtual_instrumentDB.ID = 0
		query := backRepoVirtual_instrument.db.Create(virtual_instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[virtual_instrumentDB.ID] = virtual_instrumentDB
		BackRepoVirtual_instrumentid_atBckpTime_newID[virtual_instrumentDB_ID_atBackupTime] = virtual_instrumentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Virtual_instrument file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Virtual_instrument>id_atBckpTime_newID
// to compute new index
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) RestorePhaseTwo() {

	for _, virtual_instrumentDB := range backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB {

		// next line of code is to avert unused variable compilation error
		_ = virtual_instrumentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoVirtual_instrument.db.Model(virtual_instrumentDB).Updates(*virtual_instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoVirtual_instrument.ResetReversePointers commits all staged instances of Virtual_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, virtual_instrument := range backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentPtr {
		backRepoVirtual_instrument.ResetReversePointersInstance(backRepo, idx, virtual_instrument)
	}

	return
}

func (backRepoVirtual_instrument *BackRepoVirtual_instrumentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, virtual_instrument *models.Virtual_instrument) (Error error) {

	// fetch matching virtual_instrumentDB
	if virtual_instrumentDB, ok := backRepoVirtual_instrument.Map_Virtual_instrumentDBID_Virtual_instrumentDB[idx]; ok {
		_ = virtual_instrumentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVirtual_instrumentid_atBckpTime_newID map[uint]uint
