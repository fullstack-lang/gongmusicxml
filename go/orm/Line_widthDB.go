// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Line_width_sql sql.NullBool
var dummy_Line_width_time time.Duration
var dummy_Line_width_sort sort.Float64Slice

// Line_widthAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model line_widthAPI
type Line_widthAPI struct {
	gorm.Model

	models.Line_width_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Line_widthPointersEncoding Line_widthPointersEncoding
}

// Line_widthPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Line_widthPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Line_widthDB describes a line_width in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model line_widthDB
type Line_widthDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field line_widthDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Line_widthPointersEncoding
}

// Line_widthDBs arrays line_widthDBs
// swagger:response line_widthDBsResponse
type Line_widthDBs []Line_widthDB

// Line_widthDBResponse provides response
// swagger:response line_widthDBResponse
type Line_widthDBResponse struct {
	Line_widthDB
}

// Line_widthWOP is a Line_width without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Line_widthWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Line_width_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLine_widthStruct struct {
	// stores Line_widthDB according to their gorm ID
	Map_Line_widthDBID_Line_widthDB map[uint]*Line_widthDB

	// stores Line_widthDB ID according to Line_width address
	Map_Line_widthPtr_Line_widthDBID map[*models.Line_width]uint

	// stores Line_width according to their gorm ID
	Map_Line_widthDBID_Line_widthPtr map[uint]*models.Line_width

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLine_width *BackRepoLine_widthStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLine_width.stage
	return
}

func (backRepoLine_width *BackRepoLine_widthStruct) GetDB() *gorm.DB {
	return backRepoLine_width.db
}

// GetLine_widthDBFromLine_widthPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLine_width *BackRepoLine_widthStruct) GetLine_widthDBFromLine_widthPtr(line_width *models.Line_width) (line_widthDB *Line_widthDB) {
	id := backRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width]
	line_widthDB = backRepoLine_width.Map_Line_widthDBID_Line_widthDB[id]
	return
}

// BackRepoLine_width.CommitPhaseOne commits all staged instances of Line_width to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine_width *BackRepoLine_widthStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for line_width := range stage.Line_widths {
		backRepoLine_width.CommitPhaseOneInstance(line_width)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, line_width := range backRepoLine_width.Map_Line_widthDBID_Line_widthPtr {
		if _, ok := stage.Line_widths[line_width]; !ok {
			backRepoLine_width.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLine_width.CommitDeleteInstance commits deletion of Line_width to the BackRepo
func (backRepoLine_width *BackRepoLine_widthStruct) CommitDeleteInstance(id uint) (Error error) {

	line_width := backRepoLine_width.Map_Line_widthDBID_Line_widthPtr[id]

	// line_width is not staged anymore, remove line_widthDB
	line_widthDB := backRepoLine_width.Map_Line_widthDBID_Line_widthDB[id]
	query := backRepoLine_width.db.Unscoped().Delete(&line_widthDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLine_width.Map_Line_widthPtr_Line_widthDBID, line_width)
	delete(backRepoLine_width.Map_Line_widthDBID_Line_widthPtr, id)
	delete(backRepoLine_width.Map_Line_widthDBID_Line_widthDB, id)

	return
}

// BackRepoLine_width.CommitPhaseOneInstance commits line_width staged instances of Line_width to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine_width *BackRepoLine_widthStruct) CommitPhaseOneInstance(line_width *models.Line_width) (Error error) {

	// check if the line_width is not commited yet
	if _, ok := backRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width]; ok {
		return
	}

	// initiate line_width
	var line_widthDB Line_widthDB
	line_widthDB.CopyBasicFieldsFromLine_width(line_width)

	query := backRepoLine_width.db.Create(&line_widthDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width] = line_widthDB.ID
	backRepoLine_width.Map_Line_widthDBID_Line_widthPtr[line_widthDB.ID] = line_width
	backRepoLine_width.Map_Line_widthDBID_Line_widthDB[line_widthDB.ID] = &line_widthDB

	return
}

// BackRepoLine_width.CommitPhaseTwo commits all staged instances of Line_width to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_width *BackRepoLine_widthStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, line_width := range backRepoLine_width.Map_Line_widthDBID_Line_widthPtr {
		backRepoLine_width.CommitPhaseTwoInstance(backRepo, idx, line_width)
	}

	return
}

// BackRepoLine_width.CommitPhaseTwoInstance commits {{structname }} of models.Line_width to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_width *BackRepoLine_widthStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, line_width *models.Line_width) (Error error) {

	// fetch matching line_widthDB
	if line_widthDB, ok := backRepoLine_width.Map_Line_widthDBID_Line_widthDB[idx]; ok {

		line_widthDB.CopyBasicFieldsFromLine_width(line_width)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoLine_width.db.Save(&line_widthDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Line_width intance %s", line_width.Name))
		return err
	}

	return
}

// BackRepoLine_width.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLine_width *BackRepoLine_widthStruct) CheckoutPhaseOne() (Error error) {

	line_widthDBArray := make([]Line_widthDB, 0)
	query := backRepoLine_width.db.Find(&line_widthDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	line_widthInstancesToBeRemovedFromTheStage := make(map[*models.Line_width]any)
	for key, value := range backRepoLine_width.stage.Line_widths {
		line_widthInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, line_widthDB := range line_widthDBArray {
		backRepoLine_width.CheckoutPhaseOneInstance(&line_widthDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		line_width, ok := backRepoLine_width.Map_Line_widthDBID_Line_widthPtr[line_widthDB.ID]
		if ok {
			delete(line_widthInstancesToBeRemovedFromTheStage, line_width)
		}
	}

	// remove from stage and back repo's 3 maps all line_widths that are not in the checkout
	for line_width := range line_widthInstancesToBeRemovedFromTheStage {
		line_width.Unstage(backRepoLine_width.GetStage())

		// remove instance from the back repo 3 maps
		line_widthID := backRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width]
		delete(backRepoLine_width.Map_Line_widthPtr_Line_widthDBID, line_width)
		delete(backRepoLine_width.Map_Line_widthDBID_Line_widthDB, line_widthID)
		delete(backRepoLine_width.Map_Line_widthDBID_Line_widthPtr, line_widthID)
	}

	return
}

// CheckoutPhaseOneInstance takes a line_widthDB that has been found in the DB, updates the backRepo and stages the
// models version of the line_widthDB
func (backRepoLine_width *BackRepoLine_widthStruct) CheckoutPhaseOneInstance(line_widthDB *Line_widthDB) (Error error) {

	line_width, ok := backRepoLine_width.Map_Line_widthDBID_Line_widthPtr[line_widthDB.ID]
	if !ok {
		line_width = new(models.Line_width)

		backRepoLine_width.Map_Line_widthDBID_Line_widthPtr[line_widthDB.ID] = line_width
		backRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width] = line_widthDB.ID

		// append model store with the new element
		line_width.Name = line_widthDB.Name_Data.String
		line_width.Stage(backRepoLine_width.GetStage())
	}
	line_widthDB.CopyBasicFieldsToLine_width(line_width)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	line_width.Stage(backRepoLine_width.GetStage())

	// preserve pointer to line_widthDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Line_widthDBID_Line_widthDB)[line_widthDB hold variable pointers
	line_widthDB_Data := *line_widthDB
	preservedPtrToLine_width := &line_widthDB_Data
	backRepoLine_width.Map_Line_widthDBID_Line_widthDB[line_widthDB.ID] = preservedPtrToLine_width

	return
}

// BackRepoLine_width.CheckoutPhaseTwo Checkouts all staged instances of Line_width to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_width *BackRepoLine_widthStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, line_widthDB := range backRepoLine_width.Map_Line_widthDBID_Line_widthDB {
		backRepoLine_width.CheckoutPhaseTwoInstance(backRepo, line_widthDB)
	}
	return
}

// BackRepoLine_width.CheckoutPhaseTwoInstance Checkouts staged instances of Line_width to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_width *BackRepoLine_widthStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, line_widthDB *Line_widthDB) (Error error) {

	line_width := backRepoLine_width.Map_Line_widthDBID_Line_widthPtr[line_widthDB.ID]

	line_widthDB.DecodePointers(backRepo, line_width)

	return
}

func (line_widthDB *Line_widthDB) DecodePointers(backRepo *BackRepoStruct, line_width *models.Line_width) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLine_width allows commit of a single line_width (if already staged)
func (backRepo *BackRepoStruct) CommitLine_width(line_width *models.Line_width) {
	backRepo.BackRepoLine_width.CommitPhaseOneInstance(line_width)
	if id, ok := backRepo.BackRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width]; ok {
		backRepo.BackRepoLine_width.CommitPhaseTwoInstance(backRepo, id, line_width)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLine_width allows checkout of a single line_width (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLine_width(line_width *models.Line_width) {
	// check if the line_width is staged
	if _, ok := backRepo.BackRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width]; ok {

		if id, ok := backRepo.BackRepoLine_width.Map_Line_widthPtr_Line_widthDBID[line_width]; ok {
			var line_widthDB Line_widthDB
			line_widthDB.ID = id

			if err := backRepo.BackRepoLine_width.db.First(&line_widthDB, id).Error; err != nil {
				log.Fatalln("CheckoutLine_width : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLine_width.CheckoutPhaseOneInstance(&line_widthDB)
			backRepo.BackRepoLine_width.CheckoutPhaseTwoInstance(backRepo, &line_widthDB)
		}
	}
}

// CopyBasicFieldsFromLine_width
func (line_widthDB *Line_widthDB) CopyBasicFieldsFromLine_width(line_width *models.Line_width) {
	// insertion point for fields commit

	line_widthDB.Name_Data.String = line_width.Name
	line_widthDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLine_width_WOP
func (line_widthDB *Line_widthDB) CopyBasicFieldsFromLine_width_WOP(line_width *models.Line_width_WOP) {
	// insertion point for fields commit

	line_widthDB.Name_Data.String = line_width.Name
	line_widthDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLine_widthWOP
func (line_widthDB *Line_widthDB) CopyBasicFieldsFromLine_widthWOP(line_width *Line_widthWOP) {
	// insertion point for fields commit

	line_widthDB.Name_Data.String = line_width.Name
	line_widthDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLine_width
func (line_widthDB *Line_widthDB) CopyBasicFieldsToLine_width(line_width *models.Line_width) {
	// insertion point for checkout of basic fields (back repo to stage)
	line_width.Name = line_widthDB.Name_Data.String
}

// CopyBasicFieldsToLine_width_WOP
func (line_widthDB *Line_widthDB) CopyBasicFieldsToLine_width_WOP(line_width *models.Line_width_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	line_width.Name = line_widthDB.Name_Data.String
}

// CopyBasicFieldsToLine_widthWOP
func (line_widthDB *Line_widthDB) CopyBasicFieldsToLine_widthWOP(line_width *Line_widthWOP) {
	line_width.ID = int(line_widthDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	line_width.Name = line_widthDB.Name_Data.String
}

// Backup generates a json file from a slice of all Line_widthDB instances in the backrepo
func (backRepoLine_width *BackRepoLine_widthStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Line_widthDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Line_widthDB, 0)
	for _, line_widthDB := range backRepoLine_width.Map_Line_widthDBID_Line_widthDB {
		forBackup = append(forBackup, line_widthDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Line_width ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Line_width file", err.Error())
	}
}

// Backup generates a json file from a slice of all Line_widthDB instances in the backrepo
func (backRepoLine_width *BackRepoLine_widthStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Line_widthDB, 0)
	for _, line_widthDB := range backRepoLine_width.Map_Line_widthDBID_Line_widthDB {
		forBackup = append(forBackup, line_widthDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Line_width")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Line_width_Fields, -1)
	for _, line_widthDB := range forBackup {

		var line_widthWOP Line_widthWOP
		line_widthDB.CopyBasicFieldsToLine_widthWOP(&line_widthWOP)

		row := sh.AddRow()
		row.WriteStruct(&line_widthWOP, -1)
	}
}

// RestoreXL from the "Line_width" sheet all Line_widthDB instances
func (backRepoLine_width *BackRepoLine_widthStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLine_widthid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Line_width"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLine_width.rowVisitorLine_width)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLine_width *BackRepoLine_widthStruct) rowVisitorLine_width(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var line_widthWOP Line_widthWOP
		row.ReadStruct(&line_widthWOP)

		// add the unmarshalled struct to the stage
		line_widthDB := new(Line_widthDB)
		line_widthDB.CopyBasicFieldsFromLine_widthWOP(&line_widthWOP)

		line_widthDB_ID_atBackupTime := line_widthDB.ID
		line_widthDB.ID = 0
		query := backRepoLine_width.db.Create(line_widthDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLine_width.Map_Line_widthDBID_Line_widthDB[line_widthDB.ID] = line_widthDB
		BackRepoLine_widthid_atBckpTime_newID[line_widthDB_ID_atBackupTime] = line_widthDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Line_widthDB.json" in dirPath that stores an array
// of Line_widthDB and stores it in the database
// the map BackRepoLine_widthid_atBckpTime_newID is updated accordingly
func (backRepoLine_width *BackRepoLine_widthStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLine_widthid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Line_widthDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Line_width file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Line_widthDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Line_widthDBID_Line_widthDB
	for _, line_widthDB := range forRestore {

		line_widthDB_ID_atBackupTime := line_widthDB.ID
		line_widthDB.ID = 0
		query := backRepoLine_width.db.Create(line_widthDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLine_width.Map_Line_widthDBID_Line_widthDB[line_widthDB.ID] = line_widthDB
		BackRepoLine_widthid_atBckpTime_newID[line_widthDB_ID_atBackupTime] = line_widthDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Line_width file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Line_width>id_atBckpTime_newID
// to compute new index
func (backRepoLine_width *BackRepoLine_widthStruct) RestorePhaseTwo() {

	for _, line_widthDB := range backRepoLine_width.Map_Line_widthDBID_Line_widthDB {

		// next line of code is to avert unused variable compilation error
		_ = line_widthDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLine_width.db.Model(line_widthDB).Updates(*line_widthDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLine_width.ResetReversePointers commits all staged instances of Line_width to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_width *BackRepoLine_widthStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, line_width := range backRepoLine_width.Map_Line_widthDBID_Line_widthPtr {
		backRepoLine_width.ResetReversePointersInstance(backRepo, idx, line_width)
	}

	return
}

func (backRepoLine_width *BackRepoLine_widthStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, line_width *models.Line_width) (Error error) {

	// fetch matching line_widthDB
	if line_widthDB, ok := backRepoLine_width.Map_Line_widthDBID_Line_widthDB[idx]; ok {
		_ = line_widthDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLine_widthid_atBckpTime_newID map[uint]uint
