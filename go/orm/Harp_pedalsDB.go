// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Harp_pedals_sql sql.NullBool
var dummy_Harp_pedals_time time.Duration
var dummy_Harp_pedals_sort sort.Float64Slice

// Harp_pedalsAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model harp_pedalsAPI
type Harp_pedalsAPI struct {
	gorm.Model

	models.Harp_pedals_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Harp_pedalsPointersEncoding Harp_pedalsPointersEncoding
}

// Harp_pedalsPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Harp_pedalsPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Pedal_tuning is a slice of pointers to another Struct (optional or 0..1)
	Pedal_tuning IntSlice `gorm:"type:TEXT"`
}

// Harp_pedalsDB describes a harp_pedals in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model harp_pedalsDB
type Harp_pedalsDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field harp_pedalsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Harp_pedalsPointersEncoding
}

// Harp_pedalsDBs arrays harp_pedalsDBs
// swagger:response harp_pedalsDBsResponse
type Harp_pedalsDBs []Harp_pedalsDB

// Harp_pedalsDBResponse provides response
// swagger:response harp_pedalsDBResponse
type Harp_pedalsDBResponse struct {
	Harp_pedalsDB
}

// Harp_pedalsWOP is a Harp_pedals without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Harp_pedalsWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Harp_pedals_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHarp_pedalsStruct struct {
	// stores Harp_pedalsDB according to their gorm ID
	Map_Harp_pedalsDBID_Harp_pedalsDB map[uint]*Harp_pedalsDB

	// stores Harp_pedalsDB ID according to Harp_pedals address
	Map_Harp_pedalsPtr_Harp_pedalsDBID map[*models.Harp_pedals]uint

	// stores Harp_pedals according to their gorm ID
	Map_Harp_pedalsDBID_Harp_pedalsPtr map[uint]*models.Harp_pedals

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHarp_pedals.stage
	return
}

func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) GetDB() *gorm.DB {
	return backRepoHarp_pedals.db
}

// GetHarp_pedalsDBFromHarp_pedalsPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) GetHarp_pedalsDBFromHarp_pedalsPtr(harp_pedals *models.Harp_pedals) (harp_pedalsDB *Harp_pedalsDB) {
	id := backRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals]
	harp_pedalsDB = backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[id]
	return
}

// BackRepoHarp_pedals.CommitPhaseOne commits all staged instances of Harp_pedals to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for harp_pedals := range stage.Harp_pedalss {
		backRepoHarp_pedals.CommitPhaseOneInstance(harp_pedals)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, harp_pedals := range backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr {
		if _, ok := stage.Harp_pedalss[harp_pedals]; !ok {
			backRepoHarp_pedals.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHarp_pedals.CommitDeleteInstance commits deletion of Harp_pedals to the BackRepo
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CommitDeleteInstance(id uint) (Error error) {

	harp_pedals := backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr[id]

	// harp_pedals is not staged anymore, remove harp_pedalsDB
	harp_pedalsDB := backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[id]
	query := backRepoHarp_pedals.db.Unscoped().Delete(&harp_pedalsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID, harp_pedals)
	delete(backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr, id)
	delete(backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB, id)

	return
}

// BackRepoHarp_pedals.CommitPhaseOneInstance commits harp_pedals staged instances of Harp_pedals to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CommitPhaseOneInstance(harp_pedals *models.Harp_pedals) (Error error) {

	// check if the harp_pedals is not commited yet
	if _, ok := backRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals]; ok {
		return
	}

	// initiate harp_pedals
	var harp_pedalsDB Harp_pedalsDB
	harp_pedalsDB.CopyBasicFieldsFromHarp_pedals(harp_pedals)

	query := backRepoHarp_pedals.db.Create(&harp_pedalsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals] = harp_pedalsDB.ID
	backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr[harp_pedalsDB.ID] = harp_pedals
	backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[harp_pedalsDB.ID] = &harp_pedalsDB

	return
}

// BackRepoHarp_pedals.CommitPhaseTwo commits all staged instances of Harp_pedals to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, harp_pedals := range backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr {
		backRepoHarp_pedals.CommitPhaseTwoInstance(backRepo, idx, harp_pedals)
	}

	return
}

// BackRepoHarp_pedals.CommitPhaseTwoInstance commits {{structname }} of models.Harp_pedals to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, harp_pedals *models.Harp_pedals) (Error error) {

	// fetch matching harp_pedalsDB
	if harp_pedalsDB, ok := backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[idx]; ok {

		harp_pedalsDB.CopyBasicFieldsFromHarp_pedals(harp_pedals)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		harp_pedalsDB.Harp_pedalsPointersEncoding.Pedal_tuning = make([]int, 0)
		// 2. encode
		for _, pedal_tuningAssocEnd := range harp_pedals.Pedal_tuning {
			pedal_tuningAssocEnd_DB :=
				backRepo.BackRepoPedal_tuning.GetPedal_tuningDBFromPedal_tuningPtr(pedal_tuningAssocEnd)
			
			// the stage might be inconsistant, meaning that the pedal_tuningAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if pedal_tuningAssocEnd_DB == nil {
				continue
			}
			
			harp_pedalsDB.Harp_pedalsPointersEncoding.Pedal_tuning =
				append(harp_pedalsDB.Harp_pedalsPointersEncoding.Pedal_tuning, int(pedal_tuningAssocEnd_DB.ID))
		}

		query := backRepoHarp_pedals.db.Save(&harp_pedalsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Harp_pedals intance %s", harp_pedals.Name))
		return err
	}

	return
}

// BackRepoHarp_pedals.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CheckoutPhaseOne() (Error error) {

	harp_pedalsDBArray := make([]Harp_pedalsDB, 0)
	query := backRepoHarp_pedals.db.Find(&harp_pedalsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	harp_pedalsInstancesToBeRemovedFromTheStage := make(map[*models.Harp_pedals]any)
	for key, value := range backRepoHarp_pedals.stage.Harp_pedalss {
		harp_pedalsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, harp_pedalsDB := range harp_pedalsDBArray {
		backRepoHarp_pedals.CheckoutPhaseOneInstance(&harp_pedalsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		harp_pedals, ok := backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr[harp_pedalsDB.ID]
		if ok {
			delete(harp_pedalsInstancesToBeRemovedFromTheStage, harp_pedals)
		}
	}

	// remove from stage and back repo's 3 maps all harp_pedalss that are not in the checkout
	for harp_pedals := range harp_pedalsInstancesToBeRemovedFromTheStage {
		harp_pedals.Unstage(backRepoHarp_pedals.GetStage())

		// remove instance from the back repo 3 maps
		harp_pedalsID := backRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals]
		delete(backRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID, harp_pedals)
		delete(backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB, harp_pedalsID)
		delete(backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr, harp_pedalsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a harp_pedalsDB that has been found in the DB, updates the backRepo and stages the
// models version of the harp_pedalsDB
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CheckoutPhaseOneInstance(harp_pedalsDB *Harp_pedalsDB) (Error error) {

	harp_pedals, ok := backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr[harp_pedalsDB.ID]
	if !ok {
		harp_pedals = new(models.Harp_pedals)

		backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr[harp_pedalsDB.ID] = harp_pedals
		backRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals] = harp_pedalsDB.ID

		// append model store with the new element
		harp_pedals.Name = harp_pedalsDB.Name_Data.String
		harp_pedals.Stage(backRepoHarp_pedals.GetStage())
	}
	harp_pedalsDB.CopyBasicFieldsToHarp_pedals(harp_pedals)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	harp_pedals.Stage(backRepoHarp_pedals.GetStage())

	// preserve pointer to harp_pedalsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Harp_pedalsDBID_Harp_pedalsDB)[harp_pedalsDB hold variable pointers
	harp_pedalsDB_Data := *harp_pedalsDB
	preservedPtrToHarp_pedals := &harp_pedalsDB_Data
	backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[harp_pedalsDB.ID] = preservedPtrToHarp_pedals

	return
}

// BackRepoHarp_pedals.CheckoutPhaseTwo Checkouts all staged instances of Harp_pedals to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, harp_pedalsDB := range backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB {
		backRepoHarp_pedals.CheckoutPhaseTwoInstance(backRepo, harp_pedalsDB)
	}
	return
}

// BackRepoHarp_pedals.CheckoutPhaseTwoInstance Checkouts staged instances of Harp_pedals to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, harp_pedalsDB *Harp_pedalsDB) (Error error) {

	harp_pedals := backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr[harp_pedalsDB.ID]

	harp_pedalsDB.DecodePointers(backRepo, harp_pedals)

	return
}

func (harp_pedalsDB *Harp_pedalsDB) DecodePointers(backRepo *BackRepoStruct, harp_pedals *models.Harp_pedals) {

	// insertion point for checkout of pointer encoding
	// This loop redeem harp_pedals.Pedal_tuning in the stage from the encode in the back repo
	// It parses all Pedal_tuningDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	harp_pedals.Pedal_tuning = harp_pedals.Pedal_tuning[:0]
	for _, _Pedal_tuningid := range harp_pedalsDB.Harp_pedalsPointersEncoding.Pedal_tuning {
		harp_pedals.Pedal_tuning = append(harp_pedals.Pedal_tuning, backRepo.BackRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr[uint(_Pedal_tuningid)])
	}

	return
}

// CommitHarp_pedals allows commit of a single harp_pedals (if already staged)
func (backRepo *BackRepoStruct) CommitHarp_pedals(harp_pedals *models.Harp_pedals) {
	backRepo.BackRepoHarp_pedals.CommitPhaseOneInstance(harp_pedals)
	if id, ok := backRepo.BackRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals]; ok {
		backRepo.BackRepoHarp_pedals.CommitPhaseTwoInstance(backRepo, id, harp_pedals)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHarp_pedals allows checkout of a single harp_pedals (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHarp_pedals(harp_pedals *models.Harp_pedals) {
	// check if the harp_pedals is staged
	if _, ok := backRepo.BackRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals]; ok {

		if id, ok := backRepo.BackRepoHarp_pedals.Map_Harp_pedalsPtr_Harp_pedalsDBID[harp_pedals]; ok {
			var harp_pedalsDB Harp_pedalsDB
			harp_pedalsDB.ID = id

			if err := backRepo.BackRepoHarp_pedals.db.First(&harp_pedalsDB, id).Error; err != nil {
				log.Fatalln("CheckoutHarp_pedals : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHarp_pedals.CheckoutPhaseOneInstance(&harp_pedalsDB)
			backRepo.BackRepoHarp_pedals.CheckoutPhaseTwoInstance(backRepo, &harp_pedalsDB)
		}
	}
}

// CopyBasicFieldsFromHarp_pedals
func (harp_pedalsDB *Harp_pedalsDB) CopyBasicFieldsFromHarp_pedals(harp_pedals *models.Harp_pedals) {
	// insertion point for fields commit

	harp_pedalsDB.Name_Data.String = harp_pedals.Name
	harp_pedalsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarp_pedals_WOP
func (harp_pedalsDB *Harp_pedalsDB) CopyBasicFieldsFromHarp_pedals_WOP(harp_pedals *models.Harp_pedals_WOP) {
	// insertion point for fields commit

	harp_pedalsDB.Name_Data.String = harp_pedals.Name
	harp_pedalsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarp_pedalsWOP
func (harp_pedalsDB *Harp_pedalsDB) CopyBasicFieldsFromHarp_pedalsWOP(harp_pedals *Harp_pedalsWOP) {
	// insertion point for fields commit

	harp_pedalsDB.Name_Data.String = harp_pedals.Name
	harp_pedalsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHarp_pedals
func (harp_pedalsDB *Harp_pedalsDB) CopyBasicFieldsToHarp_pedals(harp_pedals *models.Harp_pedals) {
	// insertion point for checkout of basic fields (back repo to stage)
	harp_pedals.Name = harp_pedalsDB.Name_Data.String
}

// CopyBasicFieldsToHarp_pedals_WOP
func (harp_pedalsDB *Harp_pedalsDB) CopyBasicFieldsToHarp_pedals_WOP(harp_pedals *models.Harp_pedals_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	harp_pedals.Name = harp_pedalsDB.Name_Data.String
}

// CopyBasicFieldsToHarp_pedalsWOP
func (harp_pedalsDB *Harp_pedalsDB) CopyBasicFieldsToHarp_pedalsWOP(harp_pedals *Harp_pedalsWOP) {
	harp_pedals.ID = int(harp_pedalsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	harp_pedals.Name = harp_pedalsDB.Name_Data.String
}

// Backup generates a json file from a slice of all Harp_pedalsDB instances in the backrepo
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Harp_pedalsDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Harp_pedalsDB, 0)
	for _, harp_pedalsDB := range backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB {
		forBackup = append(forBackup, harp_pedalsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Harp_pedals ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Harp_pedals file", err.Error())
	}
}

// Backup generates a json file from a slice of all Harp_pedalsDB instances in the backrepo
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Harp_pedalsDB, 0)
	for _, harp_pedalsDB := range backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB {
		forBackup = append(forBackup, harp_pedalsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Harp_pedals")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Harp_pedals_Fields, -1)
	for _, harp_pedalsDB := range forBackup {

		var harp_pedalsWOP Harp_pedalsWOP
		harp_pedalsDB.CopyBasicFieldsToHarp_pedalsWOP(&harp_pedalsWOP)

		row := sh.AddRow()
		row.WriteStruct(&harp_pedalsWOP, -1)
	}
}

// RestoreXL from the "Harp_pedals" sheet all Harp_pedalsDB instances
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHarp_pedalsid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Harp_pedals"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHarp_pedals.rowVisitorHarp_pedals)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) rowVisitorHarp_pedals(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var harp_pedalsWOP Harp_pedalsWOP
		row.ReadStruct(&harp_pedalsWOP)

		// add the unmarshalled struct to the stage
		harp_pedalsDB := new(Harp_pedalsDB)
		harp_pedalsDB.CopyBasicFieldsFromHarp_pedalsWOP(&harp_pedalsWOP)

		harp_pedalsDB_ID_atBackupTime := harp_pedalsDB.ID
		harp_pedalsDB.ID = 0
		query := backRepoHarp_pedals.db.Create(harp_pedalsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[harp_pedalsDB.ID] = harp_pedalsDB
		BackRepoHarp_pedalsid_atBckpTime_newID[harp_pedalsDB_ID_atBackupTime] = harp_pedalsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Harp_pedalsDB.json" in dirPath that stores an array
// of Harp_pedalsDB and stores it in the database
// the map BackRepoHarp_pedalsid_atBckpTime_newID is updated accordingly
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHarp_pedalsid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Harp_pedalsDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Harp_pedals file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Harp_pedalsDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Harp_pedalsDBID_Harp_pedalsDB
	for _, harp_pedalsDB := range forRestore {

		harp_pedalsDB_ID_atBackupTime := harp_pedalsDB.ID
		harp_pedalsDB.ID = 0
		query := backRepoHarp_pedals.db.Create(harp_pedalsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[harp_pedalsDB.ID] = harp_pedalsDB
		BackRepoHarp_pedalsid_atBckpTime_newID[harp_pedalsDB_ID_atBackupTime] = harp_pedalsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Harp_pedals file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Harp_pedals>id_atBckpTime_newID
// to compute new index
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) RestorePhaseTwo() {

	for _, harp_pedalsDB := range backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB {

		// next line of code is to avert unused variable compilation error
		_ = harp_pedalsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHarp_pedals.db.Model(harp_pedalsDB).Updates(*harp_pedalsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHarp_pedals.ResetReversePointers commits all staged instances of Harp_pedals to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, harp_pedals := range backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsPtr {
		backRepoHarp_pedals.ResetReversePointersInstance(backRepo, idx, harp_pedals)
	}

	return
}

func (backRepoHarp_pedals *BackRepoHarp_pedalsStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, harp_pedals *models.Harp_pedals) (Error error) {

	// fetch matching harp_pedalsDB
	if harp_pedalsDB, ok := backRepoHarp_pedals.Map_Harp_pedalsDBID_Harp_pedalsDB[idx]; ok {
		_ = harp_pedalsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHarp_pedalsid_atBckpTime_newID map[uint]uint
