// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Lyric_language_sql sql.NullBool
var dummy_Lyric_language_time time.Duration
var dummy_Lyric_language_sort sort.Float64Slice

// Lyric_languageAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lyric_languageAPI
type Lyric_languageAPI struct {
	gorm.Model

	models.Lyric_language_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Lyric_languagePointersEncoding Lyric_languagePointersEncoding
}

// Lyric_languagePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Lyric_languagePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Lyric_languageDB describes a lyric_language in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model lyric_languageDB
type Lyric_languageDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field lyric_languageDB.Name
	Name_Data sql.NullString

	// Declation for basic field lyric_languageDB.EmptyString
	EmptyString_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Lyric_languagePointersEncoding
}

// Lyric_languageDBs arrays lyric_languageDBs
// swagger:response lyric_languageDBsResponse
type Lyric_languageDBs []Lyric_languageDB

// Lyric_languageDBResponse provides response
// swagger:response lyric_languageDBResponse
type Lyric_languageDBResponse struct {
	Lyric_languageDB
}

// Lyric_languageWOP is a Lyric_language without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Lyric_languageWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	EmptyString string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Lyric_language_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"EmptyString",
}

type BackRepoLyric_languageStruct struct {
	// stores Lyric_languageDB according to their gorm ID
	Map_Lyric_languageDBID_Lyric_languageDB map[uint]*Lyric_languageDB

	// stores Lyric_languageDB ID according to Lyric_language address
	Map_Lyric_languagePtr_Lyric_languageDBID map[*models.Lyric_language]uint

	// stores Lyric_language according to their gorm ID
	Map_Lyric_languageDBID_Lyric_languagePtr map[uint]*models.Lyric_language

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLyric_language *BackRepoLyric_languageStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLyric_language.stage
	return
}

func (backRepoLyric_language *BackRepoLyric_languageStruct) GetDB() *gorm.DB {
	return backRepoLyric_language.db
}

// GetLyric_languageDBFromLyric_languagePtr is a handy function to access the back repo instance from the stage instance
func (backRepoLyric_language *BackRepoLyric_languageStruct) GetLyric_languageDBFromLyric_languagePtr(lyric_language *models.Lyric_language) (lyric_languageDB *Lyric_languageDB) {
	id := backRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language]
	lyric_languageDB = backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[id]
	return
}

// BackRepoLyric_language.CommitPhaseOne commits all staged instances of Lyric_language to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLyric_language *BackRepoLyric_languageStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for lyric_language := range stage.Lyric_languages {
		backRepoLyric_language.CommitPhaseOneInstance(lyric_language)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, lyric_language := range backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr {
		if _, ok := stage.Lyric_languages[lyric_language]; !ok {
			backRepoLyric_language.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLyric_language.CommitDeleteInstance commits deletion of Lyric_language to the BackRepo
func (backRepoLyric_language *BackRepoLyric_languageStruct) CommitDeleteInstance(id uint) (Error error) {

	lyric_language := backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr[id]

	// lyric_language is not staged anymore, remove lyric_languageDB
	lyric_languageDB := backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[id]
	query := backRepoLyric_language.db.Unscoped().Delete(&lyric_languageDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID, lyric_language)
	delete(backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr, id)
	delete(backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB, id)

	return
}

// BackRepoLyric_language.CommitPhaseOneInstance commits lyric_language staged instances of Lyric_language to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLyric_language *BackRepoLyric_languageStruct) CommitPhaseOneInstance(lyric_language *models.Lyric_language) (Error error) {

	// check if the lyric_language is not commited yet
	if _, ok := backRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language]; ok {
		return
	}

	// initiate lyric_language
	var lyric_languageDB Lyric_languageDB
	lyric_languageDB.CopyBasicFieldsFromLyric_language(lyric_language)

	query := backRepoLyric_language.db.Create(&lyric_languageDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language] = lyric_languageDB.ID
	backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr[lyric_languageDB.ID] = lyric_language
	backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[lyric_languageDB.ID] = &lyric_languageDB

	return
}

// BackRepoLyric_language.CommitPhaseTwo commits all staged instances of Lyric_language to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_language *BackRepoLyric_languageStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, lyric_language := range backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr {
		backRepoLyric_language.CommitPhaseTwoInstance(backRepo, idx, lyric_language)
	}

	return
}

// BackRepoLyric_language.CommitPhaseTwoInstance commits {{structname }} of models.Lyric_language to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_language *BackRepoLyric_languageStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, lyric_language *models.Lyric_language) (Error error) {

	// fetch matching lyric_languageDB
	if lyric_languageDB, ok := backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[idx]; ok {

		lyric_languageDB.CopyBasicFieldsFromLyric_language(lyric_language)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoLyric_language.db.Save(&lyric_languageDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Lyric_language intance %s", lyric_language.Name))
		return err
	}

	return
}

// BackRepoLyric_language.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLyric_language *BackRepoLyric_languageStruct) CheckoutPhaseOne() (Error error) {

	lyric_languageDBArray := make([]Lyric_languageDB, 0)
	query := backRepoLyric_language.db.Find(&lyric_languageDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	lyric_languageInstancesToBeRemovedFromTheStage := make(map[*models.Lyric_language]any)
	for key, value := range backRepoLyric_language.stage.Lyric_languages {
		lyric_languageInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, lyric_languageDB := range lyric_languageDBArray {
		backRepoLyric_language.CheckoutPhaseOneInstance(&lyric_languageDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		lyric_language, ok := backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr[lyric_languageDB.ID]
		if ok {
			delete(lyric_languageInstancesToBeRemovedFromTheStage, lyric_language)
		}
	}

	// remove from stage and back repo's 3 maps all lyric_languages that are not in the checkout
	for lyric_language := range lyric_languageInstancesToBeRemovedFromTheStage {
		lyric_language.Unstage(backRepoLyric_language.GetStage())

		// remove instance from the back repo 3 maps
		lyric_languageID := backRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language]
		delete(backRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID, lyric_language)
		delete(backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB, lyric_languageID)
		delete(backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr, lyric_languageID)
	}

	return
}

// CheckoutPhaseOneInstance takes a lyric_languageDB that has been found in the DB, updates the backRepo and stages the
// models version of the lyric_languageDB
func (backRepoLyric_language *BackRepoLyric_languageStruct) CheckoutPhaseOneInstance(lyric_languageDB *Lyric_languageDB) (Error error) {

	lyric_language, ok := backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr[lyric_languageDB.ID]
	if !ok {
		lyric_language = new(models.Lyric_language)

		backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr[lyric_languageDB.ID] = lyric_language
		backRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language] = lyric_languageDB.ID

		// append model store with the new element
		lyric_language.Name = lyric_languageDB.Name_Data.String
		lyric_language.Stage(backRepoLyric_language.GetStage())
	}
	lyric_languageDB.CopyBasicFieldsToLyric_language(lyric_language)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	lyric_language.Stage(backRepoLyric_language.GetStage())

	// preserve pointer to lyric_languageDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Lyric_languageDBID_Lyric_languageDB)[lyric_languageDB hold variable pointers
	lyric_languageDB_Data := *lyric_languageDB
	preservedPtrToLyric_language := &lyric_languageDB_Data
	backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[lyric_languageDB.ID] = preservedPtrToLyric_language

	return
}

// BackRepoLyric_language.CheckoutPhaseTwo Checkouts all staged instances of Lyric_language to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_language *BackRepoLyric_languageStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lyric_languageDB := range backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB {
		backRepoLyric_language.CheckoutPhaseTwoInstance(backRepo, lyric_languageDB)
	}
	return
}

// BackRepoLyric_language.CheckoutPhaseTwoInstance Checkouts staged instances of Lyric_language to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_language *BackRepoLyric_languageStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lyric_languageDB *Lyric_languageDB) (Error error) {

	lyric_language := backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr[lyric_languageDB.ID]

	lyric_languageDB.DecodePointers(backRepo, lyric_language)

	return
}

func (lyric_languageDB *Lyric_languageDB) DecodePointers(backRepo *BackRepoStruct, lyric_language *models.Lyric_language) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLyric_language allows commit of a single lyric_language (if already staged)
func (backRepo *BackRepoStruct) CommitLyric_language(lyric_language *models.Lyric_language) {
	backRepo.BackRepoLyric_language.CommitPhaseOneInstance(lyric_language)
	if id, ok := backRepo.BackRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language]; ok {
		backRepo.BackRepoLyric_language.CommitPhaseTwoInstance(backRepo, id, lyric_language)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLyric_language allows checkout of a single lyric_language (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLyric_language(lyric_language *models.Lyric_language) {
	// check if the lyric_language is staged
	if _, ok := backRepo.BackRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language]; ok {

		if id, ok := backRepo.BackRepoLyric_language.Map_Lyric_languagePtr_Lyric_languageDBID[lyric_language]; ok {
			var lyric_languageDB Lyric_languageDB
			lyric_languageDB.ID = id

			if err := backRepo.BackRepoLyric_language.db.First(&lyric_languageDB, id).Error; err != nil {
				log.Fatalln("CheckoutLyric_language : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLyric_language.CheckoutPhaseOneInstance(&lyric_languageDB)
			backRepo.BackRepoLyric_language.CheckoutPhaseTwoInstance(backRepo, &lyric_languageDB)
		}
	}
}

// CopyBasicFieldsFromLyric_language
func (lyric_languageDB *Lyric_languageDB) CopyBasicFieldsFromLyric_language(lyric_language *models.Lyric_language) {
	// insertion point for fields commit

	lyric_languageDB.Name_Data.String = lyric_language.Name
	lyric_languageDB.Name_Data.Valid = true

	lyric_languageDB.EmptyString_Data.String = lyric_language.EmptyString
	lyric_languageDB.EmptyString_Data.Valid = true
}

// CopyBasicFieldsFromLyric_language_WOP
func (lyric_languageDB *Lyric_languageDB) CopyBasicFieldsFromLyric_language_WOP(lyric_language *models.Lyric_language_WOP) {
	// insertion point for fields commit

	lyric_languageDB.Name_Data.String = lyric_language.Name
	lyric_languageDB.Name_Data.Valid = true

	lyric_languageDB.EmptyString_Data.String = lyric_language.EmptyString
	lyric_languageDB.EmptyString_Data.Valid = true
}

// CopyBasicFieldsFromLyric_languageWOP
func (lyric_languageDB *Lyric_languageDB) CopyBasicFieldsFromLyric_languageWOP(lyric_language *Lyric_languageWOP) {
	// insertion point for fields commit

	lyric_languageDB.Name_Data.String = lyric_language.Name
	lyric_languageDB.Name_Data.Valid = true

	lyric_languageDB.EmptyString_Data.String = lyric_language.EmptyString
	lyric_languageDB.EmptyString_Data.Valid = true
}

// CopyBasicFieldsToLyric_language
func (lyric_languageDB *Lyric_languageDB) CopyBasicFieldsToLyric_language(lyric_language *models.Lyric_language) {
	// insertion point for checkout of basic fields (back repo to stage)
	lyric_language.Name = lyric_languageDB.Name_Data.String
	lyric_language.EmptyString = lyric_languageDB.EmptyString_Data.String
}

// CopyBasicFieldsToLyric_language_WOP
func (lyric_languageDB *Lyric_languageDB) CopyBasicFieldsToLyric_language_WOP(lyric_language *models.Lyric_language_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	lyric_language.Name = lyric_languageDB.Name_Data.String
	lyric_language.EmptyString = lyric_languageDB.EmptyString_Data.String
}

// CopyBasicFieldsToLyric_languageWOP
func (lyric_languageDB *Lyric_languageDB) CopyBasicFieldsToLyric_languageWOP(lyric_language *Lyric_languageWOP) {
	lyric_language.ID = int(lyric_languageDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	lyric_language.Name = lyric_languageDB.Name_Data.String
	lyric_language.EmptyString = lyric_languageDB.EmptyString_Data.String
}

// Backup generates a json file from a slice of all Lyric_languageDB instances in the backrepo
func (backRepoLyric_language *BackRepoLyric_languageStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Lyric_languageDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Lyric_languageDB, 0)
	for _, lyric_languageDB := range backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB {
		forBackup = append(forBackup, lyric_languageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Lyric_language ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Lyric_language file", err.Error())
	}
}

// Backup generates a json file from a slice of all Lyric_languageDB instances in the backrepo
func (backRepoLyric_language *BackRepoLyric_languageStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Lyric_languageDB, 0)
	for _, lyric_languageDB := range backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB {
		forBackup = append(forBackup, lyric_languageDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Lyric_language")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Lyric_language_Fields, -1)
	for _, lyric_languageDB := range forBackup {

		var lyric_languageWOP Lyric_languageWOP
		lyric_languageDB.CopyBasicFieldsToLyric_languageWOP(&lyric_languageWOP)

		row := sh.AddRow()
		row.WriteStruct(&lyric_languageWOP, -1)
	}
}

// RestoreXL from the "Lyric_language" sheet all Lyric_languageDB instances
func (backRepoLyric_language *BackRepoLyric_languageStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLyric_languageid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Lyric_language"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLyric_language.rowVisitorLyric_language)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLyric_language *BackRepoLyric_languageStruct) rowVisitorLyric_language(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var lyric_languageWOP Lyric_languageWOP
		row.ReadStruct(&lyric_languageWOP)

		// add the unmarshalled struct to the stage
		lyric_languageDB := new(Lyric_languageDB)
		lyric_languageDB.CopyBasicFieldsFromLyric_languageWOP(&lyric_languageWOP)

		lyric_languageDB_ID_atBackupTime := lyric_languageDB.ID
		lyric_languageDB.ID = 0
		query := backRepoLyric_language.db.Create(lyric_languageDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[lyric_languageDB.ID] = lyric_languageDB
		BackRepoLyric_languageid_atBckpTime_newID[lyric_languageDB_ID_atBackupTime] = lyric_languageDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Lyric_languageDB.json" in dirPath that stores an array
// of Lyric_languageDB and stores it in the database
// the map BackRepoLyric_languageid_atBckpTime_newID is updated accordingly
func (backRepoLyric_language *BackRepoLyric_languageStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLyric_languageid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Lyric_languageDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Lyric_language file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Lyric_languageDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Lyric_languageDBID_Lyric_languageDB
	for _, lyric_languageDB := range forRestore {

		lyric_languageDB_ID_atBackupTime := lyric_languageDB.ID
		lyric_languageDB.ID = 0
		query := backRepoLyric_language.db.Create(lyric_languageDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[lyric_languageDB.ID] = lyric_languageDB
		BackRepoLyric_languageid_atBckpTime_newID[lyric_languageDB_ID_atBackupTime] = lyric_languageDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Lyric_language file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Lyric_language>id_atBckpTime_newID
// to compute new index
func (backRepoLyric_language *BackRepoLyric_languageStruct) RestorePhaseTwo() {

	for _, lyric_languageDB := range backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB {

		// next line of code is to avert unused variable compilation error
		_ = lyric_languageDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLyric_language.db.Model(lyric_languageDB).Updates(*lyric_languageDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLyric_language.ResetReversePointers commits all staged instances of Lyric_language to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_language *BackRepoLyric_languageStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, lyric_language := range backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languagePtr {
		backRepoLyric_language.ResetReversePointersInstance(backRepo, idx, lyric_language)
	}

	return
}

func (backRepoLyric_language *BackRepoLyric_languageStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, lyric_language *models.Lyric_language) (Error error) {

	// fetch matching lyric_languageDB
	if lyric_languageDB, ok := backRepoLyric_language.Map_Lyric_languageDBID_Lyric_languageDB[idx]; ok {
		_ = lyric_languageDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLyric_languageid_atBckpTime_newID map[uint]uint
