// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Coda_sql sql.NullBool
var dummy_Coda_time time.Duration
var dummy_Coda_sort sort.Float64Slice

// CodaAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model codaAPI
type CodaAPI struct {
	gorm.Model

	models.Coda_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CodaPointersEncoding CodaPointersEncoding
}

// CodaPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CodaPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CodaDB describes a coda in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model codaDB
type CodaDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field codaDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CodaPointersEncoding
}

// CodaDBs arrays codaDBs
// swagger:response codaDBsResponse
type CodaDBs []CodaDB

// CodaDBResponse provides response
// swagger:response codaDBResponse
type CodaDBResponse struct {
	CodaDB
}

// CodaWOP is a Coda without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CodaWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Coda_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoCodaStruct struct {
	// stores CodaDB according to their gorm ID
	Map_CodaDBID_CodaDB map[uint]*CodaDB

	// stores CodaDB ID according to Coda address
	Map_CodaPtr_CodaDBID map[*models.Coda]uint

	// stores Coda according to their gorm ID
	Map_CodaDBID_CodaPtr map[uint]*models.Coda

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCoda *BackRepoCodaStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCoda.stage
	return
}

func (backRepoCoda *BackRepoCodaStruct) GetDB() *gorm.DB {
	return backRepoCoda.db
}

// GetCodaDBFromCodaPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCoda *BackRepoCodaStruct) GetCodaDBFromCodaPtr(coda *models.Coda) (codaDB *CodaDB) {
	id := backRepoCoda.Map_CodaPtr_CodaDBID[coda]
	codaDB = backRepoCoda.Map_CodaDBID_CodaDB[id]
	return
}

// BackRepoCoda.CommitPhaseOne commits all staged instances of Coda to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCoda *BackRepoCodaStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for coda := range stage.Codas {
		backRepoCoda.CommitPhaseOneInstance(coda)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, coda := range backRepoCoda.Map_CodaDBID_CodaPtr {
		if _, ok := stage.Codas[coda]; !ok {
			backRepoCoda.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCoda.CommitDeleteInstance commits deletion of Coda to the BackRepo
func (backRepoCoda *BackRepoCodaStruct) CommitDeleteInstance(id uint) (Error error) {

	coda := backRepoCoda.Map_CodaDBID_CodaPtr[id]

	// coda is not staged anymore, remove codaDB
	codaDB := backRepoCoda.Map_CodaDBID_CodaDB[id]
	query := backRepoCoda.db.Unscoped().Delete(&codaDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCoda.Map_CodaPtr_CodaDBID, coda)
	delete(backRepoCoda.Map_CodaDBID_CodaPtr, id)
	delete(backRepoCoda.Map_CodaDBID_CodaDB, id)

	return
}

// BackRepoCoda.CommitPhaseOneInstance commits coda staged instances of Coda to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCoda *BackRepoCodaStruct) CommitPhaseOneInstance(coda *models.Coda) (Error error) {

	// check if the coda is not commited yet
	if _, ok := backRepoCoda.Map_CodaPtr_CodaDBID[coda]; ok {
		return
	}

	// initiate coda
	var codaDB CodaDB
	codaDB.CopyBasicFieldsFromCoda(coda)

	query := backRepoCoda.db.Create(&codaDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCoda.Map_CodaPtr_CodaDBID[coda] = codaDB.ID
	backRepoCoda.Map_CodaDBID_CodaPtr[codaDB.ID] = coda
	backRepoCoda.Map_CodaDBID_CodaDB[codaDB.ID] = &codaDB

	return
}

// BackRepoCoda.CommitPhaseTwo commits all staged instances of Coda to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCoda *BackRepoCodaStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, coda := range backRepoCoda.Map_CodaDBID_CodaPtr {
		backRepoCoda.CommitPhaseTwoInstance(backRepo, idx, coda)
	}

	return
}

// BackRepoCoda.CommitPhaseTwoInstance commits {{structname }} of models.Coda to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCoda *BackRepoCodaStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, coda *models.Coda) (Error error) {

	// fetch matching codaDB
	if codaDB, ok := backRepoCoda.Map_CodaDBID_CodaDB[idx]; ok {

		codaDB.CopyBasicFieldsFromCoda(coda)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCoda.db.Save(&codaDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Coda intance %s", coda.Name))
		return err
	}

	return
}

// BackRepoCoda.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCoda *BackRepoCodaStruct) CheckoutPhaseOne() (Error error) {

	codaDBArray := make([]CodaDB, 0)
	query := backRepoCoda.db.Find(&codaDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	codaInstancesToBeRemovedFromTheStage := make(map[*models.Coda]any)
	for key, value := range backRepoCoda.stage.Codas {
		codaInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, codaDB := range codaDBArray {
		backRepoCoda.CheckoutPhaseOneInstance(&codaDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		coda, ok := backRepoCoda.Map_CodaDBID_CodaPtr[codaDB.ID]
		if ok {
			delete(codaInstancesToBeRemovedFromTheStage, coda)
		}
	}

	// remove from stage and back repo's 3 maps all codas that are not in the checkout
	for coda := range codaInstancesToBeRemovedFromTheStage {
		coda.Unstage(backRepoCoda.GetStage())

		// remove instance from the back repo 3 maps
		codaID := backRepoCoda.Map_CodaPtr_CodaDBID[coda]
		delete(backRepoCoda.Map_CodaPtr_CodaDBID, coda)
		delete(backRepoCoda.Map_CodaDBID_CodaDB, codaID)
		delete(backRepoCoda.Map_CodaDBID_CodaPtr, codaID)
	}

	return
}

// CheckoutPhaseOneInstance takes a codaDB that has been found in the DB, updates the backRepo and stages the
// models version of the codaDB
func (backRepoCoda *BackRepoCodaStruct) CheckoutPhaseOneInstance(codaDB *CodaDB) (Error error) {

	coda, ok := backRepoCoda.Map_CodaDBID_CodaPtr[codaDB.ID]
	if !ok {
		coda = new(models.Coda)

		backRepoCoda.Map_CodaDBID_CodaPtr[codaDB.ID] = coda
		backRepoCoda.Map_CodaPtr_CodaDBID[coda] = codaDB.ID

		// append model store with the new element
		coda.Name = codaDB.Name_Data.String
		coda.Stage(backRepoCoda.GetStage())
	}
	codaDB.CopyBasicFieldsToCoda(coda)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	coda.Stage(backRepoCoda.GetStage())

	// preserve pointer to codaDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CodaDBID_CodaDB)[codaDB hold variable pointers
	codaDB_Data := *codaDB
	preservedPtrToCoda := &codaDB_Data
	backRepoCoda.Map_CodaDBID_CodaDB[codaDB.ID] = preservedPtrToCoda

	return
}

// BackRepoCoda.CheckoutPhaseTwo Checkouts all staged instances of Coda to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCoda *BackRepoCodaStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, codaDB := range backRepoCoda.Map_CodaDBID_CodaDB {
		backRepoCoda.CheckoutPhaseTwoInstance(backRepo, codaDB)
	}
	return
}

// BackRepoCoda.CheckoutPhaseTwoInstance Checkouts staged instances of Coda to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCoda *BackRepoCodaStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, codaDB *CodaDB) (Error error) {

	coda := backRepoCoda.Map_CodaDBID_CodaPtr[codaDB.ID]

	codaDB.DecodePointers(backRepo, coda)

	return
}

func (codaDB *CodaDB) DecodePointers(backRepo *BackRepoStruct, coda *models.Coda) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCoda allows commit of a single coda (if already staged)
func (backRepo *BackRepoStruct) CommitCoda(coda *models.Coda) {
	backRepo.BackRepoCoda.CommitPhaseOneInstance(coda)
	if id, ok := backRepo.BackRepoCoda.Map_CodaPtr_CodaDBID[coda]; ok {
		backRepo.BackRepoCoda.CommitPhaseTwoInstance(backRepo, id, coda)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCoda allows checkout of a single coda (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCoda(coda *models.Coda) {
	// check if the coda is staged
	if _, ok := backRepo.BackRepoCoda.Map_CodaPtr_CodaDBID[coda]; ok {

		if id, ok := backRepo.BackRepoCoda.Map_CodaPtr_CodaDBID[coda]; ok {
			var codaDB CodaDB
			codaDB.ID = id

			if err := backRepo.BackRepoCoda.db.First(&codaDB, id).Error; err != nil {
				log.Fatalln("CheckoutCoda : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCoda.CheckoutPhaseOneInstance(&codaDB)
			backRepo.BackRepoCoda.CheckoutPhaseTwoInstance(backRepo, &codaDB)
		}
	}
}

// CopyBasicFieldsFromCoda
func (codaDB *CodaDB) CopyBasicFieldsFromCoda(coda *models.Coda) {
	// insertion point for fields commit

	codaDB.Name_Data.String = coda.Name
	codaDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCoda_WOP
func (codaDB *CodaDB) CopyBasicFieldsFromCoda_WOP(coda *models.Coda_WOP) {
	// insertion point for fields commit

	codaDB.Name_Data.String = coda.Name
	codaDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCodaWOP
func (codaDB *CodaDB) CopyBasicFieldsFromCodaWOP(coda *CodaWOP) {
	// insertion point for fields commit

	codaDB.Name_Data.String = coda.Name
	codaDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCoda
func (codaDB *CodaDB) CopyBasicFieldsToCoda(coda *models.Coda) {
	// insertion point for checkout of basic fields (back repo to stage)
	coda.Name = codaDB.Name_Data.String
}

// CopyBasicFieldsToCoda_WOP
func (codaDB *CodaDB) CopyBasicFieldsToCoda_WOP(coda *models.Coda_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	coda.Name = codaDB.Name_Data.String
}

// CopyBasicFieldsToCodaWOP
func (codaDB *CodaDB) CopyBasicFieldsToCodaWOP(coda *CodaWOP) {
	coda.ID = int(codaDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	coda.Name = codaDB.Name_Data.String
}

// Backup generates a json file from a slice of all CodaDB instances in the backrepo
func (backRepoCoda *BackRepoCodaStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CodaDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CodaDB, 0)
	for _, codaDB := range backRepoCoda.Map_CodaDBID_CodaDB {
		forBackup = append(forBackup, codaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Coda ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Coda file", err.Error())
	}
}

// Backup generates a json file from a slice of all CodaDB instances in the backrepo
func (backRepoCoda *BackRepoCodaStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CodaDB, 0)
	for _, codaDB := range backRepoCoda.Map_CodaDBID_CodaDB {
		forBackup = append(forBackup, codaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Coda")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Coda_Fields, -1)
	for _, codaDB := range forBackup {

		var codaWOP CodaWOP
		codaDB.CopyBasicFieldsToCodaWOP(&codaWOP)

		row := sh.AddRow()
		row.WriteStruct(&codaWOP, -1)
	}
}

// RestoreXL from the "Coda" sheet all CodaDB instances
func (backRepoCoda *BackRepoCodaStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCodaid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Coda"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCoda.rowVisitorCoda)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCoda *BackRepoCodaStruct) rowVisitorCoda(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var codaWOP CodaWOP
		row.ReadStruct(&codaWOP)

		// add the unmarshalled struct to the stage
		codaDB := new(CodaDB)
		codaDB.CopyBasicFieldsFromCodaWOP(&codaWOP)

		codaDB_ID_atBackupTime := codaDB.ID
		codaDB.ID = 0
		query := backRepoCoda.db.Create(codaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCoda.Map_CodaDBID_CodaDB[codaDB.ID] = codaDB
		BackRepoCodaid_atBckpTime_newID[codaDB_ID_atBackupTime] = codaDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CodaDB.json" in dirPath that stores an array
// of CodaDB and stores it in the database
// the map BackRepoCodaid_atBckpTime_newID is updated accordingly
func (backRepoCoda *BackRepoCodaStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCodaid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CodaDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Coda file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CodaDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CodaDBID_CodaDB
	for _, codaDB := range forRestore {

		codaDB_ID_atBackupTime := codaDB.ID
		codaDB.ID = 0
		query := backRepoCoda.db.Create(codaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCoda.Map_CodaDBID_CodaDB[codaDB.ID] = codaDB
		BackRepoCodaid_atBckpTime_newID[codaDB_ID_atBackupTime] = codaDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Coda file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Coda>id_atBckpTime_newID
// to compute new index
func (backRepoCoda *BackRepoCodaStruct) RestorePhaseTwo() {

	for _, codaDB := range backRepoCoda.Map_CodaDBID_CodaDB {

		// next line of code is to avert unused variable compilation error
		_ = codaDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCoda.db.Model(codaDB).Updates(*codaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCoda.ResetReversePointers commits all staged instances of Coda to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCoda *BackRepoCodaStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, coda := range backRepoCoda.Map_CodaDBID_CodaPtr {
		backRepoCoda.ResetReversePointersInstance(backRepo, idx, coda)
	}

	return
}

func (backRepoCoda *BackRepoCodaStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, coda *models.Coda) (Error error) {

	// fetch matching codaDB
	if codaDB, ok := backRepoCoda.Map_CodaDBID_CodaDB[idx]; ok {
		_ = codaDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCodaid_atBckpTime_newID map[uint]uint
