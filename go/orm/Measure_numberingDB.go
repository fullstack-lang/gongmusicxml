// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Measure_numbering_sql sql.NullBool
var dummy_Measure_numbering_time time.Duration
var dummy_Measure_numbering_sort sort.Float64Slice

// Measure_numberingAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model measure_numberingAPI
type Measure_numberingAPI struct {
	gorm.Model

	models.Measure_numbering_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Measure_numberingPointersEncoding Measure_numberingPointersEncoding
}

// Measure_numberingPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Measure_numberingPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Measure_numberingDB describes a measure_numbering in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model measure_numberingDB
type Measure_numberingDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field measure_numberingDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Measure_numberingPointersEncoding
}

// Measure_numberingDBs arrays measure_numberingDBs
// swagger:response measure_numberingDBsResponse
type Measure_numberingDBs []Measure_numberingDB

// Measure_numberingDBResponse provides response
// swagger:response measure_numberingDBResponse
type Measure_numberingDBResponse struct {
	Measure_numberingDB
}

// Measure_numberingWOP is a Measure_numbering without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Measure_numberingWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Measure_numbering_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMeasure_numberingStruct struct {
	// stores Measure_numberingDB according to their gorm ID
	Map_Measure_numberingDBID_Measure_numberingDB map[uint]*Measure_numberingDB

	// stores Measure_numberingDB ID according to Measure_numbering address
	Map_Measure_numberingPtr_Measure_numberingDBID map[*models.Measure_numbering]uint

	// stores Measure_numbering according to their gorm ID
	Map_Measure_numberingDBID_Measure_numberingPtr map[uint]*models.Measure_numbering

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMeasure_numbering.stage
	return
}

func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) GetDB() *gorm.DB {
	return backRepoMeasure_numbering.db
}

// GetMeasure_numberingDBFromMeasure_numberingPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) GetMeasure_numberingDBFromMeasure_numberingPtr(measure_numbering *models.Measure_numbering) (measure_numberingDB *Measure_numberingDB) {
	id := backRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering]
	measure_numberingDB = backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[id]
	return
}

// BackRepoMeasure_numbering.CommitPhaseOne commits all staged instances of Measure_numbering to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for measure_numbering := range stage.Measure_numberings {
		backRepoMeasure_numbering.CommitPhaseOneInstance(measure_numbering)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, measure_numbering := range backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr {
		if _, ok := stage.Measure_numberings[measure_numbering]; !ok {
			backRepoMeasure_numbering.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMeasure_numbering.CommitDeleteInstance commits deletion of Measure_numbering to the BackRepo
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CommitDeleteInstance(id uint) (Error error) {

	measure_numbering := backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr[id]

	// measure_numbering is not staged anymore, remove measure_numberingDB
	measure_numberingDB := backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[id]
	query := backRepoMeasure_numbering.db.Unscoped().Delete(&measure_numberingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID, measure_numbering)
	delete(backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr, id)
	delete(backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB, id)

	return
}

// BackRepoMeasure_numbering.CommitPhaseOneInstance commits measure_numbering staged instances of Measure_numbering to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CommitPhaseOneInstance(measure_numbering *models.Measure_numbering) (Error error) {

	// check if the measure_numbering is not commited yet
	if _, ok := backRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering]; ok {
		return
	}

	// initiate measure_numbering
	var measure_numberingDB Measure_numberingDB
	measure_numberingDB.CopyBasicFieldsFromMeasure_numbering(measure_numbering)

	query := backRepoMeasure_numbering.db.Create(&measure_numberingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering] = measure_numberingDB.ID
	backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr[measure_numberingDB.ID] = measure_numbering
	backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[measure_numberingDB.ID] = &measure_numberingDB

	return
}

// BackRepoMeasure_numbering.CommitPhaseTwo commits all staged instances of Measure_numbering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_numbering := range backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr {
		backRepoMeasure_numbering.CommitPhaseTwoInstance(backRepo, idx, measure_numbering)
	}

	return
}

// BackRepoMeasure_numbering.CommitPhaseTwoInstance commits {{structname }} of models.Measure_numbering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, measure_numbering *models.Measure_numbering) (Error error) {

	// fetch matching measure_numberingDB
	if measure_numberingDB, ok := backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[idx]; ok {

		measure_numberingDB.CopyBasicFieldsFromMeasure_numbering(measure_numbering)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMeasure_numbering.db.Save(&measure_numberingDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Measure_numbering intance %s", measure_numbering.Name))
		return err
	}

	return
}

// BackRepoMeasure_numbering.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CheckoutPhaseOne() (Error error) {

	measure_numberingDBArray := make([]Measure_numberingDB, 0)
	query := backRepoMeasure_numbering.db.Find(&measure_numberingDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	measure_numberingInstancesToBeRemovedFromTheStage := make(map[*models.Measure_numbering]any)
	for key, value := range backRepoMeasure_numbering.stage.Measure_numberings {
		measure_numberingInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, measure_numberingDB := range measure_numberingDBArray {
		backRepoMeasure_numbering.CheckoutPhaseOneInstance(&measure_numberingDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		measure_numbering, ok := backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr[measure_numberingDB.ID]
		if ok {
			delete(measure_numberingInstancesToBeRemovedFromTheStage, measure_numbering)
		}
	}

	// remove from stage and back repo's 3 maps all measure_numberings that are not in the checkout
	for measure_numbering := range measure_numberingInstancesToBeRemovedFromTheStage {
		measure_numbering.Unstage(backRepoMeasure_numbering.GetStage())

		// remove instance from the back repo 3 maps
		measure_numberingID := backRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering]
		delete(backRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID, measure_numbering)
		delete(backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB, measure_numberingID)
		delete(backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr, measure_numberingID)
	}

	return
}

// CheckoutPhaseOneInstance takes a measure_numberingDB that has been found in the DB, updates the backRepo and stages the
// models version of the measure_numberingDB
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CheckoutPhaseOneInstance(measure_numberingDB *Measure_numberingDB) (Error error) {

	measure_numbering, ok := backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr[measure_numberingDB.ID]
	if !ok {
		measure_numbering = new(models.Measure_numbering)

		backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr[measure_numberingDB.ID] = measure_numbering
		backRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering] = measure_numberingDB.ID

		// append model store with the new element
		measure_numbering.Name = measure_numberingDB.Name_Data.String
		measure_numbering.Stage(backRepoMeasure_numbering.GetStage())
	}
	measure_numberingDB.CopyBasicFieldsToMeasure_numbering(measure_numbering)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	measure_numbering.Stage(backRepoMeasure_numbering.GetStage())

	// preserve pointer to measure_numberingDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Measure_numberingDBID_Measure_numberingDB)[measure_numberingDB hold variable pointers
	measure_numberingDB_Data := *measure_numberingDB
	preservedPtrToMeasure_numbering := &measure_numberingDB_Data
	backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[measure_numberingDB.ID] = preservedPtrToMeasure_numbering

	return
}

// BackRepoMeasure_numbering.CheckoutPhaseTwo Checkouts all staged instances of Measure_numbering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, measure_numberingDB := range backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB {
		backRepoMeasure_numbering.CheckoutPhaseTwoInstance(backRepo, measure_numberingDB)
	}
	return
}

// BackRepoMeasure_numbering.CheckoutPhaseTwoInstance Checkouts staged instances of Measure_numbering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, measure_numberingDB *Measure_numberingDB) (Error error) {

	measure_numbering := backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr[measure_numberingDB.ID]

	measure_numberingDB.DecodePointers(backRepo, measure_numbering)

	return
}

func (measure_numberingDB *Measure_numberingDB) DecodePointers(backRepo *BackRepoStruct, measure_numbering *models.Measure_numbering) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMeasure_numbering allows commit of a single measure_numbering (if already staged)
func (backRepo *BackRepoStruct) CommitMeasure_numbering(measure_numbering *models.Measure_numbering) {
	backRepo.BackRepoMeasure_numbering.CommitPhaseOneInstance(measure_numbering)
	if id, ok := backRepo.BackRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering]; ok {
		backRepo.BackRepoMeasure_numbering.CommitPhaseTwoInstance(backRepo, id, measure_numbering)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMeasure_numbering allows checkout of a single measure_numbering (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMeasure_numbering(measure_numbering *models.Measure_numbering) {
	// check if the measure_numbering is staged
	if _, ok := backRepo.BackRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering]; ok {

		if id, ok := backRepo.BackRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[measure_numbering]; ok {
			var measure_numberingDB Measure_numberingDB
			measure_numberingDB.ID = id

			if err := backRepo.BackRepoMeasure_numbering.db.First(&measure_numberingDB, id).Error; err != nil {
				log.Fatalln("CheckoutMeasure_numbering : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMeasure_numbering.CheckoutPhaseOneInstance(&measure_numberingDB)
			backRepo.BackRepoMeasure_numbering.CheckoutPhaseTwoInstance(backRepo, &measure_numberingDB)
		}
	}
}

// CopyBasicFieldsFromMeasure_numbering
func (measure_numberingDB *Measure_numberingDB) CopyBasicFieldsFromMeasure_numbering(measure_numbering *models.Measure_numbering) {
	// insertion point for fields commit

	measure_numberingDB.Name_Data.String = measure_numbering.Name
	measure_numberingDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_numbering_WOP
func (measure_numberingDB *Measure_numberingDB) CopyBasicFieldsFromMeasure_numbering_WOP(measure_numbering *models.Measure_numbering_WOP) {
	// insertion point for fields commit

	measure_numberingDB.Name_Data.String = measure_numbering.Name
	measure_numberingDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_numberingWOP
func (measure_numberingDB *Measure_numberingDB) CopyBasicFieldsFromMeasure_numberingWOP(measure_numbering *Measure_numberingWOP) {
	// insertion point for fields commit

	measure_numberingDB.Name_Data.String = measure_numbering.Name
	measure_numberingDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMeasure_numbering
func (measure_numberingDB *Measure_numberingDB) CopyBasicFieldsToMeasure_numbering(measure_numbering *models.Measure_numbering) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_numbering.Name = measure_numberingDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_numbering_WOP
func (measure_numberingDB *Measure_numberingDB) CopyBasicFieldsToMeasure_numbering_WOP(measure_numbering *models.Measure_numbering_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_numbering.Name = measure_numberingDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_numberingWOP
func (measure_numberingDB *Measure_numberingDB) CopyBasicFieldsToMeasure_numberingWOP(measure_numbering *Measure_numberingWOP) {
	measure_numbering.ID = int(measure_numberingDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	measure_numbering.Name = measure_numberingDB.Name_Data.String
}

// Backup generates a json file from a slice of all Measure_numberingDB instances in the backrepo
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Measure_numberingDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_numberingDB, 0)
	for _, measure_numberingDB := range backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB {
		forBackup = append(forBackup, measure_numberingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Measure_numbering ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Measure_numbering file", err.Error())
	}
}

// Backup generates a json file from a slice of all Measure_numberingDB instances in the backrepo
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_numberingDB, 0)
	for _, measure_numberingDB := range backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB {
		forBackup = append(forBackup, measure_numberingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Measure_numbering")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Measure_numbering_Fields, -1)
	for _, measure_numberingDB := range forBackup {

		var measure_numberingWOP Measure_numberingWOP
		measure_numberingDB.CopyBasicFieldsToMeasure_numberingWOP(&measure_numberingWOP)

		row := sh.AddRow()
		row.WriteStruct(&measure_numberingWOP, -1)
	}
}

// RestoreXL from the "Measure_numbering" sheet all Measure_numberingDB instances
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMeasure_numberingid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Measure_numbering"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMeasure_numbering.rowVisitorMeasure_numbering)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) rowVisitorMeasure_numbering(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var measure_numberingWOP Measure_numberingWOP
		row.ReadStruct(&measure_numberingWOP)

		// add the unmarshalled struct to the stage
		measure_numberingDB := new(Measure_numberingDB)
		measure_numberingDB.CopyBasicFieldsFromMeasure_numberingWOP(&measure_numberingWOP)

		measure_numberingDB_ID_atBackupTime := measure_numberingDB.ID
		measure_numberingDB.ID = 0
		query := backRepoMeasure_numbering.db.Create(measure_numberingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[measure_numberingDB.ID] = measure_numberingDB
		BackRepoMeasure_numberingid_atBckpTime_newID[measure_numberingDB_ID_atBackupTime] = measure_numberingDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Measure_numberingDB.json" in dirPath that stores an array
// of Measure_numberingDB and stores it in the database
// the map BackRepoMeasure_numberingid_atBckpTime_newID is updated accordingly
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMeasure_numberingid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Measure_numberingDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Measure_numbering file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Measure_numberingDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Measure_numberingDBID_Measure_numberingDB
	for _, measure_numberingDB := range forRestore {

		measure_numberingDB_ID_atBackupTime := measure_numberingDB.ID
		measure_numberingDB.ID = 0
		query := backRepoMeasure_numbering.db.Create(measure_numberingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[measure_numberingDB.ID] = measure_numberingDB
		BackRepoMeasure_numberingid_atBckpTime_newID[measure_numberingDB_ID_atBackupTime] = measure_numberingDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Measure_numbering file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Measure_numbering>id_atBckpTime_newID
// to compute new index
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) RestorePhaseTwo() {

	for _, measure_numberingDB := range backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB {

		// next line of code is to avert unused variable compilation error
		_ = measure_numberingDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMeasure_numbering.db.Model(measure_numberingDB).Updates(*measure_numberingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMeasure_numbering.ResetReversePointers commits all staged instances of Measure_numbering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_numbering := range backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr {
		backRepoMeasure_numbering.ResetReversePointersInstance(backRepo, idx, measure_numbering)
	}

	return
}

func (backRepoMeasure_numbering *BackRepoMeasure_numberingStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, measure_numbering *models.Measure_numbering) (Error error) {

	// fetch matching measure_numberingDB
	if measure_numberingDB, ok := backRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingDB[idx]; ok {
		_ = measure_numberingDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMeasure_numberingid_atBckpTime_newID map[uint]uint
