// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Elision_sql sql.NullBool
var dummy_Elision_time time.Duration
var dummy_Elision_sort sort.Float64Slice

// ElisionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model elisionAPI
type ElisionAPI struct {
	gorm.Model

	models.Elision_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ElisionPointersEncoding ElisionPointersEncoding
}

// ElisionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ElisionPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ElisionDB describes a elision in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model elisionDB
type ElisionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field elisionDB.Name
	Name_Data sql.NullString

	// Declation for basic field elisionDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ElisionPointersEncoding
}

// ElisionDBs arrays elisionDBs
// swagger:response elisionDBsResponse
type ElisionDBs []ElisionDB

// ElisionDBResponse provides response
// swagger:response elisionDBResponse
type ElisionDBResponse struct {
	ElisionDB
}

// ElisionWOP is a Elision without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ElisionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Elision_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoElisionStruct struct {
	// stores ElisionDB according to their gorm ID
	Map_ElisionDBID_ElisionDB map[uint]*ElisionDB

	// stores ElisionDB ID according to Elision address
	Map_ElisionPtr_ElisionDBID map[*models.Elision]uint

	// stores Elision according to their gorm ID
	Map_ElisionDBID_ElisionPtr map[uint]*models.Elision

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoElision *BackRepoElisionStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoElision.stage
	return
}

func (backRepoElision *BackRepoElisionStruct) GetDB() *gorm.DB {
	return backRepoElision.db
}

// GetElisionDBFromElisionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoElision *BackRepoElisionStruct) GetElisionDBFromElisionPtr(elision *models.Elision) (elisionDB *ElisionDB) {
	id := backRepoElision.Map_ElisionPtr_ElisionDBID[elision]
	elisionDB = backRepoElision.Map_ElisionDBID_ElisionDB[id]
	return
}

// BackRepoElision.CommitPhaseOne commits all staged instances of Elision to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElision *BackRepoElisionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for elision := range stage.Elisions {
		backRepoElision.CommitPhaseOneInstance(elision)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, elision := range backRepoElision.Map_ElisionDBID_ElisionPtr {
		if _, ok := stage.Elisions[elision]; !ok {
			backRepoElision.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoElision.CommitDeleteInstance commits deletion of Elision to the BackRepo
func (backRepoElision *BackRepoElisionStruct) CommitDeleteInstance(id uint) (Error error) {

	elision := backRepoElision.Map_ElisionDBID_ElisionPtr[id]

	// elision is not staged anymore, remove elisionDB
	elisionDB := backRepoElision.Map_ElisionDBID_ElisionDB[id]
	query := backRepoElision.db.Unscoped().Delete(&elisionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoElision.Map_ElisionPtr_ElisionDBID, elision)
	delete(backRepoElision.Map_ElisionDBID_ElisionPtr, id)
	delete(backRepoElision.Map_ElisionDBID_ElisionDB, id)

	return
}

// BackRepoElision.CommitPhaseOneInstance commits elision staged instances of Elision to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElision *BackRepoElisionStruct) CommitPhaseOneInstance(elision *models.Elision) (Error error) {

	// check if the elision is not commited yet
	if _, ok := backRepoElision.Map_ElisionPtr_ElisionDBID[elision]; ok {
		return
	}

	// initiate elision
	var elisionDB ElisionDB
	elisionDB.CopyBasicFieldsFromElision(elision)

	query := backRepoElision.db.Create(&elisionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoElision.Map_ElisionPtr_ElisionDBID[elision] = elisionDB.ID
	backRepoElision.Map_ElisionDBID_ElisionPtr[elisionDB.ID] = elision
	backRepoElision.Map_ElisionDBID_ElisionDB[elisionDB.ID] = &elisionDB

	return
}

// BackRepoElision.CommitPhaseTwo commits all staged instances of Elision to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElision *BackRepoElisionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, elision := range backRepoElision.Map_ElisionDBID_ElisionPtr {
		backRepoElision.CommitPhaseTwoInstance(backRepo, idx, elision)
	}

	return
}

// BackRepoElision.CommitPhaseTwoInstance commits {{structname }} of models.Elision to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElision *BackRepoElisionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, elision *models.Elision) (Error error) {

	// fetch matching elisionDB
	if elisionDB, ok := backRepoElision.Map_ElisionDBID_ElisionDB[idx]; ok {

		elisionDB.CopyBasicFieldsFromElision(elision)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoElision.db.Save(&elisionDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Elision intance %s", elision.Name))
		return err
	}

	return
}

// BackRepoElision.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoElision *BackRepoElisionStruct) CheckoutPhaseOne() (Error error) {

	elisionDBArray := make([]ElisionDB, 0)
	query := backRepoElision.db.Find(&elisionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	elisionInstancesToBeRemovedFromTheStage := make(map[*models.Elision]any)
	for key, value := range backRepoElision.stage.Elisions {
		elisionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, elisionDB := range elisionDBArray {
		backRepoElision.CheckoutPhaseOneInstance(&elisionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		elision, ok := backRepoElision.Map_ElisionDBID_ElisionPtr[elisionDB.ID]
		if ok {
			delete(elisionInstancesToBeRemovedFromTheStage, elision)
		}
	}

	// remove from stage and back repo's 3 maps all elisions that are not in the checkout
	for elision := range elisionInstancesToBeRemovedFromTheStage {
		elision.Unstage(backRepoElision.GetStage())

		// remove instance from the back repo 3 maps
		elisionID := backRepoElision.Map_ElisionPtr_ElisionDBID[elision]
		delete(backRepoElision.Map_ElisionPtr_ElisionDBID, elision)
		delete(backRepoElision.Map_ElisionDBID_ElisionDB, elisionID)
		delete(backRepoElision.Map_ElisionDBID_ElisionPtr, elisionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a elisionDB that has been found in the DB, updates the backRepo and stages the
// models version of the elisionDB
func (backRepoElision *BackRepoElisionStruct) CheckoutPhaseOneInstance(elisionDB *ElisionDB) (Error error) {

	elision, ok := backRepoElision.Map_ElisionDBID_ElisionPtr[elisionDB.ID]
	if !ok {
		elision = new(models.Elision)

		backRepoElision.Map_ElisionDBID_ElisionPtr[elisionDB.ID] = elision
		backRepoElision.Map_ElisionPtr_ElisionDBID[elision] = elisionDB.ID

		// append model store with the new element
		elision.Name = elisionDB.Name_Data.String
		elision.Stage(backRepoElision.GetStage())
	}
	elisionDB.CopyBasicFieldsToElision(elision)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	elision.Stage(backRepoElision.GetStage())

	// preserve pointer to elisionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ElisionDBID_ElisionDB)[elisionDB hold variable pointers
	elisionDB_Data := *elisionDB
	preservedPtrToElision := &elisionDB_Data
	backRepoElision.Map_ElisionDBID_ElisionDB[elisionDB.ID] = preservedPtrToElision

	return
}

// BackRepoElision.CheckoutPhaseTwo Checkouts all staged instances of Elision to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElision *BackRepoElisionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, elisionDB := range backRepoElision.Map_ElisionDBID_ElisionDB {
		backRepoElision.CheckoutPhaseTwoInstance(backRepo, elisionDB)
	}
	return
}

// BackRepoElision.CheckoutPhaseTwoInstance Checkouts staged instances of Elision to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElision *BackRepoElisionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, elisionDB *ElisionDB) (Error error) {

	elision := backRepoElision.Map_ElisionDBID_ElisionPtr[elisionDB.ID]

	elisionDB.DecodePointers(backRepo, elision)

	return
}

func (elisionDB *ElisionDB) DecodePointers(backRepo *BackRepoStruct, elision *models.Elision) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitElision allows commit of a single elision (if already staged)
func (backRepo *BackRepoStruct) CommitElision(elision *models.Elision) {
	backRepo.BackRepoElision.CommitPhaseOneInstance(elision)
	if id, ok := backRepo.BackRepoElision.Map_ElisionPtr_ElisionDBID[elision]; ok {
		backRepo.BackRepoElision.CommitPhaseTwoInstance(backRepo, id, elision)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitElision allows checkout of a single elision (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutElision(elision *models.Elision) {
	// check if the elision is staged
	if _, ok := backRepo.BackRepoElision.Map_ElisionPtr_ElisionDBID[elision]; ok {

		if id, ok := backRepo.BackRepoElision.Map_ElisionPtr_ElisionDBID[elision]; ok {
			var elisionDB ElisionDB
			elisionDB.ID = id

			if err := backRepo.BackRepoElision.db.First(&elisionDB, id).Error; err != nil {
				log.Fatalln("CheckoutElision : Problem with getting object with id:", id)
			}
			backRepo.BackRepoElision.CheckoutPhaseOneInstance(&elisionDB)
			backRepo.BackRepoElision.CheckoutPhaseTwoInstance(backRepo, &elisionDB)
		}
	}
}

// CopyBasicFieldsFromElision
func (elisionDB *ElisionDB) CopyBasicFieldsFromElision(elision *models.Elision) {
	// insertion point for fields commit

	elisionDB.Name_Data.String = elision.Name
	elisionDB.Name_Data.Valid = true

	elisionDB.Value_Data.String = elision.Value
	elisionDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromElision_WOP
func (elisionDB *ElisionDB) CopyBasicFieldsFromElision_WOP(elision *models.Elision_WOP) {
	// insertion point for fields commit

	elisionDB.Name_Data.String = elision.Name
	elisionDB.Name_Data.Valid = true

	elisionDB.Value_Data.String = elision.Value
	elisionDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromElisionWOP
func (elisionDB *ElisionDB) CopyBasicFieldsFromElisionWOP(elision *ElisionWOP) {
	// insertion point for fields commit

	elisionDB.Name_Data.String = elision.Name
	elisionDB.Name_Data.Valid = true

	elisionDB.Value_Data.String = elision.Value
	elisionDB.Value_Data.Valid = true
}

// CopyBasicFieldsToElision
func (elisionDB *ElisionDB) CopyBasicFieldsToElision(elision *models.Elision) {
	// insertion point for checkout of basic fields (back repo to stage)
	elision.Name = elisionDB.Name_Data.String
	elision.Value = elisionDB.Value_Data.String
}

// CopyBasicFieldsToElision_WOP
func (elisionDB *ElisionDB) CopyBasicFieldsToElision_WOP(elision *models.Elision_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	elision.Name = elisionDB.Name_Data.String
	elision.Value = elisionDB.Value_Data.String
}

// CopyBasicFieldsToElisionWOP
func (elisionDB *ElisionDB) CopyBasicFieldsToElisionWOP(elision *ElisionWOP) {
	elision.ID = int(elisionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	elision.Name = elisionDB.Name_Data.String
	elision.Value = elisionDB.Value_Data.String
}

// Backup generates a json file from a slice of all ElisionDB instances in the backrepo
func (backRepoElision *BackRepoElisionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ElisionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElisionDB, 0)
	for _, elisionDB := range backRepoElision.Map_ElisionDBID_ElisionDB {
		forBackup = append(forBackup, elisionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Elision ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Elision file", err.Error())
	}
}

// Backup generates a json file from a slice of all ElisionDB instances in the backrepo
func (backRepoElision *BackRepoElisionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElisionDB, 0)
	for _, elisionDB := range backRepoElision.Map_ElisionDBID_ElisionDB {
		forBackup = append(forBackup, elisionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Elision")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Elision_Fields, -1)
	for _, elisionDB := range forBackup {

		var elisionWOP ElisionWOP
		elisionDB.CopyBasicFieldsToElisionWOP(&elisionWOP)

		row := sh.AddRow()
		row.WriteStruct(&elisionWOP, -1)
	}
}

// RestoreXL from the "Elision" sheet all ElisionDB instances
func (backRepoElision *BackRepoElisionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoElisionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Elision"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoElision.rowVisitorElision)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoElision *BackRepoElisionStruct) rowVisitorElision(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var elisionWOP ElisionWOP
		row.ReadStruct(&elisionWOP)

		// add the unmarshalled struct to the stage
		elisionDB := new(ElisionDB)
		elisionDB.CopyBasicFieldsFromElisionWOP(&elisionWOP)

		elisionDB_ID_atBackupTime := elisionDB.ID
		elisionDB.ID = 0
		query := backRepoElision.db.Create(elisionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoElision.Map_ElisionDBID_ElisionDB[elisionDB.ID] = elisionDB
		BackRepoElisionid_atBckpTime_newID[elisionDB_ID_atBackupTime] = elisionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ElisionDB.json" in dirPath that stores an array
// of ElisionDB and stores it in the database
// the map BackRepoElisionid_atBckpTime_newID is updated accordingly
func (backRepoElision *BackRepoElisionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoElisionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ElisionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Elision file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ElisionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ElisionDBID_ElisionDB
	for _, elisionDB := range forRestore {

		elisionDB_ID_atBackupTime := elisionDB.ID
		elisionDB.ID = 0
		query := backRepoElision.db.Create(elisionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoElision.Map_ElisionDBID_ElisionDB[elisionDB.ID] = elisionDB
		BackRepoElisionid_atBckpTime_newID[elisionDB_ID_atBackupTime] = elisionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Elision file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Elision>id_atBckpTime_newID
// to compute new index
func (backRepoElision *BackRepoElisionStruct) RestorePhaseTwo() {

	for _, elisionDB := range backRepoElision.Map_ElisionDBID_ElisionDB {

		// next line of code is to avert unused variable compilation error
		_ = elisionDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoElision.db.Model(elisionDB).Updates(*elisionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoElision.ResetReversePointers commits all staged instances of Elision to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElision *BackRepoElisionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, elision := range backRepoElision.Map_ElisionDBID_ElisionPtr {
		backRepoElision.ResetReversePointersInstance(backRepo, idx, elision)
	}

	return
}

func (backRepoElision *BackRepoElisionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, elision *models.Elision) (Error error) {

	// fetch matching elisionDB
	if elisionDB, ok := backRepoElision.Map_ElisionDBID_ElisionDB[idx]; ok {
		_ = elisionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoElisionid_atBckpTime_newID map[uint]uint
