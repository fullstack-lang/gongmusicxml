// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Caesura_sql sql.NullBool
var dummy_Caesura_time time.Duration
var dummy_Caesura_sort sort.Float64Slice

// CaesuraAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model caesuraAPI
type CaesuraAPI struct {
	gorm.Model

	models.Caesura_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CaesuraPointersEncoding CaesuraPointersEncoding
}

// CaesuraPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CaesuraPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CaesuraDB describes a caesura in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model caesuraDB
type CaesuraDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field caesuraDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CaesuraPointersEncoding
}

// CaesuraDBs arrays caesuraDBs
// swagger:response caesuraDBsResponse
type CaesuraDBs []CaesuraDB

// CaesuraDBResponse provides response
// swagger:response caesuraDBResponse
type CaesuraDBResponse struct {
	CaesuraDB
}

// CaesuraWOP is a Caesura without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CaesuraWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Caesura_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoCaesuraStruct struct {
	// stores CaesuraDB according to their gorm ID
	Map_CaesuraDBID_CaesuraDB map[uint]*CaesuraDB

	// stores CaesuraDB ID according to Caesura address
	Map_CaesuraPtr_CaesuraDBID map[*models.Caesura]uint

	// stores Caesura according to their gorm ID
	Map_CaesuraDBID_CaesuraPtr map[uint]*models.Caesura

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCaesura *BackRepoCaesuraStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCaesura.stage
	return
}

func (backRepoCaesura *BackRepoCaesuraStruct) GetDB() *gorm.DB {
	return backRepoCaesura.db
}

// GetCaesuraDBFromCaesuraPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCaesura *BackRepoCaesuraStruct) GetCaesuraDBFromCaesuraPtr(caesura *models.Caesura) (caesuraDB *CaesuraDB) {
	id := backRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura]
	caesuraDB = backRepoCaesura.Map_CaesuraDBID_CaesuraDB[id]
	return
}

// BackRepoCaesura.CommitPhaseOne commits all staged instances of Caesura to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCaesura *BackRepoCaesuraStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for caesura := range stage.Caesuras {
		backRepoCaesura.CommitPhaseOneInstance(caesura)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, caesura := range backRepoCaesura.Map_CaesuraDBID_CaesuraPtr {
		if _, ok := stage.Caesuras[caesura]; !ok {
			backRepoCaesura.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCaesura.CommitDeleteInstance commits deletion of Caesura to the BackRepo
func (backRepoCaesura *BackRepoCaesuraStruct) CommitDeleteInstance(id uint) (Error error) {

	caesura := backRepoCaesura.Map_CaesuraDBID_CaesuraPtr[id]

	// caesura is not staged anymore, remove caesuraDB
	caesuraDB := backRepoCaesura.Map_CaesuraDBID_CaesuraDB[id]
	query := backRepoCaesura.db.Unscoped().Delete(&caesuraDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCaesura.Map_CaesuraPtr_CaesuraDBID, caesura)
	delete(backRepoCaesura.Map_CaesuraDBID_CaesuraPtr, id)
	delete(backRepoCaesura.Map_CaesuraDBID_CaesuraDB, id)

	return
}

// BackRepoCaesura.CommitPhaseOneInstance commits caesura staged instances of Caesura to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCaesura *BackRepoCaesuraStruct) CommitPhaseOneInstance(caesura *models.Caesura) (Error error) {

	// check if the caesura is not commited yet
	if _, ok := backRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura]; ok {
		return
	}

	// initiate caesura
	var caesuraDB CaesuraDB
	caesuraDB.CopyBasicFieldsFromCaesura(caesura)

	query := backRepoCaesura.db.Create(&caesuraDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura] = caesuraDB.ID
	backRepoCaesura.Map_CaesuraDBID_CaesuraPtr[caesuraDB.ID] = caesura
	backRepoCaesura.Map_CaesuraDBID_CaesuraDB[caesuraDB.ID] = &caesuraDB

	return
}

// BackRepoCaesura.CommitPhaseTwo commits all staged instances of Caesura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCaesura *BackRepoCaesuraStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, caesura := range backRepoCaesura.Map_CaesuraDBID_CaesuraPtr {
		backRepoCaesura.CommitPhaseTwoInstance(backRepo, idx, caesura)
	}

	return
}

// BackRepoCaesura.CommitPhaseTwoInstance commits {{structname }} of models.Caesura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCaesura *BackRepoCaesuraStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, caesura *models.Caesura) (Error error) {

	// fetch matching caesuraDB
	if caesuraDB, ok := backRepoCaesura.Map_CaesuraDBID_CaesuraDB[idx]; ok {

		caesuraDB.CopyBasicFieldsFromCaesura(caesura)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCaesura.db.Save(&caesuraDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Caesura intance %s", caesura.Name))
		return err
	}

	return
}

// BackRepoCaesura.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCaesura *BackRepoCaesuraStruct) CheckoutPhaseOne() (Error error) {

	caesuraDBArray := make([]CaesuraDB, 0)
	query := backRepoCaesura.db.Find(&caesuraDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	caesuraInstancesToBeRemovedFromTheStage := make(map[*models.Caesura]any)
	for key, value := range backRepoCaesura.stage.Caesuras {
		caesuraInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, caesuraDB := range caesuraDBArray {
		backRepoCaesura.CheckoutPhaseOneInstance(&caesuraDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		caesura, ok := backRepoCaesura.Map_CaesuraDBID_CaesuraPtr[caesuraDB.ID]
		if ok {
			delete(caesuraInstancesToBeRemovedFromTheStage, caesura)
		}
	}

	// remove from stage and back repo's 3 maps all caesuras that are not in the checkout
	for caesura := range caesuraInstancesToBeRemovedFromTheStage {
		caesura.Unstage(backRepoCaesura.GetStage())

		// remove instance from the back repo 3 maps
		caesuraID := backRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura]
		delete(backRepoCaesura.Map_CaesuraPtr_CaesuraDBID, caesura)
		delete(backRepoCaesura.Map_CaesuraDBID_CaesuraDB, caesuraID)
		delete(backRepoCaesura.Map_CaesuraDBID_CaesuraPtr, caesuraID)
	}

	return
}

// CheckoutPhaseOneInstance takes a caesuraDB that has been found in the DB, updates the backRepo and stages the
// models version of the caesuraDB
func (backRepoCaesura *BackRepoCaesuraStruct) CheckoutPhaseOneInstance(caesuraDB *CaesuraDB) (Error error) {

	caesura, ok := backRepoCaesura.Map_CaesuraDBID_CaesuraPtr[caesuraDB.ID]
	if !ok {
		caesura = new(models.Caesura)

		backRepoCaesura.Map_CaesuraDBID_CaesuraPtr[caesuraDB.ID] = caesura
		backRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura] = caesuraDB.ID

		// append model store with the new element
		caesura.Name = caesuraDB.Name_Data.String
		caesura.Stage(backRepoCaesura.GetStage())
	}
	caesuraDB.CopyBasicFieldsToCaesura(caesura)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	caesura.Stage(backRepoCaesura.GetStage())

	// preserve pointer to caesuraDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CaesuraDBID_CaesuraDB)[caesuraDB hold variable pointers
	caesuraDB_Data := *caesuraDB
	preservedPtrToCaesura := &caesuraDB_Data
	backRepoCaesura.Map_CaesuraDBID_CaesuraDB[caesuraDB.ID] = preservedPtrToCaesura

	return
}

// BackRepoCaesura.CheckoutPhaseTwo Checkouts all staged instances of Caesura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCaesura *BackRepoCaesuraStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, caesuraDB := range backRepoCaesura.Map_CaesuraDBID_CaesuraDB {
		backRepoCaesura.CheckoutPhaseTwoInstance(backRepo, caesuraDB)
	}
	return
}

// BackRepoCaesura.CheckoutPhaseTwoInstance Checkouts staged instances of Caesura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCaesura *BackRepoCaesuraStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, caesuraDB *CaesuraDB) (Error error) {

	caesura := backRepoCaesura.Map_CaesuraDBID_CaesuraPtr[caesuraDB.ID]

	caesuraDB.DecodePointers(backRepo, caesura)

	return
}

func (caesuraDB *CaesuraDB) DecodePointers(backRepo *BackRepoStruct, caesura *models.Caesura) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCaesura allows commit of a single caesura (if already staged)
func (backRepo *BackRepoStruct) CommitCaesura(caesura *models.Caesura) {
	backRepo.BackRepoCaesura.CommitPhaseOneInstance(caesura)
	if id, ok := backRepo.BackRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura]; ok {
		backRepo.BackRepoCaesura.CommitPhaseTwoInstance(backRepo, id, caesura)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCaesura allows checkout of a single caesura (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCaesura(caesura *models.Caesura) {
	// check if the caesura is staged
	if _, ok := backRepo.BackRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura]; ok {

		if id, ok := backRepo.BackRepoCaesura.Map_CaesuraPtr_CaesuraDBID[caesura]; ok {
			var caesuraDB CaesuraDB
			caesuraDB.ID = id

			if err := backRepo.BackRepoCaesura.db.First(&caesuraDB, id).Error; err != nil {
				log.Fatalln("CheckoutCaesura : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCaesura.CheckoutPhaseOneInstance(&caesuraDB)
			backRepo.BackRepoCaesura.CheckoutPhaseTwoInstance(backRepo, &caesuraDB)
		}
	}
}

// CopyBasicFieldsFromCaesura
func (caesuraDB *CaesuraDB) CopyBasicFieldsFromCaesura(caesura *models.Caesura) {
	// insertion point for fields commit

	caesuraDB.Name_Data.String = caesura.Name
	caesuraDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCaesura_WOP
func (caesuraDB *CaesuraDB) CopyBasicFieldsFromCaesura_WOP(caesura *models.Caesura_WOP) {
	// insertion point for fields commit

	caesuraDB.Name_Data.String = caesura.Name
	caesuraDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCaesuraWOP
func (caesuraDB *CaesuraDB) CopyBasicFieldsFromCaesuraWOP(caesura *CaesuraWOP) {
	// insertion point for fields commit

	caesuraDB.Name_Data.String = caesura.Name
	caesuraDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCaesura
func (caesuraDB *CaesuraDB) CopyBasicFieldsToCaesura(caesura *models.Caesura) {
	// insertion point for checkout of basic fields (back repo to stage)
	caesura.Name = caesuraDB.Name_Data.String
}

// CopyBasicFieldsToCaesura_WOP
func (caesuraDB *CaesuraDB) CopyBasicFieldsToCaesura_WOP(caesura *models.Caesura_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	caesura.Name = caesuraDB.Name_Data.String
}

// CopyBasicFieldsToCaesuraWOP
func (caesuraDB *CaesuraDB) CopyBasicFieldsToCaesuraWOP(caesura *CaesuraWOP) {
	caesura.ID = int(caesuraDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	caesura.Name = caesuraDB.Name_Data.String
}

// Backup generates a json file from a slice of all CaesuraDB instances in the backrepo
func (backRepoCaesura *BackRepoCaesuraStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CaesuraDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CaesuraDB, 0)
	for _, caesuraDB := range backRepoCaesura.Map_CaesuraDBID_CaesuraDB {
		forBackup = append(forBackup, caesuraDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Caesura ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Caesura file", err.Error())
	}
}

// Backup generates a json file from a slice of all CaesuraDB instances in the backrepo
func (backRepoCaesura *BackRepoCaesuraStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CaesuraDB, 0)
	for _, caesuraDB := range backRepoCaesura.Map_CaesuraDBID_CaesuraDB {
		forBackup = append(forBackup, caesuraDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Caesura")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Caesura_Fields, -1)
	for _, caesuraDB := range forBackup {

		var caesuraWOP CaesuraWOP
		caesuraDB.CopyBasicFieldsToCaesuraWOP(&caesuraWOP)

		row := sh.AddRow()
		row.WriteStruct(&caesuraWOP, -1)
	}
}

// RestoreXL from the "Caesura" sheet all CaesuraDB instances
func (backRepoCaesura *BackRepoCaesuraStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCaesuraid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Caesura"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCaesura.rowVisitorCaesura)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCaesura *BackRepoCaesuraStruct) rowVisitorCaesura(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var caesuraWOP CaesuraWOP
		row.ReadStruct(&caesuraWOP)

		// add the unmarshalled struct to the stage
		caesuraDB := new(CaesuraDB)
		caesuraDB.CopyBasicFieldsFromCaesuraWOP(&caesuraWOP)

		caesuraDB_ID_atBackupTime := caesuraDB.ID
		caesuraDB.ID = 0
		query := backRepoCaesura.db.Create(caesuraDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCaesura.Map_CaesuraDBID_CaesuraDB[caesuraDB.ID] = caesuraDB
		BackRepoCaesuraid_atBckpTime_newID[caesuraDB_ID_atBackupTime] = caesuraDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CaesuraDB.json" in dirPath that stores an array
// of CaesuraDB and stores it in the database
// the map BackRepoCaesuraid_atBckpTime_newID is updated accordingly
func (backRepoCaesura *BackRepoCaesuraStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCaesuraid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CaesuraDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Caesura file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CaesuraDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CaesuraDBID_CaesuraDB
	for _, caesuraDB := range forRestore {

		caesuraDB_ID_atBackupTime := caesuraDB.ID
		caesuraDB.ID = 0
		query := backRepoCaesura.db.Create(caesuraDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCaesura.Map_CaesuraDBID_CaesuraDB[caesuraDB.ID] = caesuraDB
		BackRepoCaesuraid_atBckpTime_newID[caesuraDB_ID_atBackupTime] = caesuraDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Caesura file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Caesura>id_atBckpTime_newID
// to compute new index
func (backRepoCaesura *BackRepoCaesuraStruct) RestorePhaseTwo() {

	for _, caesuraDB := range backRepoCaesura.Map_CaesuraDBID_CaesuraDB {

		// next line of code is to avert unused variable compilation error
		_ = caesuraDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCaesura.db.Model(caesuraDB).Updates(*caesuraDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCaesura.ResetReversePointers commits all staged instances of Caesura to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCaesura *BackRepoCaesuraStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, caesura := range backRepoCaesura.Map_CaesuraDBID_CaesuraPtr {
		backRepoCaesura.ResetReversePointersInstance(backRepo, idx, caesura)
	}

	return
}

func (backRepoCaesura *BackRepoCaesuraStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, caesura *models.Caesura) (Error error) {

	// fetch matching caesuraDB
	if caesuraDB, ok := backRepoCaesura.Map_CaesuraDBID_CaesuraDB[idx]; ok {
		_ = caesuraDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCaesuraid_atBckpTime_newID map[uint]uint
