// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Measure_style_sql sql.NullBool
var dummy_Measure_style_time time.Duration
var dummy_Measure_style_sort sort.Float64Slice

// Measure_styleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model measure_styleAPI
type Measure_styleAPI struct {
	gorm.Model

	models.Measure_style_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Measure_stylePointersEncoding Measure_stylePointersEncoding
}

// Measure_stylePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Measure_stylePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Multiple_rest is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Multiple_restID sql.NullInt64

	// field Measure_repeat is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Measure_repeatID sql.NullInt64

	// field Beat_repeat is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Beat_repeatID sql.NullInt64

	// field Slash is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SlashID sql.NullInt64
}

// Measure_styleDB describes a measure_style in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model measure_styleDB
type Measure_styleDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field measure_styleDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Measure_stylePointersEncoding
}

// Measure_styleDBs arrays measure_styleDBs
// swagger:response measure_styleDBsResponse
type Measure_styleDBs []Measure_styleDB

// Measure_styleDBResponse provides response
// swagger:response measure_styleDBResponse
type Measure_styleDBResponse struct {
	Measure_styleDB
}

// Measure_styleWOP is a Measure_style without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Measure_styleWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Measure_style_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMeasure_styleStruct struct {
	// stores Measure_styleDB according to their gorm ID
	Map_Measure_styleDBID_Measure_styleDB map[uint]*Measure_styleDB

	// stores Measure_styleDB ID according to Measure_style address
	Map_Measure_stylePtr_Measure_styleDBID map[*models.Measure_style]uint

	// stores Measure_style according to their gorm ID
	Map_Measure_styleDBID_Measure_stylePtr map[uint]*models.Measure_style

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMeasure_style *BackRepoMeasure_styleStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMeasure_style.stage
	return
}

func (backRepoMeasure_style *BackRepoMeasure_styleStruct) GetDB() *gorm.DB {
	return backRepoMeasure_style.db
}

// GetMeasure_styleDBFromMeasure_stylePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) GetMeasure_styleDBFromMeasure_stylePtr(measure_style *models.Measure_style) (measure_styleDB *Measure_styleDB) {
	id := backRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style]
	measure_styleDB = backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[id]
	return
}

// BackRepoMeasure_style.CommitPhaseOne commits all staged instances of Measure_style to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for measure_style := range stage.Measure_styles {
		backRepoMeasure_style.CommitPhaseOneInstance(measure_style)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, measure_style := range backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr {
		if _, ok := stage.Measure_styles[measure_style]; !ok {
			backRepoMeasure_style.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMeasure_style.CommitDeleteInstance commits deletion of Measure_style to the BackRepo
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CommitDeleteInstance(id uint) (Error error) {

	measure_style := backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr[id]

	// measure_style is not staged anymore, remove measure_styleDB
	measure_styleDB := backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[id]
	query := backRepoMeasure_style.db.Unscoped().Delete(&measure_styleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID, measure_style)
	delete(backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr, id)
	delete(backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB, id)

	return
}

// BackRepoMeasure_style.CommitPhaseOneInstance commits measure_style staged instances of Measure_style to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CommitPhaseOneInstance(measure_style *models.Measure_style) (Error error) {

	// check if the measure_style is not commited yet
	if _, ok := backRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style]; ok {
		return
	}

	// initiate measure_style
	var measure_styleDB Measure_styleDB
	measure_styleDB.CopyBasicFieldsFromMeasure_style(measure_style)

	query := backRepoMeasure_style.db.Create(&measure_styleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style] = measure_styleDB.ID
	backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr[measure_styleDB.ID] = measure_style
	backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[measure_styleDB.ID] = &measure_styleDB

	return
}

// BackRepoMeasure_style.CommitPhaseTwo commits all staged instances of Measure_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_style := range backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr {
		backRepoMeasure_style.CommitPhaseTwoInstance(backRepo, idx, measure_style)
	}

	return
}

// BackRepoMeasure_style.CommitPhaseTwoInstance commits {{structname }} of models.Measure_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, measure_style *models.Measure_style) (Error error) {

	// fetch matching measure_styleDB
	if measure_styleDB, ok := backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[idx]; ok {

		measure_styleDB.CopyBasicFieldsFromMeasure_style(measure_style)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value measure_style.Multiple_rest translates to updating the measure_style.Multiple_restID
		measure_styleDB.Multiple_restID.Valid = true // allow for a 0 value (nil association)
		if measure_style.Multiple_rest != nil {
			if Multiple_restId, ok := backRepo.BackRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[measure_style.Multiple_rest]; ok {
				measure_styleDB.Multiple_restID.Int64 = int64(Multiple_restId)
				measure_styleDB.Multiple_restID.Valid = true
			}
		} else {
			measure_styleDB.Multiple_restID.Int64 = 0
			measure_styleDB.Multiple_restID.Valid = true
		}

		// commit pointer value measure_style.Measure_repeat translates to updating the measure_style.Measure_repeatID
		measure_styleDB.Measure_repeatID.Valid = true // allow for a 0 value (nil association)
		if measure_style.Measure_repeat != nil {
			if Measure_repeatId, ok := backRepo.BackRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_style.Measure_repeat]; ok {
				measure_styleDB.Measure_repeatID.Int64 = int64(Measure_repeatId)
				measure_styleDB.Measure_repeatID.Valid = true
			}
		} else {
			measure_styleDB.Measure_repeatID.Int64 = 0
			measure_styleDB.Measure_repeatID.Valid = true
		}

		// commit pointer value measure_style.Beat_repeat translates to updating the measure_style.Beat_repeatID
		measure_styleDB.Beat_repeatID.Valid = true // allow for a 0 value (nil association)
		if measure_style.Beat_repeat != nil {
			if Beat_repeatId, ok := backRepo.BackRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[measure_style.Beat_repeat]; ok {
				measure_styleDB.Beat_repeatID.Int64 = int64(Beat_repeatId)
				measure_styleDB.Beat_repeatID.Valid = true
			}
		} else {
			measure_styleDB.Beat_repeatID.Int64 = 0
			measure_styleDB.Beat_repeatID.Valid = true
		}

		// commit pointer value measure_style.Slash translates to updating the measure_style.SlashID
		measure_styleDB.SlashID.Valid = true // allow for a 0 value (nil association)
		if measure_style.Slash != nil {
			if SlashId, ok := backRepo.BackRepoSlash.Map_SlashPtr_SlashDBID[measure_style.Slash]; ok {
				measure_styleDB.SlashID.Int64 = int64(SlashId)
				measure_styleDB.SlashID.Valid = true
			}
		} else {
			measure_styleDB.SlashID.Int64 = 0
			measure_styleDB.SlashID.Valid = true
		}

		query := backRepoMeasure_style.db.Save(&measure_styleDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Measure_style intance %s", measure_style.Name))
		return err
	}

	return
}

// BackRepoMeasure_style.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CheckoutPhaseOne() (Error error) {

	measure_styleDBArray := make([]Measure_styleDB, 0)
	query := backRepoMeasure_style.db.Find(&measure_styleDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	measure_styleInstancesToBeRemovedFromTheStage := make(map[*models.Measure_style]any)
	for key, value := range backRepoMeasure_style.stage.Measure_styles {
		measure_styleInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, measure_styleDB := range measure_styleDBArray {
		backRepoMeasure_style.CheckoutPhaseOneInstance(&measure_styleDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		measure_style, ok := backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr[measure_styleDB.ID]
		if ok {
			delete(measure_styleInstancesToBeRemovedFromTheStage, measure_style)
		}
	}

	// remove from stage and back repo's 3 maps all measure_styles that are not in the checkout
	for measure_style := range measure_styleInstancesToBeRemovedFromTheStage {
		measure_style.Unstage(backRepoMeasure_style.GetStage())

		// remove instance from the back repo 3 maps
		measure_styleID := backRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style]
		delete(backRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID, measure_style)
		delete(backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB, measure_styleID)
		delete(backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr, measure_styleID)
	}

	return
}

// CheckoutPhaseOneInstance takes a measure_styleDB that has been found in the DB, updates the backRepo and stages the
// models version of the measure_styleDB
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CheckoutPhaseOneInstance(measure_styleDB *Measure_styleDB) (Error error) {

	measure_style, ok := backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr[measure_styleDB.ID]
	if !ok {
		measure_style = new(models.Measure_style)

		backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr[measure_styleDB.ID] = measure_style
		backRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style] = measure_styleDB.ID

		// append model store with the new element
		measure_style.Name = measure_styleDB.Name_Data.String
		measure_style.Stage(backRepoMeasure_style.GetStage())
	}
	measure_styleDB.CopyBasicFieldsToMeasure_style(measure_style)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	measure_style.Stage(backRepoMeasure_style.GetStage())

	// preserve pointer to measure_styleDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Measure_styleDBID_Measure_styleDB)[measure_styleDB hold variable pointers
	measure_styleDB_Data := *measure_styleDB
	preservedPtrToMeasure_style := &measure_styleDB_Data
	backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[measure_styleDB.ID] = preservedPtrToMeasure_style

	return
}

// BackRepoMeasure_style.CheckoutPhaseTwo Checkouts all staged instances of Measure_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, measure_styleDB := range backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB {
		backRepoMeasure_style.CheckoutPhaseTwoInstance(backRepo, measure_styleDB)
	}
	return
}

// BackRepoMeasure_style.CheckoutPhaseTwoInstance Checkouts staged instances of Measure_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, measure_styleDB *Measure_styleDB) (Error error) {

	measure_style := backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr[measure_styleDB.ID]

	measure_styleDB.DecodePointers(backRepo, measure_style)

	return
}

func (measure_styleDB *Measure_styleDB) DecodePointers(backRepo *BackRepoStruct, measure_style *models.Measure_style) {

	// insertion point for checkout of pointer encoding
	// Multiple_rest field
	measure_style.Multiple_rest = nil
	if measure_styleDB.Multiple_restID.Int64 != 0 {
		measure_style.Multiple_rest = backRepo.BackRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr[uint(measure_styleDB.Multiple_restID.Int64)]
	}
	// Measure_repeat field
	measure_style.Measure_repeat = nil
	if measure_styleDB.Measure_repeatID.Int64 != 0 {
		measure_style.Measure_repeat = backRepo.BackRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr[uint(measure_styleDB.Measure_repeatID.Int64)]
	}
	// Beat_repeat field
	measure_style.Beat_repeat = nil
	if measure_styleDB.Beat_repeatID.Int64 != 0 {
		measure_style.Beat_repeat = backRepo.BackRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr[uint(measure_styleDB.Beat_repeatID.Int64)]
	}
	// Slash field
	measure_style.Slash = nil
	if measure_styleDB.SlashID.Int64 != 0 {
		measure_style.Slash = backRepo.BackRepoSlash.Map_SlashDBID_SlashPtr[uint(measure_styleDB.SlashID.Int64)]
	}
	return
}

// CommitMeasure_style allows commit of a single measure_style (if already staged)
func (backRepo *BackRepoStruct) CommitMeasure_style(measure_style *models.Measure_style) {
	backRepo.BackRepoMeasure_style.CommitPhaseOneInstance(measure_style)
	if id, ok := backRepo.BackRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style]; ok {
		backRepo.BackRepoMeasure_style.CommitPhaseTwoInstance(backRepo, id, measure_style)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMeasure_style allows checkout of a single measure_style (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMeasure_style(measure_style *models.Measure_style) {
	// check if the measure_style is staged
	if _, ok := backRepo.BackRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style]; ok {

		if id, ok := backRepo.BackRepoMeasure_style.Map_Measure_stylePtr_Measure_styleDBID[measure_style]; ok {
			var measure_styleDB Measure_styleDB
			measure_styleDB.ID = id

			if err := backRepo.BackRepoMeasure_style.db.First(&measure_styleDB, id).Error; err != nil {
				log.Fatalln("CheckoutMeasure_style : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMeasure_style.CheckoutPhaseOneInstance(&measure_styleDB)
			backRepo.BackRepoMeasure_style.CheckoutPhaseTwoInstance(backRepo, &measure_styleDB)
		}
	}
}

// CopyBasicFieldsFromMeasure_style
func (measure_styleDB *Measure_styleDB) CopyBasicFieldsFromMeasure_style(measure_style *models.Measure_style) {
	// insertion point for fields commit

	measure_styleDB.Name_Data.String = measure_style.Name
	measure_styleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_style_WOP
func (measure_styleDB *Measure_styleDB) CopyBasicFieldsFromMeasure_style_WOP(measure_style *models.Measure_style_WOP) {
	// insertion point for fields commit

	measure_styleDB.Name_Data.String = measure_style.Name
	measure_styleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_styleWOP
func (measure_styleDB *Measure_styleDB) CopyBasicFieldsFromMeasure_styleWOP(measure_style *Measure_styleWOP) {
	// insertion point for fields commit

	measure_styleDB.Name_Data.String = measure_style.Name
	measure_styleDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMeasure_style
func (measure_styleDB *Measure_styleDB) CopyBasicFieldsToMeasure_style(measure_style *models.Measure_style) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_style.Name = measure_styleDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_style_WOP
func (measure_styleDB *Measure_styleDB) CopyBasicFieldsToMeasure_style_WOP(measure_style *models.Measure_style_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_style.Name = measure_styleDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_styleWOP
func (measure_styleDB *Measure_styleDB) CopyBasicFieldsToMeasure_styleWOP(measure_style *Measure_styleWOP) {
	measure_style.ID = int(measure_styleDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	measure_style.Name = measure_styleDB.Name_Data.String
}

// Backup generates a json file from a slice of all Measure_styleDB instances in the backrepo
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Measure_styleDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_styleDB, 0)
	for _, measure_styleDB := range backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB {
		forBackup = append(forBackup, measure_styleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Measure_style ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Measure_style file", err.Error())
	}
}

// Backup generates a json file from a slice of all Measure_styleDB instances in the backrepo
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_styleDB, 0)
	for _, measure_styleDB := range backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB {
		forBackup = append(forBackup, measure_styleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Measure_style")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Measure_style_Fields, -1)
	for _, measure_styleDB := range forBackup {

		var measure_styleWOP Measure_styleWOP
		measure_styleDB.CopyBasicFieldsToMeasure_styleWOP(&measure_styleWOP)

		row := sh.AddRow()
		row.WriteStruct(&measure_styleWOP, -1)
	}
}

// RestoreXL from the "Measure_style" sheet all Measure_styleDB instances
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMeasure_styleid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Measure_style"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMeasure_style.rowVisitorMeasure_style)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMeasure_style *BackRepoMeasure_styleStruct) rowVisitorMeasure_style(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var measure_styleWOP Measure_styleWOP
		row.ReadStruct(&measure_styleWOP)

		// add the unmarshalled struct to the stage
		measure_styleDB := new(Measure_styleDB)
		measure_styleDB.CopyBasicFieldsFromMeasure_styleWOP(&measure_styleWOP)

		measure_styleDB_ID_atBackupTime := measure_styleDB.ID
		measure_styleDB.ID = 0
		query := backRepoMeasure_style.db.Create(measure_styleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[measure_styleDB.ID] = measure_styleDB
		BackRepoMeasure_styleid_atBckpTime_newID[measure_styleDB_ID_atBackupTime] = measure_styleDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Measure_styleDB.json" in dirPath that stores an array
// of Measure_styleDB and stores it in the database
// the map BackRepoMeasure_styleid_atBckpTime_newID is updated accordingly
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMeasure_styleid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Measure_styleDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Measure_style file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Measure_styleDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Measure_styleDBID_Measure_styleDB
	for _, measure_styleDB := range forRestore {

		measure_styleDB_ID_atBackupTime := measure_styleDB.ID
		measure_styleDB.ID = 0
		query := backRepoMeasure_style.db.Create(measure_styleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[measure_styleDB.ID] = measure_styleDB
		BackRepoMeasure_styleid_atBckpTime_newID[measure_styleDB_ID_atBackupTime] = measure_styleDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Measure_style file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Measure_style>id_atBckpTime_newID
// to compute new index
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) RestorePhaseTwo() {

	for _, measure_styleDB := range backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB {

		// next line of code is to avert unused variable compilation error
		_ = measure_styleDB

		// insertion point for reindexing pointers encoding
		// reindexing Multiple_rest field
		if measure_styleDB.Multiple_restID.Int64 != 0 {
			measure_styleDB.Multiple_restID.Int64 = int64(BackRepoMultiple_restid_atBckpTime_newID[uint(measure_styleDB.Multiple_restID.Int64)])
			measure_styleDB.Multiple_restID.Valid = true
		}

		// reindexing Measure_repeat field
		if measure_styleDB.Measure_repeatID.Int64 != 0 {
			measure_styleDB.Measure_repeatID.Int64 = int64(BackRepoMeasure_repeatid_atBckpTime_newID[uint(measure_styleDB.Measure_repeatID.Int64)])
			measure_styleDB.Measure_repeatID.Valid = true
		}

		// reindexing Beat_repeat field
		if measure_styleDB.Beat_repeatID.Int64 != 0 {
			measure_styleDB.Beat_repeatID.Int64 = int64(BackRepoBeat_repeatid_atBckpTime_newID[uint(measure_styleDB.Beat_repeatID.Int64)])
			measure_styleDB.Beat_repeatID.Valid = true
		}

		// reindexing Slash field
		if measure_styleDB.SlashID.Int64 != 0 {
			measure_styleDB.SlashID.Int64 = int64(BackRepoSlashid_atBckpTime_newID[uint(measure_styleDB.SlashID.Int64)])
			measure_styleDB.SlashID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoMeasure_style.db.Model(measure_styleDB).Updates(*measure_styleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMeasure_style.ResetReversePointers commits all staged instances of Measure_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_style *BackRepoMeasure_styleStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_style := range backRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr {
		backRepoMeasure_style.ResetReversePointersInstance(backRepo, idx, measure_style)
	}

	return
}

func (backRepoMeasure_style *BackRepoMeasure_styleStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, measure_style *models.Measure_style) (Error error) {

	// fetch matching measure_styleDB
	if measure_styleDB, ok := backRepoMeasure_style.Map_Measure_styleDBID_Measure_styleDB[idx]; ok {
		_ = measure_styleDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMeasure_styleid_atBckpTime_newID map[uint]uint
