// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Part_transpose_sql sql.NullBool
var dummy_Part_transpose_time time.Duration
var dummy_Part_transpose_sort sort.Float64Slice

// Part_transposeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model part_transposeAPI
type Part_transposeAPI struct {
	gorm.Model

	models.Part_transpose_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Part_transposePointersEncoding Part_transposePointersEncoding
}

// Part_transposePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Part_transposePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Part_transposeDB describes a part_transpose in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model part_transposeDB
type Part_transposeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field part_transposeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Part_transposePointersEncoding
}

// Part_transposeDBs arrays part_transposeDBs
// swagger:response part_transposeDBsResponse
type Part_transposeDBs []Part_transposeDB

// Part_transposeDBResponse provides response
// swagger:response part_transposeDBResponse
type Part_transposeDBResponse struct {
	Part_transposeDB
}

// Part_transposeWOP is a Part_transpose without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Part_transposeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Part_transpose_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPart_transposeStruct struct {
	// stores Part_transposeDB according to their gorm ID
	Map_Part_transposeDBID_Part_transposeDB map[uint]*Part_transposeDB

	// stores Part_transposeDB ID according to Part_transpose address
	Map_Part_transposePtr_Part_transposeDBID map[*models.Part_transpose]uint

	// stores Part_transpose according to their gorm ID
	Map_Part_transposeDBID_Part_transposePtr map[uint]*models.Part_transpose

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPart_transpose *BackRepoPart_transposeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPart_transpose.stage
	return
}

func (backRepoPart_transpose *BackRepoPart_transposeStruct) GetDB() *gorm.DB {
	return backRepoPart_transpose.db
}

// GetPart_transposeDBFromPart_transposePtr is a handy function to access the back repo instance from the stage instance
func (backRepoPart_transpose *BackRepoPart_transposeStruct) GetPart_transposeDBFromPart_transposePtr(part_transpose *models.Part_transpose) (part_transposeDB *Part_transposeDB) {
	id := backRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose]
	part_transposeDB = backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[id]
	return
}

// BackRepoPart_transpose.CommitPhaseOne commits all staged instances of Part_transpose to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for part_transpose := range stage.Part_transposes {
		backRepoPart_transpose.CommitPhaseOneInstance(part_transpose)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, part_transpose := range backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr {
		if _, ok := stage.Part_transposes[part_transpose]; !ok {
			backRepoPart_transpose.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPart_transpose.CommitDeleteInstance commits deletion of Part_transpose to the BackRepo
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CommitDeleteInstance(id uint) (Error error) {

	part_transpose := backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr[id]

	// part_transpose is not staged anymore, remove part_transposeDB
	part_transposeDB := backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[id]
	query := backRepoPart_transpose.db.Unscoped().Delete(&part_transposeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID, part_transpose)
	delete(backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr, id)
	delete(backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB, id)

	return
}

// BackRepoPart_transpose.CommitPhaseOneInstance commits part_transpose staged instances of Part_transpose to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CommitPhaseOneInstance(part_transpose *models.Part_transpose) (Error error) {

	// check if the part_transpose is not commited yet
	if _, ok := backRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose]; ok {
		return
	}

	// initiate part_transpose
	var part_transposeDB Part_transposeDB
	part_transposeDB.CopyBasicFieldsFromPart_transpose(part_transpose)

	query := backRepoPart_transpose.db.Create(&part_transposeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose] = part_transposeDB.ID
	backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr[part_transposeDB.ID] = part_transpose
	backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[part_transposeDB.ID] = &part_transposeDB

	return
}

// BackRepoPart_transpose.CommitPhaseTwo commits all staged instances of Part_transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, part_transpose := range backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr {
		backRepoPart_transpose.CommitPhaseTwoInstance(backRepo, idx, part_transpose)
	}

	return
}

// BackRepoPart_transpose.CommitPhaseTwoInstance commits {{structname }} of models.Part_transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, part_transpose *models.Part_transpose) (Error error) {

	// fetch matching part_transposeDB
	if part_transposeDB, ok := backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[idx]; ok {

		part_transposeDB.CopyBasicFieldsFromPart_transpose(part_transpose)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPart_transpose.db.Save(&part_transposeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Part_transpose intance %s", part_transpose.Name))
		return err
	}

	return
}

// BackRepoPart_transpose.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CheckoutPhaseOne() (Error error) {

	part_transposeDBArray := make([]Part_transposeDB, 0)
	query := backRepoPart_transpose.db.Find(&part_transposeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	part_transposeInstancesToBeRemovedFromTheStage := make(map[*models.Part_transpose]any)
	for key, value := range backRepoPart_transpose.stage.Part_transposes {
		part_transposeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, part_transposeDB := range part_transposeDBArray {
		backRepoPart_transpose.CheckoutPhaseOneInstance(&part_transposeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		part_transpose, ok := backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr[part_transposeDB.ID]
		if ok {
			delete(part_transposeInstancesToBeRemovedFromTheStage, part_transpose)
		}
	}

	// remove from stage and back repo's 3 maps all part_transposes that are not in the checkout
	for part_transpose := range part_transposeInstancesToBeRemovedFromTheStage {
		part_transpose.Unstage(backRepoPart_transpose.GetStage())

		// remove instance from the back repo 3 maps
		part_transposeID := backRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose]
		delete(backRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID, part_transpose)
		delete(backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB, part_transposeID)
		delete(backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr, part_transposeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a part_transposeDB that has been found in the DB, updates the backRepo and stages the
// models version of the part_transposeDB
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CheckoutPhaseOneInstance(part_transposeDB *Part_transposeDB) (Error error) {

	part_transpose, ok := backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr[part_transposeDB.ID]
	if !ok {
		part_transpose = new(models.Part_transpose)

		backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr[part_transposeDB.ID] = part_transpose
		backRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose] = part_transposeDB.ID

		// append model store with the new element
		part_transpose.Name = part_transposeDB.Name_Data.String
		part_transpose.Stage(backRepoPart_transpose.GetStage())
	}
	part_transposeDB.CopyBasicFieldsToPart_transpose(part_transpose)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	part_transpose.Stage(backRepoPart_transpose.GetStage())

	// preserve pointer to part_transposeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Part_transposeDBID_Part_transposeDB)[part_transposeDB hold variable pointers
	part_transposeDB_Data := *part_transposeDB
	preservedPtrToPart_transpose := &part_transposeDB_Data
	backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[part_transposeDB.ID] = preservedPtrToPart_transpose

	return
}

// BackRepoPart_transpose.CheckoutPhaseTwo Checkouts all staged instances of Part_transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, part_transposeDB := range backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB {
		backRepoPart_transpose.CheckoutPhaseTwoInstance(backRepo, part_transposeDB)
	}
	return
}

// BackRepoPart_transpose.CheckoutPhaseTwoInstance Checkouts staged instances of Part_transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_transpose *BackRepoPart_transposeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, part_transposeDB *Part_transposeDB) (Error error) {

	part_transpose := backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr[part_transposeDB.ID]

	part_transposeDB.DecodePointers(backRepo, part_transpose)

	return
}

func (part_transposeDB *Part_transposeDB) DecodePointers(backRepo *BackRepoStruct, part_transpose *models.Part_transpose) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPart_transpose allows commit of a single part_transpose (if already staged)
func (backRepo *BackRepoStruct) CommitPart_transpose(part_transpose *models.Part_transpose) {
	backRepo.BackRepoPart_transpose.CommitPhaseOneInstance(part_transpose)
	if id, ok := backRepo.BackRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose]; ok {
		backRepo.BackRepoPart_transpose.CommitPhaseTwoInstance(backRepo, id, part_transpose)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPart_transpose allows checkout of a single part_transpose (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPart_transpose(part_transpose *models.Part_transpose) {
	// check if the part_transpose is staged
	if _, ok := backRepo.BackRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose]; ok {

		if id, ok := backRepo.BackRepoPart_transpose.Map_Part_transposePtr_Part_transposeDBID[part_transpose]; ok {
			var part_transposeDB Part_transposeDB
			part_transposeDB.ID = id

			if err := backRepo.BackRepoPart_transpose.db.First(&part_transposeDB, id).Error; err != nil {
				log.Fatalln("CheckoutPart_transpose : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPart_transpose.CheckoutPhaseOneInstance(&part_transposeDB)
			backRepo.BackRepoPart_transpose.CheckoutPhaseTwoInstance(backRepo, &part_transposeDB)
		}
	}
}

// CopyBasicFieldsFromPart_transpose
func (part_transposeDB *Part_transposeDB) CopyBasicFieldsFromPart_transpose(part_transpose *models.Part_transpose) {
	// insertion point for fields commit

	part_transposeDB.Name_Data.String = part_transpose.Name
	part_transposeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_transpose_WOP
func (part_transposeDB *Part_transposeDB) CopyBasicFieldsFromPart_transpose_WOP(part_transpose *models.Part_transpose_WOP) {
	// insertion point for fields commit

	part_transposeDB.Name_Data.String = part_transpose.Name
	part_transposeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_transposeWOP
func (part_transposeDB *Part_transposeDB) CopyBasicFieldsFromPart_transposeWOP(part_transpose *Part_transposeWOP) {
	// insertion point for fields commit

	part_transposeDB.Name_Data.String = part_transpose.Name
	part_transposeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPart_transpose
func (part_transposeDB *Part_transposeDB) CopyBasicFieldsToPart_transpose(part_transpose *models.Part_transpose) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_transpose.Name = part_transposeDB.Name_Data.String
}

// CopyBasicFieldsToPart_transpose_WOP
func (part_transposeDB *Part_transposeDB) CopyBasicFieldsToPart_transpose_WOP(part_transpose *models.Part_transpose_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_transpose.Name = part_transposeDB.Name_Data.String
}

// CopyBasicFieldsToPart_transposeWOP
func (part_transposeDB *Part_transposeDB) CopyBasicFieldsToPart_transposeWOP(part_transpose *Part_transposeWOP) {
	part_transpose.ID = int(part_transposeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	part_transpose.Name = part_transposeDB.Name_Data.String
}

// Backup generates a json file from a slice of all Part_transposeDB instances in the backrepo
func (backRepoPart_transpose *BackRepoPart_transposeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Part_transposeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_transposeDB, 0)
	for _, part_transposeDB := range backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB {
		forBackup = append(forBackup, part_transposeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Part_transpose ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Part_transpose file", err.Error())
	}
}

// Backup generates a json file from a slice of all Part_transposeDB instances in the backrepo
func (backRepoPart_transpose *BackRepoPart_transposeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_transposeDB, 0)
	for _, part_transposeDB := range backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB {
		forBackup = append(forBackup, part_transposeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Part_transpose")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Part_transpose_Fields, -1)
	for _, part_transposeDB := range forBackup {

		var part_transposeWOP Part_transposeWOP
		part_transposeDB.CopyBasicFieldsToPart_transposeWOP(&part_transposeWOP)

		row := sh.AddRow()
		row.WriteStruct(&part_transposeWOP, -1)
	}
}

// RestoreXL from the "Part_transpose" sheet all Part_transposeDB instances
func (backRepoPart_transpose *BackRepoPart_transposeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPart_transposeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Part_transpose"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPart_transpose.rowVisitorPart_transpose)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPart_transpose *BackRepoPart_transposeStruct) rowVisitorPart_transpose(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var part_transposeWOP Part_transposeWOP
		row.ReadStruct(&part_transposeWOP)

		// add the unmarshalled struct to the stage
		part_transposeDB := new(Part_transposeDB)
		part_transposeDB.CopyBasicFieldsFromPart_transposeWOP(&part_transposeWOP)

		part_transposeDB_ID_atBackupTime := part_transposeDB.ID
		part_transposeDB.ID = 0
		query := backRepoPart_transpose.db.Create(part_transposeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[part_transposeDB.ID] = part_transposeDB
		BackRepoPart_transposeid_atBckpTime_newID[part_transposeDB_ID_atBackupTime] = part_transposeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Part_transposeDB.json" in dirPath that stores an array
// of Part_transposeDB and stores it in the database
// the map BackRepoPart_transposeid_atBckpTime_newID is updated accordingly
func (backRepoPart_transpose *BackRepoPart_transposeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPart_transposeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Part_transposeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Part_transpose file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Part_transposeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Part_transposeDBID_Part_transposeDB
	for _, part_transposeDB := range forRestore {

		part_transposeDB_ID_atBackupTime := part_transposeDB.ID
		part_transposeDB.ID = 0
		query := backRepoPart_transpose.db.Create(part_transposeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[part_transposeDB.ID] = part_transposeDB
		BackRepoPart_transposeid_atBckpTime_newID[part_transposeDB_ID_atBackupTime] = part_transposeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Part_transpose file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Part_transpose>id_atBckpTime_newID
// to compute new index
func (backRepoPart_transpose *BackRepoPart_transposeStruct) RestorePhaseTwo() {

	for _, part_transposeDB := range backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB {

		// next line of code is to avert unused variable compilation error
		_ = part_transposeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPart_transpose.db.Model(part_transposeDB).Updates(*part_transposeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPart_transpose.ResetReversePointers commits all staged instances of Part_transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_transpose *BackRepoPart_transposeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, part_transpose := range backRepoPart_transpose.Map_Part_transposeDBID_Part_transposePtr {
		backRepoPart_transpose.ResetReversePointersInstance(backRepo, idx, part_transpose)
	}

	return
}

func (backRepoPart_transpose *BackRepoPart_transposeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, part_transpose *models.Part_transpose) (Error error) {

	// fetch matching part_transposeDB
	if part_transposeDB, ok := backRepoPart_transpose.Map_Part_transposeDBID_Part_transposeDB[idx]; ok {
		_ = part_transposeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPart_transposeid_atBckpTime_newID map[uint]uint
