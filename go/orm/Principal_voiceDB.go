// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Principal_voice_sql sql.NullBool
var dummy_Principal_voice_time time.Duration
var dummy_Principal_voice_sort sort.Float64Slice

// Principal_voiceAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model principal_voiceAPI
type Principal_voiceAPI struct {
	gorm.Model

	models.Principal_voice_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Principal_voicePointersEncoding Principal_voicePointersEncoding
}

// Principal_voicePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Principal_voicePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Principal_voiceDB describes a principal_voice in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model principal_voiceDB
type Principal_voiceDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field principal_voiceDB.Name
	Name_Data sql.NullString

	// Declation for basic field principal_voiceDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Principal_voicePointersEncoding
}

// Principal_voiceDBs arrays principal_voiceDBs
// swagger:response principal_voiceDBsResponse
type Principal_voiceDBs []Principal_voiceDB

// Principal_voiceDBResponse provides response
// swagger:response principal_voiceDBResponse
type Principal_voiceDBResponse struct {
	Principal_voiceDB
}

// Principal_voiceWOP is a Principal_voice without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Principal_voiceWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Principal_voice_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoPrincipal_voiceStruct struct {
	// stores Principal_voiceDB according to their gorm ID
	Map_Principal_voiceDBID_Principal_voiceDB map[uint]*Principal_voiceDB

	// stores Principal_voiceDB ID according to Principal_voice address
	Map_Principal_voicePtr_Principal_voiceDBID map[*models.Principal_voice]uint

	// stores Principal_voice according to their gorm ID
	Map_Principal_voiceDBID_Principal_voicePtr map[uint]*models.Principal_voice

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPrincipal_voice.stage
	return
}

func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) GetDB() *gorm.DB {
	return backRepoPrincipal_voice.db
}

// GetPrincipal_voiceDBFromPrincipal_voicePtr is a handy function to access the back repo instance from the stage instance
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) GetPrincipal_voiceDBFromPrincipal_voicePtr(principal_voice *models.Principal_voice) (principal_voiceDB *Principal_voiceDB) {
	id := backRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice]
	principal_voiceDB = backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[id]
	return
}

// BackRepoPrincipal_voice.CommitPhaseOne commits all staged instances of Principal_voice to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for principal_voice := range stage.Principal_voices {
		backRepoPrincipal_voice.CommitPhaseOneInstance(principal_voice)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, principal_voice := range backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr {
		if _, ok := stage.Principal_voices[principal_voice]; !ok {
			backRepoPrincipal_voice.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPrincipal_voice.CommitDeleteInstance commits deletion of Principal_voice to the BackRepo
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CommitDeleteInstance(id uint) (Error error) {

	principal_voice := backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr[id]

	// principal_voice is not staged anymore, remove principal_voiceDB
	principal_voiceDB := backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[id]
	query := backRepoPrincipal_voice.db.Unscoped().Delete(&principal_voiceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID, principal_voice)
	delete(backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr, id)
	delete(backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB, id)

	return
}

// BackRepoPrincipal_voice.CommitPhaseOneInstance commits principal_voice staged instances of Principal_voice to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CommitPhaseOneInstance(principal_voice *models.Principal_voice) (Error error) {

	// check if the principal_voice is not commited yet
	if _, ok := backRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice]; ok {
		return
	}

	// initiate principal_voice
	var principal_voiceDB Principal_voiceDB
	principal_voiceDB.CopyBasicFieldsFromPrincipal_voice(principal_voice)

	query := backRepoPrincipal_voice.db.Create(&principal_voiceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice] = principal_voiceDB.ID
	backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr[principal_voiceDB.ID] = principal_voice
	backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[principal_voiceDB.ID] = &principal_voiceDB

	return
}

// BackRepoPrincipal_voice.CommitPhaseTwo commits all staged instances of Principal_voice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, principal_voice := range backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr {
		backRepoPrincipal_voice.CommitPhaseTwoInstance(backRepo, idx, principal_voice)
	}

	return
}

// BackRepoPrincipal_voice.CommitPhaseTwoInstance commits {{structname }} of models.Principal_voice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, principal_voice *models.Principal_voice) (Error error) {

	// fetch matching principal_voiceDB
	if principal_voiceDB, ok := backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[idx]; ok {

		principal_voiceDB.CopyBasicFieldsFromPrincipal_voice(principal_voice)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPrincipal_voice.db.Save(&principal_voiceDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Principal_voice intance %s", principal_voice.Name))
		return err
	}

	return
}

// BackRepoPrincipal_voice.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CheckoutPhaseOne() (Error error) {

	principal_voiceDBArray := make([]Principal_voiceDB, 0)
	query := backRepoPrincipal_voice.db.Find(&principal_voiceDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	principal_voiceInstancesToBeRemovedFromTheStage := make(map[*models.Principal_voice]any)
	for key, value := range backRepoPrincipal_voice.stage.Principal_voices {
		principal_voiceInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, principal_voiceDB := range principal_voiceDBArray {
		backRepoPrincipal_voice.CheckoutPhaseOneInstance(&principal_voiceDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		principal_voice, ok := backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr[principal_voiceDB.ID]
		if ok {
			delete(principal_voiceInstancesToBeRemovedFromTheStage, principal_voice)
		}
	}

	// remove from stage and back repo's 3 maps all principal_voices that are not in the checkout
	for principal_voice := range principal_voiceInstancesToBeRemovedFromTheStage {
		principal_voice.Unstage(backRepoPrincipal_voice.GetStage())

		// remove instance from the back repo 3 maps
		principal_voiceID := backRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice]
		delete(backRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID, principal_voice)
		delete(backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB, principal_voiceID)
		delete(backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr, principal_voiceID)
	}

	return
}

// CheckoutPhaseOneInstance takes a principal_voiceDB that has been found in the DB, updates the backRepo and stages the
// models version of the principal_voiceDB
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CheckoutPhaseOneInstance(principal_voiceDB *Principal_voiceDB) (Error error) {

	principal_voice, ok := backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr[principal_voiceDB.ID]
	if !ok {
		principal_voice = new(models.Principal_voice)

		backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr[principal_voiceDB.ID] = principal_voice
		backRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice] = principal_voiceDB.ID

		// append model store with the new element
		principal_voice.Name = principal_voiceDB.Name_Data.String
		principal_voice.Stage(backRepoPrincipal_voice.GetStage())
	}
	principal_voiceDB.CopyBasicFieldsToPrincipal_voice(principal_voice)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	principal_voice.Stage(backRepoPrincipal_voice.GetStage())

	// preserve pointer to principal_voiceDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Principal_voiceDBID_Principal_voiceDB)[principal_voiceDB hold variable pointers
	principal_voiceDB_Data := *principal_voiceDB
	preservedPtrToPrincipal_voice := &principal_voiceDB_Data
	backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[principal_voiceDB.ID] = preservedPtrToPrincipal_voice

	return
}

// BackRepoPrincipal_voice.CheckoutPhaseTwo Checkouts all staged instances of Principal_voice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, principal_voiceDB := range backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB {
		backRepoPrincipal_voice.CheckoutPhaseTwoInstance(backRepo, principal_voiceDB)
	}
	return
}

// BackRepoPrincipal_voice.CheckoutPhaseTwoInstance Checkouts staged instances of Principal_voice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, principal_voiceDB *Principal_voiceDB) (Error error) {

	principal_voice := backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr[principal_voiceDB.ID]

	principal_voiceDB.DecodePointers(backRepo, principal_voice)

	return
}

func (principal_voiceDB *Principal_voiceDB) DecodePointers(backRepo *BackRepoStruct, principal_voice *models.Principal_voice) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPrincipal_voice allows commit of a single principal_voice (if already staged)
func (backRepo *BackRepoStruct) CommitPrincipal_voice(principal_voice *models.Principal_voice) {
	backRepo.BackRepoPrincipal_voice.CommitPhaseOneInstance(principal_voice)
	if id, ok := backRepo.BackRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice]; ok {
		backRepo.BackRepoPrincipal_voice.CommitPhaseTwoInstance(backRepo, id, principal_voice)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPrincipal_voice allows checkout of a single principal_voice (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPrincipal_voice(principal_voice *models.Principal_voice) {
	// check if the principal_voice is staged
	if _, ok := backRepo.BackRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice]; ok {

		if id, ok := backRepo.BackRepoPrincipal_voice.Map_Principal_voicePtr_Principal_voiceDBID[principal_voice]; ok {
			var principal_voiceDB Principal_voiceDB
			principal_voiceDB.ID = id

			if err := backRepo.BackRepoPrincipal_voice.db.First(&principal_voiceDB, id).Error; err != nil {
				log.Fatalln("CheckoutPrincipal_voice : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPrincipal_voice.CheckoutPhaseOneInstance(&principal_voiceDB)
			backRepo.BackRepoPrincipal_voice.CheckoutPhaseTwoInstance(backRepo, &principal_voiceDB)
		}
	}
}

// CopyBasicFieldsFromPrincipal_voice
func (principal_voiceDB *Principal_voiceDB) CopyBasicFieldsFromPrincipal_voice(principal_voice *models.Principal_voice) {
	// insertion point for fields commit

	principal_voiceDB.Name_Data.String = principal_voice.Name
	principal_voiceDB.Name_Data.Valid = true

	principal_voiceDB.Value_Data.String = principal_voice.Value
	principal_voiceDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromPrincipal_voice_WOP
func (principal_voiceDB *Principal_voiceDB) CopyBasicFieldsFromPrincipal_voice_WOP(principal_voice *models.Principal_voice_WOP) {
	// insertion point for fields commit

	principal_voiceDB.Name_Data.String = principal_voice.Name
	principal_voiceDB.Name_Data.Valid = true

	principal_voiceDB.Value_Data.String = principal_voice.Value
	principal_voiceDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromPrincipal_voiceWOP
func (principal_voiceDB *Principal_voiceDB) CopyBasicFieldsFromPrincipal_voiceWOP(principal_voice *Principal_voiceWOP) {
	// insertion point for fields commit

	principal_voiceDB.Name_Data.String = principal_voice.Name
	principal_voiceDB.Name_Data.Valid = true

	principal_voiceDB.Value_Data.String = principal_voice.Value
	principal_voiceDB.Value_Data.Valid = true
}

// CopyBasicFieldsToPrincipal_voice
func (principal_voiceDB *Principal_voiceDB) CopyBasicFieldsToPrincipal_voice(principal_voice *models.Principal_voice) {
	// insertion point for checkout of basic fields (back repo to stage)
	principal_voice.Name = principal_voiceDB.Name_Data.String
	principal_voice.Value = principal_voiceDB.Value_Data.String
}

// CopyBasicFieldsToPrincipal_voice_WOP
func (principal_voiceDB *Principal_voiceDB) CopyBasicFieldsToPrincipal_voice_WOP(principal_voice *models.Principal_voice_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	principal_voice.Name = principal_voiceDB.Name_Data.String
	principal_voice.Value = principal_voiceDB.Value_Data.String
}

// CopyBasicFieldsToPrincipal_voiceWOP
func (principal_voiceDB *Principal_voiceDB) CopyBasicFieldsToPrincipal_voiceWOP(principal_voice *Principal_voiceWOP) {
	principal_voice.ID = int(principal_voiceDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	principal_voice.Name = principal_voiceDB.Name_Data.String
	principal_voice.Value = principal_voiceDB.Value_Data.String
}

// Backup generates a json file from a slice of all Principal_voiceDB instances in the backrepo
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Principal_voiceDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Principal_voiceDB, 0)
	for _, principal_voiceDB := range backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB {
		forBackup = append(forBackup, principal_voiceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Principal_voice ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Principal_voice file", err.Error())
	}
}

// Backup generates a json file from a slice of all Principal_voiceDB instances in the backrepo
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Principal_voiceDB, 0)
	for _, principal_voiceDB := range backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB {
		forBackup = append(forBackup, principal_voiceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Principal_voice")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Principal_voice_Fields, -1)
	for _, principal_voiceDB := range forBackup {

		var principal_voiceWOP Principal_voiceWOP
		principal_voiceDB.CopyBasicFieldsToPrincipal_voiceWOP(&principal_voiceWOP)

		row := sh.AddRow()
		row.WriteStruct(&principal_voiceWOP, -1)
	}
}

// RestoreXL from the "Principal_voice" sheet all Principal_voiceDB instances
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPrincipal_voiceid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Principal_voice"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPrincipal_voice.rowVisitorPrincipal_voice)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) rowVisitorPrincipal_voice(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var principal_voiceWOP Principal_voiceWOP
		row.ReadStruct(&principal_voiceWOP)

		// add the unmarshalled struct to the stage
		principal_voiceDB := new(Principal_voiceDB)
		principal_voiceDB.CopyBasicFieldsFromPrincipal_voiceWOP(&principal_voiceWOP)

		principal_voiceDB_ID_atBackupTime := principal_voiceDB.ID
		principal_voiceDB.ID = 0
		query := backRepoPrincipal_voice.db.Create(principal_voiceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[principal_voiceDB.ID] = principal_voiceDB
		BackRepoPrincipal_voiceid_atBckpTime_newID[principal_voiceDB_ID_atBackupTime] = principal_voiceDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Principal_voiceDB.json" in dirPath that stores an array
// of Principal_voiceDB and stores it in the database
// the map BackRepoPrincipal_voiceid_atBckpTime_newID is updated accordingly
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPrincipal_voiceid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Principal_voiceDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Principal_voice file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Principal_voiceDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Principal_voiceDBID_Principal_voiceDB
	for _, principal_voiceDB := range forRestore {

		principal_voiceDB_ID_atBackupTime := principal_voiceDB.ID
		principal_voiceDB.ID = 0
		query := backRepoPrincipal_voice.db.Create(principal_voiceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[principal_voiceDB.ID] = principal_voiceDB
		BackRepoPrincipal_voiceid_atBckpTime_newID[principal_voiceDB_ID_atBackupTime] = principal_voiceDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Principal_voice file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Principal_voice>id_atBckpTime_newID
// to compute new index
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) RestorePhaseTwo() {

	for _, principal_voiceDB := range backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB {

		// next line of code is to avert unused variable compilation error
		_ = principal_voiceDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPrincipal_voice.db.Model(principal_voiceDB).Updates(*principal_voiceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPrincipal_voice.ResetReversePointers commits all staged instances of Principal_voice to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, principal_voice := range backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voicePtr {
		backRepoPrincipal_voice.ResetReversePointersInstance(backRepo, idx, principal_voice)
	}

	return
}

func (backRepoPrincipal_voice *BackRepoPrincipal_voiceStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, principal_voice *models.Principal_voice) (Error error) {

	// fetch matching principal_voiceDB
	if principal_voiceDB, ok := backRepoPrincipal_voice.Map_Principal_voiceDBID_Principal_voiceDB[idx]; ok {
		_ = principal_voiceDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPrincipal_voiceid_atBckpTime_newID map[uint]uint
