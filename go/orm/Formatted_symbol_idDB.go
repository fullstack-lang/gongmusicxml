// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Formatted_symbol_id_sql sql.NullBool
var dummy_Formatted_symbol_id_time time.Duration
var dummy_Formatted_symbol_id_sort sort.Float64Slice

// Formatted_symbol_idAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formatted_symbol_idAPI
type Formatted_symbol_idAPI struct {
	gorm.Model

	models.Formatted_symbol_id_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Formatted_symbol_idPointersEncoding Formatted_symbol_idPointersEncoding
}

// Formatted_symbol_idPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Formatted_symbol_idPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Formatted_symbol_idDB describes a formatted_symbol_id in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formatted_symbol_idDB
type Formatted_symbol_idDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formatted_symbol_idDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Formatted_symbol_idPointersEncoding
}

// Formatted_symbol_idDBs arrays formatted_symbol_idDBs
// swagger:response formatted_symbol_idDBsResponse
type Formatted_symbol_idDBs []Formatted_symbol_idDB

// Formatted_symbol_idDBResponse provides response
// swagger:response formatted_symbol_idDBResponse
type Formatted_symbol_idDBResponse struct {
	Formatted_symbol_idDB
}

// Formatted_symbol_idWOP is a Formatted_symbol_id without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Formatted_symbol_idWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Formatted_symbol_id_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFormatted_symbol_idStruct struct {
	// stores Formatted_symbol_idDB according to their gorm ID
	Map_Formatted_symbol_idDBID_Formatted_symbol_idDB map[uint]*Formatted_symbol_idDB

	// stores Formatted_symbol_idDB ID according to Formatted_symbol_id address
	Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID map[*models.Formatted_symbol_id]uint

	// stores Formatted_symbol_id according to their gorm ID
	Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr map[uint]*models.Formatted_symbol_id

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormatted_symbol_id.stage
	return
}

func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) GetDB() *gorm.DB {
	return backRepoFormatted_symbol_id.db
}

// GetFormatted_symbol_idDBFromFormatted_symbol_idPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) GetFormatted_symbol_idDBFromFormatted_symbol_idPtr(formatted_symbol_id *models.Formatted_symbol_id) (formatted_symbol_idDB *Formatted_symbol_idDB) {
	id := backRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id]
	formatted_symbol_idDB = backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[id]
	return
}

// BackRepoFormatted_symbol_id.CommitPhaseOne commits all staged instances of Formatted_symbol_id to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formatted_symbol_id := range stage.Formatted_symbol_ids {
		backRepoFormatted_symbol_id.CommitPhaseOneInstance(formatted_symbol_id)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formatted_symbol_id := range backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr {
		if _, ok := stage.Formatted_symbol_ids[formatted_symbol_id]; !ok {
			backRepoFormatted_symbol_id.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormatted_symbol_id.CommitDeleteInstance commits deletion of Formatted_symbol_id to the BackRepo
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CommitDeleteInstance(id uint) (Error error) {

	formatted_symbol_id := backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr[id]

	// formatted_symbol_id is not staged anymore, remove formatted_symbol_idDB
	formatted_symbol_idDB := backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[id]
	query := backRepoFormatted_symbol_id.db.Unscoped().Delete(&formatted_symbol_idDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID, formatted_symbol_id)
	delete(backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr, id)
	delete(backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB, id)

	return
}

// BackRepoFormatted_symbol_id.CommitPhaseOneInstance commits formatted_symbol_id staged instances of Formatted_symbol_id to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CommitPhaseOneInstance(formatted_symbol_id *models.Formatted_symbol_id) (Error error) {

	// check if the formatted_symbol_id is not commited yet
	if _, ok := backRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id]; ok {
		return
	}

	// initiate formatted_symbol_id
	var formatted_symbol_idDB Formatted_symbol_idDB
	formatted_symbol_idDB.CopyBasicFieldsFromFormatted_symbol_id(formatted_symbol_id)

	query := backRepoFormatted_symbol_id.db.Create(&formatted_symbol_idDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id] = formatted_symbol_idDB.ID
	backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr[formatted_symbol_idDB.ID] = formatted_symbol_id
	backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[formatted_symbol_idDB.ID] = &formatted_symbol_idDB

	return
}

// BackRepoFormatted_symbol_id.CommitPhaseTwo commits all staged instances of Formatted_symbol_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formatted_symbol_id := range backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr {
		backRepoFormatted_symbol_id.CommitPhaseTwoInstance(backRepo, idx, formatted_symbol_id)
	}

	return
}

// BackRepoFormatted_symbol_id.CommitPhaseTwoInstance commits {{structname }} of models.Formatted_symbol_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formatted_symbol_id *models.Formatted_symbol_id) (Error error) {

	// fetch matching formatted_symbol_idDB
	if formatted_symbol_idDB, ok := backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[idx]; ok {

		formatted_symbol_idDB.CopyBasicFieldsFromFormatted_symbol_id(formatted_symbol_id)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormatted_symbol_id.db.Save(&formatted_symbol_idDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Formatted_symbol_id intance %s", formatted_symbol_id.Name))
		return err
	}

	return
}

// BackRepoFormatted_symbol_id.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CheckoutPhaseOne() (Error error) {

	formatted_symbol_idDBArray := make([]Formatted_symbol_idDB, 0)
	query := backRepoFormatted_symbol_id.db.Find(&formatted_symbol_idDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formatted_symbol_idInstancesToBeRemovedFromTheStage := make(map[*models.Formatted_symbol_id]any)
	for key, value := range backRepoFormatted_symbol_id.stage.Formatted_symbol_ids {
		formatted_symbol_idInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formatted_symbol_idDB := range formatted_symbol_idDBArray {
		backRepoFormatted_symbol_id.CheckoutPhaseOneInstance(&formatted_symbol_idDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formatted_symbol_id, ok := backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr[formatted_symbol_idDB.ID]
		if ok {
			delete(formatted_symbol_idInstancesToBeRemovedFromTheStage, formatted_symbol_id)
		}
	}

	// remove from stage and back repo's 3 maps all formatted_symbol_ids that are not in the checkout
	for formatted_symbol_id := range formatted_symbol_idInstancesToBeRemovedFromTheStage {
		formatted_symbol_id.Unstage(backRepoFormatted_symbol_id.GetStage())

		// remove instance from the back repo 3 maps
		formatted_symbol_idID := backRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id]
		delete(backRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID, formatted_symbol_id)
		delete(backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB, formatted_symbol_idID)
		delete(backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr, formatted_symbol_idID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formatted_symbol_idDB that has been found in the DB, updates the backRepo and stages the
// models version of the formatted_symbol_idDB
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CheckoutPhaseOneInstance(formatted_symbol_idDB *Formatted_symbol_idDB) (Error error) {

	formatted_symbol_id, ok := backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr[formatted_symbol_idDB.ID]
	if !ok {
		formatted_symbol_id = new(models.Formatted_symbol_id)

		backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr[formatted_symbol_idDB.ID] = formatted_symbol_id
		backRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id] = formatted_symbol_idDB.ID

		// append model store with the new element
		formatted_symbol_id.Name = formatted_symbol_idDB.Name_Data.String
		formatted_symbol_id.Stage(backRepoFormatted_symbol_id.GetStage())
	}
	formatted_symbol_idDB.CopyBasicFieldsToFormatted_symbol_id(formatted_symbol_id)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formatted_symbol_id.Stage(backRepoFormatted_symbol_id.GetStage())

	// preserve pointer to formatted_symbol_idDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Formatted_symbol_idDBID_Formatted_symbol_idDB)[formatted_symbol_idDB hold variable pointers
	formatted_symbol_idDB_Data := *formatted_symbol_idDB
	preservedPtrToFormatted_symbol_id := &formatted_symbol_idDB_Data
	backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[formatted_symbol_idDB.ID] = preservedPtrToFormatted_symbol_id

	return
}

// BackRepoFormatted_symbol_id.CheckoutPhaseTwo Checkouts all staged instances of Formatted_symbol_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formatted_symbol_idDB := range backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB {
		backRepoFormatted_symbol_id.CheckoutPhaseTwoInstance(backRepo, formatted_symbol_idDB)
	}
	return
}

// BackRepoFormatted_symbol_id.CheckoutPhaseTwoInstance Checkouts staged instances of Formatted_symbol_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formatted_symbol_idDB *Formatted_symbol_idDB) (Error error) {

	formatted_symbol_id := backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr[formatted_symbol_idDB.ID]

	formatted_symbol_idDB.DecodePointers(backRepo, formatted_symbol_id)

	return
}

func (formatted_symbol_idDB *Formatted_symbol_idDB) DecodePointers(backRepo *BackRepoStruct, formatted_symbol_id *models.Formatted_symbol_id) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormatted_symbol_id allows commit of a single formatted_symbol_id (if already staged)
func (backRepo *BackRepoStruct) CommitFormatted_symbol_id(formatted_symbol_id *models.Formatted_symbol_id) {
	backRepo.BackRepoFormatted_symbol_id.CommitPhaseOneInstance(formatted_symbol_id)
	if id, ok := backRepo.BackRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id]; ok {
		backRepo.BackRepoFormatted_symbol_id.CommitPhaseTwoInstance(backRepo, id, formatted_symbol_id)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormatted_symbol_id allows checkout of a single formatted_symbol_id (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormatted_symbol_id(formatted_symbol_id *models.Formatted_symbol_id) {
	// check if the formatted_symbol_id is staged
	if _, ok := backRepo.BackRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id]; ok {

		if id, ok := backRepo.BackRepoFormatted_symbol_id.Map_Formatted_symbol_idPtr_Formatted_symbol_idDBID[formatted_symbol_id]; ok {
			var formatted_symbol_idDB Formatted_symbol_idDB
			formatted_symbol_idDB.ID = id

			if err := backRepo.BackRepoFormatted_symbol_id.db.First(&formatted_symbol_idDB, id).Error; err != nil {
				log.Fatalln("CheckoutFormatted_symbol_id : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormatted_symbol_id.CheckoutPhaseOneInstance(&formatted_symbol_idDB)
			backRepo.BackRepoFormatted_symbol_id.CheckoutPhaseTwoInstance(backRepo, &formatted_symbol_idDB)
		}
	}
}

// CopyBasicFieldsFromFormatted_symbol_id
func (formatted_symbol_idDB *Formatted_symbol_idDB) CopyBasicFieldsFromFormatted_symbol_id(formatted_symbol_id *models.Formatted_symbol_id) {
	// insertion point for fields commit

	formatted_symbol_idDB.Name_Data.String = formatted_symbol_id.Name
	formatted_symbol_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFormatted_symbol_id_WOP
func (formatted_symbol_idDB *Formatted_symbol_idDB) CopyBasicFieldsFromFormatted_symbol_id_WOP(formatted_symbol_id *models.Formatted_symbol_id_WOP) {
	// insertion point for fields commit

	formatted_symbol_idDB.Name_Data.String = formatted_symbol_id.Name
	formatted_symbol_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFormatted_symbol_idWOP
func (formatted_symbol_idDB *Formatted_symbol_idDB) CopyBasicFieldsFromFormatted_symbol_idWOP(formatted_symbol_id *Formatted_symbol_idWOP) {
	// insertion point for fields commit

	formatted_symbol_idDB.Name_Data.String = formatted_symbol_id.Name
	formatted_symbol_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFormatted_symbol_id
func (formatted_symbol_idDB *Formatted_symbol_idDB) CopyBasicFieldsToFormatted_symbol_id(formatted_symbol_id *models.Formatted_symbol_id) {
	// insertion point for checkout of basic fields (back repo to stage)
	formatted_symbol_id.Name = formatted_symbol_idDB.Name_Data.String
}

// CopyBasicFieldsToFormatted_symbol_id_WOP
func (formatted_symbol_idDB *Formatted_symbol_idDB) CopyBasicFieldsToFormatted_symbol_id_WOP(formatted_symbol_id *models.Formatted_symbol_id_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	formatted_symbol_id.Name = formatted_symbol_idDB.Name_Data.String
}

// CopyBasicFieldsToFormatted_symbol_idWOP
func (formatted_symbol_idDB *Formatted_symbol_idDB) CopyBasicFieldsToFormatted_symbol_idWOP(formatted_symbol_id *Formatted_symbol_idWOP) {
	formatted_symbol_id.ID = int(formatted_symbol_idDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formatted_symbol_id.Name = formatted_symbol_idDB.Name_Data.String
}

// Backup generates a json file from a slice of all Formatted_symbol_idDB instances in the backrepo
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Formatted_symbol_idDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Formatted_symbol_idDB, 0)
	for _, formatted_symbol_idDB := range backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB {
		forBackup = append(forBackup, formatted_symbol_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Formatted_symbol_id ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Formatted_symbol_id file", err.Error())
	}
}

// Backup generates a json file from a slice of all Formatted_symbol_idDB instances in the backrepo
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Formatted_symbol_idDB, 0)
	for _, formatted_symbol_idDB := range backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB {
		forBackup = append(forBackup, formatted_symbol_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Formatted_symbol_id")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Formatted_symbol_id_Fields, -1)
	for _, formatted_symbol_idDB := range forBackup {

		var formatted_symbol_idWOP Formatted_symbol_idWOP
		formatted_symbol_idDB.CopyBasicFieldsToFormatted_symbol_idWOP(&formatted_symbol_idWOP)

		row := sh.AddRow()
		row.WriteStruct(&formatted_symbol_idWOP, -1)
	}
}

// RestoreXL from the "Formatted_symbol_id" sheet all Formatted_symbol_idDB instances
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormatted_symbol_idid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Formatted_symbol_id"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormatted_symbol_id.rowVisitorFormatted_symbol_id)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) rowVisitorFormatted_symbol_id(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formatted_symbol_idWOP Formatted_symbol_idWOP
		row.ReadStruct(&formatted_symbol_idWOP)

		// add the unmarshalled struct to the stage
		formatted_symbol_idDB := new(Formatted_symbol_idDB)
		formatted_symbol_idDB.CopyBasicFieldsFromFormatted_symbol_idWOP(&formatted_symbol_idWOP)

		formatted_symbol_idDB_ID_atBackupTime := formatted_symbol_idDB.ID
		formatted_symbol_idDB.ID = 0
		query := backRepoFormatted_symbol_id.db.Create(formatted_symbol_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[formatted_symbol_idDB.ID] = formatted_symbol_idDB
		BackRepoFormatted_symbol_idid_atBckpTime_newID[formatted_symbol_idDB_ID_atBackupTime] = formatted_symbol_idDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Formatted_symbol_idDB.json" in dirPath that stores an array
// of Formatted_symbol_idDB and stores it in the database
// the map BackRepoFormatted_symbol_idid_atBckpTime_newID is updated accordingly
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormatted_symbol_idid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Formatted_symbol_idDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Formatted_symbol_id file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Formatted_symbol_idDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Formatted_symbol_idDBID_Formatted_symbol_idDB
	for _, formatted_symbol_idDB := range forRestore {

		formatted_symbol_idDB_ID_atBackupTime := formatted_symbol_idDB.ID
		formatted_symbol_idDB.ID = 0
		query := backRepoFormatted_symbol_id.db.Create(formatted_symbol_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[formatted_symbol_idDB.ID] = formatted_symbol_idDB
		BackRepoFormatted_symbol_idid_atBckpTime_newID[formatted_symbol_idDB_ID_atBackupTime] = formatted_symbol_idDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Formatted_symbol_id file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Formatted_symbol_id>id_atBckpTime_newID
// to compute new index
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) RestorePhaseTwo() {

	for _, formatted_symbol_idDB := range backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB {

		// next line of code is to avert unused variable compilation error
		_ = formatted_symbol_idDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormatted_symbol_id.db.Model(formatted_symbol_idDB).Updates(*formatted_symbol_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFormatted_symbol_id.ResetReversePointers commits all staged instances of Formatted_symbol_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, formatted_symbol_id := range backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idPtr {
		backRepoFormatted_symbol_id.ResetReversePointersInstance(backRepo, idx, formatted_symbol_id)
	}

	return
}

func (backRepoFormatted_symbol_id *BackRepoFormatted_symbol_idStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, formatted_symbol_id *models.Formatted_symbol_id) (Error error) {

	// fetch matching formatted_symbol_idDB
	if formatted_symbol_idDB, ok := backRepoFormatted_symbol_id.Map_Formatted_symbol_idDBID_Formatted_symbol_idDB[idx]; ok {
		_ = formatted_symbol_idDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormatted_symbol_idid_atBckpTime_newID map[uint]uint
