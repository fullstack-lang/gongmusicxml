// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Transpose_sql sql.NullBool
var dummy_Transpose_time time.Duration
var dummy_Transpose_sort sort.Float64Slice

// TransposeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model transposeAPI
type TransposeAPI struct {
	gorm.Model

	models.Transpose_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TransposePointersEncoding TransposePointersEncoding
}

// TransposePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TransposePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TransposeDB describes a transpose in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model transposeDB
type TransposeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field transposeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TransposePointersEncoding
}

// TransposeDBs arrays transposeDBs
// swagger:response transposeDBsResponse
type TransposeDBs []TransposeDB

// TransposeDBResponse provides response
// swagger:response transposeDBResponse
type TransposeDBResponse struct {
	TransposeDB
}

// TransposeWOP is a Transpose without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TransposeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Transpose_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTransposeStruct struct {
	// stores TransposeDB according to their gorm ID
	Map_TransposeDBID_TransposeDB map[uint]*TransposeDB

	// stores TransposeDB ID according to Transpose address
	Map_TransposePtr_TransposeDBID map[*models.Transpose]uint

	// stores Transpose according to their gorm ID
	Map_TransposeDBID_TransposePtr map[uint]*models.Transpose

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTranspose *BackRepoTransposeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTranspose.stage
	return
}

func (backRepoTranspose *BackRepoTransposeStruct) GetDB() *gorm.DB {
	return backRepoTranspose.db
}

// GetTransposeDBFromTransposePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTranspose *BackRepoTransposeStruct) GetTransposeDBFromTransposePtr(transpose *models.Transpose) (transposeDB *TransposeDB) {
	id := backRepoTranspose.Map_TransposePtr_TransposeDBID[transpose]
	transposeDB = backRepoTranspose.Map_TransposeDBID_TransposeDB[id]
	return
}

// BackRepoTranspose.CommitPhaseOne commits all staged instances of Transpose to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTranspose *BackRepoTransposeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for transpose := range stage.Transposes {
		backRepoTranspose.CommitPhaseOneInstance(transpose)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, transpose := range backRepoTranspose.Map_TransposeDBID_TransposePtr {
		if _, ok := stage.Transposes[transpose]; !ok {
			backRepoTranspose.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTranspose.CommitDeleteInstance commits deletion of Transpose to the BackRepo
func (backRepoTranspose *BackRepoTransposeStruct) CommitDeleteInstance(id uint) (Error error) {

	transpose := backRepoTranspose.Map_TransposeDBID_TransposePtr[id]

	// transpose is not staged anymore, remove transposeDB
	transposeDB := backRepoTranspose.Map_TransposeDBID_TransposeDB[id]
	query := backRepoTranspose.db.Unscoped().Delete(&transposeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTranspose.Map_TransposePtr_TransposeDBID, transpose)
	delete(backRepoTranspose.Map_TransposeDBID_TransposePtr, id)
	delete(backRepoTranspose.Map_TransposeDBID_TransposeDB, id)

	return
}

// BackRepoTranspose.CommitPhaseOneInstance commits transpose staged instances of Transpose to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTranspose *BackRepoTransposeStruct) CommitPhaseOneInstance(transpose *models.Transpose) (Error error) {

	// check if the transpose is not commited yet
	if _, ok := backRepoTranspose.Map_TransposePtr_TransposeDBID[transpose]; ok {
		return
	}

	// initiate transpose
	var transposeDB TransposeDB
	transposeDB.CopyBasicFieldsFromTranspose(transpose)

	query := backRepoTranspose.db.Create(&transposeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTranspose.Map_TransposePtr_TransposeDBID[transpose] = transposeDB.ID
	backRepoTranspose.Map_TransposeDBID_TransposePtr[transposeDB.ID] = transpose
	backRepoTranspose.Map_TransposeDBID_TransposeDB[transposeDB.ID] = &transposeDB

	return
}

// BackRepoTranspose.CommitPhaseTwo commits all staged instances of Transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranspose *BackRepoTransposeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, transpose := range backRepoTranspose.Map_TransposeDBID_TransposePtr {
		backRepoTranspose.CommitPhaseTwoInstance(backRepo, idx, transpose)
	}

	return
}

// BackRepoTranspose.CommitPhaseTwoInstance commits {{structname }} of models.Transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranspose *BackRepoTransposeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, transpose *models.Transpose) (Error error) {

	// fetch matching transposeDB
	if transposeDB, ok := backRepoTranspose.Map_TransposeDBID_TransposeDB[idx]; ok {

		transposeDB.CopyBasicFieldsFromTranspose(transpose)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTranspose.db.Save(&transposeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Transpose intance %s", transpose.Name))
		return err
	}

	return
}

// BackRepoTranspose.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTranspose *BackRepoTransposeStruct) CheckoutPhaseOne() (Error error) {

	transposeDBArray := make([]TransposeDB, 0)
	query := backRepoTranspose.db.Find(&transposeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	transposeInstancesToBeRemovedFromTheStage := make(map[*models.Transpose]any)
	for key, value := range backRepoTranspose.stage.Transposes {
		transposeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, transposeDB := range transposeDBArray {
		backRepoTranspose.CheckoutPhaseOneInstance(&transposeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		transpose, ok := backRepoTranspose.Map_TransposeDBID_TransposePtr[transposeDB.ID]
		if ok {
			delete(transposeInstancesToBeRemovedFromTheStage, transpose)
		}
	}

	// remove from stage and back repo's 3 maps all transposes that are not in the checkout
	for transpose := range transposeInstancesToBeRemovedFromTheStage {
		transpose.Unstage(backRepoTranspose.GetStage())

		// remove instance from the back repo 3 maps
		transposeID := backRepoTranspose.Map_TransposePtr_TransposeDBID[transpose]
		delete(backRepoTranspose.Map_TransposePtr_TransposeDBID, transpose)
		delete(backRepoTranspose.Map_TransposeDBID_TransposeDB, transposeID)
		delete(backRepoTranspose.Map_TransposeDBID_TransposePtr, transposeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a transposeDB that has been found in the DB, updates the backRepo and stages the
// models version of the transposeDB
func (backRepoTranspose *BackRepoTransposeStruct) CheckoutPhaseOneInstance(transposeDB *TransposeDB) (Error error) {

	transpose, ok := backRepoTranspose.Map_TransposeDBID_TransposePtr[transposeDB.ID]
	if !ok {
		transpose = new(models.Transpose)

		backRepoTranspose.Map_TransposeDBID_TransposePtr[transposeDB.ID] = transpose
		backRepoTranspose.Map_TransposePtr_TransposeDBID[transpose] = transposeDB.ID

		// append model store with the new element
		transpose.Name = transposeDB.Name_Data.String
		transpose.Stage(backRepoTranspose.GetStage())
	}
	transposeDB.CopyBasicFieldsToTranspose(transpose)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	transpose.Stage(backRepoTranspose.GetStage())

	// preserve pointer to transposeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TransposeDBID_TransposeDB)[transposeDB hold variable pointers
	transposeDB_Data := *transposeDB
	preservedPtrToTranspose := &transposeDB_Data
	backRepoTranspose.Map_TransposeDBID_TransposeDB[transposeDB.ID] = preservedPtrToTranspose

	return
}

// BackRepoTranspose.CheckoutPhaseTwo Checkouts all staged instances of Transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranspose *BackRepoTransposeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, transposeDB := range backRepoTranspose.Map_TransposeDBID_TransposeDB {
		backRepoTranspose.CheckoutPhaseTwoInstance(backRepo, transposeDB)
	}
	return
}

// BackRepoTranspose.CheckoutPhaseTwoInstance Checkouts staged instances of Transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranspose *BackRepoTransposeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, transposeDB *TransposeDB) (Error error) {

	transpose := backRepoTranspose.Map_TransposeDBID_TransposePtr[transposeDB.ID]

	transposeDB.DecodePointers(backRepo, transpose)

	return
}

func (transposeDB *TransposeDB) DecodePointers(backRepo *BackRepoStruct, transpose *models.Transpose) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTranspose allows commit of a single transpose (if already staged)
func (backRepo *BackRepoStruct) CommitTranspose(transpose *models.Transpose) {
	backRepo.BackRepoTranspose.CommitPhaseOneInstance(transpose)
	if id, ok := backRepo.BackRepoTranspose.Map_TransposePtr_TransposeDBID[transpose]; ok {
		backRepo.BackRepoTranspose.CommitPhaseTwoInstance(backRepo, id, transpose)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTranspose allows checkout of a single transpose (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTranspose(transpose *models.Transpose) {
	// check if the transpose is staged
	if _, ok := backRepo.BackRepoTranspose.Map_TransposePtr_TransposeDBID[transpose]; ok {

		if id, ok := backRepo.BackRepoTranspose.Map_TransposePtr_TransposeDBID[transpose]; ok {
			var transposeDB TransposeDB
			transposeDB.ID = id

			if err := backRepo.BackRepoTranspose.db.First(&transposeDB, id).Error; err != nil {
				log.Fatalln("CheckoutTranspose : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTranspose.CheckoutPhaseOneInstance(&transposeDB)
			backRepo.BackRepoTranspose.CheckoutPhaseTwoInstance(backRepo, &transposeDB)
		}
	}
}

// CopyBasicFieldsFromTranspose
func (transposeDB *TransposeDB) CopyBasicFieldsFromTranspose(transpose *models.Transpose) {
	// insertion point for fields commit

	transposeDB.Name_Data.String = transpose.Name
	transposeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTranspose_WOP
func (transposeDB *TransposeDB) CopyBasicFieldsFromTranspose_WOP(transpose *models.Transpose_WOP) {
	// insertion point for fields commit

	transposeDB.Name_Data.String = transpose.Name
	transposeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTransposeWOP
func (transposeDB *TransposeDB) CopyBasicFieldsFromTransposeWOP(transpose *TransposeWOP) {
	// insertion point for fields commit

	transposeDB.Name_Data.String = transpose.Name
	transposeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTranspose
func (transposeDB *TransposeDB) CopyBasicFieldsToTranspose(transpose *models.Transpose) {
	// insertion point for checkout of basic fields (back repo to stage)
	transpose.Name = transposeDB.Name_Data.String
}

// CopyBasicFieldsToTranspose_WOP
func (transposeDB *TransposeDB) CopyBasicFieldsToTranspose_WOP(transpose *models.Transpose_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	transpose.Name = transposeDB.Name_Data.String
}

// CopyBasicFieldsToTransposeWOP
func (transposeDB *TransposeDB) CopyBasicFieldsToTransposeWOP(transpose *TransposeWOP) {
	transpose.ID = int(transposeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	transpose.Name = transposeDB.Name_Data.String
}

// Backup generates a json file from a slice of all TransposeDB instances in the backrepo
func (backRepoTranspose *BackRepoTransposeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TransposeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TransposeDB, 0)
	for _, transposeDB := range backRepoTranspose.Map_TransposeDBID_TransposeDB {
		forBackup = append(forBackup, transposeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Transpose ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Transpose file", err.Error())
	}
}

// Backup generates a json file from a slice of all TransposeDB instances in the backrepo
func (backRepoTranspose *BackRepoTransposeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TransposeDB, 0)
	for _, transposeDB := range backRepoTranspose.Map_TransposeDBID_TransposeDB {
		forBackup = append(forBackup, transposeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Transpose")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Transpose_Fields, -1)
	for _, transposeDB := range forBackup {

		var transposeWOP TransposeWOP
		transposeDB.CopyBasicFieldsToTransposeWOP(&transposeWOP)

		row := sh.AddRow()
		row.WriteStruct(&transposeWOP, -1)
	}
}

// RestoreXL from the "Transpose" sheet all TransposeDB instances
func (backRepoTranspose *BackRepoTransposeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTransposeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Transpose"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTranspose.rowVisitorTranspose)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTranspose *BackRepoTransposeStruct) rowVisitorTranspose(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var transposeWOP TransposeWOP
		row.ReadStruct(&transposeWOP)

		// add the unmarshalled struct to the stage
		transposeDB := new(TransposeDB)
		transposeDB.CopyBasicFieldsFromTransposeWOP(&transposeWOP)

		transposeDB_ID_atBackupTime := transposeDB.ID
		transposeDB.ID = 0
		query := backRepoTranspose.db.Create(transposeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTranspose.Map_TransposeDBID_TransposeDB[transposeDB.ID] = transposeDB
		BackRepoTransposeid_atBckpTime_newID[transposeDB_ID_atBackupTime] = transposeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TransposeDB.json" in dirPath that stores an array
// of TransposeDB and stores it in the database
// the map BackRepoTransposeid_atBckpTime_newID is updated accordingly
func (backRepoTranspose *BackRepoTransposeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTransposeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TransposeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Transpose file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TransposeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TransposeDBID_TransposeDB
	for _, transposeDB := range forRestore {

		transposeDB_ID_atBackupTime := transposeDB.ID
		transposeDB.ID = 0
		query := backRepoTranspose.db.Create(transposeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTranspose.Map_TransposeDBID_TransposeDB[transposeDB.ID] = transposeDB
		BackRepoTransposeid_atBckpTime_newID[transposeDB_ID_atBackupTime] = transposeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Transpose file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Transpose>id_atBckpTime_newID
// to compute new index
func (backRepoTranspose *BackRepoTransposeStruct) RestorePhaseTwo() {

	for _, transposeDB := range backRepoTranspose.Map_TransposeDBID_TransposeDB {

		// next line of code is to avert unused variable compilation error
		_ = transposeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTranspose.db.Model(transposeDB).Updates(*transposeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTranspose.ResetReversePointers commits all staged instances of Transpose to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTranspose *BackRepoTransposeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, transpose := range backRepoTranspose.Map_TransposeDBID_TransposePtr {
		backRepoTranspose.ResetReversePointersInstance(backRepo, idx, transpose)
	}

	return
}

func (backRepoTranspose *BackRepoTransposeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, transpose *models.Transpose) (Error error) {

	// fetch matching transposeDB
	if transposeDB, ok := backRepoTranspose.Map_TransposeDBID_TransposeDB[idx]; ok {
		_ = transposeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTransposeid_atBckpTime_newID map[uint]uint
