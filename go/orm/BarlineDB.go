// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Barline_sql sql.NullBool
var dummy_Barline_time time.Duration
var dummy_Barline_sort sort.Float64Slice

// BarlineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model barlineAPI
type BarlineAPI struct {
	gorm.Model

	models.Barline_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BarlinePointersEncoding BarlinePointersEncoding
}

// BarlinePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BarlinePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Bar_style is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Bar_styleID sql.NullInt64

	// field Wavy_line is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Wavy_lineID sql.NullInt64

	// field Fermata is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FermataID sql.NullInt64

	// field Ending is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EndingID sql.NullInt64

	// field Repeat is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RepeatID sql.NullInt64
}

// BarlineDB describes a barline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model barlineDB
type BarlineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field barlineDB.Name
	Name_Data sql.NullString

	// Declation for basic field barlineDB.Segno
	Segno_Data sql.NullString

	// Declation for basic field barlineDB.Coda
	Coda_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BarlinePointersEncoding
}

// BarlineDBs arrays barlineDBs
// swagger:response barlineDBsResponse
type BarlineDBs []BarlineDB

// BarlineDBResponse provides response
// swagger:response barlineDBResponse
type BarlineDBResponse struct {
	BarlineDB
}

// BarlineWOP is a Barline without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BarlineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Segno string `xlsx:"2"`

	Coda string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Barline_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Segno",
	"Coda",
}

type BackRepoBarlineStruct struct {
	// stores BarlineDB according to their gorm ID
	Map_BarlineDBID_BarlineDB map[uint]*BarlineDB

	// stores BarlineDB ID according to Barline address
	Map_BarlinePtr_BarlineDBID map[*models.Barline]uint

	// stores Barline according to their gorm ID
	Map_BarlineDBID_BarlinePtr map[uint]*models.Barline

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBarline *BackRepoBarlineStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBarline.stage
	return
}

func (backRepoBarline *BackRepoBarlineStruct) GetDB() *gorm.DB {
	return backRepoBarline.db
}

// GetBarlineDBFromBarlinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoBarline *BackRepoBarlineStruct) GetBarlineDBFromBarlinePtr(barline *models.Barline) (barlineDB *BarlineDB) {
	id := backRepoBarline.Map_BarlinePtr_BarlineDBID[barline]
	barlineDB = backRepoBarline.Map_BarlineDBID_BarlineDB[id]
	return
}

// BackRepoBarline.CommitPhaseOne commits all staged instances of Barline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBarline *BackRepoBarlineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for barline := range stage.Barlines {
		backRepoBarline.CommitPhaseOneInstance(barline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, barline := range backRepoBarline.Map_BarlineDBID_BarlinePtr {
		if _, ok := stage.Barlines[barline]; !ok {
			backRepoBarline.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBarline.CommitDeleteInstance commits deletion of Barline to the BackRepo
func (backRepoBarline *BackRepoBarlineStruct) CommitDeleteInstance(id uint) (Error error) {

	barline := backRepoBarline.Map_BarlineDBID_BarlinePtr[id]

	// barline is not staged anymore, remove barlineDB
	barlineDB := backRepoBarline.Map_BarlineDBID_BarlineDB[id]
	query := backRepoBarline.db.Unscoped().Delete(&barlineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBarline.Map_BarlinePtr_BarlineDBID, barline)
	delete(backRepoBarline.Map_BarlineDBID_BarlinePtr, id)
	delete(backRepoBarline.Map_BarlineDBID_BarlineDB, id)

	return
}

// BackRepoBarline.CommitPhaseOneInstance commits barline staged instances of Barline to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBarline *BackRepoBarlineStruct) CommitPhaseOneInstance(barline *models.Barline) (Error error) {

	// check if the barline is not commited yet
	if _, ok := backRepoBarline.Map_BarlinePtr_BarlineDBID[barline]; ok {
		return
	}

	// initiate barline
	var barlineDB BarlineDB
	barlineDB.CopyBasicFieldsFromBarline(barline)

	query := backRepoBarline.db.Create(&barlineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBarline.Map_BarlinePtr_BarlineDBID[barline] = barlineDB.ID
	backRepoBarline.Map_BarlineDBID_BarlinePtr[barlineDB.ID] = barline
	backRepoBarline.Map_BarlineDBID_BarlineDB[barlineDB.ID] = &barlineDB

	return
}

// BackRepoBarline.CommitPhaseTwo commits all staged instances of Barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarline *BackRepoBarlineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, barline := range backRepoBarline.Map_BarlineDBID_BarlinePtr {
		backRepoBarline.CommitPhaseTwoInstance(backRepo, idx, barline)
	}

	return
}

// BackRepoBarline.CommitPhaseTwoInstance commits {{structname }} of models.Barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarline *BackRepoBarlineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, barline *models.Barline) (Error error) {

	// fetch matching barlineDB
	if barlineDB, ok := backRepoBarline.Map_BarlineDBID_BarlineDB[idx]; ok {

		barlineDB.CopyBasicFieldsFromBarline(barline)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value barline.Bar_style translates to updating the barline.Bar_styleID
		barlineDB.Bar_styleID.Valid = true // allow for a 0 value (nil association)
		if barline.Bar_style != nil {
			if Bar_styleId, ok := backRepo.BackRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[barline.Bar_style]; ok {
				barlineDB.Bar_styleID.Int64 = int64(Bar_styleId)
				barlineDB.Bar_styleID.Valid = true
			}
		} else {
			barlineDB.Bar_styleID.Int64 = 0
			barlineDB.Bar_styleID.Valid = true
		}

		// commit pointer value barline.Wavy_line translates to updating the barline.Wavy_lineID
		barlineDB.Wavy_lineID.Valid = true // allow for a 0 value (nil association)
		if barline.Wavy_line != nil {
			if Wavy_lineId, ok := backRepo.BackRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[barline.Wavy_line]; ok {
				barlineDB.Wavy_lineID.Int64 = int64(Wavy_lineId)
				barlineDB.Wavy_lineID.Valid = true
			}
		} else {
			barlineDB.Wavy_lineID.Int64 = 0
			barlineDB.Wavy_lineID.Valid = true
		}

		// commit pointer value barline.Fermata translates to updating the barline.FermataID
		barlineDB.FermataID.Valid = true // allow for a 0 value (nil association)
		if barline.Fermata != nil {
			if FermataId, ok := backRepo.BackRepoFermata.Map_FermataPtr_FermataDBID[barline.Fermata]; ok {
				barlineDB.FermataID.Int64 = int64(FermataId)
				barlineDB.FermataID.Valid = true
			}
		} else {
			barlineDB.FermataID.Int64 = 0
			barlineDB.FermataID.Valid = true
		}

		// commit pointer value barline.Ending translates to updating the barline.EndingID
		barlineDB.EndingID.Valid = true // allow for a 0 value (nil association)
		if barline.Ending != nil {
			if EndingId, ok := backRepo.BackRepoEnding.Map_EndingPtr_EndingDBID[barline.Ending]; ok {
				barlineDB.EndingID.Int64 = int64(EndingId)
				barlineDB.EndingID.Valid = true
			}
		} else {
			barlineDB.EndingID.Int64 = 0
			barlineDB.EndingID.Valid = true
		}

		// commit pointer value barline.Repeat translates to updating the barline.RepeatID
		barlineDB.RepeatID.Valid = true // allow for a 0 value (nil association)
		if barline.Repeat != nil {
			if RepeatId, ok := backRepo.BackRepoRepeat.Map_RepeatPtr_RepeatDBID[barline.Repeat]; ok {
				barlineDB.RepeatID.Int64 = int64(RepeatId)
				barlineDB.RepeatID.Valid = true
			}
		} else {
			barlineDB.RepeatID.Int64 = 0
			barlineDB.RepeatID.Valid = true
		}

		query := backRepoBarline.db.Save(&barlineDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Barline intance %s", barline.Name))
		return err
	}

	return
}

// BackRepoBarline.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBarline *BackRepoBarlineStruct) CheckoutPhaseOne() (Error error) {

	barlineDBArray := make([]BarlineDB, 0)
	query := backRepoBarline.db.Find(&barlineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	barlineInstancesToBeRemovedFromTheStage := make(map[*models.Barline]any)
	for key, value := range backRepoBarline.stage.Barlines {
		barlineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, barlineDB := range barlineDBArray {
		backRepoBarline.CheckoutPhaseOneInstance(&barlineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		barline, ok := backRepoBarline.Map_BarlineDBID_BarlinePtr[barlineDB.ID]
		if ok {
			delete(barlineInstancesToBeRemovedFromTheStage, barline)
		}
	}

	// remove from stage and back repo's 3 maps all barlines that are not in the checkout
	for barline := range barlineInstancesToBeRemovedFromTheStage {
		barline.Unstage(backRepoBarline.GetStage())

		// remove instance from the back repo 3 maps
		barlineID := backRepoBarline.Map_BarlinePtr_BarlineDBID[barline]
		delete(backRepoBarline.Map_BarlinePtr_BarlineDBID, barline)
		delete(backRepoBarline.Map_BarlineDBID_BarlineDB, barlineID)
		delete(backRepoBarline.Map_BarlineDBID_BarlinePtr, barlineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a barlineDB that has been found in the DB, updates the backRepo and stages the
// models version of the barlineDB
func (backRepoBarline *BackRepoBarlineStruct) CheckoutPhaseOneInstance(barlineDB *BarlineDB) (Error error) {

	barline, ok := backRepoBarline.Map_BarlineDBID_BarlinePtr[barlineDB.ID]
	if !ok {
		barline = new(models.Barline)

		backRepoBarline.Map_BarlineDBID_BarlinePtr[barlineDB.ID] = barline
		backRepoBarline.Map_BarlinePtr_BarlineDBID[barline] = barlineDB.ID

		// append model store with the new element
		barline.Name = barlineDB.Name_Data.String
		barline.Stage(backRepoBarline.GetStage())
	}
	barlineDB.CopyBasicFieldsToBarline(barline)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	barline.Stage(backRepoBarline.GetStage())

	// preserve pointer to barlineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BarlineDBID_BarlineDB)[barlineDB hold variable pointers
	barlineDB_Data := *barlineDB
	preservedPtrToBarline := &barlineDB_Data
	backRepoBarline.Map_BarlineDBID_BarlineDB[barlineDB.ID] = preservedPtrToBarline

	return
}

// BackRepoBarline.CheckoutPhaseTwo Checkouts all staged instances of Barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarline *BackRepoBarlineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, barlineDB := range backRepoBarline.Map_BarlineDBID_BarlineDB {
		backRepoBarline.CheckoutPhaseTwoInstance(backRepo, barlineDB)
	}
	return
}

// BackRepoBarline.CheckoutPhaseTwoInstance Checkouts staged instances of Barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarline *BackRepoBarlineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, barlineDB *BarlineDB) (Error error) {

	barline := backRepoBarline.Map_BarlineDBID_BarlinePtr[barlineDB.ID]

	barlineDB.DecodePointers(backRepo, barline)

	return
}

func (barlineDB *BarlineDB) DecodePointers(backRepo *BackRepoStruct, barline *models.Barline) {

	// insertion point for checkout of pointer encoding
	// Bar_style field
	barline.Bar_style = nil
	if barlineDB.Bar_styleID.Int64 != 0 {
		barline.Bar_style = backRepo.BackRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr[uint(barlineDB.Bar_styleID.Int64)]
	}
	// Wavy_line field
	barline.Wavy_line = nil
	if barlineDB.Wavy_lineID.Int64 != 0 {
		barline.Wavy_line = backRepo.BackRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr[uint(barlineDB.Wavy_lineID.Int64)]
	}
	// Fermata field
	barline.Fermata = nil
	if barlineDB.FermataID.Int64 != 0 {
		barline.Fermata = backRepo.BackRepoFermata.Map_FermataDBID_FermataPtr[uint(barlineDB.FermataID.Int64)]
	}
	// Ending field
	barline.Ending = nil
	if barlineDB.EndingID.Int64 != 0 {
		barline.Ending = backRepo.BackRepoEnding.Map_EndingDBID_EndingPtr[uint(barlineDB.EndingID.Int64)]
	}
	// Repeat field
	barline.Repeat = nil
	if barlineDB.RepeatID.Int64 != 0 {
		barline.Repeat = backRepo.BackRepoRepeat.Map_RepeatDBID_RepeatPtr[uint(barlineDB.RepeatID.Int64)]
	}
	return
}

// CommitBarline allows commit of a single barline (if already staged)
func (backRepo *BackRepoStruct) CommitBarline(barline *models.Barline) {
	backRepo.BackRepoBarline.CommitPhaseOneInstance(barline)
	if id, ok := backRepo.BackRepoBarline.Map_BarlinePtr_BarlineDBID[barline]; ok {
		backRepo.BackRepoBarline.CommitPhaseTwoInstance(backRepo, id, barline)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBarline allows checkout of a single barline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBarline(barline *models.Barline) {
	// check if the barline is staged
	if _, ok := backRepo.BackRepoBarline.Map_BarlinePtr_BarlineDBID[barline]; ok {

		if id, ok := backRepo.BackRepoBarline.Map_BarlinePtr_BarlineDBID[barline]; ok {
			var barlineDB BarlineDB
			barlineDB.ID = id

			if err := backRepo.BackRepoBarline.db.First(&barlineDB, id).Error; err != nil {
				log.Fatalln("CheckoutBarline : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBarline.CheckoutPhaseOneInstance(&barlineDB)
			backRepo.BackRepoBarline.CheckoutPhaseTwoInstance(backRepo, &barlineDB)
		}
	}
}

// CopyBasicFieldsFromBarline
func (barlineDB *BarlineDB) CopyBasicFieldsFromBarline(barline *models.Barline) {
	// insertion point for fields commit

	barlineDB.Name_Data.String = barline.Name
	barlineDB.Name_Data.Valid = true

	barlineDB.Segno_Data.String = barline.Segno
	barlineDB.Segno_Data.Valid = true

	barlineDB.Coda_Data.String = barline.Coda
	barlineDB.Coda_Data.Valid = true
}

// CopyBasicFieldsFromBarline_WOP
func (barlineDB *BarlineDB) CopyBasicFieldsFromBarline_WOP(barline *models.Barline_WOP) {
	// insertion point for fields commit

	barlineDB.Name_Data.String = barline.Name
	barlineDB.Name_Data.Valid = true

	barlineDB.Segno_Data.String = barline.Segno
	barlineDB.Segno_Data.Valid = true

	barlineDB.Coda_Data.String = barline.Coda
	barlineDB.Coda_Data.Valid = true
}

// CopyBasicFieldsFromBarlineWOP
func (barlineDB *BarlineDB) CopyBasicFieldsFromBarlineWOP(barline *BarlineWOP) {
	// insertion point for fields commit

	barlineDB.Name_Data.String = barline.Name
	barlineDB.Name_Data.Valid = true

	barlineDB.Segno_Data.String = barline.Segno
	barlineDB.Segno_Data.Valid = true

	barlineDB.Coda_Data.String = barline.Coda
	barlineDB.Coda_Data.Valid = true
}

// CopyBasicFieldsToBarline
func (barlineDB *BarlineDB) CopyBasicFieldsToBarline(barline *models.Barline) {
	// insertion point for checkout of basic fields (back repo to stage)
	barline.Name = barlineDB.Name_Data.String
	barline.Segno = barlineDB.Segno_Data.String
	barline.Coda = barlineDB.Coda_Data.String
}

// CopyBasicFieldsToBarline_WOP
func (barlineDB *BarlineDB) CopyBasicFieldsToBarline_WOP(barline *models.Barline_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	barline.Name = barlineDB.Name_Data.String
	barline.Segno = barlineDB.Segno_Data.String
	barline.Coda = barlineDB.Coda_Data.String
}

// CopyBasicFieldsToBarlineWOP
func (barlineDB *BarlineDB) CopyBasicFieldsToBarlineWOP(barline *BarlineWOP) {
	barline.ID = int(barlineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	barline.Name = barlineDB.Name_Data.String
	barline.Segno = barlineDB.Segno_Data.String
	barline.Coda = barlineDB.Coda_Data.String
}

// Backup generates a json file from a slice of all BarlineDB instances in the backrepo
func (backRepoBarline *BackRepoBarlineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BarlineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BarlineDB, 0)
	for _, barlineDB := range backRepoBarline.Map_BarlineDBID_BarlineDB {
		forBackup = append(forBackup, barlineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Barline ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Barline file", err.Error())
	}
}

// Backup generates a json file from a slice of all BarlineDB instances in the backrepo
func (backRepoBarline *BackRepoBarlineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BarlineDB, 0)
	for _, barlineDB := range backRepoBarline.Map_BarlineDBID_BarlineDB {
		forBackup = append(forBackup, barlineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Barline")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Barline_Fields, -1)
	for _, barlineDB := range forBackup {

		var barlineWOP BarlineWOP
		barlineDB.CopyBasicFieldsToBarlineWOP(&barlineWOP)

		row := sh.AddRow()
		row.WriteStruct(&barlineWOP, -1)
	}
}

// RestoreXL from the "Barline" sheet all BarlineDB instances
func (backRepoBarline *BackRepoBarlineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBarlineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Barline"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBarline.rowVisitorBarline)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBarline *BackRepoBarlineStruct) rowVisitorBarline(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var barlineWOP BarlineWOP
		row.ReadStruct(&barlineWOP)

		// add the unmarshalled struct to the stage
		barlineDB := new(BarlineDB)
		barlineDB.CopyBasicFieldsFromBarlineWOP(&barlineWOP)

		barlineDB_ID_atBackupTime := barlineDB.ID
		barlineDB.ID = 0
		query := backRepoBarline.db.Create(barlineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBarline.Map_BarlineDBID_BarlineDB[barlineDB.ID] = barlineDB
		BackRepoBarlineid_atBckpTime_newID[barlineDB_ID_atBackupTime] = barlineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BarlineDB.json" in dirPath that stores an array
// of BarlineDB and stores it in the database
// the map BackRepoBarlineid_atBckpTime_newID is updated accordingly
func (backRepoBarline *BackRepoBarlineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBarlineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BarlineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Barline file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BarlineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BarlineDBID_BarlineDB
	for _, barlineDB := range forRestore {

		barlineDB_ID_atBackupTime := barlineDB.ID
		barlineDB.ID = 0
		query := backRepoBarline.db.Create(barlineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBarline.Map_BarlineDBID_BarlineDB[barlineDB.ID] = barlineDB
		BackRepoBarlineid_atBckpTime_newID[barlineDB_ID_atBackupTime] = barlineDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Barline file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Barline>id_atBckpTime_newID
// to compute new index
func (backRepoBarline *BackRepoBarlineStruct) RestorePhaseTwo() {

	for _, barlineDB := range backRepoBarline.Map_BarlineDBID_BarlineDB {

		// next line of code is to avert unused variable compilation error
		_ = barlineDB

		// insertion point for reindexing pointers encoding
		// reindexing Bar_style field
		if barlineDB.Bar_styleID.Int64 != 0 {
			barlineDB.Bar_styleID.Int64 = int64(BackRepoBar_style_colorid_atBckpTime_newID[uint(barlineDB.Bar_styleID.Int64)])
			barlineDB.Bar_styleID.Valid = true
		}

		// reindexing Wavy_line field
		if barlineDB.Wavy_lineID.Int64 != 0 {
			barlineDB.Wavy_lineID.Int64 = int64(BackRepoWavy_lineid_atBckpTime_newID[uint(barlineDB.Wavy_lineID.Int64)])
			barlineDB.Wavy_lineID.Valid = true
		}

		// reindexing Fermata field
		if barlineDB.FermataID.Int64 != 0 {
			barlineDB.FermataID.Int64 = int64(BackRepoFermataid_atBckpTime_newID[uint(barlineDB.FermataID.Int64)])
			barlineDB.FermataID.Valid = true
		}

		// reindexing Ending field
		if barlineDB.EndingID.Int64 != 0 {
			barlineDB.EndingID.Int64 = int64(BackRepoEndingid_atBckpTime_newID[uint(barlineDB.EndingID.Int64)])
			barlineDB.EndingID.Valid = true
		}

		// reindexing Repeat field
		if barlineDB.RepeatID.Int64 != 0 {
			barlineDB.RepeatID.Int64 = int64(BackRepoRepeatid_atBckpTime_newID[uint(barlineDB.RepeatID.Int64)])
			barlineDB.RepeatID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoBarline.db.Model(barlineDB).Updates(*barlineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBarline.ResetReversePointers commits all staged instances of Barline to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarline *BackRepoBarlineStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, barline := range backRepoBarline.Map_BarlineDBID_BarlinePtr {
		backRepoBarline.ResetReversePointersInstance(backRepo, idx, barline)
	}

	return
}

func (backRepoBarline *BackRepoBarlineStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, barline *models.Barline) (Error error) {

	// fetch matching barlineDB
	if barlineDB, ok := backRepoBarline.Map_BarlineDBID_BarlineDB[idx]; ok {
		_ = barlineDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBarlineid_atBckpTime_newID map[uint]uint
