// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Staff_details_sql sql.NullBool
var dummy_Staff_details_time time.Duration
var dummy_Staff_details_sort sort.Float64Slice

// Staff_detailsAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staff_detailsAPI
type Staff_detailsAPI struct {
	gorm.Model

	models.Staff_details_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Staff_detailsPointersEncoding Staff_detailsPointersEncoding
}

// Staff_detailsPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Staff_detailsPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Staff_tuning is a slice of pointers to another Struct (optional or 0..1)
	Staff_tuning IntSlice `gorm:"type:TEXT"`

	// field Staff_size is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Staff_sizeID sql.NullInt64
}

// Staff_detailsDB describes a staff_details in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staff_detailsDB
type Staff_detailsDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staff_detailsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Staff_detailsPointersEncoding
}

// Staff_detailsDBs arrays staff_detailsDBs
// swagger:response staff_detailsDBsResponse
type Staff_detailsDBs []Staff_detailsDB

// Staff_detailsDBResponse provides response
// swagger:response staff_detailsDBResponse
type Staff_detailsDBResponse struct {
	Staff_detailsDB
}

// Staff_detailsWOP is a Staff_details without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Staff_detailsWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Staff_details_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoStaff_detailsStruct struct {
	// stores Staff_detailsDB according to their gorm ID
	Map_Staff_detailsDBID_Staff_detailsDB map[uint]*Staff_detailsDB

	// stores Staff_detailsDB ID according to Staff_details address
	Map_Staff_detailsPtr_Staff_detailsDBID map[*models.Staff_details]uint

	// stores Staff_details according to their gorm ID
	Map_Staff_detailsDBID_Staff_detailsPtr map[uint]*models.Staff_details

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoStaff_details *BackRepoStaff_detailsStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoStaff_details.stage
	return
}

func (backRepoStaff_details *BackRepoStaff_detailsStruct) GetDB() *gorm.DB {
	return backRepoStaff_details.db
}

// GetStaff_detailsDBFromStaff_detailsPtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaff_details *BackRepoStaff_detailsStruct) GetStaff_detailsDBFromStaff_detailsPtr(staff_details *models.Staff_details) (staff_detailsDB *Staff_detailsDB) {
	id := backRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details]
	staff_detailsDB = backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[id]
	return
}

// BackRepoStaff_details.CommitPhaseOne commits all staged instances of Staff_details to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for staff_details := range stage.Staff_detailss {
		backRepoStaff_details.CommitPhaseOneInstance(staff_details)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staff_details := range backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr {
		if _, ok := stage.Staff_detailss[staff_details]; !ok {
			backRepoStaff_details.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaff_details.CommitDeleteInstance commits deletion of Staff_details to the BackRepo
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CommitDeleteInstance(id uint) (Error error) {

	staff_details := backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr[id]

	// staff_details is not staged anymore, remove staff_detailsDB
	staff_detailsDB := backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[id]
	query := backRepoStaff_details.db.Unscoped().Delete(&staff_detailsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID, staff_details)
	delete(backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr, id)
	delete(backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB, id)

	return
}

// BackRepoStaff_details.CommitPhaseOneInstance commits staff_details staged instances of Staff_details to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CommitPhaseOneInstance(staff_details *models.Staff_details) (Error error) {

	// check if the staff_details is not commited yet
	if _, ok := backRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details]; ok {
		return
	}

	// initiate staff_details
	var staff_detailsDB Staff_detailsDB
	staff_detailsDB.CopyBasicFieldsFromStaff_details(staff_details)

	query := backRepoStaff_details.db.Create(&staff_detailsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details] = staff_detailsDB.ID
	backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr[staff_detailsDB.ID] = staff_details
	backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[staff_detailsDB.ID] = &staff_detailsDB

	return
}

// BackRepoStaff_details.CommitPhaseTwo commits all staged instances of Staff_details to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_details := range backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr {
		backRepoStaff_details.CommitPhaseTwoInstance(backRepo, idx, staff_details)
	}

	return
}

// BackRepoStaff_details.CommitPhaseTwoInstance commits {{structname }} of models.Staff_details to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staff_details *models.Staff_details) (Error error) {

	// fetch matching staff_detailsDB
	if staff_detailsDB, ok := backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[idx]; ok {

		staff_detailsDB.CopyBasicFieldsFromStaff_details(staff_details)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		staff_detailsDB.Staff_detailsPointersEncoding.Staff_tuning = make([]int, 0)
		// 2. encode
		for _, staff_tuningAssocEnd := range staff_details.Staff_tuning {
			staff_tuningAssocEnd_DB :=
				backRepo.BackRepoStaff_tuning.GetStaff_tuningDBFromStaff_tuningPtr(staff_tuningAssocEnd)
			
			// the stage might be inconsistant, meaning that the staff_tuningAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if staff_tuningAssocEnd_DB == nil {
				continue
			}
			
			staff_detailsDB.Staff_detailsPointersEncoding.Staff_tuning =
				append(staff_detailsDB.Staff_detailsPointersEncoding.Staff_tuning, int(staff_tuningAssocEnd_DB.ID))
		}

		// commit pointer value staff_details.Staff_size translates to updating the staff_details.Staff_sizeID
		staff_detailsDB.Staff_sizeID.Valid = true // allow for a 0 value (nil association)
		if staff_details.Staff_size != nil {
			if Staff_sizeId, ok := backRepo.BackRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_details.Staff_size]; ok {
				staff_detailsDB.Staff_sizeID.Int64 = int64(Staff_sizeId)
				staff_detailsDB.Staff_sizeID.Valid = true
			}
		} else {
			staff_detailsDB.Staff_sizeID.Int64 = 0
			staff_detailsDB.Staff_sizeID.Valid = true
		}

		query := backRepoStaff_details.db.Save(&staff_detailsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Staff_details intance %s", staff_details.Name))
		return err
	}

	return
}

// BackRepoStaff_details.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CheckoutPhaseOne() (Error error) {

	staff_detailsDBArray := make([]Staff_detailsDB, 0)
	query := backRepoStaff_details.db.Find(&staff_detailsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staff_detailsInstancesToBeRemovedFromTheStage := make(map[*models.Staff_details]any)
	for key, value := range backRepoStaff_details.stage.Staff_detailss {
		staff_detailsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staff_detailsDB := range staff_detailsDBArray {
		backRepoStaff_details.CheckoutPhaseOneInstance(&staff_detailsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staff_details, ok := backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr[staff_detailsDB.ID]
		if ok {
			delete(staff_detailsInstancesToBeRemovedFromTheStage, staff_details)
		}
	}

	// remove from stage and back repo's 3 maps all staff_detailss that are not in the checkout
	for staff_details := range staff_detailsInstancesToBeRemovedFromTheStage {
		staff_details.Unstage(backRepoStaff_details.GetStage())

		// remove instance from the back repo 3 maps
		staff_detailsID := backRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details]
		delete(backRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID, staff_details)
		delete(backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB, staff_detailsID)
		delete(backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr, staff_detailsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staff_detailsDB that has been found in the DB, updates the backRepo and stages the
// models version of the staff_detailsDB
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CheckoutPhaseOneInstance(staff_detailsDB *Staff_detailsDB) (Error error) {

	staff_details, ok := backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr[staff_detailsDB.ID]
	if !ok {
		staff_details = new(models.Staff_details)

		backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr[staff_detailsDB.ID] = staff_details
		backRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details] = staff_detailsDB.ID

		// append model store with the new element
		staff_details.Name = staff_detailsDB.Name_Data.String
		staff_details.Stage(backRepoStaff_details.GetStage())
	}
	staff_detailsDB.CopyBasicFieldsToStaff_details(staff_details)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staff_details.Stage(backRepoStaff_details.GetStage())

	// preserve pointer to staff_detailsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Staff_detailsDBID_Staff_detailsDB)[staff_detailsDB hold variable pointers
	staff_detailsDB_Data := *staff_detailsDB
	preservedPtrToStaff_details := &staff_detailsDB_Data
	backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[staff_detailsDB.ID] = preservedPtrToStaff_details

	return
}

// BackRepoStaff_details.CheckoutPhaseTwo Checkouts all staged instances of Staff_details to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staff_detailsDB := range backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB {
		backRepoStaff_details.CheckoutPhaseTwoInstance(backRepo, staff_detailsDB)
	}
	return
}

// BackRepoStaff_details.CheckoutPhaseTwoInstance Checkouts staged instances of Staff_details to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_details *BackRepoStaff_detailsStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staff_detailsDB *Staff_detailsDB) (Error error) {

	staff_details := backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr[staff_detailsDB.ID]

	staff_detailsDB.DecodePointers(backRepo, staff_details)

	return
}

func (staff_detailsDB *Staff_detailsDB) DecodePointers(backRepo *BackRepoStruct, staff_details *models.Staff_details) {

	// insertion point for checkout of pointer encoding
	// This loop redeem staff_details.Staff_tuning in the stage from the encode in the back repo
	// It parses all Staff_tuningDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	staff_details.Staff_tuning = staff_details.Staff_tuning[:0]
	for _, _Staff_tuningid := range staff_detailsDB.Staff_detailsPointersEncoding.Staff_tuning {
		staff_details.Staff_tuning = append(staff_details.Staff_tuning, backRepo.BackRepoStaff_tuning.Map_Staff_tuningDBID_Staff_tuningPtr[uint(_Staff_tuningid)])
	}

	// Staff_size field
	staff_details.Staff_size = nil
	if staff_detailsDB.Staff_sizeID.Int64 != 0 {
		staff_details.Staff_size = backRepo.BackRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr[uint(staff_detailsDB.Staff_sizeID.Int64)]
	}
	return
}

// CommitStaff_details allows commit of a single staff_details (if already staged)
func (backRepo *BackRepoStruct) CommitStaff_details(staff_details *models.Staff_details) {
	backRepo.BackRepoStaff_details.CommitPhaseOneInstance(staff_details)
	if id, ok := backRepo.BackRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details]; ok {
		backRepo.BackRepoStaff_details.CommitPhaseTwoInstance(backRepo, id, staff_details)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaff_details allows checkout of a single staff_details (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaff_details(staff_details *models.Staff_details) {
	// check if the staff_details is staged
	if _, ok := backRepo.BackRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details]; ok {

		if id, ok := backRepo.BackRepoStaff_details.Map_Staff_detailsPtr_Staff_detailsDBID[staff_details]; ok {
			var staff_detailsDB Staff_detailsDB
			staff_detailsDB.ID = id

			if err := backRepo.BackRepoStaff_details.db.First(&staff_detailsDB, id).Error; err != nil {
				log.Fatalln("CheckoutStaff_details : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaff_details.CheckoutPhaseOneInstance(&staff_detailsDB)
			backRepo.BackRepoStaff_details.CheckoutPhaseTwoInstance(backRepo, &staff_detailsDB)
		}
	}
}

// CopyBasicFieldsFromStaff_details
func (staff_detailsDB *Staff_detailsDB) CopyBasicFieldsFromStaff_details(staff_details *models.Staff_details) {
	// insertion point for fields commit

	staff_detailsDB.Name_Data.String = staff_details.Name
	staff_detailsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_details_WOP
func (staff_detailsDB *Staff_detailsDB) CopyBasicFieldsFromStaff_details_WOP(staff_details *models.Staff_details_WOP) {
	// insertion point for fields commit

	staff_detailsDB.Name_Data.String = staff_details.Name
	staff_detailsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_detailsWOP
func (staff_detailsDB *Staff_detailsDB) CopyBasicFieldsFromStaff_detailsWOP(staff_details *Staff_detailsWOP) {
	// insertion point for fields commit

	staff_detailsDB.Name_Data.String = staff_details.Name
	staff_detailsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToStaff_details
func (staff_detailsDB *Staff_detailsDB) CopyBasicFieldsToStaff_details(staff_details *models.Staff_details) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_details.Name = staff_detailsDB.Name_Data.String
}

// CopyBasicFieldsToStaff_details_WOP
func (staff_detailsDB *Staff_detailsDB) CopyBasicFieldsToStaff_details_WOP(staff_details *models.Staff_details_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_details.Name = staff_detailsDB.Name_Data.String
}

// CopyBasicFieldsToStaff_detailsWOP
func (staff_detailsDB *Staff_detailsDB) CopyBasicFieldsToStaff_detailsWOP(staff_details *Staff_detailsWOP) {
	staff_details.ID = int(staff_detailsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staff_details.Name = staff_detailsDB.Name_Data.String
}

// Backup generates a json file from a slice of all Staff_detailsDB instances in the backrepo
func (backRepoStaff_details *BackRepoStaff_detailsStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Staff_detailsDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_detailsDB, 0)
	for _, staff_detailsDB := range backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB {
		forBackup = append(forBackup, staff_detailsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Staff_details ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Staff_details file", err.Error())
	}
}

// Backup generates a json file from a slice of all Staff_detailsDB instances in the backrepo
func (backRepoStaff_details *BackRepoStaff_detailsStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_detailsDB, 0)
	for _, staff_detailsDB := range backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB {
		forBackup = append(forBackup, staff_detailsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Staff_details")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Staff_details_Fields, -1)
	for _, staff_detailsDB := range forBackup {

		var staff_detailsWOP Staff_detailsWOP
		staff_detailsDB.CopyBasicFieldsToStaff_detailsWOP(&staff_detailsWOP)

		row := sh.AddRow()
		row.WriteStruct(&staff_detailsWOP, -1)
	}
}

// RestoreXL from the "Staff_details" sheet all Staff_detailsDB instances
func (backRepoStaff_details *BackRepoStaff_detailsStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaff_detailsid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Staff_details"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaff_details.rowVisitorStaff_details)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaff_details *BackRepoStaff_detailsStruct) rowVisitorStaff_details(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staff_detailsWOP Staff_detailsWOP
		row.ReadStruct(&staff_detailsWOP)

		// add the unmarshalled struct to the stage
		staff_detailsDB := new(Staff_detailsDB)
		staff_detailsDB.CopyBasicFieldsFromStaff_detailsWOP(&staff_detailsWOP)

		staff_detailsDB_ID_atBackupTime := staff_detailsDB.ID
		staff_detailsDB.ID = 0
		query := backRepoStaff_details.db.Create(staff_detailsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[staff_detailsDB.ID] = staff_detailsDB
		BackRepoStaff_detailsid_atBckpTime_newID[staff_detailsDB_ID_atBackupTime] = staff_detailsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Staff_detailsDB.json" in dirPath that stores an array
// of Staff_detailsDB and stores it in the database
// the map BackRepoStaff_detailsid_atBckpTime_newID is updated accordingly
func (backRepoStaff_details *BackRepoStaff_detailsStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaff_detailsid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Staff_detailsDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Staff_details file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Staff_detailsDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Staff_detailsDBID_Staff_detailsDB
	for _, staff_detailsDB := range forRestore {

		staff_detailsDB_ID_atBackupTime := staff_detailsDB.ID
		staff_detailsDB.ID = 0
		query := backRepoStaff_details.db.Create(staff_detailsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[staff_detailsDB.ID] = staff_detailsDB
		BackRepoStaff_detailsid_atBckpTime_newID[staff_detailsDB_ID_atBackupTime] = staff_detailsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Staff_details file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Staff_details>id_atBckpTime_newID
// to compute new index
func (backRepoStaff_details *BackRepoStaff_detailsStruct) RestorePhaseTwo() {

	for _, staff_detailsDB := range backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB {

		// next line of code is to avert unused variable compilation error
		_ = staff_detailsDB

		// insertion point for reindexing pointers encoding
		// reindexing Staff_size field
		if staff_detailsDB.Staff_sizeID.Int64 != 0 {
			staff_detailsDB.Staff_sizeID.Int64 = int64(BackRepoStaff_sizeid_atBckpTime_newID[uint(staff_detailsDB.Staff_sizeID.Int64)])
			staff_detailsDB.Staff_sizeID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoStaff_details.db.Model(staff_detailsDB).Updates(*staff_detailsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoStaff_details.ResetReversePointers commits all staged instances of Staff_details to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_details *BackRepoStaff_detailsStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_details := range backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr {
		backRepoStaff_details.ResetReversePointersInstance(backRepo, idx, staff_details)
	}

	return
}

func (backRepoStaff_details *BackRepoStaff_detailsStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staff_details *models.Staff_details) (Error error) {

	// fetch matching staff_detailsDB
	if staff_detailsDB, ok := backRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsDB[idx]; ok {
		_ = staff_detailsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaff_detailsid_atBckpTime_newID map[uint]uint
