// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Root_sql sql.NullBool
var dummy_Root_time time.Duration
var dummy_Root_sort sort.Float64Slice

// RootAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model rootAPI
type RootAPI struct {
	gorm.Model

	models.Root_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RootPointersEncoding RootPointersEncoding
}

// RootPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RootPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Root_step is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Root_stepID sql.NullInt64

	// field Root_alter is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Root_alterID sql.NullInt64
}

// RootDB describes a root in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model rootDB
type RootDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field rootDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RootPointersEncoding
}

// RootDBs arrays rootDBs
// swagger:response rootDBsResponse
type RootDBs []RootDB

// RootDBResponse provides response
// swagger:response rootDBResponse
type RootDBResponse struct {
	RootDB
}

// RootWOP is a Root without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RootWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Root_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoRootStruct struct {
	// stores RootDB according to their gorm ID
	Map_RootDBID_RootDB map[uint]*RootDB

	// stores RootDB ID according to Root address
	Map_RootPtr_RootDBID map[*models.Root]uint

	// stores Root according to their gorm ID
	Map_RootDBID_RootPtr map[uint]*models.Root

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRoot *BackRepoRootStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRoot.stage
	return
}

func (backRepoRoot *BackRepoRootStruct) GetDB() *gorm.DB {
	return backRepoRoot.db
}

// GetRootDBFromRootPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRoot *BackRepoRootStruct) GetRootDBFromRootPtr(root *models.Root) (rootDB *RootDB) {
	id := backRepoRoot.Map_RootPtr_RootDBID[root]
	rootDB = backRepoRoot.Map_RootDBID_RootDB[id]
	return
}

// BackRepoRoot.CommitPhaseOne commits all staged instances of Root to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRoot *BackRepoRootStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for root := range stage.Roots {
		backRepoRoot.CommitPhaseOneInstance(root)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, root := range backRepoRoot.Map_RootDBID_RootPtr {
		if _, ok := stage.Roots[root]; !ok {
			backRepoRoot.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRoot.CommitDeleteInstance commits deletion of Root to the BackRepo
func (backRepoRoot *BackRepoRootStruct) CommitDeleteInstance(id uint) (Error error) {

	root := backRepoRoot.Map_RootDBID_RootPtr[id]

	// root is not staged anymore, remove rootDB
	rootDB := backRepoRoot.Map_RootDBID_RootDB[id]
	query := backRepoRoot.db.Unscoped().Delete(&rootDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRoot.Map_RootPtr_RootDBID, root)
	delete(backRepoRoot.Map_RootDBID_RootPtr, id)
	delete(backRepoRoot.Map_RootDBID_RootDB, id)

	return
}

// BackRepoRoot.CommitPhaseOneInstance commits root staged instances of Root to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRoot *BackRepoRootStruct) CommitPhaseOneInstance(root *models.Root) (Error error) {

	// check if the root is not commited yet
	if _, ok := backRepoRoot.Map_RootPtr_RootDBID[root]; ok {
		return
	}

	// initiate root
	var rootDB RootDB
	rootDB.CopyBasicFieldsFromRoot(root)

	query := backRepoRoot.db.Create(&rootDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRoot.Map_RootPtr_RootDBID[root] = rootDB.ID
	backRepoRoot.Map_RootDBID_RootPtr[rootDB.ID] = root
	backRepoRoot.Map_RootDBID_RootDB[rootDB.ID] = &rootDB

	return
}

// BackRepoRoot.CommitPhaseTwo commits all staged instances of Root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRoot *BackRepoRootStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, root := range backRepoRoot.Map_RootDBID_RootPtr {
		backRepoRoot.CommitPhaseTwoInstance(backRepo, idx, root)
	}

	return
}

// BackRepoRoot.CommitPhaseTwoInstance commits {{structname }} of models.Root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRoot *BackRepoRootStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, root *models.Root) (Error error) {

	// fetch matching rootDB
	if rootDB, ok := backRepoRoot.Map_RootDBID_RootDB[idx]; ok {

		rootDB.CopyBasicFieldsFromRoot(root)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value root.Root_step translates to updating the root.Root_stepID
		rootDB.Root_stepID.Valid = true // allow for a 0 value (nil association)
		if root.Root_step != nil {
			if Root_stepId, ok := backRepo.BackRepoRoot_step.Map_Root_stepPtr_Root_stepDBID[root.Root_step]; ok {
				rootDB.Root_stepID.Int64 = int64(Root_stepId)
				rootDB.Root_stepID.Valid = true
			}
		} else {
			rootDB.Root_stepID.Int64 = 0
			rootDB.Root_stepID.Valid = true
		}

		// commit pointer value root.Root_alter translates to updating the root.Root_alterID
		rootDB.Root_alterID.Valid = true // allow for a 0 value (nil association)
		if root.Root_alter != nil {
			if Root_alterId, ok := backRepo.BackRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[root.Root_alter]; ok {
				rootDB.Root_alterID.Int64 = int64(Root_alterId)
				rootDB.Root_alterID.Valid = true
			}
		} else {
			rootDB.Root_alterID.Int64 = 0
			rootDB.Root_alterID.Valid = true
		}

		query := backRepoRoot.db.Save(&rootDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Root intance %s", root.Name))
		return err
	}

	return
}

// BackRepoRoot.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRoot *BackRepoRootStruct) CheckoutPhaseOne() (Error error) {

	rootDBArray := make([]RootDB, 0)
	query := backRepoRoot.db.Find(&rootDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	rootInstancesToBeRemovedFromTheStage := make(map[*models.Root]any)
	for key, value := range backRepoRoot.stage.Roots {
		rootInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, rootDB := range rootDBArray {
		backRepoRoot.CheckoutPhaseOneInstance(&rootDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		root, ok := backRepoRoot.Map_RootDBID_RootPtr[rootDB.ID]
		if ok {
			delete(rootInstancesToBeRemovedFromTheStage, root)
		}
	}

	// remove from stage and back repo's 3 maps all roots that are not in the checkout
	for root := range rootInstancesToBeRemovedFromTheStage {
		root.Unstage(backRepoRoot.GetStage())

		// remove instance from the back repo 3 maps
		rootID := backRepoRoot.Map_RootPtr_RootDBID[root]
		delete(backRepoRoot.Map_RootPtr_RootDBID, root)
		delete(backRepoRoot.Map_RootDBID_RootDB, rootID)
		delete(backRepoRoot.Map_RootDBID_RootPtr, rootID)
	}

	return
}

// CheckoutPhaseOneInstance takes a rootDB that has been found in the DB, updates the backRepo and stages the
// models version of the rootDB
func (backRepoRoot *BackRepoRootStruct) CheckoutPhaseOneInstance(rootDB *RootDB) (Error error) {

	root, ok := backRepoRoot.Map_RootDBID_RootPtr[rootDB.ID]
	if !ok {
		root = new(models.Root)

		backRepoRoot.Map_RootDBID_RootPtr[rootDB.ID] = root
		backRepoRoot.Map_RootPtr_RootDBID[root] = rootDB.ID

		// append model store with the new element
		root.Name = rootDB.Name_Data.String
		root.Stage(backRepoRoot.GetStage())
	}
	rootDB.CopyBasicFieldsToRoot(root)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	root.Stage(backRepoRoot.GetStage())

	// preserve pointer to rootDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RootDBID_RootDB)[rootDB hold variable pointers
	rootDB_Data := *rootDB
	preservedPtrToRoot := &rootDB_Data
	backRepoRoot.Map_RootDBID_RootDB[rootDB.ID] = preservedPtrToRoot

	return
}

// BackRepoRoot.CheckoutPhaseTwo Checkouts all staged instances of Root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRoot *BackRepoRootStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, rootDB := range backRepoRoot.Map_RootDBID_RootDB {
		backRepoRoot.CheckoutPhaseTwoInstance(backRepo, rootDB)
	}
	return
}

// BackRepoRoot.CheckoutPhaseTwoInstance Checkouts staged instances of Root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRoot *BackRepoRootStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, rootDB *RootDB) (Error error) {

	root := backRepoRoot.Map_RootDBID_RootPtr[rootDB.ID]

	rootDB.DecodePointers(backRepo, root)

	return
}

func (rootDB *RootDB) DecodePointers(backRepo *BackRepoStruct, root *models.Root) {

	// insertion point for checkout of pointer encoding
	// Root_step field
	root.Root_step = nil
	if rootDB.Root_stepID.Int64 != 0 {
		root.Root_step = backRepo.BackRepoRoot_step.Map_Root_stepDBID_Root_stepPtr[uint(rootDB.Root_stepID.Int64)]
	}
	// Root_alter field
	root.Root_alter = nil
	if rootDB.Root_alterID.Int64 != 0 {
		root.Root_alter = backRepo.BackRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[uint(rootDB.Root_alterID.Int64)]
	}
	return
}

// CommitRoot allows commit of a single root (if already staged)
func (backRepo *BackRepoStruct) CommitRoot(root *models.Root) {
	backRepo.BackRepoRoot.CommitPhaseOneInstance(root)
	if id, ok := backRepo.BackRepoRoot.Map_RootPtr_RootDBID[root]; ok {
		backRepo.BackRepoRoot.CommitPhaseTwoInstance(backRepo, id, root)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRoot allows checkout of a single root (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRoot(root *models.Root) {
	// check if the root is staged
	if _, ok := backRepo.BackRepoRoot.Map_RootPtr_RootDBID[root]; ok {

		if id, ok := backRepo.BackRepoRoot.Map_RootPtr_RootDBID[root]; ok {
			var rootDB RootDB
			rootDB.ID = id

			if err := backRepo.BackRepoRoot.db.First(&rootDB, id).Error; err != nil {
				log.Fatalln("CheckoutRoot : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRoot.CheckoutPhaseOneInstance(&rootDB)
			backRepo.BackRepoRoot.CheckoutPhaseTwoInstance(backRepo, &rootDB)
		}
	}
}

// CopyBasicFieldsFromRoot
func (rootDB *RootDB) CopyBasicFieldsFromRoot(root *models.Root) {
	// insertion point for fields commit

	rootDB.Name_Data.String = root.Name
	rootDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRoot_WOP
func (rootDB *RootDB) CopyBasicFieldsFromRoot_WOP(root *models.Root_WOP) {
	// insertion point for fields commit

	rootDB.Name_Data.String = root.Name
	rootDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRootWOP
func (rootDB *RootDB) CopyBasicFieldsFromRootWOP(root *RootWOP) {
	// insertion point for fields commit

	rootDB.Name_Data.String = root.Name
	rootDB.Name_Data.Valid = true
}

// CopyBasicFieldsToRoot
func (rootDB *RootDB) CopyBasicFieldsToRoot(root *models.Root) {
	// insertion point for checkout of basic fields (back repo to stage)
	root.Name = rootDB.Name_Data.String
}

// CopyBasicFieldsToRoot_WOP
func (rootDB *RootDB) CopyBasicFieldsToRoot_WOP(root *models.Root_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	root.Name = rootDB.Name_Data.String
}

// CopyBasicFieldsToRootWOP
func (rootDB *RootDB) CopyBasicFieldsToRootWOP(root *RootWOP) {
	root.ID = int(rootDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	root.Name = rootDB.Name_Data.String
}

// Backup generates a json file from a slice of all RootDB instances in the backrepo
func (backRepoRoot *BackRepoRootStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RootDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RootDB, 0)
	for _, rootDB := range backRepoRoot.Map_RootDBID_RootDB {
		forBackup = append(forBackup, rootDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Root ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Root file", err.Error())
	}
}

// Backup generates a json file from a slice of all RootDB instances in the backrepo
func (backRepoRoot *BackRepoRootStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RootDB, 0)
	for _, rootDB := range backRepoRoot.Map_RootDBID_RootDB {
		forBackup = append(forBackup, rootDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Root")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Root_Fields, -1)
	for _, rootDB := range forBackup {

		var rootWOP RootWOP
		rootDB.CopyBasicFieldsToRootWOP(&rootWOP)

		row := sh.AddRow()
		row.WriteStruct(&rootWOP, -1)
	}
}

// RestoreXL from the "Root" sheet all RootDB instances
func (backRepoRoot *BackRepoRootStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRootid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Root"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRoot.rowVisitorRoot)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRoot *BackRepoRootStruct) rowVisitorRoot(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var rootWOP RootWOP
		row.ReadStruct(&rootWOP)

		// add the unmarshalled struct to the stage
		rootDB := new(RootDB)
		rootDB.CopyBasicFieldsFromRootWOP(&rootWOP)

		rootDB_ID_atBackupTime := rootDB.ID
		rootDB.ID = 0
		query := backRepoRoot.db.Create(rootDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRoot.Map_RootDBID_RootDB[rootDB.ID] = rootDB
		BackRepoRootid_atBckpTime_newID[rootDB_ID_atBackupTime] = rootDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RootDB.json" in dirPath that stores an array
// of RootDB and stores it in the database
// the map BackRepoRootid_atBckpTime_newID is updated accordingly
func (backRepoRoot *BackRepoRootStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRootid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RootDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Root file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RootDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RootDBID_RootDB
	for _, rootDB := range forRestore {

		rootDB_ID_atBackupTime := rootDB.ID
		rootDB.ID = 0
		query := backRepoRoot.db.Create(rootDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRoot.Map_RootDBID_RootDB[rootDB.ID] = rootDB
		BackRepoRootid_atBckpTime_newID[rootDB_ID_atBackupTime] = rootDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Root file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Root>id_atBckpTime_newID
// to compute new index
func (backRepoRoot *BackRepoRootStruct) RestorePhaseTwo() {

	for _, rootDB := range backRepoRoot.Map_RootDBID_RootDB {

		// next line of code is to avert unused variable compilation error
		_ = rootDB

		// insertion point for reindexing pointers encoding
		// reindexing Root_step field
		if rootDB.Root_stepID.Int64 != 0 {
			rootDB.Root_stepID.Int64 = int64(BackRepoRoot_stepid_atBckpTime_newID[uint(rootDB.Root_stepID.Int64)])
			rootDB.Root_stepID.Valid = true
		}

		// reindexing Root_alter field
		if rootDB.Root_alterID.Int64 != 0 {
			rootDB.Root_alterID.Int64 = int64(BackRepoHarmony_alterid_atBckpTime_newID[uint(rootDB.Root_alterID.Int64)])
			rootDB.Root_alterID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoRoot.db.Model(rootDB).Updates(*rootDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRoot.ResetReversePointers commits all staged instances of Root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRoot *BackRepoRootStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, root := range backRepoRoot.Map_RootDBID_RootPtr {
		backRepoRoot.ResetReversePointersInstance(backRepo, idx, root)
	}

	return
}

func (backRepoRoot *BackRepoRootStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, root *models.Root) (Error error) {

	// fetch matching rootDB
	if rootDB, ok := backRepoRoot.Map_RootDBID_RootDB[idx]; ok {
		_ = rootDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRootid_atBckpTime_newID map[uint]uint
