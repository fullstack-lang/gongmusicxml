// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Figured_bass_sql sql.NullBool
var dummy_Figured_bass_time time.Duration
var dummy_Figured_bass_sort sort.Float64Slice

// Figured_bassAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model figured_bassAPI
type Figured_bassAPI struct {
	gorm.Model

	models.Figured_bass_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Figured_bassPointersEncoding Figured_bassPointersEncoding
}

// Figured_bassPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Figured_bassPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Figure is a slice of pointers to another Struct (optional or 0..1)
	Figure IntSlice `gorm:"type:TEXT"`
}

// Figured_bassDB describes a figured_bass in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model figured_bassDB
type Figured_bassDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field figured_bassDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Figured_bassPointersEncoding
}

// Figured_bassDBs arrays figured_bassDBs
// swagger:response figured_bassDBsResponse
type Figured_bassDBs []Figured_bassDB

// Figured_bassDBResponse provides response
// swagger:response figured_bassDBResponse
type Figured_bassDBResponse struct {
	Figured_bassDB
}

// Figured_bassWOP is a Figured_bass without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Figured_bassWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Figured_bass_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFigured_bassStruct struct {
	// stores Figured_bassDB according to their gorm ID
	Map_Figured_bassDBID_Figured_bassDB map[uint]*Figured_bassDB

	// stores Figured_bassDB ID according to Figured_bass address
	Map_Figured_bassPtr_Figured_bassDBID map[*models.Figured_bass]uint

	// stores Figured_bass according to their gorm ID
	Map_Figured_bassDBID_Figured_bassPtr map[uint]*models.Figured_bass

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFigured_bass *BackRepoFigured_bassStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFigured_bass.stage
	return
}

func (backRepoFigured_bass *BackRepoFigured_bassStruct) GetDB() *gorm.DB {
	return backRepoFigured_bass.db
}

// GetFigured_bassDBFromFigured_bassPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFigured_bass *BackRepoFigured_bassStruct) GetFigured_bassDBFromFigured_bassPtr(figured_bass *models.Figured_bass) (figured_bassDB *Figured_bassDB) {
	id := backRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass]
	figured_bassDB = backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[id]
	return
}

// BackRepoFigured_bass.CommitPhaseOne commits all staged instances of Figured_bass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for figured_bass := range stage.Figured_basss {
		backRepoFigured_bass.CommitPhaseOneInstance(figured_bass)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, figured_bass := range backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr {
		if _, ok := stage.Figured_basss[figured_bass]; !ok {
			backRepoFigured_bass.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFigured_bass.CommitDeleteInstance commits deletion of Figured_bass to the BackRepo
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CommitDeleteInstance(id uint) (Error error) {

	figured_bass := backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr[id]

	// figured_bass is not staged anymore, remove figured_bassDB
	figured_bassDB := backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[id]
	query := backRepoFigured_bass.db.Unscoped().Delete(&figured_bassDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID, figured_bass)
	delete(backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr, id)
	delete(backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB, id)

	return
}

// BackRepoFigured_bass.CommitPhaseOneInstance commits figured_bass staged instances of Figured_bass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CommitPhaseOneInstance(figured_bass *models.Figured_bass) (Error error) {

	// check if the figured_bass is not commited yet
	if _, ok := backRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass]; ok {
		return
	}

	// initiate figured_bass
	var figured_bassDB Figured_bassDB
	figured_bassDB.CopyBasicFieldsFromFigured_bass(figured_bass)

	query := backRepoFigured_bass.db.Create(&figured_bassDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass] = figured_bassDB.ID
	backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr[figured_bassDB.ID] = figured_bass
	backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[figured_bassDB.ID] = &figured_bassDB

	return
}

// BackRepoFigured_bass.CommitPhaseTwo commits all staged instances of Figured_bass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, figured_bass := range backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr {
		backRepoFigured_bass.CommitPhaseTwoInstance(backRepo, idx, figured_bass)
	}

	return
}

// BackRepoFigured_bass.CommitPhaseTwoInstance commits {{structname }} of models.Figured_bass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, figured_bass *models.Figured_bass) (Error error) {

	// fetch matching figured_bassDB
	if figured_bassDB, ok := backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[idx]; ok {

		figured_bassDB.CopyBasicFieldsFromFigured_bass(figured_bass)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		figured_bassDB.Figured_bassPointersEncoding.Figure = make([]int, 0)
		// 2. encode
		for _, figureAssocEnd := range figured_bass.Figure {
			figureAssocEnd_DB :=
				backRepo.BackRepoFigure.GetFigureDBFromFigurePtr(figureAssocEnd)
			
			// the stage might be inconsistant, meaning that the figureAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if figureAssocEnd_DB == nil {
				continue
			}
			
			figured_bassDB.Figured_bassPointersEncoding.Figure =
				append(figured_bassDB.Figured_bassPointersEncoding.Figure, int(figureAssocEnd_DB.ID))
		}

		query := backRepoFigured_bass.db.Save(&figured_bassDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Figured_bass intance %s", figured_bass.Name))
		return err
	}

	return
}

// BackRepoFigured_bass.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CheckoutPhaseOne() (Error error) {

	figured_bassDBArray := make([]Figured_bassDB, 0)
	query := backRepoFigured_bass.db.Find(&figured_bassDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	figured_bassInstancesToBeRemovedFromTheStage := make(map[*models.Figured_bass]any)
	for key, value := range backRepoFigured_bass.stage.Figured_basss {
		figured_bassInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, figured_bassDB := range figured_bassDBArray {
		backRepoFigured_bass.CheckoutPhaseOneInstance(&figured_bassDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		figured_bass, ok := backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr[figured_bassDB.ID]
		if ok {
			delete(figured_bassInstancesToBeRemovedFromTheStage, figured_bass)
		}
	}

	// remove from stage and back repo's 3 maps all figured_basss that are not in the checkout
	for figured_bass := range figured_bassInstancesToBeRemovedFromTheStage {
		figured_bass.Unstage(backRepoFigured_bass.GetStage())

		// remove instance from the back repo 3 maps
		figured_bassID := backRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass]
		delete(backRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID, figured_bass)
		delete(backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB, figured_bassID)
		delete(backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr, figured_bassID)
	}

	return
}

// CheckoutPhaseOneInstance takes a figured_bassDB that has been found in the DB, updates the backRepo and stages the
// models version of the figured_bassDB
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CheckoutPhaseOneInstance(figured_bassDB *Figured_bassDB) (Error error) {

	figured_bass, ok := backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr[figured_bassDB.ID]
	if !ok {
		figured_bass = new(models.Figured_bass)

		backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr[figured_bassDB.ID] = figured_bass
		backRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass] = figured_bassDB.ID

		// append model store with the new element
		figured_bass.Name = figured_bassDB.Name_Data.String
		figured_bass.Stage(backRepoFigured_bass.GetStage())
	}
	figured_bassDB.CopyBasicFieldsToFigured_bass(figured_bass)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	figured_bass.Stage(backRepoFigured_bass.GetStage())

	// preserve pointer to figured_bassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Figured_bassDBID_Figured_bassDB)[figured_bassDB hold variable pointers
	figured_bassDB_Data := *figured_bassDB
	preservedPtrToFigured_bass := &figured_bassDB_Data
	backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[figured_bassDB.ID] = preservedPtrToFigured_bass

	return
}

// BackRepoFigured_bass.CheckoutPhaseTwo Checkouts all staged instances of Figured_bass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, figured_bassDB := range backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB {
		backRepoFigured_bass.CheckoutPhaseTwoInstance(backRepo, figured_bassDB)
	}
	return
}

// BackRepoFigured_bass.CheckoutPhaseTwoInstance Checkouts staged instances of Figured_bass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFigured_bass *BackRepoFigured_bassStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, figured_bassDB *Figured_bassDB) (Error error) {

	figured_bass := backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr[figured_bassDB.ID]

	figured_bassDB.DecodePointers(backRepo, figured_bass)

	return
}

func (figured_bassDB *Figured_bassDB) DecodePointers(backRepo *BackRepoStruct, figured_bass *models.Figured_bass) {

	// insertion point for checkout of pointer encoding
	// This loop redeem figured_bass.Figure in the stage from the encode in the back repo
	// It parses all FigureDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	figured_bass.Figure = figured_bass.Figure[:0]
	for _, _Figureid := range figured_bassDB.Figured_bassPointersEncoding.Figure {
		figured_bass.Figure = append(figured_bass.Figure, backRepo.BackRepoFigure.Map_FigureDBID_FigurePtr[uint(_Figureid)])
	}

	return
}

// CommitFigured_bass allows commit of a single figured_bass (if already staged)
func (backRepo *BackRepoStruct) CommitFigured_bass(figured_bass *models.Figured_bass) {
	backRepo.BackRepoFigured_bass.CommitPhaseOneInstance(figured_bass)
	if id, ok := backRepo.BackRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass]; ok {
		backRepo.BackRepoFigured_bass.CommitPhaseTwoInstance(backRepo, id, figured_bass)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFigured_bass allows checkout of a single figured_bass (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFigured_bass(figured_bass *models.Figured_bass) {
	// check if the figured_bass is staged
	if _, ok := backRepo.BackRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass]; ok {

		if id, ok := backRepo.BackRepoFigured_bass.Map_Figured_bassPtr_Figured_bassDBID[figured_bass]; ok {
			var figured_bassDB Figured_bassDB
			figured_bassDB.ID = id

			if err := backRepo.BackRepoFigured_bass.db.First(&figured_bassDB, id).Error; err != nil {
				log.Fatalln("CheckoutFigured_bass : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFigured_bass.CheckoutPhaseOneInstance(&figured_bassDB)
			backRepo.BackRepoFigured_bass.CheckoutPhaseTwoInstance(backRepo, &figured_bassDB)
		}
	}
}

// CopyBasicFieldsFromFigured_bass
func (figured_bassDB *Figured_bassDB) CopyBasicFieldsFromFigured_bass(figured_bass *models.Figured_bass) {
	// insertion point for fields commit

	figured_bassDB.Name_Data.String = figured_bass.Name
	figured_bassDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFigured_bass_WOP
func (figured_bassDB *Figured_bassDB) CopyBasicFieldsFromFigured_bass_WOP(figured_bass *models.Figured_bass_WOP) {
	// insertion point for fields commit

	figured_bassDB.Name_Data.String = figured_bass.Name
	figured_bassDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFigured_bassWOP
func (figured_bassDB *Figured_bassDB) CopyBasicFieldsFromFigured_bassWOP(figured_bass *Figured_bassWOP) {
	// insertion point for fields commit

	figured_bassDB.Name_Data.String = figured_bass.Name
	figured_bassDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFigured_bass
func (figured_bassDB *Figured_bassDB) CopyBasicFieldsToFigured_bass(figured_bass *models.Figured_bass) {
	// insertion point for checkout of basic fields (back repo to stage)
	figured_bass.Name = figured_bassDB.Name_Data.String
}

// CopyBasicFieldsToFigured_bass_WOP
func (figured_bassDB *Figured_bassDB) CopyBasicFieldsToFigured_bass_WOP(figured_bass *models.Figured_bass_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	figured_bass.Name = figured_bassDB.Name_Data.String
}

// CopyBasicFieldsToFigured_bassWOP
func (figured_bassDB *Figured_bassDB) CopyBasicFieldsToFigured_bassWOP(figured_bass *Figured_bassWOP) {
	figured_bass.ID = int(figured_bassDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	figured_bass.Name = figured_bassDB.Name_Data.String
}

// Backup generates a json file from a slice of all Figured_bassDB instances in the backrepo
func (backRepoFigured_bass *BackRepoFigured_bassStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Figured_bassDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Figured_bassDB, 0)
	for _, figured_bassDB := range backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB {
		forBackup = append(forBackup, figured_bassDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Figured_bass ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Figured_bass file", err.Error())
	}
}

// Backup generates a json file from a slice of all Figured_bassDB instances in the backrepo
func (backRepoFigured_bass *BackRepoFigured_bassStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Figured_bassDB, 0)
	for _, figured_bassDB := range backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB {
		forBackup = append(forBackup, figured_bassDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Figured_bass")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Figured_bass_Fields, -1)
	for _, figured_bassDB := range forBackup {

		var figured_bassWOP Figured_bassWOP
		figured_bassDB.CopyBasicFieldsToFigured_bassWOP(&figured_bassWOP)

		row := sh.AddRow()
		row.WriteStruct(&figured_bassWOP, -1)
	}
}

// RestoreXL from the "Figured_bass" sheet all Figured_bassDB instances
func (backRepoFigured_bass *BackRepoFigured_bassStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFigured_bassid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Figured_bass"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFigured_bass.rowVisitorFigured_bass)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFigured_bass *BackRepoFigured_bassStruct) rowVisitorFigured_bass(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var figured_bassWOP Figured_bassWOP
		row.ReadStruct(&figured_bassWOP)

		// add the unmarshalled struct to the stage
		figured_bassDB := new(Figured_bassDB)
		figured_bassDB.CopyBasicFieldsFromFigured_bassWOP(&figured_bassWOP)

		figured_bassDB_ID_atBackupTime := figured_bassDB.ID
		figured_bassDB.ID = 0
		query := backRepoFigured_bass.db.Create(figured_bassDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[figured_bassDB.ID] = figured_bassDB
		BackRepoFigured_bassid_atBckpTime_newID[figured_bassDB_ID_atBackupTime] = figured_bassDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Figured_bassDB.json" in dirPath that stores an array
// of Figured_bassDB and stores it in the database
// the map BackRepoFigured_bassid_atBckpTime_newID is updated accordingly
func (backRepoFigured_bass *BackRepoFigured_bassStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFigured_bassid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Figured_bassDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Figured_bass file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Figured_bassDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Figured_bassDBID_Figured_bassDB
	for _, figured_bassDB := range forRestore {

		figured_bassDB_ID_atBackupTime := figured_bassDB.ID
		figured_bassDB.ID = 0
		query := backRepoFigured_bass.db.Create(figured_bassDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[figured_bassDB.ID] = figured_bassDB
		BackRepoFigured_bassid_atBckpTime_newID[figured_bassDB_ID_atBackupTime] = figured_bassDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Figured_bass file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Figured_bass>id_atBckpTime_newID
// to compute new index
func (backRepoFigured_bass *BackRepoFigured_bassStruct) RestorePhaseTwo() {

	for _, figured_bassDB := range backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB {

		// next line of code is to avert unused variable compilation error
		_ = figured_bassDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFigured_bass.db.Model(figured_bassDB).Updates(*figured_bassDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFigured_bass.ResetReversePointers commits all staged instances of Figured_bass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFigured_bass *BackRepoFigured_bassStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, figured_bass := range backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassPtr {
		backRepoFigured_bass.ResetReversePointersInstance(backRepo, idx, figured_bass)
	}

	return
}

func (backRepoFigured_bass *BackRepoFigured_bassStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, figured_bass *models.Figured_bass) (Error error) {

	// fetch matching figured_bassDB
	if figured_bassDB, ok := backRepoFigured_bass.Map_Figured_bassDBID_Figured_bassDB[idx]; ok {
		_ = figured_bassDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFigured_bassid_atBckpTime_newID map[uint]uint
