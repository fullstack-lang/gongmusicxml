// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Dynamics_sql sql.NullBool
var dummy_Dynamics_time time.Duration
var dummy_Dynamics_sort sort.Float64Slice

// DynamicsAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model dynamicsAPI
type DynamicsAPI struct {
	gorm.Model

	models.Dynamics_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DynamicsPointersEncoding DynamicsPointersEncoding
}

// DynamicsPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DynamicsPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field P is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PID sql.NullInt64

	// field Pp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PpID sql.NullInt64

	// field Ppp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PppID sql.NullInt64

	// field Pppp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PpppID sql.NullInt64

	// field Ppppp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PppppID sql.NullInt64

	// field Pppppp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PpppppID sql.NullInt64

	// field F is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FID sql.NullInt64

	// field Ff is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FfID sql.NullInt64

	// field Fff is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FffID sql.NullInt64

	// field Ffff is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FfffID sql.NullInt64

	// field Fffff is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FffffID sql.NullInt64

	// field Ffffff is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FfffffID sql.NullInt64

	// field Mp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MpID sql.NullInt64

	// field Mf is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MfID sql.NullInt64

	// field Sf is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SfID sql.NullInt64

	// field Sfp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SfpID sql.NullInt64

	// field Sfpp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SfppID sql.NullInt64

	// field Fp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FpID sql.NullInt64

	// field Rf is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RfID sql.NullInt64

	// field Rfz is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RfzID sql.NullInt64

	// field Sfz is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SfzID sql.NullInt64

	// field Sffz is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SffzID sql.NullInt64

	// field Fz is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FzID sql.NullInt64

	// field N is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NID sql.NullInt64

	// field Pf is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PfID sql.NullInt64

	// field Sfzp is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SfzpID sql.NullInt64
}

// DynamicsDB describes a dynamics in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model dynamicsDB
type DynamicsDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field dynamicsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DynamicsPointersEncoding
}

// DynamicsDBs arrays dynamicsDBs
// swagger:response dynamicsDBsResponse
type DynamicsDBs []DynamicsDB

// DynamicsDBResponse provides response
// swagger:response dynamicsDBResponse
type DynamicsDBResponse struct {
	DynamicsDB
}

// DynamicsWOP is a Dynamics without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DynamicsWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Dynamics_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDynamicsStruct struct {
	// stores DynamicsDB according to their gorm ID
	Map_DynamicsDBID_DynamicsDB map[uint]*DynamicsDB

	// stores DynamicsDB ID according to Dynamics address
	Map_DynamicsPtr_DynamicsDBID map[*models.Dynamics]uint

	// stores Dynamics according to their gorm ID
	Map_DynamicsDBID_DynamicsPtr map[uint]*models.Dynamics

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDynamics *BackRepoDynamicsStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDynamics.stage
	return
}

func (backRepoDynamics *BackRepoDynamicsStruct) GetDB() *gorm.DB {
	return backRepoDynamics.db
}

// GetDynamicsDBFromDynamicsPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDynamics *BackRepoDynamicsStruct) GetDynamicsDBFromDynamicsPtr(dynamics *models.Dynamics) (dynamicsDB *DynamicsDB) {
	id := backRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics]
	dynamicsDB = backRepoDynamics.Map_DynamicsDBID_DynamicsDB[id]
	return
}

// BackRepoDynamics.CommitPhaseOne commits all staged instances of Dynamics to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDynamics *BackRepoDynamicsStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for dynamics := range stage.Dynamicss {
		backRepoDynamics.CommitPhaseOneInstance(dynamics)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, dynamics := range backRepoDynamics.Map_DynamicsDBID_DynamicsPtr {
		if _, ok := stage.Dynamicss[dynamics]; !ok {
			backRepoDynamics.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDynamics.CommitDeleteInstance commits deletion of Dynamics to the BackRepo
func (backRepoDynamics *BackRepoDynamicsStruct) CommitDeleteInstance(id uint) (Error error) {

	dynamics := backRepoDynamics.Map_DynamicsDBID_DynamicsPtr[id]

	// dynamics is not staged anymore, remove dynamicsDB
	dynamicsDB := backRepoDynamics.Map_DynamicsDBID_DynamicsDB[id]
	query := backRepoDynamics.db.Unscoped().Delete(&dynamicsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDynamics.Map_DynamicsPtr_DynamicsDBID, dynamics)
	delete(backRepoDynamics.Map_DynamicsDBID_DynamicsPtr, id)
	delete(backRepoDynamics.Map_DynamicsDBID_DynamicsDB, id)

	return
}

// BackRepoDynamics.CommitPhaseOneInstance commits dynamics staged instances of Dynamics to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDynamics *BackRepoDynamicsStruct) CommitPhaseOneInstance(dynamics *models.Dynamics) (Error error) {

	// check if the dynamics is not commited yet
	if _, ok := backRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics]; ok {
		return
	}

	// initiate dynamics
	var dynamicsDB DynamicsDB
	dynamicsDB.CopyBasicFieldsFromDynamics(dynamics)

	query := backRepoDynamics.db.Create(&dynamicsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics] = dynamicsDB.ID
	backRepoDynamics.Map_DynamicsDBID_DynamicsPtr[dynamicsDB.ID] = dynamics
	backRepoDynamics.Map_DynamicsDBID_DynamicsDB[dynamicsDB.ID] = &dynamicsDB

	return
}

// BackRepoDynamics.CommitPhaseTwo commits all staged instances of Dynamics to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDynamics *BackRepoDynamicsStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, dynamics := range backRepoDynamics.Map_DynamicsDBID_DynamicsPtr {
		backRepoDynamics.CommitPhaseTwoInstance(backRepo, idx, dynamics)
	}

	return
}

// BackRepoDynamics.CommitPhaseTwoInstance commits {{structname }} of models.Dynamics to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDynamics *BackRepoDynamicsStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, dynamics *models.Dynamics) (Error error) {

	// fetch matching dynamicsDB
	if dynamicsDB, ok := backRepoDynamics.Map_DynamicsDBID_DynamicsDB[idx]; ok {

		dynamicsDB.CopyBasicFieldsFromDynamics(dynamics)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value dynamics.P translates to updating the dynamics.PID
		dynamicsDB.PID.Valid = true // allow for a 0 value (nil association)
		if dynamics.P != nil {
			if PId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.P]; ok {
				dynamicsDB.PID.Int64 = int64(PId)
				dynamicsDB.PID.Valid = true
			}
		} else {
			dynamicsDB.PID.Int64 = 0
			dynamicsDB.PID.Valid = true
		}

		// commit pointer value dynamics.Pp translates to updating the dynamics.PpID
		dynamicsDB.PpID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Pp != nil {
			if PpId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Pp]; ok {
				dynamicsDB.PpID.Int64 = int64(PpId)
				dynamicsDB.PpID.Valid = true
			}
		} else {
			dynamicsDB.PpID.Int64 = 0
			dynamicsDB.PpID.Valid = true
		}

		// commit pointer value dynamics.Ppp translates to updating the dynamics.PppID
		dynamicsDB.PppID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Ppp != nil {
			if PppId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Ppp]; ok {
				dynamicsDB.PppID.Int64 = int64(PppId)
				dynamicsDB.PppID.Valid = true
			}
		} else {
			dynamicsDB.PppID.Int64 = 0
			dynamicsDB.PppID.Valid = true
		}

		// commit pointer value dynamics.Pppp translates to updating the dynamics.PpppID
		dynamicsDB.PpppID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Pppp != nil {
			if PpppId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Pppp]; ok {
				dynamicsDB.PpppID.Int64 = int64(PpppId)
				dynamicsDB.PpppID.Valid = true
			}
		} else {
			dynamicsDB.PpppID.Int64 = 0
			dynamicsDB.PpppID.Valid = true
		}

		// commit pointer value dynamics.Ppppp translates to updating the dynamics.PppppID
		dynamicsDB.PppppID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Ppppp != nil {
			if PppppId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Ppppp]; ok {
				dynamicsDB.PppppID.Int64 = int64(PppppId)
				dynamicsDB.PppppID.Valid = true
			}
		} else {
			dynamicsDB.PppppID.Int64 = 0
			dynamicsDB.PppppID.Valid = true
		}

		// commit pointer value dynamics.Pppppp translates to updating the dynamics.PpppppID
		dynamicsDB.PpppppID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Pppppp != nil {
			if PpppppId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Pppppp]; ok {
				dynamicsDB.PpppppID.Int64 = int64(PpppppId)
				dynamicsDB.PpppppID.Valid = true
			}
		} else {
			dynamicsDB.PpppppID.Int64 = 0
			dynamicsDB.PpppppID.Valid = true
		}

		// commit pointer value dynamics.F translates to updating the dynamics.FID
		dynamicsDB.FID.Valid = true // allow for a 0 value (nil association)
		if dynamics.F != nil {
			if FId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.F]; ok {
				dynamicsDB.FID.Int64 = int64(FId)
				dynamicsDB.FID.Valid = true
			}
		} else {
			dynamicsDB.FID.Int64 = 0
			dynamicsDB.FID.Valid = true
		}

		// commit pointer value dynamics.Ff translates to updating the dynamics.FfID
		dynamicsDB.FfID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Ff != nil {
			if FfId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Ff]; ok {
				dynamicsDB.FfID.Int64 = int64(FfId)
				dynamicsDB.FfID.Valid = true
			}
		} else {
			dynamicsDB.FfID.Int64 = 0
			dynamicsDB.FfID.Valid = true
		}

		// commit pointer value dynamics.Fff translates to updating the dynamics.FffID
		dynamicsDB.FffID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Fff != nil {
			if FffId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Fff]; ok {
				dynamicsDB.FffID.Int64 = int64(FffId)
				dynamicsDB.FffID.Valid = true
			}
		} else {
			dynamicsDB.FffID.Int64 = 0
			dynamicsDB.FffID.Valid = true
		}

		// commit pointer value dynamics.Ffff translates to updating the dynamics.FfffID
		dynamicsDB.FfffID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Ffff != nil {
			if FfffId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Ffff]; ok {
				dynamicsDB.FfffID.Int64 = int64(FfffId)
				dynamicsDB.FfffID.Valid = true
			}
		} else {
			dynamicsDB.FfffID.Int64 = 0
			dynamicsDB.FfffID.Valid = true
		}

		// commit pointer value dynamics.Fffff translates to updating the dynamics.FffffID
		dynamicsDB.FffffID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Fffff != nil {
			if FffffId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Fffff]; ok {
				dynamicsDB.FffffID.Int64 = int64(FffffId)
				dynamicsDB.FffffID.Valid = true
			}
		} else {
			dynamicsDB.FffffID.Int64 = 0
			dynamicsDB.FffffID.Valid = true
		}

		// commit pointer value dynamics.Ffffff translates to updating the dynamics.FfffffID
		dynamicsDB.FfffffID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Ffffff != nil {
			if FfffffId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Ffffff]; ok {
				dynamicsDB.FfffffID.Int64 = int64(FfffffId)
				dynamicsDB.FfffffID.Valid = true
			}
		} else {
			dynamicsDB.FfffffID.Int64 = 0
			dynamicsDB.FfffffID.Valid = true
		}

		// commit pointer value dynamics.Mp translates to updating the dynamics.MpID
		dynamicsDB.MpID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Mp != nil {
			if MpId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Mp]; ok {
				dynamicsDB.MpID.Int64 = int64(MpId)
				dynamicsDB.MpID.Valid = true
			}
		} else {
			dynamicsDB.MpID.Int64 = 0
			dynamicsDB.MpID.Valid = true
		}

		// commit pointer value dynamics.Mf translates to updating the dynamics.MfID
		dynamicsDB.MfID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Mf != nil {
			if MfId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Mf]; ok {
				dynamicsDB.MfID.Int64 = int64(MfId)
				dynamicsDB.MfID.Valid = true
			}
		} else {
			dynamicsDB.MfID.Int64 = 0
			dynamicsDB.MfID.Valid = true
		}

		// commit pointer value dynamics.Sf translates to updating the dynamics.SfID
		dynamicsDB.SfID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Sf != nil {
			if SfId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Sf]; ok {
				dynamicsDB.SfID.Int64 = int64(SfId)
				dynamicsDB.SfID.Valid = true
			}
		} else {
			dynamicsDB.SfID.Int64 = 0
			dynamicsDB.SfID.Valid = true
		}

		// commit pointer value dynamics.Sfp translates to updating the dynamics.SfpID
		dynamicsDB.SfpID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Sfp != nil {
			if SfpId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Sfp]; ok {
				dynamicsDB.SfpID.Int64 = int64(SfpId)
				dynamicsDB.SfpID.Valid = true
			}
		} else {
			dynamicsDB.SfpID.Int64 = 0
			dynamicsDB.SfpID.Valid = true
		}

		// commit pointer value dynamics.Sfpp translates to updating the dynamics.SfppID
		dynamicsDB.SfppID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Sfpp != nil {
			if SfppId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Sfpp]; ok {
				dynamicsDB.SfppID.Int64 = int64(SfppId)
				dynamicsDB.SfppID.Valid = true
			}
		} else {
			dynamicsDB.SfppID.Int64 = 0
			dynamicsDB.SfppID.Valid = true
		}

		// commit pointer value dynamics.Fp translates to updating the dynamics.FpID
		dynamicsDB.FpID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Fp != nil {
			if FpId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Fp]; ok {
				dynamicsDB.FpID.Int64 = int64(FpId)
				dynamicsDB.FpID.Valid = true
			}
		} else {
			dynamicsDB.FpID.Int64 = 0
			dynamicsDB.FpID.Valid = true
		}

		// commit pointer value dynamics.Rf translates to updating the dynamics.RfID
		dynamicsDB.RfID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Rf != nil {
			if RfId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Rf]; ok {
				dynamicsDB.RfID.Int64 = int64(RfId)
				dynamicsDB.RfID.Valid = true
			}
		} else {
			dynamicsDB.RfID.Int64 = 0
			dynamicsDB.RfID.Valid = true
		}

		// commit pointer value dynamics.Rfz translates to updating the dynamics.RfzID
		dynamicsDB.RfzID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Rfz != nil {
			if RfzId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Rfz]; ok {
				dynamicsDB.RfzID.Int64 = int64(RfzId)
				dynamicsDB.RfzID.Valid = true
			}
		} else {
			dynamicsDB.RfzID.Int64 = 0
			dynamicsDB.RfzID.Valid = true
		}

		// commit pointer value dynamics.Sfz translates to updating the dynamics.SfzID
		dynamicsDB.SfzID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Sfz != nil {
			if SfzId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Sfz]; ok {
				dynamicsDB.SfzID.Int64 = int64(SfzId)
				dynamicsDB.SfzID.Valid = true
			}
		} else {
			dynamicsDB.SfzID.Int64 = 0
			dynamicsDB.SfzID.Valid = true
		}

		// commit pointer value dynamics.Sffz translates to updating the dynamics.SffzID
		dynamicsDB.SffzID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Sffz != nil {
			if SffzId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Sffz]; ok {
				dynamicsDB.SffzID.Int64 = int64(SffzId)
				dynamicsDB.SffzID.Valid = true
			}
		} else {
			dynamicsDB.SffzID.Int64 = 0
			dynamicsDB.SffzID.Valid = true
		}

		// commit pointer value dynamics.Fz translates to updating the dynamics.FzID
		dynamicsDB.FzID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Fz != nil {
			if FzId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Fz]; ok {
				dynamicsDB.FzID.Int64 = int64(FzId)
				dynamicsDB.FzID.Valid = true
			}
		} else {
			dynamicsDB.FzID.Int64 = 0
			dynamicsDB.FzID.Valid = true
		}

		// commit pointer value dynamics.N translates to updating the dynamics.NID
		dynamicsDB.NID.Valid = true // allow for a 0 value (nil association)
		if dynamics.N != nil {
			if NId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.N]; ok {
				dynamicsDB.NID.Int64 = int64(NId)
				dynamicsDB.NID.Valid = true
			}
		} else {
			dynamicsDB.NID.Int64 = 0
			dynamicsDB.NID.Valid = true
		}

		// commit pointer value dynamics.Pf translates to updating the dynamics.PfID
		dynamicsDB.PfID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Pf != nil {
			if PfId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Pf]; ok {
				dynamicsDB.PfID.Int64 = int64(PfId)
				dynamicsDB.PfID.Valid = true
			}
		} else {
			dynamicsDB.PfID.Int64 = 0
			dynamicsDB.PfID.Valid = true
		}

		// commit pointer value dynamics.Sfzp translates to updating the dynamics.SfzpID
		dynamicsDB.SfzpID.Valid = true // allow for a 0 value (nil association)
		if dynamics.Sfzp != nil {
			if SfzpId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[dynamics.Sfzp]; ok {
				dynamicsDB.SfzpID.Int64 = int64(SfzpId)
				dynamicsDB.SfzpID.Valid = true
			}
		} else {
			dynamicsDB.SfzpID.Int64 = 0
			dynamicsDB.SfzpID.Valid = true
		}

		query := backRepoDynamics.db.Save(&dynamicsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Dynamics intance %s", dynamics.Name))
		return err
	}

	return
}

// BackRepoDynamics.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDynamics *BackRepoDynamicsStruct) CheckoutPhaseOne() (Error error) {

	dynamicsDBArray := make([]DynamicsDB, 0)
	query := backRepoDynamics.db.Find(&dynamicsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	dynamicsInstancesToBeRemovedFromTheStage := make(map[*models.Dynamics]any)
	for key, value := range backRepoDynamics.stage.Dynamicss {
		dynamicsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, dynamicsDB := range dynamicsDBArray {
		backRepoDynamics.CheckoutPhaseOneInstance(&dynamicsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		dynamics, ok := backRepoDynamics.Map_DynamicsDBID_DynamicsPtr[dynamicsDB.ID]
		if ok {
			delete(dynamicsInstancesToBeRemovedFromTheStage, dynamics)
		}
	}

	// remove from stage and back repo's 3 maps all dynamicss that are not in the checkout
	for dynamics := range dynamicsInstancesToBeRemovedFromTheStage {
		dynamics.Unstage(backRepoDynamics.GetStage())

		// remove instance from the back repo 3 maps
		dynamicsID := backRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics]
		delete(backRepoDynamics.Map_DynamicsPtr_DynamicsDBID, dynamics)
		delete(backRepoDynamics.Map_DynamicsDBID_DynamicsDB, dynamicsID)
		delete(backRepoDynamics.Map_DynamicsDBID_DynamicsPtr, dynamicsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a dynamicsDB that has been found in the DB, updates the backRepo and stages the
// models version of the dynamicsDB
func (backRepoDynamics *BackRepoDynamicsStruct) CheckoutPhaseOneInstance(dynamicsDB *DynamicsDB) (Error error) {

	dynamics, ok := backRepoDynamics.Map_DynamicsDBID_DynamicsPtr[dynamicsDB.ID]
	if !ok {
		dynamics = new(models.Dynamics)

		backRepoDynamics.Map_DynamicsDBID_DynamicsPtr[dynamicsDB.ID] = dynamics
		backRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics] = dynamicsDB.ID

		// append model store with the new element
		dynamics.Name = dynamicsDB.Name_Data.String
		dynamics.Stage(backRepoDynamics.GetStage())
	}
	dynamicsDB.CopyBasicFieldsToDynamics(dynamics)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	dynamics.Stage(backRepoDynamics.GetStage())

	// preserve pointer to dynamicsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DynamicsDBID_DynamicsDB)[dynamicsDB hold variable pointers
	dynamicsDB_Data := *dynamicsDB
	preservedPtrToDynamics := &dynamicsDB_Data
	backRepoDynamics.Map_DynamicsDBID_DynamicsDB[dynamicsDB.ID] = preservedPtrToDynamics

	return
}

// BackRepoDynamics.CheckoutPhaseTwo Checkouts all staged instances of Dynamics to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDynamics *BackRepoDynamicsStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, dynamicsDB := range backRepoDynamics.Map_DynamicsDBID_DynamicsDB {
		backRepoDynamics.CheckoutPhaseTwoInstance(backRepo, dynamicsDB)
	}
	return
}

// BackRepoDynamics.CheckoutPhaseTwoInstance Checkouts staged instances of Dynamics to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDynamics *BackRepoDynamicsStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, dynamicsDB *DynamicsDB) (Error error) {

	dynamics := backRepoDynamics.Map_DynamicsDBID_DynamicsPtr[dynamicsDB.ID]

	dynamicsDB.DecodePointers(backRepo, dynamics)

	return
}

func (dynamicsDB *DynamicsDB) DecodePointers(backRepo *BackRepoStruct, dynamics *models.Dynamics) {

	// insertion point for checkout of pointer encoding
	// P field
	dynamics.P = nil
	if dynamicsDB.PID.Int64 != 0 {
		dynamics.P = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.PID.Int64)]
	}
	// Pp field
	dynamics.Pp = nil
	if dynamicsDB.PpID.Int64 != 0 {
		dynamics.Pp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.PpID.Int64)]
	}
	// Ppp field
	dynamics.Ppp = nil
	if dynamicsDB.PppID.Int64 != 0 {
		dynamics.Ppp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.PppID.Int64)]
	}
	// Pppp field
	dynamics.Pppp = nil
	if dynamicsDB.PpppID.Int64 != 0 {
		dynamics.Pppp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.PpppID.Int64)]
	}
	// Ppppp field
	dynamics.Ppppp = nil
	if dynamicsDB.PppppID.Int64 != 0 {
		dynamics.Ppppp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.PppppID.Int64)]
	}
	// Pppppp field
	dynamics.Pppppp = nil
	if dynamicsDB.PpppppID.Int64 != 0 {
		dynamics.Pppppp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.PpppppID.Int64)]
	}
	// F field
	dynamics.F = nil
	if dynamicsDB.FID.Int64 != 0 {
		dynamics.F = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FID.Int64)]
	}
	// Ff field
	dynamics.Ff = nil
	if dynamicsDB.FfID.Int64 != 0 {
		dynamics.Ff = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FfID.Int64)]
	}
	// Fff field
	dynamics.Fff = nil
	if dynamicsDB.FffID.Int64 != 0 {
		dynamics.Fff = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FffID.Int64)]
	}
	// Ffff field
	dynamics.Ffff = nil
	if dynamicsDB.FfffID.Int64 != 0 {
		dynamics.Ffff = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FfffID.Int64)]
	}
	// Fffff field
	dynamics.Fffff = nil
	if dynamicsDB.FffffID.Int64 != 0 {
		dynamics.Fffff = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FffffID.Int64)]
	}
	// Ffffff field
	dynamics.Ffffff = nil
	if dynamicsDB.FfffffID.Int64 != 0 {
		dynamics.Ffffff = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FfffffID.Int64)]
	}
	// Mp field
	dynamics.Mp = nil
	if dynamicsDB.MpID.Int64 != 0 {
		dynamics.Mp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.MpID.Int64)]
	}
	// Mf field
	dynamics.Mf = nil
	if dynamicsDB.MfID.Int64 != 0 {
		dynamics.Mf = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.MfID.Int64)]
	}
	// Sf field
	dynamics.Sf = nil
	if dynamicsDB.SfID.Int64 != 0 {
		dynamics.Sf = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.SfID.Int64)]
	}
	// Sfp field
	dynamics.Sfp = nil
	if dynamicsDB.SfpID.Int64 != 0 {
		dynamics.Sfp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.SfpID.Int64)]
	}
	// Sfpp field
	dynamics.Sfpp = nil
	if dynamicsDB.SfppID.Int64 != 0 {
		dynamics.Sfpp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.SfppID.Int64)]
	}
	// Fp field
	dynamics.Fp = nil
	if dynamicsDB.FpID.Int64 != 0 {
		dynamics.Fp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FpID.Int64)]
	}
	// Rf field
	dynamics.Rf = nil
	if dynamicsDB.RfID.Int64 != 0 {
		dynamics.Rf = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.RfID.Int64)]
	}
	// Rfz field
	dynamics.Rfz = nil
	if dynamicsDB.RfzID.Int64 != 0 {
		dynamics.Rfz = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.RfzID.Int64)]
	}
	// Sfz field
	dynamics.Sfz = nil
	if dynamicsDB.SfzID.Int64 != 0 {
		dynamics.Sfz = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.SfzID.Int64)]
	}
	// Sffz field
	dynamics.Sffz = nil
	if dynamicsDB.SffzID.Int64 != 0 {
		dynamics.Sffz = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.SffzID.Int64)]
	}
	// Fz field
	dynamics.Fz = nil
	if dynamicsDB.FzID.Int64 != 0 {
		dynamics.Fz = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.FzID.Int64)]
	}
	// N field
	dynamics.N = nil
	if dynamicsDB.NID.Int64 != 0 {
		dynamics.N = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.NID.Int64)]
	}
	// Pf field
	dynamics.Pf = nil
	if dynamicsDB.PfID.Int64 != 0 {
		dynamics.Pf = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.PfID.Int64)]
	}
	// Sfzp field
	dynamics.Sfzp = nil
	if dynamicsDB.SfzpID.Int64 != 0 {
		dynamics.Sfzp = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(dynamicsDB.SfzpID.Int64)]
	}
	return
}

// CommitDynamics allows commit of a single dynamics (if already staged)
func (backRepo *BackRepoStruct) CommitDynamics(dynamics *models.Dynamics) {
	backRepo.BackRepoDynamics.CommitPhaseOneInstance(dynamics)
	if id, ok := backRepo.BackRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics]; ok {
		backRepo.BackRepoDynamics.CommitPhaseTwoInstance(backRepo, id, dynamics)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDynamics allows checkout of a single dynamics (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDynamics(dynamics *models.Dynamics) {
	// check if the dynamics is staged
	if _, ok := backRepo.BackRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics]; ok {

		if id, ok := backRepo.BackRepoDynamics.Map_DynamicsPtr_DynamicsDBID[dynamics]; ok {
			var dynamicsDB DynamicsDB
			dynamicsDB.ID = id

			if err := backRepo.BackRepoDynamics.db.First(&dynamicsDB, id).Error; err != nil {
				log.Fatalln("CheckoutDynamics : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDynamics.CheckoutPhaseOneInstance(&dynamicsDB)
			backRepo.BackRepoDynamics.CheckoutPhaseTwoInstance(backRepo, &dynamicsDB)
		}
	}
}

// CopyBasicFieldsFromDynamics
func (dynamicsDB *DynamicsDB) CopyBasicFieldsFromDynamics(dynamics *models.Dynamics) {
	// insertion point for fields commit

	dynamicsDB.Name_Data.String = dynamics.Name
	dynamicsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDynamics_WOP
func (dynamicsDB *DynamicsDB) CopyBasicFieldsFromDynamics_WOP(dynamics *models.Dynamics_WOP) {
	// insertion point for fields commit

	dynamicsDB.Name_Data.String = dynamics.Name
	dynamicsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDynamicsWOP
func (dynamicsDB *DynamicsDB) CopyBasicFieldsFromDynamicsWOP(dynamics *DynamicsWOP) {
	// insertion point for fields commit

	dynamicsDB.Name_Data.String = dynamics.Name
	dynamicsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDynamics
func (dynamicsDB *DynamicsDB) CopyBasicFieldsToDynamics(dynamics *models.Dynamics) {
	// insertion point for checkout of basic fields (back repo to stage)
	dynamics.Name = dynamicsDB.Name_Data.String
}

// CopyBasicFieldsToDynamics_WOP
func (dynamicsDB *DynamicsDB) CopyBasicFieldsToDynamics_WOP(dynamics *models.Dynamics_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	dynamics.Name = dynamicsDB.Name_Data.String
}

// CopyBasicFieldsToDynamicsWOP
func (dynamicsDB *DynamicsDB) CopyBasicFieldsToDynamicsWOP(dynamics *DynamicsWOP) {
	dynamics.ID = int(dynamicsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	dynamics.Name = dynamicsDB.Name_Data.String
}

// Backup generates a json file from a slice of all DynamicsDB instances in the backrepo
func (backRepoDynamics *BackRepoDynamicsStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DynamicsDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DynamicsDB, 0)
	for _, dynamicsDB := range backRepoDynamics.Map_DynamicsDBID_DynamicsDB {
		forBackup = append(forBackup, dynamicsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Dynamics ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Dynamics file", err.Error())
	}
}

// Backup generates a json file from a slice of all DynamicsDB instances in the backrepo
func (backRepoDynamics *BackRepoDynamicsStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DynamicsDB, 0)
	for _, dynamicsDB := range backRepoDynamics.Map_DynamicsDBID_DynamicsDB {
		forBackup = append(forBackup, dynamicsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Dynamics")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Dynamics_Fields, -1)
	for _, dynamicsDB := range forBackup {

		var dynamicsWOP DynamicsWOP
		dynamicsDB.CopyBasicFieldsToDynamicsWOP(&dynamicsWOP)

		row := sh.AddRow()
		row.WriteStruct(&dynamicsWOP, -1)
	}
}

// RestoreXL from the "Dynamics" sheet all DynamicsDB instances
func (backRepoDynamics *BackRepoDynamicsStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDynamicsid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Dynamics"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDynamics.rowVisitorDynamics)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDynamics *BackRepoDynamicsStruct) rowVisitorDynamics(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var dynamicsWOP DynamicsWOP
		row.ReadStruct(&dynamicsWOP)

		// add the unmarshalled struct to the stage
		dynamicsDB := new(DynamicsDB)
		dynamicsDB.CopyBasicFieldsFromDynamicsWOP(&dynamicsWOP)

		dynamicsDB_ID_atBackupTime := dynamicsDB.ID
		dynamicsDB.ID = 0
		query := backRepoDynamics.db.Create(dynamicsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDynamics.Map_DynamicsDBID_DynamicsDB[dynamicsDB.ID] = dynamicsDB
		BackRepoDynamicsid_atBckpTime_newID[dynamicsDB_ID_atBackupTime] = dynamicsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DynamicsDB.json" in dirPath that stores an array
// of DynamicsDB and stores it in the database
// the map BackRepoDynamicsid_atBckpTime_newID is updated accordingly
func (backRepoDynamics *BackRepoDynamicsStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDynamicsid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DynamicsDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Dynamics file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DynamicsDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DynamicsDBID_DynamicsDB
	for _, dynamicsDB := range forRestore {

		dynamicsDB_ID_atBackupTime := dynamicsDB.ID
		dynamicsDB.ID = 0
		query := backRepoDynamics.db.Create(dynamicsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDynamics.Map_DynamicsDBID_DynamicsDB[dynamicsDB.ID] = dynamicsDB
		BackRepoDynamicsid_atBckpTime_newID[dynamicsDB_ID_atBackupTime] = dynamicsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Dynamics file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Dynamics>id_atBckpTime_newID
// to compute new index
func (backRepoDynamics *BackRepoDynamicsStruct) RestorePhaseTwo() {

	for _, dynamicsDB := range backRepoDynamics.Map_DynamicsDBID_DynamicsDB {

		// next line of code is to avert unused variable compilation error
		_ = dynamicsDB

		// insertion point for reindexing pointers encoding
		// reindexing P field
		if dynamicsDB.PID.Int64 != 0 {
			dynamicsDB.PID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.PID.Int64)])
			dynamicsDB.PID.Valid = true
		}

		// reindexing Pp field
		if dynamicsDB.PpID.Int64 != 0 {
			dynamicsDB.PpID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.PpID.Int64)])
			dynamicsDB.PpID.Valid = true
		}

		// reindexing Ppp field
		if dynamicsDB.PppID.Int64 != 0 {
			dynamicsDB.PppID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.PppID.Int64)])
			dynamicsDB.PppID.Valid = true
		}

		// reindexing Pppp field
		if dynamicsDB.PpppID.Int64 != 0 {
			dynamicsDB.PpppID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.PpppID.Int64)])
			dynamicsDB.PpppID.Valid = true
		}

		// reindexing Ppppp field
		if dynamicsDB.PppppID.Int64 != 0 {
			dynamicsDB.PppppID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.PppppID.Int64)])
			dynamicsDB.PppppID.Valid = true
		}

		// reindexing Pppppp field
		if dynamicsDB.PpppppID.Int64 != 0 {
			dynamicsDB.PpppppID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.PpppppID.Int64)])
			dynamicsDB.PpppppID.Valid = true
		}

		// reindexing F field
		if dynamicsDB.FID.Int64 != 0 {
			dynamicsDB.FID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FID.Int64)])
			dynamicsDB.FID.Valid = true
		}

		// reindexing Ff field
		if dynamicsDB.FfID.Int64 != 0 {
			dynamicsDB.FfID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FfID.Int64)])
			dynamicsDB.FfID.Valid = true
		}

		// reindexing Fff field
		if dynamicsDB.FffID.Int64 != 0 {
			dynamicsDB.FffID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FffID.Int64)])
			dynamicsDB.FffID.Valid = true
		}

		// reindexing Ffff field
		if dynamicsDB.FfffID.Int64 != 0 {
			dynamicsDB.FfffID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FfffID.Int64)])
			dynamicsDB.FfffID.Valid = true
		}

		// reindexing Fffff field
		if dynamicsDB.FffffID.Int64 != 0 {
			dynamicsDB.FffffID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FffffID.Int64)])
			dynamicsDB.FffffID.Valid = true
		}

		// reindexing Ffffff field
		if dynamicsDB.FfffffID.Int64 != 0 {
			dynamicsDB.FfffffID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FfffffID.Int64)])
			dynamicsDB.FfffffID.Valid = true
		}

		// reindexing Mp field
		if dynamicsDB.MpID.Int64 != 0 {
			dynamicsDB.MpID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.MpID.Int64)])
			dynamicsDB.MpID.Valid = true
		}

		// reindexing Mf field
		if dynamicsDB.MfID.Int64 != 0 {
			dynamicsDB.MfID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.MfID.Int64)])
			dynamicsDB.MfID.Valid = true
		}

		// reindexing Sf field
		if dynamicsDB.SfID.Int64 != 0 {
			dynamicsDB.SfID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.SfID.Int64)])
			dynamicsDB.SfID.Valid = true
		}

		// reindexing Sfp field
		if dynamicsDB.SfpID.Int64 != 0 {
			dynamicsDB.SfpID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.SfpID.Int64)])
			dynamicsDB.SfpID.Valid = true
		}

		// reindexing Sfpp field
		if dynamicsDB.SfppID.Int64 != 0 {
			dynamicsDB.SfppID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.SfppID.Int64)])
			dynamicsDB.SfppID.Valid = true
		}

		// reindexing Fp field
		if dynamicsDB.FpID.Int64 != 0 {
			dynamicsDB.FpID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FpID.Int64)])
			dynamicsDB.FpID.Valid = true
		}

		// reindexing Rf field
		if dynamicsDB.RfID.Int64 != 0 {
			dynamicsDB.RfID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.RfID.Int64)])
			dynamicsDB.RfID.Valid = true
		}

		// reindexing Rfz field
		if dynamicsDB.RfzID.Int64 != 0 {
			dynamicsDB.RfzID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.RfzID.Int64)])
			dynamicsDB.RfzID.Valid = true
		}

		// reindexing Sfz field
		if dynamicsDB.SfzID.Int64 != 0 {
			dynamicsDB.SfzID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.SfzID.Int64)])
			dynamicsDB.SfzID.Valid = true
		}

		// reindexing Sffz field
		if dynamicsDB.SffzID.Int64 != 0 {
			dynamicsDB.SffzID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.SffzID.Int64)])
			dynamicsDB.SffzID.Valid = true
		}

		// reindexing Fz field
		if dynamicsDB.FzID.Int64 != 0 {
			dynamicsDB.FzID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.FzID.Int64)])
			dynamicsDB.FzID.Valid = true
		}

		// reindexing N field
		if dynamicsDB.NID.Int64 != 0 {
			dynamicsDB.NID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.NID.Int64)])
			dynamicsDB.NID.Valid = true
		}

		// reindexing Pf field
		if dynamicsDB.PfID.Int64 != 0 {
			dynamicsDB.PfID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.PfID.Int64)])
			dynamicsDB.PfID.Valid = true
		}

		// reindexing Sfzp field
		if dynamicsDB.SfzpID.Int64 != 0 {
			dynamicsDB.SfzpID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(dynamicsDB.SfzpID.Int64)])
			dynamicsDB.SfzpID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDynamics.db.Model(dynamicsDB).Updates(*dynamicsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDynamics.ResetReversePointers commits all staged instances of Dynamics to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDynamics *BackRepoDynamicsStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, dynamics := range backRepoDynamics.Map_DynamicsDBID_DynamicsPtr {
		backRepoDynamics.ResetReversePointersInstance(backRepo, idx, dynamics)
	}

	return
}

func (backRepoDynamics *BackRepoDynamicsStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, dynamics *models.Dynamics) (Error error) {

	// fetch matching dynamicsDB
	if dynamicsDB, ok := backRepoDynamics.Map_DynamicsDBID_DynamicsDB[idx]; ok {
		_ = dynamicsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDynamicsid_atBckpTime_newID map[uint]uint
