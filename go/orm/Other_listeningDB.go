// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Other_listening_sql sql.NullBool
var dummy_Other_listening_time time.Duration
var dummy_Other_listening_sort sort.Float64Slice

// Other_listeningAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model other_listeningAPI
type Other_listeningAPI struct {
	gorm.Model

	models.Other_listening_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Other_listeningPointersEncoding Other_listeningPointersEncoding
}

// Other_listeningPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Other_listeningPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Other_listeningDB describes a other_listening in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model other_listeningDB
type Other_listeningDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field other_listeningDB.Name
	Name_Data sql.NullString

	// Declation for basic field other_listeningDB.Value
	Value_Data sql.NullString

	// Declation for basic field other_listeningDB.Type
	Type_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Other_listeningPointersEncoding
}

// Other_listeningDBs arrays other_listeningDBs
// swagger:response other_listeningDBsResponse
type Other_listeningDBs []Other_listeningDB

// Other_listeningDBResponse provides response
// swagger:response other_listeningDBResponse
type Other_listeningDBResponse struct {
	Other_listeningDB
}

// Other_listeningWOP is a Other_listening without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Other_listeningWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`

	Type string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Other_listening_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
	"Type",
}

type BackRepoOther_listeningStruct struct {
	// stores Other_listeningDB according to their gorm ID
	Map_Other_listeningDBID_Other_listeningDB map[uint]*Other_listeningDB

	// stores Other_listeningDB ID according to Other_listening address
	Map_Other_listeningPtr_Other_listeningDBID map[*models.Other_listening]uint

	// stores Other_listening according to their gorm ID
	Map_Other_listeningDBID_Other_listeningPtr map[uint]*models.Other_listening

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOther_listening *BackRepoOther_listeningStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOther_listening.stage
	return
}

func (backRepoOther_listening *BackRepoOther_listeningStruct) GetDB() *gorm.DB {
	return backRepoOther_listening.db
}

// GetOther_listeningDBFromOther_listeningPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOther_listening *BackRepoOther_listeningStruct) GetOther_listeningDBFromOther_listeningPtr(other_listening *models.Other_listening) (other_listeningDB *Other_listeningDB) {
	id := backRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening]
	other_listeningDB = backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[id]
	return
}

// BackRepoOther_listening.CommitPhaseOne commits all staged instances of Other_listening to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOther_listening *BackRepoOther_listeningStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for other_listening := range stage.Other_listenings {
		backRepoOther_listening.CommitPhaseOneInstance(other_listening)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, other_listening := range backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr {
		if _, ok := stage.Other_listenings[other_listening]; !ok {
			backRepoOther_listening.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOther_listening.CommitDeleteInstance commits deletion of Other_listening to the BackRepo
func (backRepoOther_listening *BackRepoOther_listeningStruct) CommitDeleteInstance(id uint) (Error error) {

	other_listening := backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr[id]

	// other_listening is not staged anymore, remove other_listeningDB
	other_listeningDB := backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[id]
	query := backRepoOther_listening.db.Unscoped().Delete(&other_listeningDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID, other_listening)
	delete(backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr, id)
	delete(backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB, id)

	return
}

// BackRepoOther_listening.CommitPhaseOneInstance commits other_listening staged instances of Other_listening to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOther_listening *BackRepoOther_listeningStruct) CommitPhaseOneInstance(other_listening *models.Other_listening) (Error error) {

	// check if the other_listening is not commited yet
	if _, ok := backRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening]; ok {
		return
	}

	// initiate other_listening
	var other_listeningDB Other_listeningDB
	other_listeningDB.CopyBasicFieldsFromOther_listening(other_listening)

	query := backRepoOther_listening.db.Create(&other_listeningDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening] = other_listeningDB.ID
	backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr[other_listeningDB.ID] = other_listening
	backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[other_listeningDB.ID] = &other_listeningDB

	return
}

// BackRepoOther_listening.CommitPhaseTwo commits all staged instances of Other_listening to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_listening *BackRepoOther_listeningStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, other_listening := range backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr {
		backRepoOther_listening.CommitPhaseTwoInstance(backRepo, idx, other_listening)
	}

	return
}

// BackRepoOther_listening.CommitPhaseTwoInstance commits {{structname }} of models.Other_listening to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_listening *BackRepoOther_listeningStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, other_listening *models.Other_listening) (Error error) {

	// fetch matching other_listeningDB
	if other_listeningDB, ok := backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[idx]; ok {

		other_listeningDB.CopyBasicFieldsFromOther_listening(other_listening)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOther_listening.db.Save(&other_listeningDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Other_listening intance %s", other_listening.Name))
		return err
	}

	return
}

// BackRepoOther_listening.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOther_listening *BackRepoOther_listeningStruct) CheckoutPhaseOne() (Error error) {

	other_listeningDBArray := make([]Other_listeningDB, 0)
	query := backRepoOther_listening.db.Find(&other_listeningDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	other_listeningInstancesToBeRemovedFromTheStage := make(map[*models.Other_listening]any)
	for key, value := range backRepoOther_listening.stage.Other_listenings {
		other_listeningInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, other_listeningDB := range other_listeningDBArray {
		backRepoOther_listening.CheckoutPhaseOneInstance(&other_listeningDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		other_listening, ok := backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr[other_listeningDB.ID]
		if ok {
			delete(other_listeningInstancesToBeRemovedFromTheStage, other_listening)
		}
	}

	// remove from stage and back repo's 3 maps all other_listenings that are not in the checkout
	for other_listening := range other_listeningInstancesToBeRemovedFromTheStage {
		other_listening.Unstage(backRepoOther_listening.GetStage())

		// remove instance from the back repo 3 maps
		other_listeningID := backRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening]
		delete(backRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID, other_listening)
		delete(backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB, other_listeningID)
		delete(backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr, other_listeningID)
	}

	return
}

// CheckoutPhaseOneInstance takes a other_listeningDB that has been found in the DB, updates the backRepo and stages the
// models version of the other_listeningDB
func (backRepoOther_listening *BackRepoOther_listeningStruct) CheckoutPhaseOneInstance(other_listeningDB *Other_listeningDB) (Error error) {

	other_listening, ok := backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr[other_listeningDB.ID]
	if !ok {
		other_listening = new(models.Other_listening)

		backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr[other_listeningDB.ID] = other_listening
		backRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening] = other_listeningDB.ID

		// append model store with the new element
		other_listening.Name = other_listeningDB.Name_Data.String
		other_listening.Stage(backRepoOther_listening.GetStage())
	}
	other_listeningDB.CopyBasicFieldsToOther_listening(other_listening)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	other_listening.Stage(backRepoOther_listening.GetStage())

	// preserve pointer to other_listeningDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Other_listeningDBID_Other_listeningDB)[other_listeningDB hold variable pointers
	other_listeningDB_Data := *other_listeningDB
	preservedPtrToOther_listening := &other_listeningDB_Data
	backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[other_listeningDB.ID] = preservedPtrToOther_listening

	return
}

// BackRepoOther_listening.CheckoutPhaseTwo Checkouts all staged instances of Other_listening to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_listening *BackRepoOther_listeningStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, other_listeningDB := range backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB {
		backRepoOther_listening.CheckoutPhaseTwoInstance(backRepo, other_listeningDB)
	}
	return
}

// BackRepoOther_listening.CheckoutPhaseTwoInstance Checkouts staged instances of Other_listening to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_listening *BackRepoOther_listeningStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, other_listeningDB *Other_listeningDB) (Error error) {

	other_listening := backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr[other_listeningDB.ID]

	other_listeningDB.DecodePointers(backRepo, other_listening)

	return
}

func (other_listeningDB *Other_listeningDB) DecodePointers(backRepo *BackRepoStruct, other_listening *models.Other_listening) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOther_listening allows commit of a single other_listening (if already staged)
func (backRepo *BackRepoStruct) CommitOther_listening(other_listening *models.Other_listening) {
	backRepo.BackRepoOther_listening.CommitPhaseOneInstance(other_listening)
	if id, ok := backRepo.BackRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening]; ok {
		backRepo.BackRepoOther_listening.CommitPhaseTwoInstance(backRepo, id, other_listening)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOther_listening allows checkout of a single other_listening (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOther_listening(other_listening *models.Other_listening) {
	// check if the other_listening is staged
	if _, ok := backRepo.BackRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening]; ok {

		if id, ok := backRepo.BackRepoOther_listening.Map_Other_listeningPtr_Other_listeningDBID[other_listening]; ok {
			var other_listeningDB Other_listeningDB
			other_listeningDB.ID = id

			if err := backRepo.BackRepoOther_listening.db.First(&other_listeningDB, id).Error; err != nil {
				log.Fatalln("CheckoutOther_listening : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOther_listening.CheckoutPhaseOneInstance(&other_listeningDB)
			backRepo.BackRepoOther_listening.CheckoutPhaseTwoInstance(backRepo, &other_listeningDB)
		}
	}
}

// CopyBasicFieldsFromOther_listening
func (other_listeningDB *Other_listeningDB) CopyBasicFieldsFromOther_listening(other_listening *models.Other_listening) {
	// insertion point for fields commit

	other_listeningDB.Name_Data.String = other_listening.Name
	other_listeningDB.Name_Data.Valid = true

	other_listeningDB.Value_Data.String = other_listening.Value
	other_listeningDB.Value_Data.Valid = true

	other_listeningDB.Type_Data.String = other_listening.Type
	other_listeningDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromOther_listening_WOP
func (other_listeningDB *Other_listeningDB) CopyBasicFieldsFromOther_listening_WOP(other_listening *models.Other_listening_WOP) {
	// insertion point for fields commit

	other_listeningDB.Name_Data.String = other_listening.Name
	other_listeningDB.Name_Data.Valid = true

	other_listeningDB.Value_Data.String = other_listening.Value
	other_listeningDB.Value_Data.Valid = true

	other_listeningDB.Type_Data.String = other_listening.Type
	other_listeningDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromOther_listeningWOP
func (other_listeningDB *Other_listeningDB) CopyBasicFieldsFromOther_listeningWOP(other_listening *Other_listeningWOP) {
	// insertion point for fields commit

	other_listeningDB.Name_Data.String = other_listening.Name
	other_listeningDB.Name_Data.Valid = true

	other_listeningDB.Value_Data.String = other_listening.Value
	other_listeningDB.Value_Data.Valid = true

	other_listeningDB.Type_Data.String = other_listening.Type
	other_listeningDB.Type_Data.Valid = true
}

// CopyBasicFieldsToOther_listening
func (other_listeningDB *Other_listeningDB) CopyBasicFieldsToOther_listening(other_listening *models.Other_listening) {
	// insertion point for checkout of basic fields (back repo to stage)
	other_listening.Name = other_listeningDB.Name_Data.String
	other_listening.Value = other_listeningDB.Value_Data.String
	other_listening.Type = other_listeningDB.Type_Data.String
}

// CopyBasicFieldsToOther_listening_WOP
func (other_listeningDB *Other_listeningDB) CopyBasicFieldsToOther_listening_WOP(other_listening *models.Other_listening_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	other_listening.Name = other_listeningDB.Name_Data.String
	other_listening.Value = other_listeningDB.Value_Data.String
	other_listening.Type = other_listeningDB.Type_Data.String
}

// CopyBasicFieldsToOther_listeningWOP
func (other_listeningDB *Other_listeningDB) CopyBasicFieldsToOther_listeningWOP(other_listening *Other_listeningWOP) {
	other_listening.ID = int(other_listeningDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	other_listening.Name = other_listeningDB.Name_Data.String
	other_listening.Value = other_listeningDB.Value_Data.String
	other_listening.Type = other_listeningDB.Type_Data.String
}

// Backup generates a json file from a slice of all Other_listeningDB instances in the backrepo
func (backRepoOther_listening *BackRepoOther_listeningStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Other_listeningDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Other_listeningDB, 0)
	for _, other_listeningDB := range backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB {
		forBackup = append(forBackup, other_listeningDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Other_listening ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Other_listening file", err.Error())
	}
}

// Backup generates a json file from a slice of all Other_listeningDB instances in the backrepo
func (backRepoOther_listening *BackRepoOther_listeningStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Other_listeningDB, 0)
	for _, other_listeningDB := range backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB {
		forBackup = append(forBackup, other_listeningDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Other_listening")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Other_listening_Fields, -1)
	for _, other_listeningDB := range forBackup {

		var other_listeningWOP Other_listeningWOP
		other_listeningDB.CopyBasicFieldsToOther_listeningWOP(&other_listeningWOP)

		row := sh.AddRow()
		row.WriteStruct(&other_listeningWOP, -1)
	}
}

// RestoreXL from the "Other_listening" sheet all Other_listeningDB instances
func (backRepoOther_listening *BackRepoOther_listeningStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOther_listeningid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Other_listening"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOther_listening.rowVisitorOther_listening)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOther_listening *BackRepoOther_listeningStruct) rowVisitorOther_listening(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var other_listeningWOP Other_listeningWOP
		row.ReadStruct(&other_listeningWOP)

		// add the unmarshalled struct to the stage
		other_listeningDB := new(Other_listeningDB)
		other_listeningDB.CopyBasicFieldsFromOther_listeningWOP(&other_listeningWOP)

		other_listeningDB_ID_atBackupTime := other_listeningDB.ID
		other_listeningDB.ID = 0
		query := backRepoOther_listening.db.Create(other_listeningDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[other_listeningDB.ID] = other_listeningDB
		BackRepoOther_listeningid_atBckpTime_newID[other_listeningDB_ID_atBackupTime] = other_listeningDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Other_listeningDB.json" in dirPath that stores an array
// of Other_listeningDB and stores it in the database
// the map BackRepoOther_listeningid_atBckpTime_newID is updated accordingly
func (backRepoOther_listening *BackRepoOther_listeningStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOther_listeningid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Other_listeningDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Other_listening file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Other_listeningDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Other_listeningDBID_Other_listeningDB
	for _, other_listeningDB := range forRestore {

		other_listeningDB_ID_atBackupTime := other_listeningDB.ID
		other_listeningDB.ID = 0
		query := backRepoOther_listening.db.Create(other_listeningDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[other_listeningDB.ID] = other_listeningDB
		BackRepoOther_listeningid_atBckpTime_newID[other_listeningDB_ID_atBackupTime] = other_listeningDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Other_listening file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Other_listening>id_atBckpTime_newID
// to compute new index
func (backRepoOther_listening *BackRepoOther_listeningStruct) RestorePhaseTwo() {

	for _, other_listeningDB := range backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB {

		// next line of code is to avert unused variable compilation error
		_ = other_listeningDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOther_listening.db.Model(other_listeningDB).Updates(*other_listeningDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOther_listening.ResetReversePointers commits all staged instances of Other_listening to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_listening *BackRepoOther_listeningStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, other_listening := range backRepoOther_listening.Map_Other_listeningDBID_Other_listeningPtr {
		backRepoOther_listening.ResetReversePointersInstance(backRepo, idx, other_listening)
	}

	return
}

func (backRepoOther_listening *BackRepoOther_listeningStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, other_listening *models.Other_listening) (Error error) {

	// fetch matching other_listeningDB
	if other_listeningDB, ok := backRepoOther_listening.Map_Other_listeningDBID_Other_listeningDB[idx]; ok {
		_ = other_listeningDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOther_listeningid_atBckpTime_newID map[uint]uint
