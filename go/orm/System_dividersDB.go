// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_System_dividers_sql sql.NullBool
var dummy_System_dividers_time time.Duration
var dummy_System_dividers_sort sort.Float64Slice

// System_dividersAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model system_dividersAPI
type System_dividersAPI struct {
	gorm.Model

	models.System_dividers_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	System_dividersPointersEncoding System_dividersPointersEncoding
}

// System_dividersPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type System_dividersPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Left_divider is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Left_dividerID sql.NullInt64

	// field Right_divider is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Right_dividerID sql.NullInt64
}

// System_dividersDB describes a system_dividers in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model system_dividersDB
type System_dividersDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field system_dividersDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	System_dividersPointersEncoding
}

// System_dividersDBs arrays system_dividersDBs
// swagger:response system_dividersDBsResponse
type System_dividersDBs []System_dividersDB

// System_dividersDBResponse provides response
// swagger:response system_dividersDBResponse
type System_dividersDBResponse struct {
	System_dividersDB
}

// System_dividersWOP is a System_dividers without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type System_dividersWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var System_dividers_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSystem_dividersStruct struct {
	// stores System_dividersDB according to their gorm ID
	Map_System_dividersDBID_System_dividersDB map[uint]*System_dividersDB

	// stores System_dividersDB ID according to System_dividers address
	Map_System_dividersPtr_System_dividersDBID map[*models.System_dividers]uint

	// stores System_dividers according to their gorm ID
	Map_System_dividersDBID_System_dividersPtr map[uint]*models.System_dividers

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSystem_dividers.stage
	return
}

func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) GetDB() *gorm.DB {
	return backRepoSystem_dividers.db
}

// GetSystem_dividersDBFromSystem_dividersPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) GetSystem_dividersDBFromSystem_dividersPtr(system_dividers *models.System_dividers) (system_dividersDB *System_dividersDB) {
	id := backRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers]
	system_dividersDB = backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[id]
	return
}

// BackRepoSystem_dividers.CommitPhaseOne commits all staged instances of System_dividers to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for system_dividers := range stage.System_dividerss {
		backRepoSystem_dividers.CommitPhaseOneInstance(system_dividers)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, system_dividers := range backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr {
		if _, ok := stage.System_dividerss[system_dividers]; !ok {
			backRepoSystem_dividers.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSystem_dividers.CommitDeleteInstance commits deletion of System_dividers to the BackRepo
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CommitDeleteInstance(id uint) (Error error) {

	system_dividers := backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr[id]

	// system_dividers is not staged anymore, remove system_dividersDB
	system_dividersDB := backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[id]
	query := backRepoSystem_dividers.db.Unscoped().Delete(&system_dividersDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID, system_dividers)
	delete(backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr, id)
	delete(backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB, id)

	return
}

// BackRepoSystem_dividers.CommitPhaseOneInstance commits system_dividers staged instances of System_dividers to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CommitPhaseOneInstance(system_dividers *models.System_dividers) (Error error) {

	// check if the system_dividers is not commited yet
	if _, ok := backRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers]; ok {
		return
	}

	// initiate system_dividers
	var system_dividersDB System_dividersDB
	system_dividersDB.CopyBasicFieldsFromSystem_dividers(system_dividers)

	query := backRepoSystem_dividers.db.Create(&system_dividersDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers] = system_dividersDB.ID
	backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr[system_dividersDB.ID] = system_dividers
	backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[system_dividersDB.ID] = &system_dividersDB

	return
}

// BackRepoSystem_dividers.CommitPhaseTwo commits all staged instances of System_dividers to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, system_dividers := range backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr {
		backRepoSystem_dividers.CommitPhaseTwoInstance(backRepo, idx, system_dividers)
	}

	return
}

// BackRepoSystem_dividers.CommitPhaseTwoInstance commits {{structname }} of models.System_dividers to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, system_dividers *models.System_dividers) (Error error) {

	// fetch matching system_dividersDB
	if system_dividersDB, ok := backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[idx]; ok {

		system_dividersDB.CopyBasicFieldsFromSystem_dividers(system_dividers)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value system_dividers.Left_divider translates to updating the system_dividers.Left_dividerID
		system_dividersDB.Left_dividerID.Valid = true // allow for a 0 value (nil association)
		if system_dividers.Left_divider != nil {
			if Left_dividerId, ok := backRepo.BackRepoEmpty_print_object_style_align.Map_Empty_print_object_style_alignPtr_Empty_print_object_style_alignDBID[system_dividers.Left_divider]; ok {
				system_dividersDB.Left_dividerID.Int64 = int64(Left_dividerId)
				system_dividersDB.Left_dividerID.Valid = true
			}
		} else {
			system_dividersDB.Left_dividerID.Int64 = 0
			system_dividersDB.Left_dividerID.Valid = true
		}

		// commit pointer value system_dividers.Right_divider translates to updating the system_dividers.Right_dividerID
		system_dividersDB.Right_dividerID.Valid = true // allow for a 0 value (nil association)
		if system_dividers.Right_divider != nil {
			if Right_dividerId, ok := backRepo.BackRepoEmpty_print_object_style_align.Map_Empty_print_object_style_alignPtr_Empty_print_object_style_alignDBID[system_dividers.Right_divider]; ok {
				system_dividersDB.Right_dividerID.Int64 = int64(Right_dividerId)
				system_dividersDB.Right_dividerID.Valid = true
			}
		} else {
			system_dividersDB.Right_dividerID.Int64 = 0
			system_dividersDB.Right_dividerID.Valid = true
		}

		query := backRepoSystem_dividers.db.Save(&system_dividersDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown System_dividers intance %s", system_dividers.Name))
		return err
	}

	return
}

// BackRepoSystem_dividers.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CheckoutPhaseOne() (Error error) {

	system_dividersDBArray := make([]System_dividersDB, 0)
	query := backRepoSystem_dividers.db.Find(&system_dividersDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	system_dividersInstancesToBeRemovedFromTheStage := make(map[*models.System_dividers]any)
	for key, value := range backRepoSystem_dividers.stage.System_dividerss {
		system_dividersInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, system_dividersDB := range system_dividersDBArray {
		backRepoSystem_dividers.CheckoutPhaseOneInstance(&system_dividersDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		system_dividers, ok := backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr[system_dividersDB.ID]
		if ok {
			delete(system_dividersInstancesToBeRemovedFromTheStage, system_dividers)
		}
	}

	// remove from stage and back repo's 3 maps all system_dividerss that are not in the checkout
	for system_dividers := range system_dividersInstancesToBeRemovedFromTheStage {
		system_dividers.Unstage(backRepoSystem_dividers.GetStage())

		// remove instance from the back repo 3 maps
		system_dividersID := backRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers]
		delete(backRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID, system_dividers)
		delete(backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB, system_dividersID)
		delete(backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr, system_dividersID)
	}

	return
}

// CheckoutPhaseOneInstance takes a system_dividersDB that has been found in the DB, updates the backRepo and stages the
// models version of the system_dividersDB
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CheckoutPhaseOneInstance(system_dividersDB *System_dividersDB) (Error error) {

	system_dividers, ok := backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr[system_dividersDB.ID]
	if !ok {
		system_dividers = new(models.System_dividers)

		backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr[system_dividersDB.ID] = system_dividers
		backRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers] = system_dividersDB.ID

		// append model store with the new element
		system_dividers.Name = system_dividersDB.Name_Data.String
		system_dividers.Stage(backRepoSystem_dividers.GetStage())
	}
	system_dividersDB.CopyBasicFieldsToSystem_dividers(system_dividers)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	system_dividers.Stage(backRepoSystem_dividers.GetStage())

	// preserve pointer to system_dividersDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_System_dividersDBID_System_dividersDB)[system_dividersDB hold variable pointers
	system_dividersDB_Data := *system_dividersDB
	preservedPtrToSystem_dividers := &system_dividersDB_Data
	backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[system_dividersDB.ID] = preservedPtrToSystem_dividers

	return
}

// BackRepoSystem_dividers.CheckoutPhaseTwo Checkouts all staged instances of System_dividers to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, system_dividersDB := range backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB {
		backRepoSystem_dividers.CheckoutPhaseTwoInstance(backRepo, system_dividersDB)
	}
	return
}

// BackRepoSystem_dividers.CheckoutPhaseTwoInstance Checkouts staged instances of System_dividers to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, system_dividersDB *System_dividersDB) (Error error) {

	system_dividers := backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr[system_dividersDB.ID]

	system_dividersDB.DecodePointers(backRepo, system_dividers)

	return
}

func (system_dividersDB *System_dividersDB) DecodePointers(backRepo *BackRepoStruct, system_dividers *models.System_dividers) {

	// insertion point for checkout of pointer encoding
	// Left_divider field
	system_dividers.Left_divider = nil
	if system_dividersDB.Left_dividerID.Int64 != 0 {
		system_dividers.Left_divider = backRepo.BackRepoEmpty_print_object_style_align.Map_Empty_print_object_style_alignDBID_Empty_print_object_style_alignPtr[uint(system_dividersDB.Left_dividerID.Int64)]
	}
	// Right_divider field
	system_dividers.Right_divider = nil
	if system_dividersDB.Right_dividerID.Int64 != 0 {
		system_dividers.Right_divider = backRepo.BackRepoEmpty_print_object_style_align.Map_Empty_print_object_style_alignDBID_Empty_print_object_style_alignPtr[uint(system_dividersDB.Right_dividerID.Int64)]
	}
	return
}

// CommitSystem_dividers allows commit of a single system_dividers (if already staged)
func (backRepo *BackRepoStruct) CommitSystem_dividers(system_dividers *models.System_dividers) {
	backRepo.BackRepoSystem_dividers.CommitPhaseOneInstance(system_dividers)
	if id, ok := backRepo.BackRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers]; ok {
		backRepo.BackRepoSystem_dividers.CommitPhaseTwoInstance(backRepo, id, system_dividers)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSystem_dividers allows checkout of a single system_dividers (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSystem_dividers(system_dividers *models.System_dividers) {
	// check if the system_dividers is staged
	if _, ok := backRepo.BackRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers]; ok {

		if id, ok := backRepo.BackRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_dividers]; ok {
			var system_dividersDB System_dividersDB
			system_dividersDB.ID = id

			if err := backRepo.BackRepoSystem_dividers.db.First(&system_dividersDB, id).Error; err != nil {
				log.Fatalln("CheckoutSystem_dividers : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSystem_dividers.CheckoutPhaseOneInstance(&system_dividersDB)
			backRepo.BackRepoSystem_dividers.CheckoutPhaseTwoInstance(backRepo, &system_dividersDB)
		}
	}
}

// CopyBasicFieldsFromSystem_dividers
func (system_dividersDB *System_dividersDB) CopyBasicFieldsFromSystem_dividers(system_dividers *models.System_dividers) {
	// insertion point for fields commit

	system_dividersDB.Name_Data.String = system_dividers.Name
	system_dividersDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSystem_dividers_WOP
func (system_dividersDB *System_dividersDB) CopyBasicFieldsFromSystem_dividers_WOP(system_dividers *models.System_dividers_WOP) {
	// insertion point for fields commit

	system_dividersDB.Name_Data.String = system_dividers.Name
	system_dividersDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSystem_dividersWOP
func (system_dividersDB *System_dividersDB) CopyBasicFieldsFromSystem_dividersWOP(system_dividers *System_dividersWOP) {
	// insertion point for fields commit

	system_dividersDB.Name_Data.String = system_dividers.Name
	system_dividersDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSystem_dividers
func (system_dividersDB *System_dividersDB) CopyBasicFieldsToSystem_dividers(system_dividers *models.System_dividers) {
	// insertion point for checkout of basic fields (back repo to stage)
	system_dividers.Name = system_dividersDB.Name_Data.String
}

// CopyBasicFieldsToSystem_dividers_WOP
func (system_dividersDB *System_dividersDB) CopyBasicFieldsToSystem_dividers_WOP(system_dividers *models.System_dividers_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	system_dividers.Name = system_dividersDB.Name_Data.String
}

// CopyBasicFieldsToSystem_dividersWOP
func (system_dividersDB *System_dividersDB) CopyBasicFieldsToSystem_dividersWOP(system_dividers *System_dividersWOP) {
	system_dividers.ID = int(system_dividersDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	system_dividers.Name = system_dividersDB.Name_Data.String
}

// Backup generates a json file from a slice of all System_dividersDB instances in the backrepo
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "System_dividersDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*System_dividersDB, 0)
	for _, system_dividersDB := range backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB {
		forBackup = append(forBackup, system_dividersDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json System_dividers ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json System_dividers file", err.Error())
	}
}

// Backup generates a json file from a slice of all System_dividersDB instances in the backrepo
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*System_dividersDB, 0)
	for _, system_dividersDB := range backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB {
		forBackup = append(forBackup, system_dividersDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("System_dividers")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&System_dividers_Fields, -1)
	for _, system_dividersDB := range forBackup {

		var system_dividersWOP System_dividersWOP
		system_dividersDB.CopyBasicFieldsToSystem_dividersWOP(&system_dividersWOP)

		row := sh.AddRow()
		row.WriteStruct(&system_dividersWOP, -1)
	}
}

// RestoreXL from the "System_dividers" sheet all System_dividersDB instances
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSystem_dividersid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["System_dividers"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSystem_dividers.rowVisitorSystem_dividers)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) rowVisitorSystem_dividers(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var system_dividersWOP System_dividersWOP
		row.ReadStruct(&system_dividersWOP)

		// add the unmarshalled struct to the stage
		system_dividersDB := new(System_dividersDB)
		system_dividersDB.CopyBasicFieldsFromSystem_dividersWOP(&system_dividersWOP)

		system_dividersDB_ID_atBackupTime := system_dividersDB.ID
		system_dividersDB.ID = 0
		query := backRepoSystem_dividers.db.Create(system_dividersDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[system_dividersDB.ID] = system_dividersDB
		BackRepoSystem_dividersid_atBckpTime_newID[system_dividersDB_ID_atBackupTime] = system_dividersDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "System_dividersDB.json" in dirPath that stores an array
// of System_dividersDB and stores it in the database
// the map BackRepoSystem_dividersid_atBckpTime_newID is updated accordingly
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSystem_dividersid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "System_dividersDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json System_dividers file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*System_dividersDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_System_dividersDBID_System_dividersDB
	for _, system_dividersDB := range forRestore {

		system_dividersDB_ID_atBackupTime := system_dividersDB.ID
		system_dividersDB.ID = 0
		query := backRepoSystem_dividers.db.Create(system_dividersDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[system_dividersDB.ID] = system_dividersDB
		BackRepoSystem_dividersid_atBckpTime_newID[system_dividersDB_ID_atBackupTime] = system_dividersDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json System_dividers file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<System_dividers>id_atBckpTime_newID
// to compute new index
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) RestorePhaseTwo() {

	for _, system_dividersDB := range backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB {

		// next line of code is to avert unused variable compilation error
		_ = system_dividersDB

		// insertion point for reindexing pointers encoding
		// reindexing Left_divider field
		if system_dividersDB.Left_dividerID.Int64 != 0 {
			system_dividersDB.Left_dividerID.Int64 = int64(BackRepoEmpty_print_object_style_alignid_atBckpTime_newID[uint(system_dividersDB.Left_dividerID.Int64)])
			system_dividersDB.Left_dividerID.Valid = true
		}

		// reindexing Right_divider field
		if system_dividersDB.Right_dividerID.Int64 != 0 {
			system_dividersDB.Right_dividerID.Int64 = int64(BackRepoEmpty_print_object_style_alignid_atBckpTime_newID[uint(system_dividersDB.Right_dividerID.Int64)])
			system_dividersDB.Right_dividerID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSystem_dividers.db.Model(system_dividersDB).Updates(*system_dividersDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSystem_dividers.ResetReversePointers commits all staged instances of System_dividers to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, system_dividers := range backRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr {
		backRepoSystem_dividers.ResetReversePointersInstance(backRepo, idx, system_dividers)
	}

	return
}

func (backRepoSystem_dividers *BackRepoSystem_dividersStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, system_dividers *models.System_dividers) (Error error) {

	// fetch matching system_dividersDB
	if system_dividersDB, ok := backRepoSystem_dividers.Map_System_dividersDBID_System_dividersDB[idx]; ok {
		_ = system_dividersDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSystem_dividersid_atBckpTime_newID map[uint]uint
