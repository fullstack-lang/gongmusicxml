// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bookmark_sql sql.NullBool
var dummy_Bookmark_time time.Duration
var dummy_Bookmark_sort sort.Float64Slice

// BookmarkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bookmarkAPI
type BookmarkAPI struct {
	gorm.Model

	models.Bookmark_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BookmarkPointersEncoding BookmarkPointersEncoding
}

// BookmarkPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BookmarkPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// BookmarkDB describes a bookmark in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bookmarkDB
type BookmarkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bookmarkDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BookmarkPointersEncoding
}

// BookmarkDBs arrays bookmarkDBs
// swagger:response bookmarkDBsResponse
type BookmarkDBs []BookmarkDB

// BookmarkDBResponse provides response
// swagger:response bookmarkDBResponse
type BookmarkDBResponse struct {
	BookmarkDB
}

// BookmarkWOP is a Bookmark without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BookmarkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Bookmark_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBookmarkStruct struct {
	// stores BookmarkDB according to their gorm ID
	Map_BookmarkDBID_BookmarkDB map[uint]*BookmarkDB

	// stores BookmarkDB ID according to Bookmark address
	Map_BookmarkPtr_BookmarkDBID map[*models.Bookmark]uint

	// stores Bookmark according to their gorm ID
	Map_BookmarkDBID_BookmarkPtr map[uint]*models.Bookmark

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBookmark *BackRepoBookmarkStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBookmark.stage
	return
}

func (backRepoBookmark *BackRepoBookmarkStruct) GetDB() *gorm.DB {
	return backRepoBookmark.db
}

// GetBookmarkDBFromBookmarkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBookmark *BackRepoBookmarkStruct) GetBookmarkDBFromBookmarkPtr(bookmark *models.Bookmark) (bookmarkDB *BookmarkDB) {
	id := backRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark]
	bookmarkDB = backRepoBookmark.Map_BookmarkDBID_BookmarkDB[id]
	return
}

// BackRepoBookmark.CommitPhaseOne commits all staged instances of Bookmark to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBookmark *BackRepoBookmarkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bookmark := range stage.Bookmarks {
		backRepoBookmark.CommitPhaseOneInstance(bookmark)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bookmark := range backRepoBookmark.Map_BookmarkDBID_BookmarkPtr {
		if _, ok := stage.Bookmarks[bookmark]; !ok {
			backRepoBookmark.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBookmark.CommitDeleteInstance commits deletion of Bookmark to the BackRepo
func (backRepoBookmark *BackRepoBookmarkStruct) CommitDeleteInstance(id uint) (Error error) {

	bookmark := backRepoBookmark.Map_BookmarkDBID_BookmarkPtr[id]

	// bookmark is not staged anymore, remove bookmarkDB
	bookmarkDB := backRepoBookmark.Map_BookmarkDBID_BookmarkDB[id]
	query := backRepoBookmark.db.Unscoped().Delete(&bookmarkDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBookmark.Map_BookmarkPtr_BookmarkDBID, bookmark)
	delete(backRepoBookmark.Map_BookmarkDBID_BookmarkPtr, id)
	delete(backRepoBookmark.Map_BookmarkDBID_BookmarkDB, id)

	return
}

// BackRepoBookmark.CommitPhaseOneInstance commits bookmark staged instances of Bookmark to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBookmark *BackRepoBookmarkStruct) CommitPhaseOneInstance(bookmark *models.Bookmark) (Error error) {

	// check if the bookmark is not commited yet
	if _, ok := backRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark]; ok {
		return
	}

	// initiate bookmark
	var bookmarkDB BookmarkDB
	bookmarkDB.CopyBasicFieldsFromBookmark(bookmark)

	query := backRepoBookmark.db.Create(&bookmarkDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark] = bookmarkDB.ID
	backRepoBookmark.Map_BookmarkDBID_BookmarkPtr[bookmarkDB.ID] = bookmark
	backRepoBookmark.Map_BookmarkDBID_BookmarkDB[bookmarkDB.ID] = &bookmarkDB

	return
}

// BackRepoBookmark.CommitPhaseTwo commits all staged instances of Bookmark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookmark *BackRepoBookmarkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bookmark := range backRepoBookmark.Map_BookmarkDBID_BookmarkPtr {
		backRepoBookmark.CommitPhaseTwoInstance(backRepo, idx, bookmark)
	}

	return
}

// BackRepoBookmark.CommitPhaseTwoInstance commits {{structname }} of models.Bookmark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookmark *BackRepoBookmarkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bookmark *models.Bookmark) (Error error) {

	// fetch matching bookmarkDB
	if bookmarkDB, ok := backRepoBookmark.Map_BookmarkDBID_BookmarkDB[idx]; ok {

		bookmarkDB.CopyBasicFieldsFromBookmark(bookmark)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBookmark.db.Save(&bookmarkDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bookmark intance %s", bookmark.Name))
		return err
	}

	return
}

// BackRepoBookmark.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBookmark *BackRepoBookmarkStruct) CheckoutPhaseOne() (Error error) {

	bookmarkDBArray := make([]BookmarkDB, 0)
	query := backRepoBookmark.db.Find(&bookmarkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bookmarkInstancesToBeRemovedFromTheStage := make(map[*models.Bookmark]any)
	for key, value := range backRepoBookmark.stage.Bookmarks {
		bookmarkInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bookmarkDB := range bookmarkDBArray {
		backRepoBookmark.CheckoutPhaseOneInstance(&bookmarkDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bookmark, ok := backRepoBookmark.Map_BookmarkDBID_BookmarkPtr[bookmarkDB.ID]
		if ok {
			delete(bookmarkInstancesToBeRemovedFromTheStage, bookmark)
		}
	}

	// remove from stage and back repo's 3 maps all bookmarks that are not in the checkout
	for bookmark := range bookmarkInstancesToBeRemovedFromTheStage {
		bookmark.Unstage(backRepoBookmark.GetStage())

		// remove instance from the back repo 3 maps
		bookmarkID := backRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark]
		delete(backRepoBookmark.Map_BookmarkPtr_BookmarkDBID, bookmark)
		delete(backRepoBookmark.Map_BookmarkDBID_BookmarkDB, bookmarkID)
		delete(backRepoBookmark.Map_BookmarkDBID_BookmarkPtr, bookmarkID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bookmarkDB that has been found in the DB, updates the backRepo and stages the
// models version of the bookmarkDB
func (backRepoBookmark *BackRepoBookmarkStruct) CheckoutPhaseOneInstance(bookmarkDB *BookmarkDB) (Error error) {

	bookmark, ok := backRepoBookmark.Map_BookmarkDBID_BookmarkPtr[bookmarkDB.ID]
	if !ok {
		bookmark = new(models.Bookmark)

		backRepoBookmark.Map_BookmarkDBID_BookmarkPtr[bookmarkDB.ID] = bookmark
		backRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark] = bookmarkDB.ID

		// append model store with the new element
		bookmark.Name = bookmarkDB.Name_Data.String
		bookmark.Stage(backRepoBookmark.GetStage())
	}
	bookmarkDB.CopyBasicFieldsToBookmark(bookmark)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bookmark.Stage(backRepoBookmark.GetStage())

	// preserve pointer to bookmarkDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BookmarkDBID_BookmarkDB)[bookmarkDB hold variable pointers
	bookmarkDB_Data := *bookmarkDB
	preservedPtrToBookmark := &bookmarkDB_Data
	backRepoBookmark.Map_BookmarkDBID_BookmarkDB[bookmarkDB.ID] = preservedPtrToBookmark

	return
}

// BackRepoBookmark.CheckoutPhaseTwo Checkouts all staged instances of Bookmark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookmark *BackRepoBookmarkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bookmarkDB := range backRepoBookmark.Map_BookmarkDBID_BookmarkDB {
		backRepoBookmark.CheckoutPhaseTwoInstance(backRepo, bookmarkDB)
	}
	return
}

// BackRepoBookmark.CheckoutPhaseTwoInstance Checkouts staged instances of Bookmark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookmark *BackRepoBookmarkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bookmarkDB *BookmarkDB) (Error error) {

	bookmark := backRepoBookmark.Map_BookmarkDBID_BookmarkPtr[bookmarkDB.ID]

	bookmarkDB.DecodePointers(backRepo, bookmark)

	return
}

func (bookmarkDB *BookmarkDB) DecodePointers(backRepo *BackRepoStruct, bookmark *models.Bookmark) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBookmark allows commit of a single bookmark (if already staged)
func (backRepo *BackRepoStruct) CommitBookmark(bookmark *models.Bookmark) {
	backRepo.BackRepoBookmark.CommitPhaseOneInstance(bookmark)
	if id, ok := backRepo.BackRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark]; ok {
		backRepo.BackRepoBookmark.CommitPhaseTwoInstance(backRepo, id, bookmark)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBookmark allows checkout of a single bookmark (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBookmark(bookmark *models.Bookmark) {
	// check if the bookmark is staged
	if _, ok := backRepo.BackRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark]; ok {

		if id, ok := backRepo.BackRepoBookmark.Map_BookmarkPtr_BookmarkDBID[bookmark]; ok {
			var bookmarkDB BookmarkDB
			bookmarkDB.ID = id

			if err := backRepo.BackRepoBookmark.db.First(&bookmarkDB, id).Error; err != nil {
				log.Fatalln("CheckoutBookmark : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBookmark.CheckoutPhaseOneInstance(&bookmarkDB)
			backRepo.BackRepoBookmark.CheckoutPhaseTwoInstance(backRepo, &bookmarkDB)
		}
	}
}

// CopyBasicFieldsFromBookmark
func (bookmarkDB *BookmarkDB) CopyBasicFieldsFromBookmark(bookmark *models.Bookmark) {
	// insertion point for fields commit

	bookmarkDB.Name_Data.String = bookmark.Name
	bookmarkDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBookmark_WOP
func (bookmarkDB *BookmarkDB) CopyBasicFieldsFromBookmark_WOP(bookmark *models.Bookmark_WOP) {
	// insertion point for fields commit

	bookmarkDB.Name_Data.String = bookmark.Name
	bookmarkDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBookmarkWOP
func (bookmarkDB *BookmarkDB) CopyBasicFieldsFromBookmarkWOP(bookmark *BookmarkWOP) {
	// insertion point for fields commit

	bookmarkDB.Name_Data.String = bookmark.Name
	bookmarkDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBookmark
func (bookmarkDB *BookmarkDB) CopyBasicFieldsToBookmark(bookmark *models.Bookmark) {
	// insertion point for checkout of basic fields (back repo to stage)
	bookmark.Name = bookmarkDB.Name_Data.String
}

// CopyBasicFieldsToBookmark_WOP
func (bookmarkDB *BookmarkDB) CopyBasicFieldsToBookmark_WOP(bookmark *models.Bookmark_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bookmark.Name = bookmarkDB.Name_Data.String
}

// CopyBasicFieldsToBookmarkWOP
func (bookmarkDB *BookmarkDB) CopyBasicFieldsToBookmarkWOP(bookmark *BookmarkWOP) {
	bookmark.ID = int(bookmarkDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bookmark.Name = bookmarkDB.Name_Data.String
}

// Backup generates a json file from a slice of all BookmarkDB instances in the backrepo
func (backRepoBookmark *BackRepoBookmarkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BookmarkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BookmarkDB, 0)
	for _, bookmarkDB := range backRepoBookmark.Map_BookmarkDBID_BookmarkDB {
		forBackup = append(forBackup, bookmarkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Bookmark ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Bookmark file", err.Error())
	}
}

// Backup generates a json file from a slice of all BookmarkDB instances in the backrepo
func (backRepoBookmark *BackRepoBookmarkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BookmarkDB, 0)
	for _, bookmarkDB := range backRepoBookmark.Map_BookmarkDBID_BookmarkDB {
		forBackup = append(forBackup, bookmarkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Bookmark")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Bookmark_Fields, -1)
	for _, bookmarkDB := range forBackup {

		var bookmarkWOP BookmarkWOP
		bookmarkDB.CopyBasicFieldsToBookmarkWOP(&bookmarkWOP)

		row := sh.AddRow()
		row.WriteStruct(&bookmarkWOP, -1)
	}
}

// RestoreXL from the "Bookmark" sheet all BookmarkDB instances
func (backRepoBookmark *BackRepoBookmarkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBookmarkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Bookmark"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBookmark.rowVisitorBookmark)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBookmark *BackRepoBookmarkStruct) rowVisitorBookmark(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bookmarkWOP BookmarkWOP
		row.ReadStruct(&bookmarkWOP)

		// add the unmarshalled struct to the stage
		bookmarkDB := new(BookmarkDB)
		bookmarkDB.CopyBasicFieldsFromBookmarkWOP(&bookmarkWOP)

		bookmarkDB_ID_atBackupTime := bookmarkDB.ID
		bookmarkDB.ID = 0
		query := backRepoBookmark.db.Create(bookmarkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBookmark.Map_BookmarkDBID_BookmarkDB[bookmarkDB.ID] = bookmarkDB
		BackRepoBookmarkid_atBckpTime_newID[bookmarkDB_ID_atBackupTime] = bookmarkDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BookmarkDB.json" in dirPath that stores an array
// of BookmarkDB and stores it in the database
// the map BackRepoBookmarkid_atBckpTime_newID is updated accordingly
func (backRepoBookmark *BackRepoBookmarkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBookmarkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BookmarkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Bookmark file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BookmarkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BookmarkDBID_BookmarkDB
	for _, bookmarkDB := range forRestore {

		bookmarkDB_ID_atBackupTime := bookmarkDB.ID
		bookmarkDB.ID = 0
		query := backRepoBookmark.db.Create(bookmarkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBookmark.Map_BookmarkDBID_BookmarkDB[bookmarkDB.ID] = bookmarkDB
		BackRepoBookmarkid_atBckpTime_newID[bookmarkDB_ID_atBackupTime] = bookmarkDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Bookmark file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Bookmark>id_atBckpTime_newID
// to compute new index
func (backRepoBookmark *BackRepoBookmarkStruct) RestorePhaseTwo() {

	for _, bookmarkDB := range backRepoBookmark.Map_BookmarkDBID_BookmarkDB {

		// next line of code is to avert unused variable compilation error
		_ = bookmarkDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBookmark.db.Model(bookmarkDB).Updates(*bookmarkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBookmark.ResetReversePointers commits all staged instances of Bookmark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookmark *BackRepoBookmarkStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bookmark := range backRepoBookmark.Map_BookmarkDBID_BookmarkPtr {
		backRepoBookmark.ResetReversePointersInstance(backRepo, idx, bookmark)
	}

	return
}

func (backRepoBookmark *BackRepoBookmarkStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bookmark *models.Bookmark) (Error error) {

	// fetch matching bookmarkDB
	if bookmarkDB, ok := backRepoBookmark.Map_BookmarkDBID_BookmarkDB[idx]; ok {
		_ = bookmarkDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBookmarkid_atBckpTime_newID map[uint]uint
