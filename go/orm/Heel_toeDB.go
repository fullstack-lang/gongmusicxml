// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Heel_toe_sql sql.NullBool
var dummy_Heel_toe_time time.Duration
var dummy_Heel_toe_sort sort.Float64Slice

// Heel_toeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model heel_toeAPI
type Heel_toeAPI struct {
	gorm.Model

	models.Heel_toe_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Heel_toePointersEncoding Heel_toePointersEncoding
}

// Heel_toePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Heel_toePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Heel_toeDB describes a heel_toe in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model heel_toeDB
type Heel_toeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field heel_toeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Heel_toePointersEncoding
}

// Heel_toeDBs arrays heel_toeDBs
// swagger:response heel_toeDBsResponse
type Heel_toeDBs []Heel_toeDB

// Heel_toeDBResponse provides response
// swagger:response heel_toeDBResponse
type Heel_toeDBResponse struct {
	Heel_toeDB
}

// Heel_toeWOP is a Heel_toe without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Heel_toeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Heel_toe_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHeel_toeStruct struct {
	// stores Heel_toeDB according to their gorm ID
	Map_Heel_toeDBID_Heel_toeDB map[uint]*Heel_toeDB

	// stores Heel_toeDB ID according to Heel_toe address
	Map_Heel_toePtr_Heel_toeDBID map[*models.Heel_toe]uint

	// stores Heel_toe according to their gorm ID
	Map_Heel_toeDBID_Heel_toePtr map[uint]*models.Heel_toe

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHeel_toe *BackRepoHeel_toeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHeel_toe.stage
	return
}

func (backRepoHeel_toe *BackRepoHeel_toeStruct) GetDB() *gorm.DB {
	return backRepoHeel_toe.db
}

// GetHeel_toeDBFromHeel_toePtr is a handy function to access the back repo instance from the stage instance
func (backRepoHeel_toe *BackRepoHeel_toeStruct) GetHeel_toeDBFromHeel_toePtr(heel_toe *models.Heel_toe) (heel_toeDB *Heel_toeDB) {
	id := backRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe]
	heel_toeDB = backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[id]
	return
}

// BackRepoHeel_toe.CommitPhaseOne commits all staged instances of Heel_toe to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for heel_toe := range stage.Heel_toes {
		backRepoHeel_toe.CommitPhaseOneInstance(heel_toe)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, heel_toe := range backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr {
		if _, ok := stage.Heel_toes[heel_toe]; !ok {
			backRepoHeel_toe.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHeel_toe.CommitDeleteInstance commits deletion of Heel_toe to the BackRepo
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CommitDeleteInstance(id uint) (Error error) {

	heel_toe := backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr[id]

	// heel_toe is not staged anymore, remove heel_toeDB
	heel_toeDB := backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[id]
	query := backRepoHeel_toe.db.Unscoped().Delete(&heel_toeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID, heel_toe)
	delete(backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr, id)
	delete(backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB, id)

	return
}

// BackRepoHeel_toe.CommitPhaseOneInstance commits heel_toe staged instances of Heel_toe to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CommitPhaseOneInstance(heel_toe *models.Heel_toe) (Error error) {

	// check if the heel_toe is not commited yet
	if _, ok := backRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe]; ok {
		return
	}

	// initiate heel_toe
	var heel_toeDB Heel_toeDB
	heel_toeDB.CopyBasicFieldsFromHeel_toe(heel_toe)

	query := backRepoHeel_toe.db.Create(&heel_toeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe] = heel_toeDB.ID
	backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr[heel_toeDB.ID] = heel_toe
	backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[heel_toeDB.ID] = &heel_toeDB

	return
}

// BackRepoHeel_toe.CommitPhaseTwo commits all staged instances of Heel_toe to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, heel_toe := range backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr {
		backRepoHeel_toe.CommitPhaseTwoInstance(backRepo, idx, heel_toe)
	}

	return
}

// BackRepoHeel_toe.CommitPhaseTwoInstance commits {{structname }} of models.Heel_toe to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, heel_toe *models.Heel_toe) (Error error) {

	// fetch matching heel_toeDB
	if heel_toeDB, ok := backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[idx]; ok {

		heel_toeDB.CopyBasicFieldsFromHeel_toe(heel_toe)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHeel_toe.db.Save(&heel_toeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Heel_toe intance %s", heel_toe.Name))
		return err
	}

	return
}

// BackRepoHeel_toe.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CheckoutPhaseOne() (Error error) {

	heel_toeDBArray := make([]Heel_toeDB, 0)
	query := backRepoHeel_toe.db.Find(&heel_toeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	heel_toeInstancesToBeRemovedFromTheStage := make(map[*models.Heel_toe]any)
	for key, value := range backRepoHeel_toe.stage.Heel_toes {
		heel_toeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, heel_toeDB := range heel_toeDBArray {
		backRepoHeel_toe.CheckoutPhaseOneInstance(&heel_toeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		heel_toe, ok := backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr[heel_toeDB.ID]
		if ok {
			delete(heel_toeInstancesToBeRemovedFromTheStage, heel_toe)
		}
	}

	// remove from stage and back repo's 3 maps all heel_toes that are not in the checkout
	for heel_toe := range heel_toeInstancesToBeRemovedFromTheStage {
		heel_toe.Unstage(backRepoHeel_toe.GetStage())

		// remove instance from the back repo 3 maps
		heel_toeID := backRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe]
		delete(backRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID, heel_toe)
		delete(backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB, heel_toeID)
		delete(backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr, heel_toeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a heel_toeDB that has been found in the DB, updates the backRepo and stages the
// models version of the heel_toeDB
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CheckoutPhaseOneInstance(heel_toeDB *Heel_toeDB) (Error error) {

	heel_toe, ok := backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr[heel_toeDB.ID]
	if !ok {
		heel_toe = new(models.Heel_toe)

		backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr[heel_toeDB.ID] = heel_toe
		backRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe] = heel_toeDB.ID

		// append model store with the new element
		heel_toe.Name = heel_toeDB.Name_Data.String
		heel_toe.Stage(backRepoHeel_toe.GetStage())
	}
	heel_toeDB.CopyBasicFieldsToHeel_toe(heel_toe)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	heel_toe.Stage(backRepoHeel_toe.GetStage())

	// preserve pointer to heel_toeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Heel_toeDBID_Heel_toeDB)[heel_toeDB hold variable pointers
	heel_toeDB_Data := *heel_toeDB
	preservedPtrToHeel_toe := &heel_toeDB_Data
	backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[heel_toeDB.ID] = preservedPtrToHeel_toe

	return
}

// BackRepoHeel_toe.CheckoutPhaseTwo Checkouts all staged instances of Heel_toe to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, heel_toeDB := range backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB {
		backRepoHeel_toe.CheckoutPhaseTwoInstance(backRepo, heel_toeDB)
	}
	return
}

// BackRepoHeel_toe.CheckoutPhaseTwoInstance Checkouts staged instances of Heel_toe to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHeel_toe *BackRepoHeel_toeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, heel_toeDB *Heel_toeDB) (Error error) {

	heel_toe := backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr[heel_toeDB.ID]

	heel_toeDB.DecodePointers(backRepo, heel_toe)

	return
}

func (heel_toeDB *Heel_toeDB) DecodePointers(backRepo *BackRepoStruct, heel_toe *models.Heel_toe) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHeel_toe allows commit of a single heel_toe (if already staged)
func (backRepo *BackRepoStruct) CommitHeel_toe(heel_toe *models.Heel_toe) {
	backRepo.BackRepoHeel_toe.CommitPhaseOneInstance(heel_toe)
	if id, ok := backRepo.BackRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe]; ok {
		backRepo.BackRepoHeel_toe.CommitPhaseTwoInstance(backRepo, id, heel_toe)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHeel_toe allows checkout of a single heel_toe (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHeel_toe(heel_toe *models.Heel_toe) {
	// check if the heel_toe is staged
	if _, ok := backRepo.BackRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe]; ok {

		if id, ok := backRepo.BackRepoHeel_toe.Map_Heel_toePtr_Heel_toeDBID[heel_toe]; ok {
			var heel_toeDB Heel_toeDB
			heel_toeDB.ID = id

			if err := backRepo.BackRepoHeel_toe.db.First(&heel_toeDB, id).Error; err != nil {
				log.Fatalln("CheckoutHeel_toe : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHeel_toe.CheckoutPhaseOneInstance(&heel_toeDB)
			backRepo.BackRepoHeel_toe.CheckoutPhaseTwoInstance(backRepo, &heel_toeDB)
		}
	}
}

// CopyBasicFieldsFromHeel_toe
func (heel_toeDB *Heel_toeDB) CopyBasicFieldsFromHeel_toe(heel_toe *models.Heel_toe) {
	// insertion point for fields commit

	heel_toeDB.Name_Data.String = heel_toe.Name
	heel_toeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHeel_toe_WOP
func (heel_toeDB *Heel_toeDB) CopyBasicFieldsFromHeel_toe_WOP(heel_toe *models.Heel_toe_WOP) {
	// insertion point for fields commit

	heel_toeDB.Name_Data.String = heel_toe.Name
	heel_toeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHeel_toeWOP
func (heel_toeDB *Heel_toeDB) CopyBasicFieldsFromHeel_toeWOP(heel_toe *Heel_toeWOP) {
	// insertion point for fields commit

	heel_toeDB.Name_Data.String = heel_toe.Name
	heel_toeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHeel_toe
func (heel_toeDB *Heel_toeDB) CopyBasicFieldsToHeel_toe(heel_toe *models.Heel_toe) {
	// insertion point for checkout of basic fields (back repo to stage)
	heel_toe.Name = heel_toeDB.Name_Data.String
}

// CopyBasicFieldsToHeel_toe_WOP
func (heel_toeDB *Heel_toeDB) CopyBasicFieldsToHeel_toe_WOP(heel_toe *models.Heel_toe_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	heel_toe.Name = heel_toeDB.Name_Data.String
}

// CopyBasicFieldsToHeel_toeWOP
func (heel_toeDB *Heel_toeDB) CopyBasicFieldsToHeel_toeWOP(heel_toe *Heel_toeWOP) {
	heel_toe.ID = int(heel_toeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	heel_toe.Name = heel_toeDB.Name_Data.String
}

// Backup generates a json file from a slice of all Heel_toeDB instances in the backrepo
func (backRepoHeel_toe *BackRepoHeel_toeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Heel_toeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Heel_toeDB, 0)
	for _, heel_toeDB := range backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB {
		forBackup = append(forBackup, heel_toeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Heel_toe ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Heel_toe file", err.Error())
	}
}

// Backup generates a json file from a slice of all Heel_toeDB instances in the backrepo
func (backRepoHeel_toe *BackRepoHeel_toeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Heel_toeDB, 0)
	for _, heel_toeDB := range backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB {
		forBackup = append(forBackup, heel_toeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Heel_toe")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Heel_toe_Fields, -1)
	for _, heel_toeDB := range forBackup {

		var heel_toeWOP Heel_toeWOP
		heel_toeDB.CopyBasicFieldsToHeel_toeWOP(&heel_toeWOP)

		row := sh.AddRow()
		row.WriteStruct(&heel_toeWOP, -1)
	}
}

// RestoreXL from the "Heel_toe" sheet all Heel_toeDB instances
func (backRepoHeel_toe *BackRepoHeel_toeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHeel_toeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Heel_toe"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHeel_toe.rowVisitorHeel_toe)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHeel_toe *BackRepoHeel_toeStruct) rowVisitorHeel_toe(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var heel_toeWOP Heel_toeWOP
		row.ReadStruct(&heel_toeWOP)

		// add the unmarshalled struct to the stage
		heel_toeDB := new(Heel_toeDB)
		heel_toeDB.CopyBasicFieldsFromHeel_toeWOP(&heel_toeWOP)

		heel_toeDB_ID_atBackupTime := heel_toeDB.ID
		heel_toeDB.ID = 0
		query := backRepoHeel_toe.db.Create(heel_toeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[heel_toeDB.ID] = heel_toeDB
		BackRepoHeel_toeid_atBckpTime_newID[heel_toeDB_ID_atBackupTime] = heel_toeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Heel_toeDB.json" in dirPath that stores an array
// of Heel_toeDB and stores it in the database
// the map BackRepoHeel_toeid_atBckpTime_newID is updated accordingly
func (backRepoHeel_toe *BackRepoHeel_toeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHeel_toeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Heel_toeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Heel_toe file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Heel_toeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Heel_toeDBID_Heel_toeDB
	for _, heel_toeDB := range forRestore {

		heel_toeDB_ID_atBackupTime := heel_toeDB.ID
		heel_toeDB.ID = 0
		query := backRepoHeel_toe.db.Create(heel_toeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[heel_toeDB.ID] = heel_toeDB
		BackRepoHeel_toeid_atBckpTime_newID[heel_toeDB_ID_atBackupTime] = heel_toeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Heel_toe file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Heel_toe>id_atBckpTime_newID
// to compute new index
func (backRepoHeel_toe *BackRepoHeel_toeStruct) RestorePhaseTwo() {

	for _, heel_toeDB := range backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB {

		// next line of code is to avert unused variable compilation error
		_ = heel_toeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHeel_toe.db.Model(heel_toeDB).Updates(*heel_toeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHeel_toe.ResetReversePointers commits all staged instances of Heel_toe to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHeel_toe *BackRepoHeel_toeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, heel_toe := range backRepoHeel_toe.Map_Heel_toeDBID_Heel_toePtr {
		backRepoHeel_toe.ResetReversePointersInstance(backRepo, idx, heel_toe)
	}

	return
}

func (backRepoHeel_toe *BackRepoHeel_toeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, heel_toe *models.Heel_toe) (Error error) {

	// fetch matching heel_toeDB
	if heel_toeDB, ok := backRepoHeel_toe.Map_Heel_toeDBID_Heel_toeDB[idx]; ok {
		_ = heel_toeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHeel_toeid_atBckpTime_newID map[uint]uint
