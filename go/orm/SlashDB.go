// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Slash_sql sql.NullBool
var dummy_Slash_time time.Duration
var dummy_Slash_sort sort.Float64Slice

// SlashAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model slashAPI
type SlashAPI struct {
	gorm.Model

	models.Slash_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SlashPointersEncoding SlashPointersEncoding
}

// SlashPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SlashPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SlashDB describes a slash in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model slashDB
type SlashDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field slashDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SlashPointersEncoding
}

// SlashDBs arrays slashDBs
// swagger:response slashDBsResponse
type SlashDBs []SlashDB

// SlashDBResponse provides response
// swagger:response slashDBResponse
type SlashDBResponse struct {
	SlashDB
}

// SlashWOP is a Slash without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SlashWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Slash_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSlashStruct struct {
	// stores SlashDB according to their gorm ID
	Map_SlashDBID_SlashDB map[uint]*SlashDB

	// stores SlashDB ID according to Slash address
	Map_SlashPtr_SlashDBID map[*models.Slash]uint

	// stores Slash according to their gorm ID
	Map_SlashDBID_SlashPtr map[uint]*models.Slash

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSlash *BackRepoSlashStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSlash.stage
	return
}

func (backRepoSlash *BackRepoSlashStruct) GetDB() *gorm.DB {
	return backRepoSlash.db
}

// GetSlashDBFromSlashPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSlash *BackRepoSlashStruct) GetSlashDBFromSlashPtr(slash *models.Slash) (slashDB *SlashDB) {
	id := backRepoSlash.Map_SlashPtr_SlashDBID[slash]
	slashDB = backRepoSlash.Map_SlashDBID_SlashDB[id]
	return
}

// BackRepoSlash.CommitPhaseOne commits all staged instances of Slash to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSlash *BackRepoSlashStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for slash := range stage.Slashs {
		backRepoSlash.CommitPhaseOneInstance(slash)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, slash := range backRepoSlash.Map_SlashDBID_SlashPtr {
		if _, ok := stage.Slashs[slash]; !ok {
			backRepoSlash.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSlash.CommitDeleteInstance commits deletion of Slash to the BackRepo
func (backRepoSlash *BackRepoSlashStruct) CommitDeleteInstance(id uint) (Error error) {

	slash := backRepoSlash.Map_SlashDBID_SlashPtr[id]

	// slash is not staged anymore, remove slashDB
	slashDB := backRepoSlash.Map_SlashDBID_SlashDB[id]
	query := backRepoSlash.db.Unscoped().Delete(&slashDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSlash.Map_SlashPtr_SlashDBID, slash)
	delete(backRepoSlash.Map_SlashDBID_SlashPtr, id)
	delete(backRepoSlash.Map_SlashDBID_SlashDB, id)

	return
}

// BackRepoSlash.CommitPhaseOneInstance commits slash staged instances of Slash to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSlash *BackRepoSlashStruct) CommitPhaseOneInstance(slash *models.Slash) (Error error) {

	// check if the slash is not commited yet
	if _, ok := backRepoSlash.Map_SlashPtr_SlashDBID[slash]; ok {
		return
	}

	// initiate slash
	var slashDB SlashDB
	slashDB.CopyBasicFieldsFromSlash(slash)

	query := backRepoSlash.db.Create(&slashDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSlash.Map_SlashPtr_SlashDBID[slash] = slashDB.ID
	backRepoSlash.Map_SlashDBID_SlashPtr[slashDB.ID] = slash
	backRepoSlash.Map_SlashDBID_SlashDB[slashDB.ID] = &slashDB

	return
}

// BackRepoSlash.CommitPhaseTwo commits all staged instances of Slash to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlash *BackRepoSlashStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, slash := range backRepoSlash.Map_SlashDBID_SlashPtr {
		backRepoSlash.CommitPhaseTwoInstance(backRepo, idx, slash)
	}

	return
}

// BackRepoSlash.CommitPhaseTwoInstance commits {{structname }} of models.Slash to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlash *BackRepoSlashStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, slash *models.Slash) (Error error) {

	// fetch matching slashDB
	if slashDB, ok := backRepoSlash.Map_SlashDBID_SlashDB[idx]; ok {

		slashDB.CopyBasicFieldsFromSlash(slash)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSlash.db.Save(&slashDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Slash intance %s", slash.Name))
		return err
	}

	return
}

// BackRepoSlash.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSlash *BackRepoSlashStruct) CheckoutPhaseOne() (Error error) {

	slashDBArray := make([]SlashDB, 0)
	query := backRepoSlash.db.Find(&slashDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	slashInstancesToBeRemovedFromTheStage := make(map[*models.Slash]any)
	for key, value := range backRepoSlash.stage.Slashs {
		slashInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, slashDB := range slashDBArray {
		backRepoSlash.CheckoutPhaseOneInstance(&slashDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		slash, ok := backRepoSlash.Map_SlashDBID_SlashPtr[slashDB.ID]
		if ok {
			delete(slashInstancesToBeRemovedFromTheStage, slash)
		}
	}

	// remove from stage and back repo's 3 maps all slashs that are not in the checkout
	for slash := range slashInstancesToBeRemovedFromTheStage {
		slash.Unstage(backRepoSlash.GetStage())

		// remove instance from the back repo 3 maps
		slashID := backRepoSlash.Map_SlashPtr_SlashDBID[slash]
		delete(backRepoSlash.Map_SlashPtr_SlashDBID, slash)
		delete(backRepoSlash.Map_SlashDBID_SlashDB, slashID)
		delete(backRepoSlash.Map_SlashDBID_SlashPtr, slashID)
	}

	return
}

// CheckoutPhaseOneInstance takes a slashDB that has been found in the DB, updates the backRepo and stages the
// models version of the slashDB
func (backRepoSlash *BackRepoSlashStruct) CheckoutPhaseOneInstance(slashDB *SlashDB) (Error error) {

	slash, ok := backRepoSlash.Map_SlashDBID_SlashPtr[slashDB.ID]
	if !ok {
		slash = new(models.Slash)

		backRepoSlash.Map_SlashDBID_SlashPtr[slashDB.ID] = slash
		backRepoSlash.Map_SlashPtr_SlashDBID[slash] = slashDB.ID

		// append model store with the new element
		slash.Name = slashDB.Name_Data.String
		slash.Stage(backRepoSlash.GetStage())
	}
	slashDB.CopyBasicFieldsToSlash(slash)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	slash.Stage(backRepoSlash.GetStage())

	// preserve pointer to slashDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SlashDBID_SlashDB)[slashDB hold variable pointers
	slashDB_Data := *slashDB
	preservedPtrToSlash := &slashDB_Data
	backRepoSlash.Map_SlashDBID_SlashDB[slashDB.ID] = preservedPtrToSlash

	return
}

// BackRepoSlash.CheckoutPhaseTwo Checkouts all staged instances of Slash to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlash *BackRepoSlashStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, slashDB := range backRepoSlash.Map_SlashDBID_SlashDB {
		backRepoSlash.CheckoutPhaseTwoInstance(backRepo, slashDB)
	}
	return
}

// BackRepoSlash.CheckoutPhaseTwoInstance Checkouts staged instances of Slash to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlash *BackRepoSlashStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, slashDB *SlashDB) (Error error) {

	slash := backRepoSlash.Map_SlashDBID_SlashPtr[slashDB.ID]

	slashDB.DecodePointers(backRepo, slash)

	return
}

func (slashDB *SlashDB) DecodePointers(backRepo *BackRepoStruct, slash *models.Slash) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSlash allows commit of a single slash (if already staged)
func (backRepo *BackRepoStruct) CommitSlash(slash *models.Slash) {
	backRepo.BackRepoSlash.CommitPhaseOneInstance(slash)
	if id, ok := backRepo.BackRepoSlash.Map_SlashPtr_SlashDBID[slash]; ok {
		backRepo.BackRepoSlash.CommitPhaseTwoInstance(backRepo, id, slash)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSlash allows checkout of a single slash (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSlash(slash *models.Slash) {
	// check if the slash is staged
	if _, ok := backRepo.BackRepoSlash.Map_SlashPtr_SlashDBID[slash]; ok {

		if id, ok := backRepo.BackRepoSlash.Map_SlashPtr_SlashDBID[slash]; ok {
			var slashDB SlashDB
			slashDB.ID = id

			if err := backRepo.BackRepoSlash.db.First(&slashDB, id).Error; err != nil {
				log.Fatalln("CheckoutSlash : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSlash.CheckoutPhaseOneInstance(&slashDB)
			backRepo.BackRepoSlash.CheckoutPhaseTwoInstance(backRepo, &slashDB)
		}
	}
}

// CopyBasicFieldsFromSlash
func (slashDB *SlashDB) CopyBasicFieldsFromSlash(slash *models.Slash) {
	// insertion point for fields commit

	slashDB.Name_Data.String = slash.Name
	slashDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSlash_WOP
func (slashDB *SlashDB) CopyBasicFieldsFromSlash_WOP(slash *models.Slash_WOP) {
	// insertion point for fields commit

	slashDB.Name_Data.String = slash.Name
	slashDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSlashWOP
func (slashDB *SlashDB) CopyBasicFieldsFromSlashWOP(slash *SlashWOP) {
	// insertion point for fields commit

	slashDB.Name_Data.String = slash.Name
	slashDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSlash
func (slashDB *SlashDB) CopyBasicFieldsToSlash(slash *models.Slash) {
	// insertion point for checkout of basic fields (back repo to stage)
	slash.Name = slashDB.Name_Data.String
}

// CopyBasicFieldsToSlash_WOP
func (slashDB *SlashDB) CopyBasicFieldsToSlash_WOP(slash *models.Slash_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	slash.Name = slashDB.Name_Data.String
}

// CopyBasicFieldsToSlashWOP
func (slashDB *SlashDB) CopyBasicFieldsToSlashWOP(slash *SlashWOP) {
	slash.ID = int(slashDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	slash.Name = slashDB.Name_Data.String
}

// Backup generates a json file from a slice of all SlashDB instances in the backrepo
func (backRepoSlash *BackRepoSlashStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SlashDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SlashDB, 0)
	for _, slashDB := range backRepoSlash.Map_SlashDBID_SlashDB {
		forBackup = append(forBackup, slashDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Slash ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Slash file", err.Error())
	}
}

// Backup generates a json file from a slice of all SlashDB instances in the backrepo
func (backRepoSlash *BackRepoSlashStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SlashDB, 0)
	for _, slashDB := range backRepoSlash.Map_SlashDBID_SlashDB {
		forBackup = append(forBackup, slashDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Slash")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Slash_Fields, -1)
	for _, slashDB := range forBackup {

		var slashWOP SlashWOP
		slashDB.CopyBasicFieldsToSlashWOP(&slashWOP)

		row := sh.AddRow()
		row.WriteStruct(&slashWOP, -1)
	}
}

// RestoreXL from the "Slash" sheet all SlashDB instances
func (backRepoSlash *BackRepoSlashStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSlashid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Slash"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSlash.rowVisitorSlash)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSlash *BackRepoSlashStruct) rowVisitorSlash(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var slashWOP SlashWOP
		row.ReadStruct(&slashWOP)

		// add the unmarshalled struct to the stage
		slashDB := new(SlashDB)
		slashDB.CopyBasicFieldsFromSlashWOP(&slashWOP)

		slashDB_ID_atBackupTime := slashDB.ID
		slashDB.ID = 0
		query := backRepoSlash.db.Create(slashDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSlash.Map_SlashDBID_SlashDB[slashDB.ID] = slashDB
		BackRepoSlashid_atBckpTime_newID[slashDB_ID_atBackupTime] = slashDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SlashDB.json" in dirPath that stores an array
// of SlashDB and stores it in the database
// the map BackRepoSlashid_atBckpTime_newID is updated accordingly
func (backRepoSlash *BackRepoSlashStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSlashid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SlashDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Slash file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SlashDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SlashDBID_SlashDB
	for _, slashDB := range forRestore {

		slashDB_ID_atBackupTime := slashDB.ID
		slashDB.ID = 0
		query := backRepoSlash.db.Create(slashDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSlash.Map_SlashDBID_SlashDB[slashDB.ID] = slashDB
		BackRepoSlashid_atBckpTime_newID[slashDB_ID_atBackupTime] = slashDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Slash file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Slash>id_atBckpTime_newID
// to compute new index
func (backRepoSlash *BackRepoSlashStruct) RestorePhaseTwo() {

	for _, slashDB := range backRepoSlash.Map_SlashDBID_SlashDB {

		// next line of code is to avert unused variable compilation error
		_ = slashDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSlash.db.Model(slashDB).Updates(*slashDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSlash.ResetReversePointers commits all staged instances of Slash to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlash *BackRepoSlashStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, slash := range backRepoSlash.Map_SlashDBID_SlashPtr {
		backRepoSlash.ResetReversePointersInstance(backRepo, idx, slash)
	}

	return
}

func (backRepoSlash *BackRepoSlashStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, slash *models.Slash) (Error error) {

	// fetch matching slashDB
	if slashDB, ok := backRepoSlash.Map_SlashDBID_SlashDB[idx]; ok {
		_ = slashDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSlashid_atBckpTime_newID map[uint]uint
