// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Miscellaneous_sql sql.NullBool
var dummy_Miscellaneous_time time.Duration
var dummy_Miscellaneous_sort sort.Float64Slice

// MiscellaneousAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model miscellaneousAPI
type MiscellaneousAPI struct {
	gorm.Model

	models.Miscellaneous_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MiscellaneousPointersEncoding MiscellaneousPointersEncoding
}

// MiscellaneousPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MiscellaneousPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Miscellaneous_field is a slice of pointers to another Struct (optional or 0..1)
	Miscellaneous_field IntSlice `gorm:"type:TEXT"`
}

// MiscellaneousDB describes a miscellaneous in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model miscellaneousDB
type MiscellaneousDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field miscellaneousDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MiscellaneousPointersEncoding
}

// MiscellaneousDBs arrays miscellaneousDBs
// swagger:response miscellaneousDBsResponse
type MiscellaneousDBs []MiscellaneousDB

// MiscellaneousDBResponse provides response
// swagger:response miscellaneousDBResponse
type MiscellaneousDBResponse struct {
	MiscellaneousDB
}

// MiscellaneousWOP is a Miscellaneous without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MiscellaneousWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Miscellaneous_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMiscellaneousStruct struct {
	// stores MiscellaneousDB according to their gorm ID
	Map_MiscellaneousDBID_MiscellaneousDB map[uint]*MiscellaneousDB

	// stores MiscellaneousDB ID according to Miscellaneous address
	Map_MiscellaneousPtr_MiscellaneousDBID map[*models.Miscellaneous]uint

	// stores Miscellaneous according to their gorm ID
	Map_MiscellaneousDBID_MiscellaneousPtr map[uint]*models.Miscellaneous

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMiscellaneous.stage
	return
}

func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) GetDB() *gorm.DB {
	return backRepoMiscellaneous.db
}

// GetMiscellaneousDBFromMiscellaneousPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) GetMiscellaneousDBFromMiscellaneousPtr(miscellaneous *models.Miscellaneous) (miscellaneousDB *MiscellaneousDB) {
	id := backRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous]
	miscellaneousDB = backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[id]
	return
}

// BackRepoMiscellaneous.CommitPhaseOne commits all staged instances of Miscellaneous to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for miscellaneous := range stage.Miscellaneouss {
		backRepoMiscellaneous.CommitPhaseOneInstance(miscellaneous)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, miscellaneous := range backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr {
		if _, ok := stage.Miscellaneouss[miscellaneous]; !ok {
			backRepoMiscellaneous.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMiscellaneous.CommitDeleteInstance commits deletion of Miscellaneous to the BackRepo
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CommitDeleteInstance(id uint) (Error error) {

	miscellaneous := backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr[id]

	// miscellaneous is not staged anymore, remove miscellaneousDB
	miscellaneousDB := backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[id]
	query := backRepoMiscellaneous.db.Unscoped().Delete(&miscellaneousDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID, miscellaneous)
	delete(backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr, id)
	delete(backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB, id)

	return
}

// BackRepoMiscellaneous.CommitPhaseOneInstance commits miscellaneous staged instances of Miscellaneous to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CommitPhaseOneInstance(miscellaneous *models.Miscellaneous) (Error error) {

	// check if the miscellaneous is not commited yet
	if _, ok := backRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous]; ok {
		return
	}

	// initiate miscellaneous
	var miscellaneousDB MiscellaneousDB
	miscellaneousDB.CopyBasicFieldsFromMiscellaneous(miscellaneous)

	query := backRepoMiscellaneous.db.Create(&miscellaneousDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous] = miscellaneousDB.ID
	backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr[miscellaneousDB.ID] = miscellaneous
	backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[miscellaneousDB.ID] = &miscellaneousDB

	return
}

// BackRepoMiscellaneous.CommitPhaseTwo commits all staged instances of Miscellaneous to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, miscellaneous := range backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr {
		backRepoMiscellaneous.CommitPhaseTwoInstance(backRepo, idx, miscellaneous)
	}

	return
}

// BackRepoMiscellaneous.CommitPhaseTwoInstance commits {{structname }} of models.Miscellaneous to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, miscellaneous *models.Miscellaneous) (Error error) {

	// fetch matching miscellaneousDB
	if miscellaneousDB, ok := backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[idx]; ok {

		miscellaneousDB.CopyBasicFieldsFromMiscellaneous(miscellaneous)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		miscellaneousDB.MiscellaneousPointersEncoding.Miscellaneous_field = make([]int, 0)
		// 2. encode
		for _, miscellaneous_fieldAssocEnd := range miscellaneous.Miscellaneous_field {
			miscellaneous_fieldAssocEnd_DB :=
				backRepo.BackRepoMiscellaneous_field.GetMiscellaneous_fieldDBFromMiscellaneous_fieldPtr(miscellaneous_fieldAssocEnd)
			
			// the stage might be inconsistant, meaning that the miscellaneous_fieldAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if miscellaneous_fieldAssocEnd_DB == nil {
				continue
			}
			
			miscellaneousDB.MiscellaneousPointersEncoding.Miscellaneous_field =
				append(miscellaneousDB.MiscellaneousPointersEncoding.Miscellaneous_field, int(miscellaneous_fieldAssocEnd_DB.ID))
		}

		query := backRepoMiscellaneous.db.Save(&miscellaneousDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Miscellaneous intance %s", miscellaneous.Name))
		return err
	}

	return
}

// BackRepoMiscellaneous.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CheckoutPhaseOne() (Error error) {

	miscellaneousDBArray := make([]MiscellaneousDB, 0)
	query := backRepoMiscellaneous.db.Find(&miscellaneousDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	miscellaneousInstancesToBeRemovedFromTheStage := make(map[*models.Miscellaneous]any)
	for key, value := range backRepoMiscellaneous.stage.Miscellaneouss {
		miscellaneousInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, miscellaneousDB := range miscellaneousDBArray {
		backRepoMiscellaneous.CheckoutPhaseOneInstance(&miscellaneousDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		miscellaneous, ok := backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr[miscellaneousDB.ID]
		if ok {
			delete(miscellaneousInstancesToBeRemovedFromTheStage, miscellaneous)
		}
	}

	// remove from stage and back repo's 3 maps all miscellaneouss that are not in the checkout
	for miscellaneous := range miscellaneousInstancesToBeRemovedFromTheStage {
		miscellaneous.Unstage(backRepoMiscellaneous.GetStage())

		// remove instance from the back repo 3 maps
		miscellaneousID := backRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous]
		delete(backRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID, miscellaneous)
		delete(backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB, miscellaneousID)
		delete(backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr, miscellaneousID)
	}

	return
}

// CheckoutPhaseOneInstance takes a miscellaneousDB that has been found in the DB, updates the backRepo and stages the
// models version of the miscellaneousDB
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CheckoutPhaseOneInstance(miscellaneousDB *MiscellaneousDB) (Error error) {

	miscellaneous, ok := backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr[miscellaneousDB.ID]
	if !ok {
		miscellaneous = new(models.Miscellaneous)

		backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr[miscellaneousDB.ID] = miscellaneous
		backRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous] = miscellaneousDB.ID

		// append model store with the new element
		miscellaneous.Name = miscellaneousDB.Name_Data.String
		miscellaneous.Stage(backRepoMiscellaneous.GetStage())
	}
	miscellaneousDB.CopyBasicFieldsToMiscellaneous(miscellaneous)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	miscellaneous.Stage(backRepoMiscellaneous.GetStage())

	// preserve pointer to miscellaneousDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MiscellaneousDBID_MiscellaneousDB)[miscellaneousDB hold variable pointers
	miscellaneousDB_Data := *miscellaneousDB
	preservedPtrToMiscellaneous := &miscellaneousDB_Data
	backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[miscellaneousDB.ID] = preservedPtrToMiscellaneous

	return
}

// BackRepoMiscellaneous.CheckoutPhaseTwo Checkouts all staged instances of Miscellaneous to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, miscellaneousDB := range backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB {
		backRepoMiscellaneous.CheckoutPhaseTwoInstance(backRepo, miscellaneousDB)
	}
	return
}

// BackRepoMiscellaneous.CheckoutPhaseTwoInstance Checkouts staged instances of Miscellaneous to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, miscellaneousDB *MiscellaneousDB) (Error error) {

	miscellaneous := backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr[miscellaneousDB.ID]

	miscellaneousDB.DecodePointers(backRepo, miscellaneous)

	return
}

func (miscellaneousDB *MiscellaneousDB) DecodePointers(backRepo *BackRepoStruct, miscellaneous *models.Miscellaneous) {

	// insertion point for checkout of pointer encoding
	// This loop redeem miscellaneous.Miscellaneous_field in the stage from the encode in the back repo
	// It parses all Miscellaneous_fieldDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	miscellaneous.Miscellaneous_field = miscellaneous.Miscellaneous_field[:0]
	for _, _Miscellaneous_fieldid := range miscellaneousDB.MiscellaneousPointersEncoding.Miscellaneous_field {
		miscellaneous.Miscellaneous_field = append(miscellaneous.Miscellaneous_field, backRepo.BackRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr[uint(_Miscellaneous_fieldid)])
	}

	return
}

// CommitMiscellaneous allows commit of a single miscellaneous (if already staged)
func (backRepo *BackRepoStruct) CommitMiscellaneous(miscellaneous *models.Miscellaneous) {
	backRepo.BackRepoMiscellaneous.CommitPhaseOneInstance(miscellaneous)
	if id, ok := backRepo.BackRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous]; ok {
		backRepo.BackRepoMiscellaneous.CommitPhaseTwoInstance(backRepo, id, miscellaneous)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMiscellaneous allows checkout of a single miscellaneous (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMiscellaneous(miscellaneous *models.Miscellaneous) {
	// check if the miscellaneous is staged
	if _, ok := backRepo.BackRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous]; ok {

		if id, ok := backRepo.BackRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[miscellaneous]; ok {
			var miscellaneousDB MiscellaneousDB
			miscellaneousDB.ID = id

			if err := backRepo.BackRepoMiscellaneous.db.First(&miscellaneousDB, id).Error; err != nil {
				log.Fatalln("CheckoutMiscellaneous : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMiscellaneous.CheckoutPhaseOneInstance(&miscellaneousDB)
			backRepo.BackRepoMiscellaneous.CheckoutPhaseTwoInstance(backRepo, &miscellaneousDB)
		}
	}
}

// CopyBasicFieldsFromMiscellaneous
func (miscellaneousDB *MiscellaneousDB) CopyBasicFieldsFromMiscellaneous(miscellaneous *models.Miscellaneous) {
	// insertion point for fields commit

	miscellaneousDB.Name_Data.String = miscellaneous.Name
	miscellaneousDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMiscellaneous_WOP
func (miscellaneousDB *MiscellaneousDB) CopyBasicFieldsFromMiscellaneous_WOP(miscellaneous *models.Miscellaneous_WOP) {
	// insertion point for fields commit

	miscellaneousDB.Name_Data.String = miscellaneous.Name
	miscellaneousDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMiscellaneousWOP
func (miscellaneousDB *MiscellaneousDB) CopyBasicFieldsFromMiscellaneousWOP(miscellaneous *MiscellaneousWOP) {
	// insertion point for fields commit

	miscellaneousDB.Name_Data.String = miscellaneous.Name
	miscellaneousDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMiscellaneous
func (miscellaneousDB *MiscellaneousDB) CopyBasicFieldsToMiscellaneous(miscellaneous *models.Miscellaneous) {
	// insertion point for checkout of basic fields (back repo to stage)
	miscellaneous.Name = miscellaneousDB.Name_Data.String
}

// CopyBasicFieldsToMiscellaneous_WOP
func (miscellaneousDB *MiscellaneousDB) CopyBasicFieldsToMiscellaneous_WOP(miscellaneous *models.Miscellaneous_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	miscellaneous.Name = miscellaneousDB.Name_Data.String
}

// CopyBasicFieldsToMiscellaneousWOP
func (miscellaneousDB *MiscellaneousDB) CopyBasicFieldsToMiscellaneousWOP(miscellaneous *MiscellaneousWOP) {
	miscellaneous.ID = int(miscellaneousDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	miscellaneous.Name = miscellaneousDB.Name_Data.String
}

// Backup generates a json file from a slice of all MiscellaneousDB instances in the backrepo
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MiscellaneousDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MiscellaneousDB, 0)
	for _, miscellaneousDB := range backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB {
		forBackup = append(forBackup, miscellaneousDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Miscellaneous ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Miscellaneous file", err.Error())
	}
}

// Backup generates a json file from a slice of all MiscellaneousDB instances in the backrepo
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MiscellaneousDB, 0)
	for _, miscellaneousDB := range backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB {
		forBackup = append(forBackup, miscellaneousDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Miscellaneous")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Miscellaneous_Fields, -1)
	for _, miscellaneousDB := range forBackup {

		var miscellaneousWOP MiscellaneousWOP
		miscellaneousDB.CopyBasicFieldsToMiscellaneousWOP(&miscellaneousWOP)

		row := sh.AddRow()
		row.WriteStruct(&miscellaneousWOP, -1)
	}
}

// RestoreXL from the "Miscellaneous" sheet all MiscellaneousDB instances
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMiscellaneousid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Miscellaneous"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMiscellaneous.rowVisitorMiscellaneous)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) rowVisitorMiscellaneous(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var miscellaneousWOP MiscellaneousWOP
		row.ReadStruct(&miscellaneousWOP)

		// add the unmarshalled struct to the stage
		miscellaneousDB := new(MiscellaneousDB)
		miscellaneousDB.CopyBasicFieldsFromMiscellaneousWOP(&miscellaneousWOP)

		miscellaneousDB_ID_atBackupTime := miscellaneousDB.ID
		miscellaneousDB.ID = 0
		query := backRepoMiscellaneous.db.Create(miscellaneousDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[miscellaneousDB.ID] = miscellaneousDB
		BackRepoMiscellaneousid_atBckpTime_newID[miscellaneousDB_ID_atBackupTime] = miscellaneousDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MiscellaneousDB.json" in dirPath that stores an array
// of MiscellaneousDB and stores it in the database
// the map BackRepoMiscellaneousid_atBckpTime_newID is updated accordingly
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMiscellaneousid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MiscellaneousDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Miscellaneous file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MiscellaneousDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MiscellaneousDBID_MiscellaneousDB
	for _, miscellaneousDB := range forRestore {

		miscellaneousDB_ID_atBackupTime := miscellaneousDB.ID
		miscellaneousDB.ID = 0
		query := backRepoMiscellaneous.db.Create(miscellaneousDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[miscellaneousDB.ID] = miscellaneousDB
		BackRepoMiscellaneousid_atBckpTime_newID[miscellaneousDB_ID_atBackupTime] = miscellaneousDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Miscellaneous file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Miscellaneous>id_atBckpTime_newID
// to compute new index
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) RestorePhaseTwo() {

	for _, miscellaneousDB := range backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB {

		// next line of code is to avert unused variable compilation error
		_ = miscellaneousDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMiscellaneous.db.Model(miscellaneousDB).Updates(*miscellaneousDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMiscellaneous.ResetReversePointers commits all staged instances of Miscellaneous to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, miscellaneous := range backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr {
		backRepoMiscellaneous.ResetReversePointersInstance(backRepo, idx, miscellaneous)
	}

	return
}

func (backRepoMiscellaneous *BackRepoMiscellaneousStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, miscellaneous *models.Miscellaneous) (Error error) {

	// fetch matching miscellaneousDB
	if miscellaneousDB, ok := backRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousDB[idx]; ok {
		_ = miscellaneousDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMiscellaneousid_atBckpTime_newID map[uint]uint
