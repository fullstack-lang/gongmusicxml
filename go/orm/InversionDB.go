// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Inversion_sql sql.NullBool
var dummy_Inversion_time time.Duration
var dummy_Inversion_sort sort.Float64Slice

// InversionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model inversionAPI
type InversionAPI struct {
	gorm.Model

	models.Inversion_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	InversionPointersEncoding InversionPointersEncoding
}

// InversionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type InversionPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// InversionDB describes a inversion in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model inversionDB
type InversionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field inversionDB.Name
	Name_Data sql.NullString

	// Declation for basic field inversionDB.Text
	Text_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	InversionPointersEncoding
}

// InversionDBs arrays inversionDBs
// swagger:response inversionDBsResponse
type InversionDBs []InversionDB

// InversionDBResponse provides response
// swagger:response inversionDBResponse
type InversionDBResponse struct {
	InversionDB
}

// InversionWOP is a Inversion without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type InversionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Inversion_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoInversionStruct struct {
	// stores InversionDB according to their gorm ID
	Map_InversionDBID_InversionDB map[uint]*InversionDB

	// stores InversionDB ID according to Inversion address
	Map_InversionPtr_InversionDBID map[*models.Inversion]uint

	// stores Inversion according to their gorm ID
	Map_InversionDBID_InversionPtr map[uint]*models.Inversion

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoInversion *BackRepoInversionStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoInversion.stage
	return
}

func (backRepoInversion *BackRepoInversionStruct) GetDB() *gorm.DB {
	return backRepoInversion.db
}

// GetInversionDBFromInversionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoInversion *BackRepoInversionStruct) GetInversionDBFromInversionPtr(inversion *models.Inversion) (inversionDB *InversionDB) {
	id := backRepoInversion.Map_InversionPtr_InversionDBID[inversion]
	inversionDB = backRepoInversion.Map_InversionDBID_InversionDB[id]
	return
}

// BackRepoInversion.CommitPhaseOne commits all staged instances of Inversion to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInversion *BackRepoInversionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for inversion := range stage.Inversions {
		backRepoInversion.CommitPhaseOneInstance(inversion)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, inversion := range backRepoInversion.Map_InversionDBID_InversionPtr {
		if _, ok := stage.Inversions[inversion]; !ok {
			backRepoInversion.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoInversion.CommitDeleteInstance commits deletion of Inversion to the BackRepo
func (backRepoInversion *BackRepoInversionStruct) CommitDeleteInstance(id uint) (Error error) {

	inversion := backRepoInversion.Map_InversionDBID_InversionPtr[id]

	// inversion is not staged anymore, remove inversionDB
	inversionDB := backRepoInversion.Map_InversionDBID_InversionDB[id]
	query := backRepoInversion.db.Unscoped().Delete(&inversionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoInversion.Map_InversionPtr_InversionDBID, inversion)
	delete(backRepoInversion.Map_InversionDBID_InversionPtr, id)
	delete(backRepoInversion.Map_InversionDBID_InversionDB, id)

	return
}

// BackRepoInversion.CommitPhaseOneInstance commits inversion staged instances of Inversion to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInversion *BackRepoInversionStruct) CommitPhaseOneInstance(inversion *models.Inversion) (Error error) {

	// check if the inversion is not commited yet
	if _, ok := backRepoInversion.Map_InversionPtr_InversionDBID[inversion]; ok {
		return
	}

	// initiate inversion
	var inversionDB InversionDB
	inversionDB.CopyBasicFieldsFromInversion(inversion)

	query := backRepoInversion.db.Create(&inversionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoInversion.Map_InversionPtr_InversionDBID[inversion] = inversionDB.ID
	backRepoInversion.Map_InversionDBID_InversionPtr[inversionDB.ID] = inversion
	backRepoInversion.Map_InversionDBID_InversionDB[inversionDB.ID] = &inversionDB

	return
}

// BackRepoInversion.CommitPhaseTwo commits all staged instances of Inversion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInversion *BackRepoInversionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, inversion := range backRepoInversion.Map_InversionDBID_InversionPtr {
		backRepoInversion.CommitPhaseTwoInstance(backRepo, idx, inversion)
	}

	return
}

// BackRepoInversion.CommitPhaseTwoInstance commits {{structname }} of models.Inversion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInversion *BackRepoInversionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, inversion *models.Inversion) (Error error) {

	// fetch matching inversionDB
	if inversionDB, ok := backRepoInversion.Map_InversionDBID_InversionDB[idx]; ok {

		inversionDB.CopyBasicFieldsFromInversion(inversion)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoInversion.db.Save(&inversionDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Inversion intance %s", inversion.Name))
		return err
	}

	return
}

// BackRepoInversion.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoInversion *BackRepoInversionStruct) CheckoutPhaseOne() (Error error) {

	inversionDBArray := make([]InversionDB, 0)
	query := backRepoInversion.db.Find(&inversionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	inversionInstancesToBeRemovedFromTheStage := make(map[*models.Inversion]any)
	for key, value := range backRepoInversion.stage.Inversions {
		inversionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, inversionDB := range inversionDBArray {
		backRepoInversion.CheckoutPhaseOneInstance(&inversionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		inversion, ok := backRepoInversion.Map_InversionDBID_InversionPtr[inversionDB.ID]
		if ok {
			delete(inversionInstancesToBeRemovedFromTheStage, inversion)
		}
	}

	// remove from stage and back repo's 3 maps all inversions that are not in the checkout
	for inversion := range inversionInstancesToBeRemovedFromTheStage {
		inversion.Unstage(backRepoInversion.GetStage())

		// remove instance from the back repo 3 maps
		inversionID := backRepoInversion.Map_InversionPtr_InversionDBID[inversion]
		delete(backRepoInversion.Map_InversionPtr_InversionDBID, inversion)
		delete(backRepoInversion.Map_InversionDBID_InversionDB, inversionID)
		delete(backRepoInversion.Map_InversionDBID_InversionPtr, inversionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a inversionDB that has been found in the DB, updates the backRepo and stages the
// models version of the inversionDB
func (backRepoInversion *BackRepoInversionStruct) CheckoutPhaseOneInstance(inversionDB *InversionDB) (Error error) {

	inversion, ok := backRepoInversion.Map_InversionDBID_InversionPtr[inversionDB.ID]
	if !ok {
		inversion = new(models.Inversion)

		backRepoInversion.Map_InversionDBID_InversionPtr[inversionDB.ID] = inversion
		backRepoInversion.Map_InversionPtr_InversionDBID[inversion] = inversionDB.ID

		// append model store with the new element
		inversion.Name = inversionDB.Name_Data.String
		inversion.Stage(backRepoInversion.GetStage())
	}
	inversionDB.CopyBasicFieldsToInversion(inversion)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	inversion.Stage(backRepoInversion.GetStage())

	// preserve pointer to inversionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_InversionDBID_InversionDB)[inversionDB hold variable pointers
	inversionDB_Data := *inversionDB
	preservedPtrToInversion := &inversionDB_Data
	backRepoInversion.Map_InversionDBID_InversionDB[inversionDB.ID] = preservedPtrToInversion

	return
}

// BackRepoInversion.CheckoutPhaseTwo Checkouts all staged instances of Inversion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInversion *BackRepoInversionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, inversionDB := range backRepoInversion.Map_InversionDBID_InversionDB {
		backRepoInversion.CheckoutPhaseTwoInstance(backRepo, inversionDB)
	}
	return
}

// BackRepoInversion.CheckoutPhaseTwoInstance Checkouts staged instances of Inversion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInversion *BackRepoInversionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, inversionDB *InversionDB) (Error error) {

	inversion := backRepoInversion.Map_InversionDBID_InversionPtr[inversionDB.ID]

	inversionDB.DecodePointers(backRepo, inversion)

	return
}

func (inversionDB *InversionDB) DecodePointers(backRepo *BackRepoStruct, inversion *models.Inversion) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitInversion allows commit of a single inversion (if already staged)
func (backRepo *BackRepoStruct) CommitInversion(inversion *models.Inversion) {
	backRepo.BackRepoInversion.CommitPhaseOneInstance(inversion)
	if id, ok := backRepo.BackRepoInversion.Map_InversionPtr_InversionDBID[inversion]; ok {
		backRepo.BackRepoInversion.CommitPhaseTwoInstance(backRepo, id, inversion)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitInversion allows checkout of a single inversion (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutInversion(inversion *models.Inversion) {
	// check if the inversion is staged
	if _, ok := backRepo.BackRepoInversion.Map_InversionPtr_InversionDBID[inversion]; ok {

		if id, ok := backRepo.BackRepoInversion.Map_InversionPtr_InversionDBID[inversion]; ok {
			var inversionDB InversionDB
			inversionDB.ID = id

			if err := backRepo.BackRepoInversion.db.First(&inversionDB, id).Error; err != nil {
				log.Fatalln("CheckoutInversion : Problem with getting object with id:", id)
			}
			backRepo.BackRepoInversion.CheckoutPhaseOneInstance(&inversionDB)
			backRepo.BackRepoInversion.CheckoutPhaseTwoInstance(backRepo, &inversionDB)
		}
	}
}

// CopyBasicFieldsFromInversion
func (inversionDB *InversionDB) CopyBasicFieldsFromInversion(inversion *models.Inversion) {
	// insertion point for fields commit

	inversionDB.Name_Data.String = inversion.Name
	inversionDB.Name_Data.Valid = true

	inversionDB.Text_Data.String = inversion.Text
	inversionDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromInversion_WOP
func (inversionDB *InversionDB) CopyBasicFieldsFromInversion_WOP(inversion *models.Inversion_WOP) {
	// insertion point for fields commit

	inversionDB.Name_Data.String = inversion.Name
	inversionDB.Name_Data.Valid = true

	inversionDB.Text_Data.String = inversion.Text
	inversionDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromInversionWOP
func (inversionDB *InversionDB) CopyBasicFieldsFromInversionWOP(inversion *InversionWOP) {
	// insertion point for fields commit

	inversionDB.Name_Data.String = inversion.Name
	inversionDB.Name_Data.Valid = true

	inversionDB.Text_Data.String = inversion.Text
	inversionDB.Text_Data.Valid = true
}

// CopyBasicFieldsToInversion
func (inversionDB *InversionDB) CopyBasicFieldsToInversion(inversion *models.Inversion) {
	// insertion point for checkout of basic fields (back repo to stage)
	inversion.Name = inversionDB.Name_Data.String
	inversion.Text = inversionDB.Text_Data.String
}

// CopyBasicFieldsToInversion_WOP
func (inversionDB *InversionDB) CopyBasicFieldsToInversion_WOP(inversion *models.Inversion_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	inversion.Name = inversionDB.Name_Data.String
	inversion.Text = inversionDB.Text_Data.String
}

// CopyBasicFieldsToInversionWOP
func (inversionDB *InversionDB) CopyBasicFieldsToInversionWOP(inversion *InversionWOP) {
	inversion.ID = int(inversionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	inversion.Name = inversionDB.Name_Data.String
	inversion.Text = inversionDB.Text_Data.String
}

// Backup generates a json file from a slice of all InversionDB instances in the backrepo
func (backRepoInversion *BackRepoInversionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "InversionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InversionDB, 0)
	for _, inversionDB := range backRepoInversion.Map_InversionDBID_InversionDB {
		forBackup = append(forBackup, inversionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Inversion ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Inversion file", err.Error())
	}
}

// Backup generates a json file from a slice of all InversionDB instances in the backrepo
func (backRepoInversion *BackRepoInversionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InversionDB, 0)
	for _, inversionDB := range backRepoInversion.Map_InversionDBID_InversionDB {
		forBackup = append(forBackup, inversionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Inversion")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Inversion_Fields, -1)
	for _, inversionDB := range forBackup {

		var inversionWOP InversionWOP
		inversionDB.CopyBasicFieldsToInversionWOP(&inversionWOP)

		row := sh.AddRow()
		row.WriteStruct(&inversionWOP, -1)
	}
}

// RestoreXL from the "Inversion" sheet all InversionDB instances
func (backRepoInversion *BackRepoInversionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoInversionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Inversion"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoInversion.rowVisitorInversion)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoInversion *BackRepoInversionStruct) rowVisitorInversion(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var inversionWOP InversionWOP
		row.ReadStruct(&inversionWOP)

		// add the unmarshalled struct to the stage
		inversionDB := new(InversionDB)
		inversionDB.CopyBasicFieldsFromInversionWOP(&inversionWOP)

		inversionDB_ID_atBackupTime := inversionDB.ID
		inversionDB.ID = 0
		query := backRepoInversion.db.Create(inversionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInversion.Map_InversionDBID_InversionDB[inversionDB.ID] = inversionDB
		BackRepoInversionid_atBckpTime_newID[inversionDB_ID_atBackupTime] = inversionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "InversionDB.json" in dirPath that stores an array
// of InversionDB and stores it in the database
// the map BackRepoInversionid_atBckpTime_newID is updated accordingly
func (backRepoInversion *BackRepoInversionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoInversionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "InversionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Inversion file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*InversionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_InversionDBID_InversionDB
	for _, inversionDB := range forRestore {

		inversionDB_ID_atBackupTime := inversionDB.ID
		inversionDB.ID = 0
		query := backRepoInversion.db.Create(inversionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInversion.Map_InversionDBID_InversionDB[inversionDB.ID] = inversionDB
		BackRepoInversionid_atBckpTime_newID[inversionDB_ID_atBackupTime] = inversionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Inversion file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Inversion>id_atBckpTime_newID
// to compute new index
func (backRepoInversion *BackRepoInversionStruct) RestorePhaseTwo() {

	for _, inversionDB := range backRepoInversion.Map_InversionDBID_InversionDB {

		// next line of code is to avert unused variable compilation error
		_ = inversionDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoInversion.db.Model(inversionDB).Updates(*inversionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoInversion.ResetReversePointers commits all staged instances of Inversion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInversion *BackRepoInversionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, inversion := range backRepoInversion.Map_InversionDBID_InversionPtr {
		backRepoInversion.ResetReversePointersInstance(backRepo, idx, inversion)
	}

	return
}

func (backRepoInversion *BackRepoInversionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, inversion *models.Inversion) (Error error) {

	// fetch matching inversionDB
	if inversionDB, ok := backRepoInversion.Map_InversionDBID_InversionDB[idx]; ok {
		_ = inversionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoInversionid_atBckpTime_newID map[uint]uint
