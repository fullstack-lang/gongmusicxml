// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Fermata_sql sql.NullBool
var dummy_Fermata_time time.Duration
var dummy_Fermata_sort sort.Float64Slice

// FermataAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fermataAPI
type FermataAPI struct {
	gorm.Model

	models.Fermata_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FermataPointersEncoding FermataPointersEncoding
}

// FermataPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FermataPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FermataDB describes a fermata in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fermataDB
type FermataDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fermataDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FermataPointersEncoding
}

// FermataDBs arrays fermataDBs
// swagger:response fermataDBsResponse
type FermataDBs []FermataDB

// FermataDBResponse provides response
// swagger:response fermataDBResponse
type FermataDBResponse struct {
	FermataDB
}

// FermataWOP is a Fermata without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FermataWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Fermata_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFermataStruct struct {
	// stores FermataDB according to their gorm ID
	Map_FermataDBID_FermataDB map[uint]*FermataDB

	// stores FermataDB ID according to Fermata address
	Map_FermataPtr_FermataDBID map[*models.Fermata]uint

	// stores Fermata according to their gorm ID
	Map_FermataDBID_FermataPtr map[uint]*models.Fermata

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFermata *BackRepoFermataStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFermata.stage
	return
}

func (backRepoFermata *BackRepoFermataStruct) GetDB() *gorm.DB {
	return backRepoFermata.db
}

// GetFermataDBFromFermataPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFermata *BackRepoFermataStruct) GetFermataDBFromFermataPtr(fermata *models.Fermata) (fermataDB *FermataDB) {
	id := backRepoFermata.Map_FermataPtr_FermataDBID[fermata]
	fermataDB = backRepoFermata.Map_FermataDBID_FermataDB[id]
	return
}

// BackRepoFermata.CommitPhaseOne commits all staged instances of Fermata to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFermata *BackRepoFermataStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for fermata := range stage.Fermatas {
		backRepoFermata.CommitPhaseOneInstance(fermata)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, fermata := range backRepoFermata.Map_FermataDBID_FermataPtr {
		if _, ok := stage.Fermatas[fermata]; !ok {
			backRepoFermata.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFermata.CommitDeleteInstance commits deletion of Fermata to the BackRepo
func (backRepoFermata *BackRepoFermataStruct) CommitDeleteInstance(id uint) (Error error) {

	fermata := backRepoFermata.Map_FermataDBID_FermataPtr[id]

	// fermata is not staged anymore, remove fermataDB
	fermataDB := backRepoFermata.Map_FermataDBID_FermataDB[id]
	query := backRepoFermata.db.Unscoped().Delete(&fermataDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFermata.Map_FermataPtr_FermataDBID, fermata)
	delete(backRepoFermata.Map_FermataDBID_FermataPtr, id)
	delete(backRepoFermata.Map_FermataDBID_FermataDB, id)

	return
}

// BackRepoFermata.CommitPhaseOneInstance commits fermata staged instances of Fermata to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFermata *BackRepoFermataStruct) CommitPhaseOneInstance(fermata *models.Fermata) (Error error) {

	// check if the fermata is not commited yet
	if _, ok := backRepoFermata.Map_FermataPtr_FermataDBID[fermata]; ok {
		return
	}

	// initiate fermata
	var fermataDB FermataDB
	fermataDB.CopyBasicFieldsFromFermata(fermata)

	query := backRepoFermata.db.Create(&fermataDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFermata.Map_FermataPtr_FermataDBID[fermata] = fermataDB.ID
	backRepoFermata.Map_FermataDBID_FermataPtr[fermataDB.ID] = fermata
	backRepoFermata.Map_FermataDBID_FermataDB[fermataDB.ID] = &fermataDB

	return
}

// BackRepoFermata.CommitPhaseTwo commits all staged instances of Fermata to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFermata *BackRepoFermataStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, fermata := range backRepoFermata.Map_FermataDBID_FermataPtr {
		backRepoFermata.CommitPhaseTwoInstance(backRepo, idx, fermata)
	}

	return
}

// BackRepoFermata.CommitPhaseTwoInstance commits {{structname }} of models.Fermata to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFermata *BackRepoFermataStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, fermata *models.Fermata) (Error error) {

	// fetch matching fermataDB
	if fermataDB, ok := backRepoFermata.Map_FermataDBID_FermataDB[idx]; ok {

		fermataDB.CopyBasicFieldsFromFermata(fermata)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFermata.db.Save(&fermataDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Fermata intance %s", fermata.Name))
		return err
	}

	return
}

// BackRepoFermata.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFermata *BackRepoFermataStruct) CheckoutPhaseOne() (Error error) {

	fermataDBArray := make([]FermataDB, 0)
	query := backRepoFermata.db.Find(&fermataDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fermataInstancesToBeRemovedFromTheStage := make(map[*models.Fermata]any)
	for key, value := range backRepoFermata.stage.Fermatas {
		fermataInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fermataDB := range fermataDBArray {
		backRepoFermata.CheckoutPhaseOneInstance(&fermataDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		fermata, ok := backRepoFermata.Map_FermataDBID_FermataPtr[fermataDB.ID]
		if ok {
			delete(fermataInstancesToBeRemovedFromTheStage, fermata)
		}
	}

	// remove from stage and back repo's 3 maps all fermatas that are not in the checkout
	for fermata := range fermataInstancesToBeRemovedFromTheStage {
		fermata.Unstage(backRepoFermata.GetStage())

		// remove instance from the back repo 3 maps
		fermataID := backRepoFermata.Map_FermataPtr_FermataDBID[fermata]
		delete(backRepoFermata.Map_FermataPtr_FermataDBID, fermata)
		delete(backRepoFermata.Map_FermataDBID_FermataDB, fermataID)
		delete(backRepoFermata.Map_FermataDBID_FermataPtr, fermataID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fermataDB that has been found in the DB, updates the backRepo and stages the
// models version of the fermataDB
func (backRepoFermata *BackRepoFermataStruct) CheckoutPhaseOneInstance(fermataDB *FermataDB) (Error error) {

	fermata, ok := backRepoFermata.Map_FermataDBID_FermataPtr[fermataDB.ID]
	if !ok {
		fermata = new(models.Fermata)

		backRepoFermata.Map_FermataDBID_FermataPtr[fermataDB.ID] = fermata
		backRepoFermata.Map_FermataPtr_FermataDBID[fermata] = fermataDB.ID

		// append model store with the new element
		fermata.Name = fermataDB.Name_Data.String
		fermata.Stage(backRepoFermata.GetStage())
	}
	fermataDB.CopyBasicFieldsToFermata(fermata)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	fermata.Stage(backRepoFermata.GetStage())

	// preserve pointer to fermataDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FermataDBID_FermataDB)[fermataDB hold variable pointers
	fermataDB_Data := *fermataDB
	preservedPtrToFermata := &fermataDB_Data
	backRepoFermata.Map_FermataDBID_FermataDB[fermataDB.ID] = preservedPtrToFermata

	return
}

// BackRepoFermata.CheckoutPhaseTwo Checkouts all staged instances of Fermata to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFermata *BackRepoFermataStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fermataDB := range backRepoFermata.Map_FermataDBID_FermataDB {
		backRepoFermata.CheckoutPhaseTwoInstance(backRepo, fermataDB)
	}
	return
}

// BackRepoFermata.CheckoutPhaseTwoInstance Checkouts staged instances of Fermata to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFermata *BackRepoFermataStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fermataDB *FermataDB) (Error error) {

	fermata := backRepoFermata.Map_FermataDBID_FermataPtr[fermataDB.ID]

	fermataDB.DecodePointers(backRepo, fermata)

	return
}

func (fermataDB *FermataDB) DecodePointers(backRepo *BackRepoStruct, fermata *models.Fermata) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFermata allows commit of a single fermata (if already staged)
func (backRepo *BackRepoStruct) CommitFermata(fermata *models.Fermata) {
	backRepo.BackRepoFermata.CommitPhaseOneInstance(fermata)
	if id, ok := backRepo.BackRepoFermata.Map_FermataPtr_FermataDBID[fermata]; ok {
		backRepo.BackRepoFermata.CommitPhaseTwoInstance(backRepo, id, fermata)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFermata allows checkout of a single fermata (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFermata(fermata *models.Fermata) {
	// check if the fermata is staged
	if _, ok := backRepo.BackRepoFermata.Map_FermataPtr_FermataDBID[fermata]; ok {

		if id, ok := backRepo.BackRepoFermata.Map_FermataPtr_FermataDBID[fermata]; ok {
			var fermataDB FermataDB
			fermataDB.ID = id

			if err := backRepo.BackRepoFermata.db.First(&fermataDB, id).Error; err != nil {
				log.Fatalln("CheckoutFermata : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFermata.CheckoutPhaseOneInstance(&fermataDB)
			backRepo.BackRepoFermata.CheckoutPhaseTwoInstance(backRepo, &fermataDB)
		}
	}
}

// CopyBasicFieldsFromFermata
func (fermataDB *FermataDB) CopyBasicFieldsFromFermata(fermata *models.Fermata) {
	// insertion point for fields commit

	fermataDB.Name_Data.String = fermata.Name
	fermataDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFermata_WOP
func (fermataDB *FermataDB) CopyBasicFieldsFromFermata_WOP(fermata *models.Fermata_WOP) {
	// insertion point for fields commit

	fermataDB.Name_Data.String = fermata.Name
	fermataDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFermataWOP
func (fermataDB *FermataDB) CopyBasicFieldsFromFermataWOP(fermata *FermataWOP) {
	// insertion point for fields commit

	fermataDB.Name_Data.String = fermata.Name
	fermataDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFermata
func (fermataDB *FermataDB) CopyBasicFieldsToFermata(fermata *models.Fermata) {
	// insertion point for checkout of basic fields (back repo to stage)
	fermata.Name = fermataDB.Name_Data.String
}

// CopyBasicFieldsToFermata_WOP
func (fermataDB *FermataDB) CopyBasicFieldsToFermata_WOP(fermata *models.Fermata_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	fermata.Name = fermataDB.Name_Data.String
}

// CopyBasicFieldsToFermataWOP
func (fermataDB *FermataDB) CopyBasicFieldsToFermataWOP(fermata *FermataWOP) {
	fermata.ID = int(fermataDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	fermata.Name = fermataDB.Name_Data.String
}

// Backup generates a json file from a slice of all FermataDB instances in the backrepo
func (backRepoFermata *BackRepoFermataStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FermataDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FermataDB, 0)
	for _, fermataDB := range backRepoFermata.Map_FermataDBID_FermataDB {
		forBackup = append(forBackup, fermataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Fermata ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Fermata file", err.Error())
	}
}

// Backup generates a json file from a slice of all FermataDB instances in the backrepo
func (backRepoFermata *BackRepoFermataStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FermataDB, 0)
	for _, fermataDB := range backRepoFermata.Map_FermataDBID_FermataDB {
		forBackup = append(forBackup, fermataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Fermata")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Fermata_Fields, -1)
	for _, fermataDB := range forBackup {

		var fermataWOP FermataWOP
		fermataDB.CopyBasicFieldsToFermataWOP(&fermataWOP)

		row := sh.AddRow()
		row.WriteStruct(&fermataWOP, -1)
	}
}

// RestoreXL from the "Fermata" sheet all FermataDB instances
func (backRepoFermata *BackRepoFermataStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFermataid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Fermata"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFermata.rowVisitorFermata)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFermata *BackRepoFermataStruct) rowVisitorFermata(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fermataWOP FermataWOP
		row.ReadStruct(&fermataWOP)

		// add the unmarshalled struct to the stage
		fermataDB := new(FermataDB)
		fermataDB.CopyBasicFieldsFromFermataWOP(&fermataWOP)

		fermataDB_ID_atBackupTime := fermataDB.ID
		fermataDB.ID = 0
		query := backRepoFermata.db.Create(fermataDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFermata.Map_FermataDBID_FermataDB[fermataDB.ID] = fermataDB
		BackRepoFermataid_atBckpTime_newID[fermataDB_ID_atBackupTime] = fermataDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FermataDB.json" in dirPath that stores an array
// of FermataDB and stores it in the database
// the map BackRepoFermataid_atBckpTime_newID is updated accordingly
func (backRepoFermata *BackRepoFermataStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFermataid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FermataDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Fermata file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FermataDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FermataDBID_FermataDB
	for _, fermataDB := range forRestore {

		fermataDB_ID_atBackupTime := fermataDB.ID
		fermataDB.ID = 0
		query := backRepoFermata.db.Create(fermataDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFermata.Map_FermataDBID_FermataDB[fermataDB.ID] = fermataDB
		BackRepoFermataid_atBckpTime_newID[fermataDB_ID_atBackupTime] = fermataDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Fermata file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Fermata>id_atBckpTime_newID
// to compute new index
func (backRepoFermata *BackRepoFermataStruct) RestorePhaseTwo() {

	for _, fermataDB := range backRepoFermata.Map_FermataDBID_FermataDB {

		// next line of code is to avert unused variable compilation error
		_ = fermataDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFermata.db.Model(fermataDB).Updates(*fermataDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFermata.ResetReversePointers commits all staged instances of Fermata to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFermata *BackRepoFermataStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, fermata := range backRepoFermata.Map_FermataDBID_FermataPtr {
		backRepoFermata.ResetReversePointersInstance(backRepo, idx, fermata)
	}

	return
}

func (backRepoFermata *BackRepoFermataStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, fermata *models.Fermata) (Error error) {

	// fetch matching fermataDB
	if fermataDB, ok := backRepoFermata.Map_FermataDBID_FermataDB[idx]; ok {
		_ = fermataDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFermataid_atBckpTime_newID map[uint]uint
