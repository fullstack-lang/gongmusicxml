// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Metronome_beam_sql sql.NullBool
var dummy_Metronome_beam_time time.Duration
var dummy_Metronome_beam_sort sort.Float64Slice

// Metronome_beamAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model metronome_beamAPI
type Metronome_beamAPI struct {
	gorm.Model

	models.Metronome_beam_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Metronome_beamPointersEncoding Metronome_beamPointersEncoding
}

// Metronome_beamPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Metronome_beamPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Metronome_beamDB describes a metronome_beam in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model metronome_beamDB
type Metronome_beamDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field metronome_beamDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Metronome_beamPointersEncoding
}

// Metronome_beamDBs arrays metronome_beamDBs
// swagger:response metronome_beamDBsResponse
type Metronome_beamDBs []Metronome_beamDB

// Metronome_beamDBResponse provides response
// swagger:response metronome_beamDBResponse
type Metronome_beamDBResponse struct {
	Metronome_beamDB
}

// Metronome_beamWOP is a Metronome_beam without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Metronome_beamWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Metronome_beam_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMetronome_beamStruct struct {
	// stores Metronome_beamDB according to their gorm ID
	Map_Metronome_beamDBID_Metronome_beamDB map[uint]*Metronome_beamDB

	// stores Metronome_beamDB ID according to Metronome_beam address
	Map_Metronome_beamPtr_Metronome_beamDBID map[*models.Metronome_beam]uint

	// stores Metronome_beam according to their gorm ID
	Map_Metronome_beamDBID_Metronome_beamPtr map[uint]*models.Metronome_beam

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMetronome_beam.stage
	return
}

func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) GetDB() *gorm.DB {
	return backRepoMetronome_beam.db
}

// GetMetronome_beamDBFromMetronome_beamPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) GetMetronome_beamDBFromMetronome_beamPtr(metronome_beam *models.Metronome_beam) (metronome_beamDB *Metronome_beamDB) {
	id := backRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam]
	metronome_beamDB = backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[id]
	return
}

// BackRepoMetronome_beam.CommitPhaseOne commits all staged instances of Metronome_beam to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for metronome_beam := range stage.Metronome_beams {
		backRepoMetronome_beam.CommitPhaseOneInstance(metronome_beam)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, metronome_beam := range backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr {
		if _, ok := stage.Metronome_beams[metronome_beam]; !ok {
			backRepoMetronome_beam.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMetronome_beam.CommitDeleteInstance commits deletion of Metronome_beam to the BackRepo
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CommitDeleteInstance(id uint) (Error error) {

	metronome_beam := backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr[id]

	// metronome_beam is not staged anymore, remove metronome_beamDB
	metronome_beamDB := backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[id]
	query := backRepoMetronome_beam.db.Unscoped().Delete(&metronome_beamDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID, metronome_beam)
	delete(backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr, id)
	delete(backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB, id)

	return
}

// BackRepoMetronome_beam.CommitPhaseOneInstance commits metronome_beam staged instances of Metronome_beam to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CommitPhaseOneInstance(metronome_beam *models.Metronome_beam) (Error error) {

	// check if the metronome_beam is not commited yet
	if _, ok := backRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam]; ok {
		return
	}

	// initiate metronome_beam
	var metronome_beamDB Metronome_beamDB
	metronome_beamDB.CopyBasicFieldsFromMetronome_beam(metronome_beam)

	query := backRepoMetronome_beam.db.Create(&metronome_beamDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam] = metronome_beamDB.ID
	backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr[metronome_beamDB.ID] = metronome_beam
	backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[metronome_beamDB.ID] = &metronome_beamDB

	return
}

// BackRepoMetronome_beam.CommitPhaseTwo commits all staged instances of Metronome_beam to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_beam := range backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr {
		backRepoMetronome_beam.CommitPhaseTwoInstance(backRepo, idx, metronome_beam)
	}

	return
}

// BackRepoMetronome_beam.CommitPhaseTwoInstance commits {{structname }} of models.Metronome_beam to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, metronome_beam *models.Metronome_beam) (Error error) {

	// fetch matching metronome_beamDB
	if metronome_beamDB, ok := backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[idx]; ok {

		metronome_beamDB.CopyBasicFieldsFromMetronome_beam(metronome_beam)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMetronome_beam.db.Save(&metronome_beamDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Metronome_beam intance %s", metronome_beam.Name))
		return err
	}

	return
}

// BackRepoMetronome_beam.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CheckoutPhaseOne() (Error error) {

	metronome_beamDBArray := make([]Metronome_beamDB, 0)
	query := backRepoMetronome_beam.db.Find(&metronome_beamDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	metronome_beamInstancesToBeRemovedFromTheStage := make(map[*models.Metronome_beam]any)
	for key, value := range backRepoMetronome_beam.stage.Metronome_beams {
		metronome_beamInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, metronome_beamDB := range metronome_beamDBArray {
		backRepoMetronome_beam.CheckoutPhaseOneInstance(&metronome_beamDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		metronome_beam, ok := backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr[metronome_beamDB.ID]
		if ok {
			delete(metronome_beamInstancesToBeRemovedFromTheStage, metronome_beam)
		}
	}

	// remove from stage and back repo's 3 maps all metronome_beams that are not in the checkout
	for metronome_beam := range metronome_beamInstancesToBeRemovedFromTheStage {
		metronome_beam.Unstage(backRepoMetronome_beam.GetStage())

		// remove instance from the back repo 3 maps
		metronome_beamID := backRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam]
		delete(backRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID, metronome_beam)
		delete(backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB, metronome_beamID)
		delete(backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr, metronome_beamID)
	}

	return
}

// CheckoutPhaseOneInstance takes a metronome_beamDB that has been found in the DB, updates the backRepo and stages the
// models version of the metronome_beamDB
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CheckoutPhaseOneInstance(metronome_beamDB *Metronome_beamDB) (Error error) {

	metronome_beam, ok := backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr[metronome_beamDB.ID]
	if !ok {
		metronome_beam = new(models.Metronome_beam)

		backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr[metronome_beamDB.ID] = metronome_beam
		backRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam] = metronome_beamDB.ID

		// append model store with the new element
		metronome_beam.Name = metronome_beamDB.Name_Data.String
		metronome_beam.Stage(backRepoMetronome_beam.GetStage())
	}
	metronome_beamDB.CopyBasicFieldsToMetronome_beam(metronome_beam)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	metronome_beam.Stage(backRepoMetronome_beam.GetStage())

	// preserve pointer to metronome_beamDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Metronome_beamDBID_Metronome_beamDB)[metronome_beamDB hold variable pointers
	metronome_beamDB_Data := *metronome_beamDB
	preservedPtrToMetronome_beam := &metronome_beamDB_Data
	backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[metronome_beamDB.ID] = preservedPtrToMetronome_beam

	return
}

// BackRepoMetronome_beam.CheckoutPhaseTwo Checkouts all staged instances of Metronome_beam to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, metronome_beamDB := range backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB {
		backRepoMetronome_beam.CheckoutPhaseTwoInstance(backRepo, metronome_beamDB)
	}
	return
}

// BackRepoMetronome_beam.CheckoutPhaseTwoInstance Checkouts staged instances of Metronome_beam to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, metronome_beamDB *Metronome_beamDB) (Error error) {

	metronome_beam := backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr[metronome_beamDB.ID]

	metronome_beamDB.DecodePointers(backRepo, metronome_beam)

	return
}

func (metronome_beamDB *Metronome_beamDB) DecodePointers(backRepo *BackRepoStruct, metronome_beam *models.Metronome_beam) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMetronome_beam allows commit of a single metronome_beam (if already staged)
func (backRepo *BackRepoStruct) CommitMetronome_beam(metronome_beam *models.Metronome_beam) {
	backRepo.BackRepoMetronome_beam.CommitPhaseOneInstance(metronome_beam)
	if id, ok := backRepo.BackRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam]; ok {
		backRepo.BackRepoMetronome_beam.CommitPhaseTwoInstance(backRepo, id, metronome_beam)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMetronome_beam allows checkout of a single metronome_beam (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMetronome_beam(metronome_beam *models.Metronome_beam) {
	// check if the metronome_beam is staged
	if _, ok := backRepo.BackRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam]; ok {

		if id, ok := backRepo.BackRepoMetronome_beam.Map_Metronome_beamPtr_Metronome_beamDBID[metronome_beam]; ok {
			var metronome_beamDB Metronome_beamDB
			metronome_beamDB.ID = id

			if err := backRepo.BackRepoMetronome_beam.db.First(&metronome_beamDB, id).Error; err != nil {
				log.Fatalln("CheckoutMetronome_beam : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMetronome_beam.CheckoutPhaseOneInstance(&metronome_beamDB)
			backRepo.BackRepoMetronome_beam.CheckoutPhaseTwoInstance(backRepo, &metronome_beamDB)
		}
	}
}

// CopyBasicFieldsFromMetronome_beam
func (metronome_beamDB *Metronome_beamDB) CopyBasicFieldsFromMetronome_beam(metronome_beam *models.Metronome_beam) {
	// insertion point for fields commit

	metronome_beamDB.Name_Data.String = metronome_beam.Name
	metronome_beamDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_beam_WOP
func (metronome_beamDB *Metronome_beamDB) CopyBasicFieldsFromMetronome_beam_WOP(metronome_beam *models.Metronome_beam_WOP) {
	// insertion point for fields commit

	metronome_beamDB.Name_Data.String = metronome_beam.Name
	metronome_beamDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_beamWOP
func (metronome_beamDB *Metronome_beamDB) CopyBasicFieldsFromMetronome_beamWOP(metronome_beam *Metronome_beamWOP) {
	// insertion point for fields commit

	metronome_beamDB.Name_Data.String = metronome_beam.Name
	metronome_beamDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMetronome_beam
func (metronome_beamDB *Metronome_beamDB) CopyBasicFieldsToMetronome_beam(metronome_beam *models.Metronome_beam) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_beam.Name = metronome_beamDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_beam_WOP
func (metronome_beamDB *Metronome_beamDB) CopyBasicFieldsToMetronome_beam_WOP(metronome_beam *models.Metronome_beam_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_beam.Name = metronome_beamDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_beamWOP
func (metronome_beamDB *Metronome_beamDB) CopyBasicFieldsToMetronome_beamWOP(metronome_beam *Metronome_beamWOP) {
	metronome_beam.ID = int(metronome_beamDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_beam.Name = metronome_beamDB.Name_Data.String
}

// Backup generates a json file from a slice of all Metronome_beamDB instances in the backrepo
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Metronome_beamDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_beamDB, 0)
	for _, metronome_beamDB := range backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB {
		forBackup = append(forBackup, metronome_beamDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Metronome_beam ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Metronome_beam file", err.Error())
	}
}

// Backup generates a json file from a slice of all Metronome_beamDB instances in the backrepo
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_beamDB, 0)
	for _, metronome_beamDB := range backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB {
		forBackup = append(forBackup, metronome_beamDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Metronome_beam")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Metronome_beam_Fields, -1)
	for _, metronome_beamDB := range forBackup {

		var metronome_beamWOP Metronome_beamWOP
		metronome_beamDB.CopyBasicFieldsToMetronome_beamWOP(&metronome_beamWOP)

		row := sh.AddRow()
		row.WriteStruct(&metronome_beamWOP, -1)
	}
}

// RestoreXL from the "Metronome_beam" sheet all Metronome_beamDB instances
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMetronome_beamid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Metronome_beam"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMetronome_beam.rowVisitorMetronome_beam)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) rowVisitorMetronome_beam(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var metronome_beamWOP Metronome_beamWOP
		row.ReadStruct(&metronome_beamWOP)

		// add the unmarshalled struct to the stage
		metronome_beamDB := new(Metronome_beamDB)
		metronome_beamDB.CopyBasicFieldsFromMetronome_beamWOP(&metronome_beamWOP)

		metronome_beamDB_ID_atBackupTime := metronome_beamDB.ID
		metronome_beamDB.ID = 0
		query := backRepoMetronome_beam.db.Create(metronome_beamDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[metronome_beamDB.ID] = metronome_beamDB
		BackRepoMetronome_beamid_atBckpTime_newID[metronome_beamDB_ID_atBackupTime] = metronome_beamDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Metronome_beamDB.json" in dirPath that stores an array
// of Metronome_beamDB and stores it in the database
// the map BackRepoMetronome_beamid_atBckpTime_newID is updated accordingly
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMetronome_beamid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Metronome_beamDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Metronome_beam file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Metronome_beamDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Metronome_beamDBID_Metronome_beamDB
	for _, metronome_beamDB := range forRestore {

		metronome_beamDB_ID_atBackupTime := metronome_beamDB.ID
		metronome_beamDB.ID = 0
		query := backRepoMetronome_beam.db.Create(metronome_beamDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[metronome_beamDB.ID] = metronome_beamDB
		BackRepoMetronome_beamid_atBckpTime_newID[metronome_beamDB_ID_atBackupTime] = metronome_beamDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Metronome_beam file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Metronome_beam>id_atBckpTime_newID
// to compute new index
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) RestorePhaseTwo() {

	for _, metronome_beamDB := range backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB {

		// next line of code is to avert unused variable compilation error
		_ = metronome_beamDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMetronome_beam.db.Model(metronome_beamDB).Updates(*metronome_beamDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMetronome_beam.ResetReversePointers commits all staged instances of Metronome_beam to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_beam := range backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr {
		backRepoMetronome_beam.ResetReversePointersInstance(backRepo, idx, metronome_beam)
	}

	return
}

func (backRepoMetronome_beam *BackRepoMetronome_beamStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, metronome_beam *models.Metronome_beam) (Error error) {

	// fetch matching metronome_beamDB
	if metronome_beamDB, ok := backRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamDB[idx]; ok {
		_ = metronome_beamDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMetronome_beamid_atBckpTime_newID map[uint]uint
