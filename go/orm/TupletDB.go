// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tuplet_sql sql.NullBool
var dummy_Tuplet_time time.Duration
var dummy_Tuplet_sort sort.Float64Slice

// TupletAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tupletAPI
type TupletAPI struct {
	gorm.Model

	models.Tuplet_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TupletPointersEncoding TupletPointersEncoding
}

// TupletPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TupletPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Tuplet_actual is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Tuplet_actualID sql.NullInt64

	// field Tuplet_normal is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Tuplet_normalID sql.NullInt64
}

// TupletDB describes a tuplet in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tupletDB
type TupletDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tupletDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TupletPointersEncoding
}

// TupletDBs arrays tupletDBs
// swagger:response tupletDBsResponse
type TupletDBs []TupletDB

// TupletDBResponse provides response
// swagger:response tupletDBResponse
type TupletDBResponse struct {
	TupletDB
}

// TupletWOP is a Tuplet without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TupletWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Tuplet_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTupletStruct struct {
	// stores TupletDB according to their gorm ID
	Map_TupletDBID_TupletDB map[uint]*TupletDB

	// stores TupletDB ID according to Tuplet address
	Map_TupletPtr_TupletDBID map[*models.Tuplet]uint

	// stores Tuplet according to their gorm ID
	Map_TupletDBID_TupletPtr map[uint]*models.Tuplet

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTuplet *BackRepoTupletStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTuplet.stage
	return
}

func (backRepoTuplet *BackRepoTupletStruct) GetDB() *gorm.DB {
	return backRepoTuplet.db
}

// GetTupletDBFromTupletPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTuplet *BackRepoTupletStruct) GetTupletDBFromTupletPtr(tuplet *models.Tuplet) (tupletDB *TupletDB) {
	id := backRepoTuplet.Map_TupletPtr_TupletDBID[tuplet]
	tupletDB = backRepoTuplet.Map_TupletDBID_TupletDB[id]
	return
}

// BackRepoTuplet.CommitPhaseOne commits all staged instances of Tuplet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet *BackRepoTupletStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tuplet := range stage.Tuplets {
		backRepoTuplet.CommitPhaseOneInstance(tuplet)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tuplet := range backRepoTuplet.Map_TupletDBID_TupletPtr {
		if _, ok := stage.Tuplets[tuplet]; !ok {
			backRepoTuplet.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTuplet.CommitDeleteInstance commits deletion of Tuplet to the BackRepo
func (backRepoTuplet *BackRepoTupletStruct) CommitDeleteInstance(id uint) (Error error) {

	tuplet := backRepoTuplet.Map_TupletDBID_TupletPtr[id]

	// tuplet is not staged anymore, remove tupletDB
	tupletDB := backRepoTuplet.Map_TupletDBID_TupletDB[id]
	query := backRepoTuplet.db.Unscoped().Delete(&tupletDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTuplet.Map_TupletPtr_TupletDBID, tuplet)
	delete(backRepoTuplet.Map_TupletDBID_TupletPtr, id)
	delete(backRepoTuplet.Map_TupletDBID_TupletDB, id)

	return
}

// BackRepoTuplet.CommitPhaseOneInstance commits tuplet staged instances of Tuplet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet *BackRepoTupletStruct) CommitPhaseOneInstance(tuplet *models.Tuplet) (Error error) {

	// check if the tuplet is not commited yet
	if _, ok := backRepoTuplet.Map_TupletPtr_TupletDBID[tuplet]; ok {
		return
	}

	// initiate tuplet
	var tupletDB TupletDB
	tupletDB.CopyBasicFieldsFromTuplet(tuplet)

	query := backRepoTuplet.db.Create(&tupletDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTuplet.Map_TupletPtr_TupletDBID[tuplet] = tupletDB.ID
	backRepoTuplet.Map_TupletDBID_TupletPtr[tupletDB.ID] = tuplet
	backRepoTuplet.Map_TupletDBID_TupletDB[tupletDB.ID] = &tupletDB

	return
}

// BackRepoTuplet.CommitPhaseTwo commits all staged instances of Tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet *BackRepoTupletStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet := range backRepoTuplet.Map_TupletDBID_TupletPtr {
		backRepoTuplet.CommitPhaseTwoInstance(backRepo, idx, tuplet)
	}

	return
}

// BackRepoTuplet.CommitPhaseTwoInstance commits {{structname }} of models.Tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet *BackRepoTupletStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tuplet *models.Tuplet) (Error error) {

	// fetch matching tupletDB
	if tupletDB, ok := backRepoTuplet.Map_TupletDBID_TupletDB[idx]; ok {

		tupletDB.CopyBasicFieldsFromTuplet(tuplet)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value tuplet.Tuplet_actual translates to updating the tuplet.Tuplet_actualID
		tupletDB.Tuplet_actualID.Valid = true // allow for a 0 value (nil association)
		if tuplet.Tuplet_actual != nil {
			if Tuplet_actualId, ok := backRepo.BackRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet.Tuplet_actual]; ok {
				tupletDB.Tuplet_actualID.Int64 = int64(Tuplet_actualId)
				tupletDB.Tuplet_actualID.Valid = true
			}
		} else {
			tupletDB.Tuplet_actualID.Int64 = 0
			tupletDB.Tuplet_actualID.Valid = true
		}

		// commit pointer value tuplet.Tuplet_normal translates to updating the tuplet.Tuplet_normalID
		tupletDB.Tuplet_normalID.Valid = true // allow for a 0 value (nil association)
		if tuplet.Tuplet_normal != nil {
			if Tuplet_normalId, ok := backRepo.BackRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet.Tuplet_normal]; ok {
				tupletDB.Tuplet_normalID.Int64 = int64(Tuplet_normalId)
				tupletDB.Tuplet_normalID.Valid = true
			}
		} else {
			tupletDB.Tuplet_normalID.Int64 = 0
			tupletDB.Tuplet_normalID.Valid = true
		}

		query := backRepoTuplet.db.Save(&tupletDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tuplet intance %s", tuplet.Name))
		return err
	}

	return
}

// BackRepoTuplet.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTuplet *BackRepoTupletStruct) CheckoutPhaseOne() (Error error) {

	tupletDBArray := make([]TupletDB, 0)
	query := backRepoTuplet.db.Find(&tupletDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tupletInstancesToBeRemovedFromTheStage := make(map[*models.Tuplet]any)
	for key, value := range backRepoTuplet.stage.Tuplets {
		tupletInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tupletDB := range tupletDBArray {
		backRepoTuplet.CheckoutPhaseOneInstance(&tupletDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tuplet, ok := backRepoTuplet.Map_TupletDBID_TupletPtr[tupletDB.ID]
		if ok {
			delete(tupletInstancesToBeRemovedFromTheStage, tuplet)
		}
	}

	// remove from stage and back repo's 3 maps all tuplets that are not in the checkout
	for tuplet := range tupletInstancesToBeRemovedFromTheStage {
		tuplet.Unstage(backRepoTuplet.GetStage())

		// remove instance from the back repo 3 maps
		tupletID := backRepoTuplet.Map_TupletPtr_TupletDBID[tuplet]
		delete(backRepoTuplet.Map_TupletPtr_TupletDBID, tuplet)
		delete(backRepoTuplet.Map_TupletDBID_TupletDB, tupletID)
		delete(backRepoTuplet.Map_TupletDBID_TupletPtr, tupletID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tupletDB that has been found in the DB, updates the backRepo and stages the
// models version of the tupletDB
func (backRepoTuplet *BackRepoTupletStruct) CheckoutPhaseOneInstance(tupletDB *TupletDB) (Error error) {

	tuplet, ok := backRepoTuplet.Map_TupletDBID_TupletPtr[tupletDB.ID]
	if !ok {
		tuplet = new(models.Tuplet)

		backRepoTuplet.Map_TupletDBID_TupletPtr[tupletDB.ID] = tuplet
		backRepoTuplet.Map_TupletPtr_TupletDBID[tuplet] = tupletDB.ID

		// append model store with the new element
		tuplet.Name = tupletDB.Name_Data.String
		tuplet.Stage(backRepoTuplet.GetStage())
	}
	tupletDB.CopyBasicFieldsToTuplet(tuplet)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tuplet.Stage(backRepoTuplet.GetStage())

	// preserve pointer to tupletDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TupletDBID_TupletDB)[tupletDB hold variable pointers
	tupletDB_Data := *tupletDB
	preservedPtrToTuplet := &tupletDB_Data
	backRepoTuplet.Map_TupletDBID_TupletDB[tupletDB.ID] = preservedPtrToTuplet

	return
}

// BackRepoTuplet.CheckoutPhaseTwo Checkouts all staged instances of Tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet *BackRepoTupletStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tupletDB := range backRepoTuplet.Map_TupletDBID_TupletDB {
		backRepoTuplet.CheckoutPhaseTwoInstance(backRepo, tupletDB)
	}
	return
}

// BackRepoTuplet.CheckoutPhaseTwoInstance Checkouts staged instances of Tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet *BackRepoTupletStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tupletDB *TupletDB) (Error error) {

	tuplet := backRepoTuplet.Map_TupletDBID_TupletPtr[tupletDB.ID]

	tupletDB.DecodePointers(backRepo, tuplet)

	return
}

func (tupletDB *TupletDB) DecodePointers(backRepo *BackRepoStruct, tuplet *models.Tuplet) {

	// insertion point for checkout of pointer encoding
	// Tuplet_actual field
	tuplet.Tuplet_actual = nil
	if tupletDB.Tuplet_actualID.Int64 != 0 {
		tuplet.Tuplet_actual = backRepo.BackRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[uint(tupletDB.Tuplet_actualID.Int64)]
	}
	// Tuplet_normal field
	tuplet.Tuplet_normal = nil
	if tupletDB.Tuplet_normalID.Int64 != 0 {
		tuplet.Tuplet_normal = backRepo.BackRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[uint(tupletDB.Tuplet_normalID.Int64)]
	}
	return
}

// CommitTuplet allows commit of a single tuplet (if already staged)
func (backRepo *BackRepoStruct) CommitTuplet(tuplet *models.Tuplet) {
	backRepo.BackRepoTuplet.CommitPhaseOneInstance(tuplet)
	if id, ok := backRepo.BackRepoTuplet.Map_TupletPtr_TupletDBID[tuplet]; ok {
		backRepo.BackRepoTuplet.CommitPhaseTwoInstance(backRepo, id, tuplet)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTuplet allows checkout of a single tuplet (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTuplet(tuplet *models.Tuplet) {
	// check if the tuplet is staged
	if _, ok := backRepo.BackRepoTuplet.Map_TupletPtr_TupletDBID[tuplet]; ok {

		if id, ok := backRepo.BackRepoTuplet.Map_TupletPtr_TupletDBID[tuplet]; ok {
			var tupletDB TupletDB
			tupletDB.ID = id

			if err := backRepo.BackRepoTuplet.db.First(&tupletDB, id).Error; err != nil {
				log.Fatalln("CheckoutTuplet : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTuplet.CheckoutPhaseOneInstance(&tupletDB)
			backRepo.BackRepoTuplet.CheckoutPhaseTwoInstance(backRepo, &tupletDB)
		}
	}
}

// CopyBasicFieldsFromTuplet
func (tupletDB *TupletDB) CopyBasicFieldsFromTuplet(tuplet *models.Tuplet) {
	// insertion point for fields commit

	tupletDB.Name_Data.String = tuplet.Name
	tupletDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTuplet_WOP
func (tupletDB *TupletDB) CopyBasicFieldsFromTuplet_WOP(tuplet *models.Tuplet_WOP) {
	// insertion point for fields commit

	tupletDB.Name_Data.String = tuplet.Name
	tupletDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTupletWOP
func (tupletDB *TupletDB) CopyBasicFieldsFromTupletWOP(tuplet *TupletWOP) {
	// insertion point for fields commit

	tupletDB.Name_Data.String = tuplet.Name
	tupletDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTuplet
func (tupletDB *TupletDB) CopyBasicFieldsToTuplet(tuplet *models.Tuplet) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet.Name = tupletDB.Name_Data.String
}

// CopyBasicFieldsToTuplet_WOP
func (tupletDB *TupletDB) CopyBasicFieldsToTuplet_WOP(tuplet *models.Tuplet_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet.Name = tupletDB.Name_Data.String
}

// CopyBasicFieldsToTupletWOP
func (tupletDB *TupletDB) CopyBasicFieldsToTupletWOP(tuplet *TupletWOP) {
	tuplet.ID = int(tupletDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet.Name = tupletDB.Name_Data.String
}

// Backup generates a json file from a slice of all TupletDB instances in the backrepo
func (backRepoTuplet *BackRepoTupletStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TupletDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TupletDB, 0)
	for _, tupletDB := range backRepoTuplet.Map_TupletDBID_TupletDB {
		forBackup = append(forBackup, tupletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tuplet ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tuplet file", err.Error())
	}
}

// Backup generates a json file from a slice of all TupletDB instances in the backrepo
func (backRepoTuplet *BackRepoTupletStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TupletDB, 0)
	for _, tupletDB := range backRepoTuplet.Map_TupletDBID_TupletDB {
		forBackup = append(forBackup, tupletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tuplet")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tuplet_Fields, -1)
	for _, tupletDB := range forBackup {

		var tupletWOP TupletWOP
		tupletDB.CopyBasicFieldsToTupletWOP(&tupletWOP)

		row := sh.AddRow()
		row.WriteStruct(&tupletWOP, -1)
	}
}

// RestoreXL from the "Tuplet" sheet all TupletDB instances
func (backRepoTuplet *BackRepoTupletStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTupletid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tuplet"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTuplet.rowVisitorTuplet)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTuplet *BackRepoTupletStruct) rowVisitorTuplet(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tupletWOP TupletWOP
		row.ReadStruct(&tupletWOP)

		// add the unmarshalled struct to the stage
		tupletDB := new(TupletDB)
		tupletDB.CopyBasicFieldsFromTupletWOP(&tupletWOP)

		tupletDB_ID_atBackupTime := tupletDB.ID
		tupletDB.ID = 0
		query := backRepoTuplet.db.Create(tupletDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet.Map_TupletDBID_TupletDB[tupletDB.ID] = tupletDB
		BackRepoTupletid_atBckpTime_newID[tupletDB_ID_atBackupTime] = tupletDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TupletDB.json" in dirPath that stores an array
// of TupletDB and stores it in the database
// the map BackRepoTupletid_atBckpTime_newID is updated accordingly
func (backRepoTuplet *BackRepoTupletStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTupletid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TupletDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tuplet file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TupletDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TupletDBID_TupletDB
	for _, tupletDB := range forRestore {

		tupletDB_ID_atBackupTime := tupletDB.ID
		tupletDB.ID = 0
		query := backRepoTuplet.db.Create(tupletDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet.Map_TupletDBID_TupletDB[tupletDB.ID] = tupletDB
		BackRepoTupletid_atBckpTime_newID[tupletDB_ID_atBackupTime] = tupletDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tuplet file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tuplet>id_atBckpTime_newID
// to compute new index
func (backRepoTuplet *BackRepoTupletStruct) RestorePhaseTwo() {

	for _, tupletDB := range backRepoTuplet.Map_TupletDBID_TupletDB {

		// next line of code is to avert unused variable compilation error
		_ = tupletDB

		// insertion point for reindexing pointers encoding
		// reindexing Tuplet_actual field
		if tupletDB.Tuplet_actualID.Int64 != 0 {
			tupletDB.Tuplet_actualID.Int64 = int64(BackRepoTuplet_portionid_atBckpTime_newID[uint(tupletDB.Tuplet_actualID.Int64)])
			tupletDB.Tuplet_actualID.Valid = true
		}

		// reindexing Tuplet_normal field
		if tupletDB.Tuplet_normalID.Int64 != 0 {
			tupletDB.Tuplet_normalID.Int64 = int64(BackRepoTuplet_portionid_atBckpTime_newID[uint(tupletDB.Tuplet_normalID.Int64)])
			tupletDB.Tuplet_normalID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTuplet.db.Model(tupletDB).Updates(*tupletDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTuplet.ResetReversePointers commits all staged instances of Tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet *BackRepoTupletStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet := range backRepoTuplet.Map_TupletDBID_TupletPtr {
		backRepoTuplet.ResetReversePointersInstance(backRepo, idx, tuplet)
	}

	return
}

func (backRepoTuplet *BackRepoTupletStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tuplet *models.Tuplet) (Error error) {

	// fetch matching tupletDB
	if tupletDB, ok := backRepoTuplet.Map_TupletDBID_TupletDB[idx]; ok {
		_ = tupletDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTupletid_atBckpTime_newID map[uint]uint
