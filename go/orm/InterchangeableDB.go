// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Interchangeable_sql sql.NullBool
var dummy_Interchangeable_time time.Duration
var dummy_Interchangeable_sort sort.Float64Slice

// InterchangeableAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model interchangeableAPI
type InterchangeableAPI struct {
	gorm.Model

	models.Interchangeable_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	InterchangeablePointersEncoding InterchangeablePointersEncoding
}

// InterchangeablePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type InterchangeablePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// InterchangeableDB describes a interchangeable in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model interchangeableDB
type InterchangeableDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field interchangeableDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	InterchangeablePointersEncoding
}

// InterchangeableDBs arrays interchangeableDBs
// swagger:response interchangeableDBsResponse
type InterchangeableDBs []InterchangeableDB

// InterchangeableDBResponse provides response
// swagger:response interchangeableDBResponse
type InterchangeableDBResponse struct {
	InterchangeableDB
}

// InterchangeableWOP is a Interchangeable without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type InterchangeableWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Interchangeable_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoInterchangeableStruct struct {
	// stores InterchangeableDB according to their gorm ID
	Map_InterchangeableDBID_InterchangeableDB map[uint]*InterchangeableDB

	// stores InterchangeableDB ID according to Interchangeable address
	Map_InterchangeablePtr_InterchangeableDBID map[*models.Interchangeable]uint

	// stores Interchangeable according to their gorm ID
	Map_InterchangeableDBID_InterchangeablePtr map[uint]*models.Interchangeable

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoInterchangeable *BackRepoInterchangeableStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoInterchangeable.stage
	return
}

func (backRepoInterchangeable *BackRepoInterchangeableStruct) GetDB() *gorm.DB {
	return backRepoInterchangeable.db
}

// GetInterchangeableDBFromInterchangeablePtr is a handy function to access the back repo instance from the stage instance
func (backRepoInterchangeable *BackRepoInterchangeableStruct) GetInterchangeableDBFromInterchangeablePtr(interchangeable *models.Interchangeable) (interchangeableDB *InterchangeableDB) {
	id := backRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable]
	interchangeableDB = backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[id]
	return
}

// BackRepoInterchangeable.CommitPhaseOne commits all staged instances of Interchangeable to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for interchangeable := range stage.Interchangeables {
		backRepoInterchangeable.CommitPhaseOneInstance(interchangeable)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, interchangeable := range backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr {
		if _, ok := stage.Interchangeables[interchangeable]; !ok {
			backRepoInterchangeable.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoInterchangeable.CommitDeleteInstance commits deletion of Interchangeable to the BackRepo
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CommitDeleteInstance(id uint) (Error error) {

	interchangeable := backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr[id]

	// interchangeable is not staged anymore, remove interchangeableDB
	interchangeableDB := backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[id]
	query := backRepoInterchangeable.db.Unscoped().Delete(&interchangeableDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID, interchangeable)
	delete(backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr, id)
	delete(backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB, id)

	return
}

// BackRepoInterchangeable.CommitPhaseOneInstance commits interchangeable staged instances of Interchangeable to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CommitPhaseOneInstance(interchangeable *models.Interchangeable) (Error error) {

	// check if the interchangeable is not commited yet
	if _, ok := backRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable]; ok {
		return
	}

	// initiate interchangeable
	var interchangeableDB InterchangeableDB
	interchangeableDB.CopyBasicFieldsFromInterchangeable(interchangeable)

	query := backRepoInterchangeable.db.Create(&interchangeableDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable] = interchangeableDB.ID
	backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr[interchangeableDB.ID] = interchangeable
	backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[interchangeableDB.ID] = &interchangeableDB

	return
}

// BackRepoInterchangeable.CommitPhaseTwo commits all staged instances of Interchangeable to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, interchangeable := range backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr {
		backRepoInterchangeable.CommitPhaseTwoInstance(backRepo, idx, interchangeable)
	}

	return
}

// BackRepoInterchangeable.CommitPhaseTwoInstance commits {{structname }} of models.Interchangeable to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, interchangeable *models.Interchangeable) (Error error) {

	// fetch matching interchangeableDB
	if interchangeableDB, ok := backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[idx]; ok {

		interchangeableDB.CopyBasicFieldsFromInterchangeable(interchangeable)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoInterchangeable.db.Save(&interchangeableDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Interchangeable intance %s", interchangeable.Name))
		return err
	}

	return
}

// BackRepoInterchangeable.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CheckoutPhaseOne() (Error error) {

	interchangeableDBArray := make([]InterchangeableDB, 0)
	query := backRepoInterchangeable.db.Find(&interchangeableDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	interchangeableInstancesToBeRemovedFromTheStage := make(map[*models.Interchangeable]any)
	for key, value := range backRepoInterchangeable.stage.Interchangeables {
		interchangeableInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, interchangeableDB := range interchangeableDBArray {
		backRepoInterchangeable.CheckoutPhaseOneInstance(&interchangeableDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		interchangeable, ok := backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr[interchangeableDB.ID]
		if ok {
			delete(interchangeableInstancesToBeRemovedFromTheStage, interchangeable)
		}
	}

	// remove from stage and back repo's 3 maps all interchangeables that are not in the checkout
	for interchangeable := range interchangeableInstancesToBeRemovedFromTheStage {
		interchangeable.Unstage(backRepoInterchangeable.GetStage())

		// remove instance from the back repo 3 maps
		interchangeableID := backRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable]
		delete(backRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID, interchangeable)
		delete(backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB, interchangeableID)
		delete(backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr, interchangeableID)
	}

	return
}

// CheckoutPhaseOneInstance takes a interchangeableDB that has been found in the DB, updates the backRepo and stages the
// models version of the interchangeableDB
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CheckoutPhaseOneInstance(interchangeableDB *InterchangeableDB) (Error error) {

	interchangeable, ok := backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr[interchangeableDB.ID]
	if !ok {
		interchangeable = new(models.Interchangeable)

		backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr[interchangeableDB.ID] = interchangeable
		backRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable] = interchangeableDB.ID

		// append model store with the new element
		interchangeable.Name = interchangeableDB.Name_Data.String
		interchangeable.Stage(backRepoInterchangeable.GetStage())
	}
	interchangeableDB.CopyBasicFieldsToInterchangeable(interchangeable)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	interchangeable.Stage(backRepoInterchangeable.GetStage())

	// preserve pointer to interchangeableDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_InterchangeableDBID_InterchangeableDB)[interchangeableDB hold variable pointers
	interchangeableDB_Data := *interchangeableDB
	preservedPtrToInterchangeable := &interchangeableDB_Data
	backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[interchangeableDB.ID] = preservedPtrToInterchangeable

	return
}

// BackRepoInterchangeable.CheckoutPhaseTwo Checkouts all staged instances of Interchangeable to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, interchangeableDB := range backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB {
		backRepoInterchangeable.CheckoutPhaseTwoInstance(backRepo, interchangeableDB)
	}
	return
}

// BackRepoInterchangeable.CheckoutPhaseTwoInstance Checkouts staged instances of Interchangeable to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInterchangeable *BackRepoInterchangeableStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, interchangeableDB *InterchangeableDB) (Error error) {

	interchangeable := backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr[interchangeableDB.ID]

	interchangeableDB.DecodePointers(backRepo, interchangeable)

	return
}

func (interchangeableDB *InterchangeableDB) DecodePointers(backRepo *BackRepoStruct, interchangeable *models.Interchangeable) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitInterchangeable allows commit of a single interchangeable (if already staged)
func (backRepo *BackRepoStruct) CommitInterchangeable(interchangeable *models.Interchangeable) {
	backRepo.BackRepoInterchangeable.CommitPhaseOneInstance(interchangeable)
	if id, ok := backRepo.BackRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable]; ok {
		backRepo.BackRepoInterchangeable.CommitPhaseTwoInstance(backRepo, id, interchangeable)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitInterchangeable allows checkout of a single interchangeable (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutInterchangeable(interchangeable *models.Interchangeable) {
	// check if the interchangeable is staged
	if _, ok := backRepo.BackRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable]; ok {

		if id, ok := backRepo.BackRepoInterchangeable.Map_InterchangeablePtr_InterchangeableDBID[interchangeable]; ok {
			var interchangeableDB InterchangeableDB
			interchangeableDB.ID = id

			if err := backRepo.BackRepoInterchangeable.db.First(&interchangeableDB, id).Error; err != nil {
				log.Fatalln("CheckoutInterchangeable : Problem with getting object with id:", id)
			}
			backRepo.BackRepoInterchangeable.CheckoutPhaseOneInstance(&interchangeableDB)
			backRepo.BackRepoInterchangeable.CheckoutPhaseTwoInstance(backRepo, &interchangeableDB)
		}
	}
}

// CopyBasicFieldsFromInterchangeable
func (interchangeableDB *InterchangeableDB) CopyBasicFieldsFromInterchangeable(interchangeable *models.Interchangeable) {
	// insertion point for fields commit

	interchangeableDB.Name_Data.String = interchangeable.Name
	interchangeableDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInterchangeable_WOP
func (interchangeableDB *InterchangeableDB) CopyBasicFieldsFromInterchangeable_WOP(interchangeable *models.Interchangeable_WOP) {
	// insertion point for fields commit

	interchangeableDB.Name_Data.String = interchangeable.Name
	interchangeableDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInterchangeableWOP
func (interchangeableDB *InterchangeableDB) CopyBasicFieldsFromInterchangeableWOP(interchangeable *InterchangeableWOP) {
	// insertion point for fields commit

	interchangeableDB.Name_Data.String = interchangeable.Name
	interchangeableDB.Name_Data.Valid = true
}

// CopyBasicFieldsToInterchangeable
func (interchangeableDB *InterchangeableDB) CopyBasicFieldsToInterchangeable(interchangeable *models.Interchangeable) {
	// insertion point for checkout of basic fields (back repo to stage)
	interchangeable.Name = interchangeableDB.Name_Data.String
}

// CopyBasicFieldsToInterchangeable_WOP
func (interchangeableDB *InterchangeableDB) CopyBasicFieldsToInterchangeable_WOP(interchangeable *models.Interchangeable_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	interchangeable.Name = interchangeableDB.Name_Data.String
}

// CopyBasicFieldsToInterchangeableWOP
func (interchangeableDB *InterchangeableDB) CopyBasicFieldsToInterchangeableWOP(interchangeable *InterchangeableWOP) {
	interchangeable.ID = int(interchangeableDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	interchangeable.Name = interchangeableDB.Name_Data.String
}

// Backup generates a json file from a slice of all InterchangeableDB instances in the backrepo
func (backRepoInterchangeable *BackRepoInterchangeableStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "InterchangeableDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InterchangeableDB, 0)
	for _, interchangeableDB := range backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB {
		forBackup = append(forBackup, interchangeableDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Interchangeable ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Interchangeable file", err.Error())
	}
}

// Backup generates a json file from a slice of all InterchangeableDB instances in the backrepo
func (backRepoInterchangeable *BackRepoInterchangeableStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InterchangeableDB, 0)
	for _, interchangeableDB := range backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB {
		forBackup = append(forBackup, interchangeableDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Interchangeable")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Interchangeable_Fields, -1)
	for _, interchangeableDB := range forBackup {

		var interchangeableWOP InterchangeableWOP
		interchangeableDB.CopyBasicFieldsToInterchangeableWOP(&interchangeableWOP)

		row := sh.AddRow()
		row.WriteStruct(&interchangeableWOP, -1)
	}
}

// RestoreXL from the "Interchangeable" sheet all InterchangeableDB instances
func (backRepoInterchangeable *BackRepoInterchangeableStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoInterchangeableid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Interchangeable"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoInterchangeable.rowVisitorInterchangeable)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoInterchangeable *BackRepoInterchangeableStruct) rowVisitorInterchangeable(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var interchangeableWOP InterchangeableWOP
		row.ReadStruct(&interchangeableWOP)

		// add the unmarshalled struct to the stage
		interchangeableDB := new(InterchangeableDB)
		interchangeableDB.CopyBasicFieldsFromInterchangeableWOP(&interchangeableWOP)

		interchangeableDB_ID_atBackupTime := interchangeableDB.ID
		interchangeableDB.ID = 0
		query := backRepoInterchangeable.db.Create(interchangeableDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[interchangeableDB.ID] = interchangeableDB
		BackRepoInterchangeableid_atBckpTime_newID[interchangeableDB_ID_atBackupTime] = interchangeableDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "InterchangeableDB.json" in dirPath that stores an array
// of InterchangeableDB and stores it in the database
// the map BackRepoInterchangeableid_atBckpTime_newID is updated accordingly
func (backRepoInterchangeable *BackRepoInterchangeableStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoInterchangeableid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "InterchangeableDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Interchangeable file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*InterchangeableDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_InterchangeableDBID_InterchangeableDB
	for _, interchangeableDB := range forRestore {

		interchangeableDB_ID_atBackupTime := interchangeableDB.ID
		interchangeableDB.ID = 0
		query := backRepoInterchangeable.db.Create(interchangeableDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[interchangeableDB.ID] = interchangeableDB
		BackRepoInterchangeableid_atBckpTime_newID[interchangeableDB_ID_atBackupTime] = interchangeableDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Interchangeable file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Interchangeable>id_atBckpTime_newID
// to compute new index
func (backRepoInterchangeable *BackRepoInterchangeableStruct) RestorePhaseTwo() {

	for _, interchangeableDB := range backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB {

		// next line of code is to avert unused variable compilation error
		_ = interchangeableDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoInterchangeable.db.Model(interchangeableDB).Updates(*interchangeableDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoInterchangeable.ResetReversePointers commits all staged instances of Interchangeable to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInterchangeable *BackRepoInterchangeableStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, interchangeable := range backRepoInterchangeable.Map_InterchangeableDBID_InterchangeablePtr {
		backRepoInterchangeable.ResetReversePointersInstance(backRepo, idx, interchangeable)
	}

	return
}

func (backRepoInterchangeable *BackRepoInterchangeableStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, interchangeable *models.Interchangeable) (Error error) {

	// fetch matching interchangeableDB
	if interchangeableDB, ok := backRepoInterchangeable.Map_InterchangeableDBID_InterchangeableDB[idx]; ok {
		_ = interchangeableDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoInterchangeableid_atBckpTime_newID map[uint]uint
