// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Strong_accent_sql sql.NullBool
var dummy_Strong_accent_time time.Duration
var dummy_Strong_accent_sort sort.Float64Slice

// Strong_accentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model strong_accentAPI
type Strong_accentAPI struct {
	gorm.Model

	models.Strong_accent_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Strong_accentPointersEncoding Strong_accentPointersEncoding
}

// Strong_accentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Strong_accentPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Strong_accentDB describes a strong_accent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model strong_accentDB
type Strong_accentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field strong_accentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Strong_accentPointersEncoding
}

// Strong_accentDBs arrays strong_accentDBs
// swagger:response strong_accentDBsResponse
type Strong_accentDBs []Strong_accentDB

// Strong_accentDBResponse provides response
// swagger:response strong_accentDBResponse
type Strong_accentDBResponse struct {
	Strong_accentDB
}

// Strong_accentWOP is a Strong_accent without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Strong_accentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Strong_accent_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoStrong_accentStruct struct {
	// stores Strong_accentDB according to their gorm ID
	Map_Strong_accentDBID_Strong_accentDB map[uint]*Strong_accentDB

	// stores Strong_accentDB ID according to Strong_accent address
	Map_Strong_accentPtr_Strong_accentDBID map[*models.Strong_accent]uint

	// stores Strong_accent according to their gorm ID
	Map_Strong_accentDBID_Strong_accentPtr map[uint]*models.Strong_accent

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoStrong_accent *BackRepoStrong_accentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoStrong_accent.stage
	return
}

func (backRepoStrong_accent *BackRepoStrong_accentStruct) GetDB() *gorm.DB {
	return backRepoStrong_accent.db
}

// GetStrong_accentDBFromStrong_accentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoStrong_accent *BackRepoStrong_accentStruct) GetStrong_accentDBFromStrong_accentPtr(strong_accent *models.Strong_accent) (strong_accentDB *Strong_accentDB) {
	id := backRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent]
	strong_accentDB = backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[id]
	return
}

// BackRepoStrong_accent.CommitPhaseOne commits all staged instances of Strong_accent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for strong_accent := range stage.Strong_accents {
		backRepoStrong_accent.CommitPhaseOneInstance(strong_accent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, strong_accent := range backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr {
		if _, ok := stage.Strong_accents[strong_accent]; !ok {
			backRepoStrong_accent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStrong_accent.CommitDeleteInstance commits deletion of Strong_accent to the BackRepo
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CommitDeleteInstance(id uint) (Error error) {

	strong_accent := backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr[id]

	// strong_accent is not staged anymore, remove strong_accentDB
	strong_accentDB := backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[id]
	query := backRepoStrong_accent.db.Unscoped().Delete(&strong_accentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID, strong_accent)
	delete(backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr, id)
	delete(backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB, id)

	return
}

// BackRepoStrong_accent.CommitPhaseOneInstance commits strong_accent staged instances of Strong_accent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CommitPhaseOneInstance(strong_accent *models.Strong_accent) (Error error) {

	// check if the strong_accent is not commited yet
	if _, ok := backRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent]; ok {
		return
	}

	// initiate strong_accent
	var strong_accentDB Strong_accentDB
	strong_accentDB.CopyBasicFieldsFromStrong_accent(strong_accent)

	query := backRepoStrong_accent.db.Create(&strong_accentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent] = strong_accentDB.ID
	backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr[strong_accentDB.ID] = strong_accent
	backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[strong_accentDB.ID] = &strong_accentDB

	return
}

// BackRepoStrong_accent.CommitPhaseTwo commits all staged instances of Strong_accent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, strong_accent := range backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr {
		backRepoStrong_accent.CommitPhaseTwoInstance(backRepo, idx, strong_accent)
	}

	return
}

// BackRepoStrong_accent.CommitPhaseTwoInstance commits {{structname }} of models.Strong_accent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, strong_accent *models.Strong_accent) (Error error) {

	// fetch matching strong_accentDB
	if strong_accentDB, ok := backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[idx]; ok {

		strong_accentDB.CopyBasicFieldsFromStrong_accent(strong_accent)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoStrong_accent.db.Save(&strong_accentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Strong_accent intance %s", strong_accent.Name))
		return err
	}

	return
}

// BackRepoStrong_accent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CheckoutPhaseOne() (Error error) {

	strong_accentDBArray := make([]Strong_accentDB, 0)
	query := backRepoStrong_accent.db.Find(&strong_accentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	strong_accentInstancesToBeRemovedFromTheStage := make(map[*models.Strong_accent]any)
	for key, value := range backRepoStrong_accent.stage.Strong_accents {
		strong_accentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, strong_accentDB := range strong_accentDBArray {
		backRepoStrong_accent.CheckoutPhaseOneInstance(&strong_accentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		strong_accent, ok := backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr[strong_accentDB.ID]
		if ok {
			delete(strong_accentInstancesToBeRemovedFromTheStage, strong_accent)
		}
	}

	// remove from stage and back repo's 3 maps all strong_accents that are not in the checkout
	for strong_accent := range strong_accentInstancesToBeRemovedFromTheStage {
		strong_accent.Unstage(backRepoStrong_accent.GetStage())

		// remove instance from the back repo 3 maps
		strong_accentID := backRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent]
		delete(backRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID, strong_accent)
		delete(backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB, strong_accentID)
		delete(backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr, strong_accentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a strong_accentDB that has been found in the DB, updates the backRepo and stages the
// models version of the strong_accentDB
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CheckoutPhaseOneInstance(strong_accentDB *Strong_accentDB) (Error error) {

	strong_accent, ok := backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr[strong_accentDB.ID]
	if !ok {
		strong_accent = new(models.Strong_accent)

		backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr[strong_accentDB.ID] = strong_accent
		backRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent] = strong_accentDB.ID

		// append model store with the new element
		strong_accent.Name = strong_accentDB.Name_Data.String
		strong_accent.Stage(backRepoStrong_accent.GetStage())
	}
	strong_accentDB.CopyBasicFieldsToStrong_accent(strong_accent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	strong_accent.Stage(backRepoStrong_accent.GetStage())

	// preserve pointer to strong_accentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Strong_accentDBID_Strong_accentDB)[strong_accentDB hold variable pointers
	strong_accentDB_Data := *strong_accentDB
	preservedPtrToStrong_accent := &strong_accentDB_Data
	backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[strong_accentDB.ID] = preservedPtrToStrong_accent

	return
}

// BackRepoStrong_accent.CheckoutPhaseTwo Checkouts all staged instances of Strong_accent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, strong_accentDB := range backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB {
		backRepoStrong_accent.CheckoutPhaseTwoInstance(backRepo, strong_accentDB)
	}
	return
}

// BackRepoStrong_accent.CheckoutPhaseTwoInstance Checkouts staged instances of Strong_accent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStrong_accent *BackRepoStrong_accentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, strong_accentDB *Strong_accentDB) (Error error) {

	strong_accent := backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr[strong_accentDB.ID]

	strong_accentDB.DecodePointers(backRepo, strong_accent)

	return
}

func (strong_accentDB *Strong_accentDB) DecodePointers(backRepo *BackRepoStruct, strong_accent *models.Strong_accent) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStrong_accent allows commit of a single strong_accent (if already staged)
func (backRepo *BackRepoStruct) CommitStrong_accent(strong_accent *models.Strong_accent) {
	backRepo.BackRepoStrong_accent.CommitPhaseOneInstance(strong_accent)
	if id, ok := backRepo.BackRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent]; ok {
		backRepo.BackRepoStrong_accent.CommitPhaseTwoInstance(backRepo, id, strong_accent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStrong_accent allows checkout of a single strong_accent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStrong_accent(strong_accent *models.Strong_accent) {
	// check if the strong_accent is staged
	if _, ok := backRepo.BackRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent]; ok {

		if id, ok := backRepo.BackRepoStrong_accent.Map_Strong_accentPtr_Strong_accentDBID[strong_accent]; ok {
			var strong_accentDB Strong_accentDB
			strong_accentDB.ID = id

			if err := backRepo.BackRepoStrong_accent.db.First(&strong_accentDB, id).Error; err != nil {
				log.Fatalln("CheckoutStrong_accent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStrong_accent.CheckoutPhaseOneInstance(&strong_accentDB)
			backRepo.BackRepoStrong_accent.CheckoutPhaseTwoInstance(backRepo, &strong_accentDB)
		}
	}
}

// CopyBasicFieldsFromStrong_accent
func (strong_accentDB *Strong_accentDB) CopyBasicFieldsFromStrong_accent(strong_accent *models.Strong_accent) {
	// insertion point for fields commit

	strong_accentDB.Name_Data.String = strong_accent.Name
	strong_accentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStrong_accent_WOP
func (strong_accentDB *Strong_accentDB) CopyBasicFieldsFromStrong_accent_WOP(strong_accent *models.Strong_accent_WOP) {
	// insertion point for fields commit

	strong_accentDB.Name_Data.String = strong_accent.Name
	strong_accentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStrong_accentWOP
func (strong_accentDB *Strong_accentDB) CopyBasicFieldsFromStrong_accentWOP(strong_accent *Strong_accentWOP) {
	// insertion point for fields commit

	strong_accentDB.Name_Data.String = strong_accent.Name
	strong_accentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToStrong_accent
func (strong_accentDB *Strong_accentDB) CopyBasicFieldsToStrong_accent(strong_accent *models.Strong_accent) {
	// insertion point for checkout of basic fields (back repo to stage)
	strong_accent.Name = strong_accentDB.Name_Data.String
}

// CopyBasicFieldsToStrong_accent_WOP
func (strong_accentDB *Strong_accentDB) CopyBasicFieldsToStrong_accent_WOP(strong_accent *models.Strong_accent_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	strong_accent.Name = strong_accentDB.Name_Data.String
}

// CopyBasicFieldsToStrong_accentWOP
func (strong_accentDB *Strong_accentDB) CopyBasicFieldsToStrong_accentWOP(strong_accent *Strong_accentWOP) {
	strong_accent.ID = int(strong_accentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	strong_accent.Name = strong_accentDB.Name_Data.String
}

// Backup generates a json file from a slice of all Strong_accentDB instances in the backrepo
func (backRepoStrong_accent *BackRepoStrong_accentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Strong_accentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Strong_accentDB, 0)
	for _, strong_accentDB := range backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB {
		forBackup = append(forBackup, strong_accentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Strong_accent ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Strong_accent file", err.Error())
	}
}

// Backup generates a json file from a slice of all Strong_accentDB instances in the backrepo
func (backRepoStrong_accent *BackRepoStrong_accentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Strong_accentDB, 0)
	for _, strong_accentDB := range backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB {
		forBackup = append(forBackup, strong_accentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Strong_accent")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Strong_accent_Fields, -1)
	for _, strong_accentDB := range forBackup {

		var strong_accentWOP Strong_accentWOP
		strong_accentDB.CopyBasicFieldsToStrong_accentWOP(&strong_accentWOP)

		row := sh.AddRow()
		row.WriteStruct(&strong_accentWOP, -1)
	}
}

// RestoreXL from the "Strong_accent" sheet all Strong_accentDB instances
func (backRepoStrong_accent *BackRepoStrong_accentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStrong_accentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Strong_accent"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStrong_accent.rowVisitorStrong_accent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStrong_accent *BackRepoStrong_accentStruct) rowVisitorStrong_accent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var strong_accentWOP Strong_accentWOP
		row.ReadStruct(&strong_accentWOP)

		// add the unmarshalled struct to the stage
		strong_accentDB := new(Strong_accentDB)
		strong_accentDB.CopyBasicFieldsFromStrong_accentWOP(&strong_accentWOP)

		strong_accentDB_ID_atBackupTime := strong_accentDB.ID
		strong_accentDB.ID = 0
		query := backRepoStrong_accent.db.Create(strong_accentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[strong_accentDB.ID] = strong_accentDB
		BackRepoStrong_accentid_atBckpTime_newID[strong_accentDB_ID_atBackupTime] = strong_accentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Strong_accentDB.json" in dirPath that stores an array
// of Strong_accentDB and stores it in the database
// the map BackRepoStrong_accentid_atBckpTime_newID is updated accordingly
func (backRepoStrong_accent *BackRepoStrong_accentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStrong_accentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Strong_accentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Strong_accent file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Strong_accentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Strong_accentDBID_Strong_accentDB
	for _, strong_accentDB := range forRestore {

		strong_accentDB_ID_atBackupTime := strong_accentDB.ID
		strong_accentDB.ID = 0
		query := backRepoStrong_accent.db.Create(strong_accentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[strong_accentDB.ID] = strong_accentDB
		BackRepoStrong_accentid_atBckpTime_newID[strong_accentDB_ID_atBackupTime] = strong_accentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Strong_accent file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Strong_accent>id_atBckpTime_newID
// to compute new index
func (backRepoStrong_accent *BackRepoStrong_accentStruct) RestorePhaseTwo() {

	for _, strong_accentDB := range backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB {

		// next line of code is to avert unused variable compilation error
		_ = strong_accentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoStrong_accent.db.Model(strong_accentDB).Updates(*strong_accentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoStrong_accent.ResetReversePointers commits all staged instances of Strong_accent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStrong_accent *BackRepoStrong_accentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, strong_accent := range backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentPtr {
		backRepoStrong_accent.ResetReversePointersInstance(backRepo, idx, strong_accent)
	}

	return
}

func (backRepoStrong_accent *BackRepoStrong_accentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, strong_accent *models.Strong_accent) (Error error) {

	// fetch matching strong_accentDB
	if strong_accentDB, ok := backRepoStrong_accent.Map_Strong_accentDBID_Strong_accentDB[idx]; ok {
		_ = strong_accentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStrong_accentid_atBckpTime_newID map[uint]uint
