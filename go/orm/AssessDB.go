// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Assess_sql sql.NullBool
var dummy_Assess_time time.Duration
var dummy_Assess_sort sort.Float64Slice

// AssessAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model assessAPI
type AssessAPI struct {
	gorm.Model

	models.Assess_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AssessPointersEncoding AssessPointersEncoding
}

// AssessPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AssessPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// AssessDB describes a assess in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model assessDB
type AssessDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field assessDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AssessPointersEncoding
}

// AssessDBs arrays assessDBs
// swagger:response assessDBsResponse
type AssessDBs []AssessDB

// AssessDBResponse provides response
// swagger:response assessDBResponse
type AssessDBResponse struct {
	AssessDB
}

// AssessWOP is a Assess without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AssessWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Assess_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAssessStruct struct {
	// stores AssessDB according to their gorm ID
	Map_AssessDBID_AssessDB map[uint]*AssessDB

	// stores AssessDB ID according to Assess address
	Map_AssessPtr_AssessDBID map[*models.Assess]uint

	// stores Assess according to their gorm ID
	Map_AssessDBID_AssessPtr map[uint]*models.Assess

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAssess *BackRepoAssessStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAssess.stage
	return
}

func (backRepoAssess *BackRepoAssessStruct) GetDB() *gorm.DB {
	return backRepoAssess.db
}

// GetAssessDBFromAssessPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAssess *BackRepoAssessStruct) GetAssessDBFromAssessPtr(assess *models.Assess) (assessDB *AssessDB) {
	id := backRepoAssess.Map_AssessPtr_AssessDBID[assess]
	assessDB = backRepoAssess.Map_AssessDBID_AssessDB[id]
	return
}

// BackRepoAssess.CommitPhaseOne commits all staged instances of Assess to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAssess *BackRepoAssessStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for assess := range stage.Assesss {
		backRepoAssess.CommitPhaseOneInstance(assess)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, assess := range backRepoAssess.Map_AssessDBID_AssessPtr {
		if _, ok := stage.Assesss[assess]; !ok {
			backRepoAssess.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAssess.CommitDeleteInstance commits deletion of Assess to the BackRepo
func (backRepoAssess *BackRepoAssessStruct) CommitDeleteInstance(id uint) (Error error) {

	assess := backRepoAssess.Map_AssessDBID_AssessPtr[id]

	// assess is not staged anymore, remove assessDB
	assessDB := backRepoAssess.Map_AssessDBID_AssessDB[id]
	query := backRepoAssess.db.Unscoped().Delete(&assessDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAssess.Map_AssessPtr_AssessDBID, assess)
	delete(backRepoAssess.Map_AssessDBID_AssessPtr, id)
	delete(backRepoAssess.Map_AssessDBID_AssessDB, id)

	return
}

// BackRepoAssess.CommitPhaseOneInstance commits assess staged instances of Assess to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAssess *BackRepoAssessStruct) CommitPhaseOneInstance(assess *models.Assess) (Error error) {

	// check if the assess is not commited yet
	if _, ok := backRepoAssess.Map_AssessPtr_AssessDBID[assess]; ok {
		return
	}

	// initiate assess
	var assessDB AssessDB
	assessDB.CopyBasicFieldsFromAssess(assess)

	query := backRepoAssess.db.Create(&assessDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAssess.Map_AssessPtr_AssessDBID[assess] = assessDB.ID
	backRepoAssess.Map_AssessDBID_AssessPtr[assessDB.ID] = assess
	backRepoAssess.Map_AssessDBID_AssessDB[assessDB.ID] = &assessDB

	return
}

// BackRepoAssess.CommitPhaseTwo commits all staged instances of Assess to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAssess *BackRepoAssessStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, assess := range backRepoAssess.Map_AssessDBID_AssessPtr {
		backRepoAssess.CommitPhaseTwoInstance(backRepo, idx, assess)
	}

	return
}

// BackRepoAssess.CommitPhaseTwoInstance commits {{structname }} of models.Assess to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAssess *BackRepoAssessStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, assess *models.Assess) (Error error) {

	// fetch matching assessDB
	if assessDB, ok := backRepoAssess.Map_AssessDBID_AssessDB[idx]; ok {

		assessDB.CopyBasicFieldsFromAssess(assess)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoAssess.db.Save(&assessDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Assess intance %s", assess.Name))
		return err
	}

	return
}

// BackRepoAssess.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAssess *BackRepoAssessStruct) CheckoutPhaseOne() (Error error) {

	assessDBArray := make([]AssessDB, 0)
	query := backRepoAssess.db.Find(&assessDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	assessInstancesToBeRemovedFromTheStage := make(map[*models.Assess]any)
	for key, value := range backRepoAssess.stage.Assesss {
		assessInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, assessDB := range assessDBArray {
		backRepoAssess.CheckoutPhaseOneInstance(&assessDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		assess, ok := backRepoAssess.Map_AssessDBID_AssessPtr[assessDB.ID]
		if ok {
			delete(assessInstancesToBeRemovedFromTheStage, assess)
		}
	}

	// remove from stage and back repo's 3 maps all assesss that are not in the checkout
	for assess := range assessInstancesToBeRemovedFromTheStage {
		assess.Unstage(backRepoAssess.GetStage())

		// remove instance from the back repo 3 maps
		assessID := backRepoAssess.Map_AssessPtr_AssessDBID[assess]
		delete(backRepoAssess.Map_AssessPtr_AssessDBID, assess)
		delete(backRepoAssess.Map_AssessDBID_AssessDB, assessID)
		delete(backRepoAssess.Map_AssessDBID_AssessPtr, assessID)
	}

	return
}

// CheckoutPhaseOneInstance takes a assessDB that has been found in the DB, updates the backRepo and stages the
// models version of the assessDB
func (backRepoAssess *BackRepoAssessStruct) CheckoutPhaseOneInstance(assessDB *AssessDB) (Error error) {

	assess, ok := backRepoAssess.Map_AssessDBID_AssessPtr[assessDB.ID]
	if !ok {
		assess = new(models.Assess)

		backRepoAssess.Map_AssessDBID_AssessPtr[assessDB.ID] = assess
		backRepoAssess.Map_AssessPtr_AssessDBID[assess] = assessDB.ID

		// append model store with the new element
		assess.Name = assessDB.Name_Data.String
		assess.Stage(backRepoAssess.GetStage())
	}
	assessDB.CopyBasicFieldsToAssess(assess)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	assess.Stage(backRepoAssess.GetStage())

	// preserve pointer to assessDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AssessDBID_AssessDB)[assessDB hold variable pointers
	assessDB_Data := *assessDB
	preservedPtrToAssess := &assessDB_Data
	backRepoAssess.Map_AssessDBID_AssessDB[assessDB.ID] = preservedPtrToAssess

	return
}

// BackRepoAssess.CheckoutPhaseTwo Checkouts all staged instances of Assess to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAssess *BackRepoAssessStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, assessDB := range backRepoAssess.Map_AssessDBID_AssessDB {
		backRepoAssess.CheckoutPhaseTwoInstance(backRepo, assessDB)
	}
	return
}

// BackRepoAssess.CheckoutPhaseTwoInstance Checkouts staged instances of Assess to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAssess *BackRepoAssessStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, assessDB *AssessDB) (Error error) {

	assess := backRepoAssess.Map_AssessDBID_AssessPtr[assessDB.ID]

	assessDB.DecodePointers(backRepo, assess)

	return
}

func (assessDB *AssessDB) DecodePointers(backRepo *BackRepoStruct, assess *models.Assess) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitAssess allows commit of a single assess (if already staged)
func (backRepo *BackRepoStruct) CommitAssess(assess *models.Assess) {
	backRepo.BackRepoAssess.CommitPhaseOneInstance(assess)
	if id, ok := backRepo.BackRepoAssess.Map_AssessPtr_AssessDBID[assess]; ok {
		backRepo.BackRepoAssess.CommitPhaseTwoInstance(backRepo, id, assess)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAssess allows checkout of a single assess (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAssess(assess *models.Assess) {
	// check if the assess is staged
	if _, ok := backRepo.BackRepoAssess.Map_AssessPtr_AssessDBID[assess]; ok {

		if id, ok := backRepo.BackRepoAssess.Map_AssessPtr_AssessDBID[assess]; ok {
			var assessDB AssessDB
			assessDB.ID = id

			if err := backRepo.BackRepoAssess.db.First(&assessDB, id).Error; err != nil {
				log.Fatalln("CheckoutAssess : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAssess.CheckoutPhaseOneInstance(&assessDB)
			backRepo.BackRepoAssess.CheckoutPhaseTwoInstance(backRepo, &assessDB)
		}
	}
}

// CopyBasicFieldsFromAssess
func (assessDB *AssessDB) CopyBasicFieldsFromAssess(assess *models.Assess) {
	// insertion point for fields commit

	assessDB.Name_Data.String = assess.Name
	assessDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAssess_WOP
func (assessDB *AssessDB) CopyBasicFieldsFromAssess_WOP(assess *models.Assess_WOP) {
	// insertion point for fields commit

	assessDB.Name_Data.String = assess.Name
	assessDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAssessWOP
func (assessDB *AssessDB) CopyBasicFieldsFromAssessWOP(assess *AssessWOP) {
	// insertion point for fields commit

	assessDB.Name_Data.String = assess.Name
	assessDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAssess
func (assessDB *AssessDB) CopyBasicFieldsToAssess(assess *models.Assess) {
	// insertion point for checkout of basic fields (back repo to stage)
	assess.Name = assessDB.Name_Data.String
}

// CopyBasicFieldsToAssess_WOP
func (assessDB *AssessDB) CopyBasicFieldsToAssess_WOP(assess *models.Assess_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	assess.Name = assessDB.Name_Data.String
}

// CopyBasicFieldsToAssessWOP
func (assessDB *AssessDB) CopyBasicFieldsToAssessWOP(assess *AssessWOP) {
	assess.ID = int(assessDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	assess.Name = assessDB.Name_Data.String
}

// Backup generates a json file from a slice of all AssessDB instances in the backrepo
func (backRepoAssess *BackRepoAssessStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AssessDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AssessDB, 0)
	for _, assessDB := range backRepoAssess.Map_AssessDBID_AssessDB {
		forBackup = append(forBackup, assessDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Assess ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Assess file", err.Error())
	}
}

// Backup generates a json file from a slice of all AssessDB instances in the backrepo
func (backRepoAssess *BackRepoAssessStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AssessDB, 0)
	for _, assessDB := range backRepoAssess.Map_AssessDBID_AssessDB {
		forBackup = append(forBackup, assessDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Assess")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Assess_Fields, -1)
	for _, assessDB := range forBackup {

		var assessWOP AssessWOP
		assessDB.CopyBasicFieldsToAssessWOP(&assessWOP)

		row := sh.AddRow()
		row.WriteStruct(&assessWOP, -1)
	}
}

// RestoreXL from the "Assess" sheet all AssessDB instances
func (backRepoAssess *BackRepoAssessStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAssessid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Assess"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAssess.rowVisitorAssess)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAssess *BackRepoAssessStruct) rowVisitorAssess(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var assessWOP AssessWOP
		row.ReadStruct(&assessWOP)

		// add the unmarshalled struct to the stage
		assessDB := new(AssessDB)
		assessDB.CopyBasicFieldsFromAssessWOP(&assessWOP)

		assessDB_ID_atBackupTime := assessDB.ID
		assessDB.ID = 0
		query := backRepoAssess.db.Create(assessDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAssess.Map_AssessDBID_AssessDB[assessDB.ID] = assessDB
		BackRepoAssessid_atBckpTime_newID[assessDB_ID_atBackupTime] = assessDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AssessDB.json" in dirPath that stores an array
// of AssessDB and stores it in the database
// the map BackRepoAssessid_atBckpTime_newID is updated accordingly
func (backRepoAssess *BackRepoAssessStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAssessid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AssessDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Assess file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AssessDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AssessDBID_AssessDB
	for _, assessDB := range forRestore {

		assessDB_ID_atBackupTime := assessDB.ID
		assessDB.ID = 0
		query := backRepoAssess.db.Create(assessDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAssess.Map_AssessDBID_AssessDB[assessDB.ID] = assessDB
		BackRepoAssessid_atBckpTime_newID[assessDB_ID_atBackupTime] = assessDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Assess file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Assess>id_atBckpTime_newID
// to compute new index
func (backRepoAssess *BackRepoAssessStruct) RestorePhaseTwo() {

	for _, assessDB := range backRepoAssess.Map_AssessDBID_AssessDB {

		// next line of code is to avert unused variable compilation error
		_ = assessDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoAssess.db.Model(assessDB).Updates(*assessDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAssess.ResetReversePointers commits all staged instances of Assess to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAssess *BackRepoAssessStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, assess := range backRepoAssess.Map_AssessDBID_AssessPtr {
		backRepoAssess.ResetReversePointersInstance(backRepo, idx, assess)
	}

	return
}

func (backRepoAssess *BackRepoAssessStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, assess *models.Assess) (Error error) {

	// fetch matching assessDB
	if assessDB, ok := backRepoAssess.Map_AssessDBID_AssessDB[idx]; ok {
		_ = assessDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAssessid_atBckpTime_newID map[uint]uint
