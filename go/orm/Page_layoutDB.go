// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Page_layout_sql sql.NullBool
var dummy_Page_layout_time time.Duration
var dummy_Page_layout_sort sort.Float64Slice

// Page_layoutAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model page_layoutAPI
type Page_layoutAPI struct {
	gorm.Model

	models.Page_layout_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Page_layoutPointersEncoding Page_layoutPointersEncoding
}

// Page_layoutPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Page_layoutPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Page_margins is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Page_marginsID sql.NullInt64
}

// Page_layoutDB describes a page_layout in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model page_layoutDB
type Page_layoutDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field page_layoutDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Page_layoutPointersEncoding
}

// Page_layoutDBs arrays page_layoutDBs
// swagger:response page_layoutDBsResponse
type Page_layoutDBs []Page_layoutDB

// Page_layoutDBResponse provides response
// swagger:response page_layoutDBResponse
type Page_layoutDBResponse struct {
	Page_layoutDB
}

// Page_layoutWOP is a Page_layout without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Page_layoutWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Page_layout_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPage_layoutStruct struct {
	// stores Page_layoutDB according to their gorm ID
	Map_Page_layoutDBID_Page_layoutDB map[uint]*Page_layoutDB

	// stores Page_layoutDB ID according to Page_layout address
	Map_Page_layoutPtr_Page_layoutDBID map[*models.Page_layout]uint

	// stores Page_layout according to their gorm ID
	Map_Page_layoutDBID_Page_layoutPtr map[uint]*models.Page_layout

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPage_layout *BackRepoPage_layoutStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPage_layout.stage
	return
}

func (backRepoPage_layout *BackRepoPage_layoutStruct) GetDB() *gorm.DB {
	return backRepoPage_layout.db
}

// GetPage_layoutDBFromPage_layoutPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPage_layout *BackRepoPage_layoutStruct) GetPage_layoutDBFromPage_layoutPtr(page_layout *models.Page_layout) (page_layoutDB *Page_layoutDB) {
	id := backRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout]
	page_layoutDB = backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[id]
	return
}

// BackRepoPage_layout.CommitPhaseOne commits all staged instances of Page_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPage_layout *BackRepoPage_layoutStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for page_layout := range stage.Page_layouts {
		backRepoPage_layout.CommitPhaseOneInstance(page_layout)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, page_layout := range backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr {
		if _, ok := stage.Page_layouts[page_layout]; !ok {
			backRepoPage_layout.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPage_layout.CommitDeleteInstance commits deletion of Page_layout to the BackRepo
func (backRepoPage_layout *BackRepoPage_layoutStruct) CommitDeleteInstance(id uint) (Error error) {

	page_layout := backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr[id]

	// page_layout is not staged anymore, remove page_layoutDB
	page_layoutDB := backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[id]
	query := backRepoPage_layout.db.Unscoped().Delete(&page_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID, page_layout)
	delete(backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr, id)
	delete(backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB, id)

	return
}

// BackRepoPage_layout.CommitPhaseOneInstance commits page_layout staged instances of Page_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPage_layout *BackRepoPage_layoutStruct) CommitPhaseOneInstance(page_layout *models.Page_layout) (Error error) {

	// check if the page_layout is not commited yet
	if _, ok := backRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout]; ok {
		return
	}

	// initiate page_layout
	var page_layoutDB Page_layoutDB
	page_layoutDB.CopyBasicFieldsFromPage_layout(page_layout)

	query := backRepoPage_layout.db.Create(&page_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout] = page_layoutDB.ID
	backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr[page_layoutDB.ID] = page_layout
	backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[page_layoutDB.ID] = &page_layoutDB

	return
}

// BackRepoPage_layout.CommitPhaseTwo commits all staged instances of Page_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_layout *BackRepoPage_layoutStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, page_layout := range backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr {
		backRepoPage_layout.CommitPhaseTwoInstance(backRepo, idx, page_layout)
	}

	return
}

// BackRepoPage_layout.CommitPhaseTwoInstance commits {{structname }} of models.Page_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_layout *BackRepoPage_layoutStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, page_layout *models.Page_layout) (Error error) {

	// fetch matching page_layoutDB
	if page_layoutDB, ok := backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[idx]; ok {

		page_layoutDB.CopyBasicFieldsFromPage_layout(page_layout)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value page_layout.Page_margins translates to updating the page_layout.Page_marginsID
		page_layoutDB.Page_marginsID.Valid = true // allow for a 0 value (nil association)
		if page_layout.Page_margins != nil {
			if Page_marginsId, ok := backRepo.BackRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_layout.Page_margins]; ok {
				page_layoutDB.Page_marginsID.Int64 = int64(Page_marginsId)
				page_layoutDB.Page_marginsID.Valid = true
			}
		} else {
			page_layoutDB.Page_marginsID.Int64 = 0
			page_layoutDB.Page_marginsID.Valid = true
		}

		query := backRepoPage_layout.db.Save(&page_layoutDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Page_layout intance %s", page_layout.Name))
		return err
	}

	return
}

// BackRepoPage_layout.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPage_layout *BackRepoPage_layoutStruct) CheckoutPhaseOne() (Error error) {

	page_layoutDBArray := make([]Page_layoutDB, 0)
	query := backRepoPage_layout.db.Find(&page_layoutDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	page_layoutInstancesToBeRemovedFromTheStage := make(map[*models.Page_layout]any)
	for key, value := range backRepoPage_layout.stage.Page_layouts {
		page_layoutInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, page_layoutDB := range page_layoutDBArray {
		backRepoPage_layout.CheckoutPhaseOneInstance(&page_layoutDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		page_layout, ok := backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr[page_layoutDB.ID]
		if ok {
			delete(page_layoutInstancesToBeRemovedFromTheStage, page_layout)
		}
	}

	// remove from stage and back repo's 3 maps all page_layouts that are not in the checkout
	for page_layout := range page_layoutInstancesToBeRemovedFromTheStage {
		page_layout.Unstage(backRepoPage_layout.GetStage())

		// remove instance from the back repo 3 maps
		page_layoutID := backRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout]
		delete(backRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID, page_layout)
		delete(backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB, page_layoutID)
		delete(backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr, page_layoutID)
	}

	return
}

// CheckoutPhaseOneInstance takes a page_layoutDB that has been found in the DB, updates the backRepo and stages the
// models version of the page_layoutDB
func (backRepoPage_layout *BackRepoPage_layoutStruct) CheckoutPhaseOneInstance(page_layoutDB *Page_layoutDB) (Error error) {

	page_layout, ok := backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr[page_layoutDB.ID]
	if !ok {
		page_layout = new(models.Page_layout)

		backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr[page_layoutDB.ID] = page_layout
		backRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout] = page_layoutDB.ID

		// append model store with the new element
		page_layout.Name = page_layoutDB.Name_Data.String
		page_layout.Stage(backRepoPage_layout.GetStage())
	}
	page_layoutDB.CopyBasicFieldsToPage_layout(page_layout)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	page_layout.Stage(backRepoPage_layout.GetStage())

	// preserve pointer to page_layoutDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Page_layoutDBID_Page_layoutDB)[page_layoutDB hold variable pointers
	page_layoutDB_Data := *page_layoutDB
	preservedPtrToPage_layout := &page_layoutDB_Data
	backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[page_layoutDB.ID] = preservedPtrToPage_layout

	return
}

// BackRepoPage_layout.CheckoutPhaseTwo Checkouts all staged instances of Page_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_layout *BackRepoPage_layoutStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, page_layoutDB := range backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB {
		backRepoPage_layout.CheckoutPhaseTwoInstance(backRepo, page_layoutDB)
	}
	return
}

// BackRepoPage_layout.CheckoutPhaseTwoInstance Checkouts staged instances of Page_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_layout *BackRepoPage_layoutStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, page_layoutDB *Page_layoutDB) (Error error) {

	page_layout := backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr[page_layoutDB.ID]

	page_layoutDB.DecodePointers(backRepo, page_layout)

	return
}

func (page_layoutDB *Page_layoutDB) DecodePointers(backRepo *BackRepoStruct, page_layout *models.Page_layout) {

	// insertion point for checkout of pointer encoding
	// Page_margins field
	page_layout.Page_margins = nil
	if page_layoutDB.Page_marginsID.Int64 != 0 {
		page_layout.Page_margins = backRepo.BackRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr[uint(page_layoutDB.Page_marginsID.Int64)]
	}
	return
}

// CommitPage_layout allows commit of a single page_layout (if already staged)
func (backRepo *BackRepoStruct) CommitPage_layout(page_layout *models.Page_layout) {
	backRepo.BackRepoPage_layout.CommitPhaseOneInstance(page_layout)
	if id, ok := backRepo.BackRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout]; ok {
		backRepo.BackRepoPage_layout.CommitPhaseTwoInstance(backRepo, id, page_layout)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPage_layout allows checkout of a single page_layout (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPage_layout(page_layout *models.Page_layout) {
	// check if the page_layout is staged
	if _, ok := backRepo.BackRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout]; ok {

		if id, ok := backRepo.BackRepoPage_layout.Map_Page_layoutPtr_Page_layoutDBID[page_layout]; ok {
			var page_layoutDB Page_layoutDB
			page_layoutDB.ID = id

			if err := backRepo.BackRepoPage_layout.db.First(&page_layoutDB, id).Error; err != nil {
				log.Fatalln("CheckoutPage_layout : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPage_layout.CheckoutPhaseOneInstance(&page_layoutDB)
			backRepo.BackRepoPage_layout.CheckoutPhaseTwoInstance(backRepo, &page_layoutDB)
		}
	}
}

// CopyBasicFieldsFromPage_layout
func (page_layoutDB *Page_layoutDB) CopyBasicFieldsFromPage_layout(page_layout *models.Page_layout) {
	// insertion point for fields commit

	page_layoutDB.Name_Data.String = page_layout.Name
	page_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPage_layout_WOP
func (page_layoutDB *Page_layoutDB) CopyBasicFieldsFromPage_layout_WOP(page_layout *models.Page_layout_WOP) {
	// insertion point for fields commit

	page_layoutDB.Name_Data.String = page_layout.Name
	page_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPage_layoutWOP
func (page_layoutDB *Page_layoutDB) CopyBasicFieldsFromPage_layoutWOP(page_layout *Page_layoutWOP) {
	// insertion point for fields commit

	page_layoutDB.Name_Data.String = page_layout.Name
	page_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPage_layout
func (page_layoutDB *Page_layoutDB) CopyBasicFieldsToPage_layout(page_layout *models.Page_layout) {
	// insertion point for checkout of basic fields (back repo to stage)
	page_layout.Name = page_layoutDB.Name_Data.String
}

// CopyBasicFieldsToPage_layout_WOP
func (page_layoutDB *Page_layoutDB) CopyBasicFieldsToPage_layout_WOP(page_layout *models.Page_layout_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	page_layout.Name = page_layoutDB.Name_Data.String
}

// CopyBasicFieldsToPage_layoutWOP
func (page_layoutDB *Page_layoutDB) CopyBasicFieldsToPage_layoutWOP(page_layout *Page_layoutWOP) {
	page_layout.ID = int(page_layoutDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	page_layout.Name = page_layoutDB.Name_Data.String
}

// Backup generates a json file from a slice of all Page_layoutDB instances in the backrepo
func (backRepoPage_layout *BackRepoPage_layoutStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Page_layoutDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Page_layoutDB, 0)
	for _, page_layoutDB := range backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB {
		forBackup = append(forBackup, page_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Page_layout ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Page_layout file", err.Error())
	}
}

// Backup generates a json file from a slice of all Page_layoutDB instances in the backrepo
func (backRepoPage_layout *BackRepoPage_layoutStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Page_layoutDB, 0)
	for _, page_layoutDB := range backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB {
		forBackup = append(forBackup, page_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Page_layout")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Page_layout_Fields, -1)
	for _, page_layoutDB := range forBackup {

		var page_layoutWOP Page_layoutWOP
		page_layoutDB.CopyBasicFieldsToPage_layoutWOP(&page_layoutWOP)

		row := sh.AddRow()
		row.WriteStruct(&page_layoutWOP, -1)
	}
}

// RestoreXL from the "Page_layout" sheet all Page_layoutDB instances
func (backRepoPage_layout *BackRepoPage_layoutStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPage_layoutid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Page_layout"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPage_layout.rowVisitorPage_layout)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPage_layout *BackRepoPage_layoutStruct) rowVisitorPage_layout(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var page_layoutWOP Page_layoutWOP
		row.ReadStruct(&page_layoutWOP)

		// add the unmarshalled struct to the stage
		page_layoutDB := new(Page_layoutDB)
		page_layoutDB.CopyBasicFieldsFromPage_layoutWOP(&page_layoutWOP)

		page_layoutDB_ID_atBackupTime := page_layoutDB.ID
		page_layoutDB.ID = 0
		query := backRepoPage_layout.db.Create(page_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[page_layoutDB.ID] = page_layoutDB
		BackRepoPage_layoutid_atBckpTime_newID[page_layoutDB_ID_atBackupTime] = page_layoutDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Page_layoutDB.json" in dirPath that stores an array
// of Page_layoutDB and stores it in the database
// the map BackRepoPage_layoutid_atBckpTime_newID is updated accordingly
func (backRepoPage_layout *BackRepoPage_layoutStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPage_layoutid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Page_layoutDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Page_layout file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Page_layoutDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Page_layoutDBID_Page_layoutDB
	for _, page_layoutDB := range forRestore {

		page_layoutDB_ID_atBackupTime := page_layoutDB.ID
		page_layoutDB.ID = 0
		query := backRepoPage_layout.db.Create(page_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[page_layoutDB.ID] = page_layoutDB
		BackRepoPage_layoutid_atBckpTime_newID[page_layoutDB_ID_atBackupTime] = page_layoutDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Page_layout file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Page_layout>id_atBckpTime_newID
// to compute new index
func (backRepoPage_layout *BackRepoPage_layoutStruct) RestorePhaseTwo() {

	for _, page_layoutDB := range backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB {

		// next line of code is to avert unused variable compilation error
		_ = page_layoutDB

		// insertion point for reindexing pointers encoding
		// reindexing Page_margins field
		if page_layoutDB.Page_marginsID.Int64 != 0 {
			page_layoutDB.Page_marginsID.Int64 = int64(BackRepoPage_marginsid_atBckpTime_newID[uint(page_layoutDB.Page_marginsID.Int64)])
			page_layoutDB.Page_marginsID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoPage_layout.db.Model(page_layoutDB).Updates(*page_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPage_layout.ResetReversePointers commits all staged instances of Page_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_layout *BackRepoPage_layoutStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, page_layout := range backRepoPage_layout.Map_Page_layoutDBID_Page_layoutPtr {
		backRepoPage_layout.ResetReversePointersInstance(backRepo, idx, page_layout)
	}

	return
}

func (backRepoPage_layout *BackRepoPage_layoutStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, page_layout *models.Page_layout) (Error error) {

	// fetch matching page_layoutDB
	if page_layoutDB, ok := backRepoPage_layout.Map_Page_layoutDBID_Page_layoutDB[idx]; ok {
		_ = page_layoutDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPage_layoutid_atBckpTime_newID map[uint]uint
