// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Wood_sql sql.NullBool
var dummy_Wood_time time.Duration
var dummy_Wood_sort sort.Float64Slice

// WoodAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model woodAPI
type WoodAPI struct {
	gorm.Model

	models.Wood_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	WoodPointersEncoding WoodPointersEncoding
}

// WoodPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type WoodPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// WoodDB describes a wood in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model woodDB
type WoodDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field woodDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	WoodPointersEncoding
}

// WoodDBs arrays woodDBs
// swagger:response woodDBsResponse
type WoodDBs []WoodDB

// WoodDBResponse provides response
// swagger:response woodDBResponse
type WoodDBResponse struct {
	WoodDB
}

// WoodWOP is a Wood without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type WoodWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Wood_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoWoodStruct struct {
	// stores WoodDB according to their gorm ID
	Map_WoodDBID_WoodDB map[uint]*WoodDB

	// stores WoodDB ID according to Wood address
	Map_WoodPtr_WoodDBID map[*models.Wood]uint

	// stores Wood according to their gorm ID
	Map_WoodDBID_WoodPtr map[uint]*models.Wood

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoWood *BackRepoWoodStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoWood.stage
	return
}

func (backRepoWood *BackRepoWoodStruct) GetDB() *gorm.DB {
	return backRepoWood.db
}

// GetWoodDBFromWoodPtr is a handy function to access the back repo instance from the stage instance
func (backRepoWood *BackRepoWoodStruct) GetWoodDBFromWoodPtr(wood *models.Wood) (woodDB *WoodDB) {
	id := backRepoWood.Map_WoodPtr_WoodDBID[wood]
	woodDB = backRepoWood.Map_WoodDBID_WoodDB[id]
	return
}

// BackRepoWood.CommitPhaseOne commits all staged instances of Wood to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWood *BackRepoWoodStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for wood := range stage.Woods {
		backRepoWood.CommitPhaseOneInstance(wood)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, wood := range backRepoWood.Map_WoodDBID_WoodPtr {
		if _, ok := stage.Woods[wood]; !ok {
			backRepoWood.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWood.CommitDeleteInstance commits deletion of Wood to the BackRepo
func (backRepoWood *BackRepoWoodStruct) CommitDeleteInstance(id uint) (Error error) {

	wood := backRepoWood.Map_WoodDBID_WoodPtr[id]

	// wood is not staged anymore, remove woodDB
	woodDB := backRepoWood.Map_WoodDBID_WoodDB[id]
	query := backRepoWood.db.Unscoped().Delete(&woodDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoWood.Map_WoodPtr_WoodDBID, wood)
	delete(backRepoWood.Map_WoodDBID_WoodPtr, id)
	delete(backRepoWood.Map_WoodDBID_WoodDB, id)

	return
}

// BackRepoWood.CommitPhaseOneInstance commits wood staged instances of Wood to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWood *BackRepoWoodStruct) CommitPhaseOneInstance(wood *models.Wood) (Error error) {

	// check if the wood is not commited yet
	if _, ok := backRepoWood.Map_WoodPtr_WoodDBID[wood]; ok {
		return
	}

	// initiate wood
	var woodDB WoodDB
	woodDB.CopyBasicFieldsFromWood(wood)

	query := backRepoWood.db.Create(&woodDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoWood.Map_WoodPtr_WoodDBID[wood] = woodDB.ID
	backRepoWood.Map_WoodDBID_WoodPtr[woodDB.ID] = wood
	backRepoWood.Map_WoodDBID_WoodDB[woodDB.ID] = &woodDB

	return
}

// BackRepoWood.CommitPhaseTwo commits all staged instances of Wood to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWood *BackRepoWoodStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, wood := range backRepoWood.Map_WoodDBID_WoodPtr {
		backRepoWood.CommitPhaseTwoInstance(backRepo, idx, wood)
	}

	return
}

// BackRepoWood.CommitPhaseTwoInstance commits {{structname }} of models.Wood to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWood *BackRepoWoodStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, wood *models.Wood) (Error error) {

	// fetch matching woodDB
	if woodDB, ok := backRepoWood.Map_WoodDBID_WoodDB[idx]; ok {

		woodDB.CopyBasicFieldsFromWood(wood)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoWood.db.Save(&woodDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Wood intance %s", wood.Name))
		return err
	}

	return
}

// BackRepoWood.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoWood *BackRepoWoodStruct) CheckoutPhaseOne() (Error error) {

	woodDBArray := make([]WoodDB, 0)
	query := backRepoWood.db.Find(&woodDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	woodInstancesToBeRemovedFromTheStage := make(map[*models.Wood]any)
	for key, value := range backRepoWood.stage.Woods {
		woodInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, woodDB := range woodDBArray {
		backRepoWood.CheckoutPhaseOneInstance(&woodDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		wood, ok := backRepoWood.Map_WoodDBID_WoodPtr[woodDB.ID]
		if ok {
			delete(woodInstancesToBeRemovedFromTheStage, wood)
		}
	}

	// remove from stage and back repo's 3 maps all woods that are not in the checkout
	for wood := range woodInstancesToBeRemovedFromTheStage {
		wood.Unstage(backRepoWood.GetStage())

		// remove instance from the back repo 3 maps
		woodID := backRepoWood.Map_WoodPtr_WoodDBID[wood]
		delete(backRepoWood.Map_WoodPtr_WoodDBID, wood)
		delete(backRepoWood.Map_WoodDBID_WoodDB, woodID)
		delete(backRepoWood.Map_WoodDBID_WoodPtr, woodID)
	}

	return
}

// CheckoutPhaseOneInstance takes a woodDB that has been found in the DB, updates the backRepo and stages the
// models version of the woodDB
func (backRepoWood *BackRepoWoodStruct) CheckoutPhaseOneInstance(woodDB *WoodDB) (Error error) {

	wood, ok := backRepoWood.Map_WoodDBID_WoodPtr[woodDB.ID]
	if !ok {
		wood = new(models.Wood)

		backRepoWood.Map_WoodDBID_WoodPtr[woodDB.ID] = wood
		backRepoWood.Map_WoodPtr_WoodDBID[wood] = woodDB.ID

		// append model store with the new element
		wood.Name = woodDB.Name_Data.String
		wood.Stage(backRepoWood.GetStage())
	}
	woodDB.CopyBasicFieldsToWood(wood)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	wood.Stage(backRepoWood.GetStage())

	// preserve pointer to woodDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_WoodDBID_WoodDB)[woodDB hold variable pointers
	woodDB_Data := *woodDB
	preservedPtrToWood := &woodDB_Data
	backRepoWood.Map_WoodDBID_WoodDB[woodDB.ID] = preservedPtrToWood

	return
}

// BackRepoWood.CheckoutPhaseTwo Checkouts all staged instances of Wood to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWood *BackRepoWoodStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, woodDB := range backRepoWood.Map_WoodDBID_WoodDB {
		backRepoWood.CheckoutPhaseTwoInstance(backRepo, woodDB)
	}
	return
}

// BackRepoWood.CheckoutPhaseTwoInstance Checkouts staged instances of Wood to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWood *BackRepoWoodStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, woodDB *WoodDB) (Error error) {

	wood := backRepoWood.Map_WoodDBID_WoodPtr[woodDB.ID]

	woodDB.DecodePointers(backRepo, wood)

	return
}

func (woodDB *WoodDB) DecodePointers(backRepo *BackRepoStruct, wood *models.Wood) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitWood allows commit of a single wood (if already staged)
func (backRepo *BackRepoStruct) CommitWood(wood *models.Wood) {
	backRepo.BackRepoWood.CommitPhaseOneInstance(wood)
	if id, ok := backRepo.BackRepoWood.Map_WoodPtr_WoodDBID[wood]; ok {
		backRepo.BackRepoWood.CommitPhaseTwoInstance(backRepo, id, wood)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitWood allows checkout of a single wood (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWood(wood *models.Wood) {
	// check if the wood is staged
	if _, ok := backRepo.BackRepoWood.Map_WoodPtr_WoodDBID[wood]; ok {

		if id, ok := backRepo.BackRepoWood.Map_WoodPtr_WoodDBID[wood]; ok {
			var woodDB WoodDB
			woodDB.ID = id

			if err := backRepo.BackRepoWood.db.First(&woodDB, id).Error; err != nil {
				log.Fatalln("CheckoutWood : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWood.CheckoutPhaseOneInstance(&woodDB)
			backRepo.BackRepoWood.CheckoutPhaseTwoInstance(backRepo, &woodDB)
		}
	}
}

// CopyBasicFieldsFromWood
func (woodDB *WoodDB) CopyBasicFieldsFromWood(wood *models.Wood) {
	// insertion point for fields commit

	woodDB.Name_Data.String = wood.Name
	woodDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWood_WOP
func (woodDB *WoodDB) CopyBasicFieldsFromWood_WOP(wood *models.Wood_WOP) {
	// insertion point for fields commit

	woodDB.Name_Data.String = wood.Name
	woodDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWoodWOP
func (woodDB *WoodDB) CopyBasicFieldsFromWoodWOP(wood *WoodWOP) {
	// insertion point for fields commit

	woodDB.Name_Data.String = wood.Name
	woodDB.Name_Data.Valid = true
}

// CopyBasicFieldsToWood
func (woodDB *WoodDB) CopyBasicFieldsToWood(wood *models.Wood) {
	// insertion point for checkout of basic fields (back repo to stage)
	wood.Name = woodDB.Name_Data.String
}

// CopyBasicFieldsToWood_WOP
func (woodDB *WoodDB) CopyBasicFieldsToWood_WOP(wood *models.Wood_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	wood.Name = woodDB.Name_Data.String
}

// CopyBasicFieldsToWoodWOP
func (woodDB *WoodDB) CopyBasicFieldsToWoodWOP(wood *WoodWOP) {
	wood.ID = int(woodDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	wood.Name = woodDB.Name_Data.String
}

// Backup generates a json file from a slice of all WoodDB instances in the backrepo
func (backRepoWood *BackRepoWoodStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "WoodDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WoodDB, 0)
	for _, woodDB := range backRepoWood.Map_WoodDBID_WoodDB {
		forBackup = append(forBackup, woodDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Wood ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Wood file", err.Error())
	}
}

// Backup generates a json file from a slice of all WoodDB instances in the backrepo
func (backRepoWood *BackRepoWoodStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WoodDB, 0)
	for _, woodDB := range backRepoWood.Map_WoodDBID_WoodDB {
		forBackup = append(forBackup, woodDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Wood")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Wood_Fields, -1)
	for _, woodDB := range forBackup {

		var woodWOP WoodWOP
		woodDB.CopyBasicFieldsToWoodWOP(&woodWOP)

		row := sh.AddRow()
		row.WriteStruct(&woodWOP, -1)
	}
}

// RestoreXL from the "Wood" sheet all WoodDB instances
func (backRepoWood *BackRepoWoodStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoWoodid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Wood"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoWood.rowVisitorWood)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoWood *BackRepoWoodStruct) rowVisitorWood(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var woodWOP WoodWOP
		row.ReadStruct(&woodWOP)

		// add the unmarshalled struct to the stage
		woodDB := new(WoodDB)
		woodDB.CopyBasicFieldsFromWoodWOP(&woodWOP)

		woodDB_ID_atBackupTime := woodDB.ID
		woodDB.ID = 0
		query := backRepoWood.db.Create(woodDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWood.Map_WoodDBID_WoodDB[woodDB.ID] = woodDB
		BackRepoWoodid_atBckpTime_newID[woodDB_ID_atBackupTime] = woodDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "WoodDB.json" in dirPath that stores an array
// of WoodDB and stores it in the database
// the map BackRepoWoodid_atBckpTime_newID is updated accordingly
func (backRepoWood *BackRepoWoodStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoWoodid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "WoodDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Wood file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*WoodDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_WoodDBID_WoodDB
	for _, woodDB := range forRestore {

		woodDB_ID_atBackupTime := woodDB.ID
		woodDB.ID = 0
		query := backRepoWood.db.Create(woodDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWood.Map_WoodDBID_WoodDB[woodDB.ID] = woodDB
		BackRepoWoodid_atBckpTime_newID[woodDB_ID_atBackupTime] = woodDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Wood file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Wood>id_atBckpTime_newID
// to compute new index
func (backRepoWood *BackRepoWoodStruct) RestorePhaseTwo() {

	for _, woodDB := range backRepoWood.Map_WoodDBID_WoodDB {

		// next line of code is to avert unused variable compilation error
		_ = woodDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoWood.db.Model(woodDB).Updates(*woodDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoWood.ResetReversePointers commits all staged instances of Wood to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWood *BackRepoWoodStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, wood := range backRepoWood.Map_WoodDBID_WoodPtr {
		backRepoWood.ResetReversePointersInstance(backRepo, idx, wood)
	}

	return
}

func (backRepoWood *BackRepoWoodStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, wood *models.Wood) (Error error) {

	// fetch matching woodDB
	if woodDB, ok := backRepoWood.Map_WoodDBID_WoodDB[idx]; ok {
		_ = woodDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoWoodid_atBckpTime_newID map[uint]uint
