// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tremolo_sql sql.NullBool
var dummy_Tremolo_time time.Duration
var dummy_Tremolo_sort sort.Float64Slice

// TremoloAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tremoloAPI
type TremoloAPI struct {
	gorm.Model

	models.Tremolo_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TremoloPointersEncoding TremoloPointersEncoding
}

// TremoloPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TremoloPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TremoloDB describes a tremolo in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tremoloDB
type TremoloDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tremoloDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TremoloPointersEncoding
}

// TremoloDBs arrays tremoloDBs
// swagger:response tremoloDBsResponse
type TremoloDBs []TremoloDB

// TremoloDBResponse provides response
// swagger:response tremoloDBResponse
type TremoloDBResponse struct {
	TremoloDB
}

// TremoloWOP is a Tremolo without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TremoloWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Tremolo_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTremoloStruct struct {
	// stores TremoloDB according to their gorm ID
	Map_TremoloDBID_TremoloDB map[uint]*TremoloDB

	// stores TremoloDB ID according to Tremolo address
	Map_TremoloPtr_TremoloDBID map[*models.Tremolo]uint

	// stores Tremolo according to their gorm ID
	Map_TremoloDBID_TremoloPtr map[uint]*models.Tremolo

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTremolo *BackRepoTremoloStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTremolo.stage
	return
}

func (backRepoTremolo *BackRepoTremoloStruct) GetDB() *gorm.DB {
	return backRepoTremolo.db
}

// GetTremoloDBFromTremoloPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTremolo *BackRepoTremoloStruct) GetTremoloDBFromTremoloPtr(tremolo *models.Tremolo) (tremoloDB *TremoloDB) {
	id := backRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo]
	tremoloDB = backRepoTremolo.Map_TremoloDBID_TremoloDB[id]
	return
}

// BackRepoTremolo.CommitPhaseOne commits all staged instances of Tremolo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTremolo *BackRepoTremoloStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tremolo := range stage.Tremolos {
		backRepoTremolo.CommitPhaseOneInstance(tremolo)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tremolo := range backRepoTremolo.Map_TremoloDBID_TremoloPtr {
		if _, ok := stage.Tremolos[tremolo]; !ok {
			backRepoTremolo.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTremolo.CommitDeleteInstance commits deletion of Tremolo to the BackRepo
func (backRepoTremolo *BackRepoTremoloStruct) CommitDeleteInstance(id uint) (Error error) {

	tremolo := backRepoTremolo.Map_TremoloDBID_TremoloPtr[id]

	// tremolo is not staged anymore, remove tremoloDB
	tremoloDB := backRepoTremolo.Map_TremoloDBID_TremoloDB[id]
	query := backRepoTremolo.db.Unscoped().Delete(&tremoloDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTremolo.Map_TremoloPtr_TremoloDBID, tremolo)
	delete(backRepoTremolo.Map_TremoloDBID_TremoloPtr, id)
	delete(backRepoTremolo.Map_TremoloDBID_TremoloDB, id)

	return
}

// BackRepoTremolo.CommitPhaseOneInstance commits tremolo staged instances of Tremolo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTremolo *BackRepoTremoloStruct) CommitPhaseOneInstance(tremolo *models.Tremolo) (Error error) {

	// check if the tremolo is not commited yet
	if _, ok := backRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo]; ok {
		return
	}

	// initiate tremolo
	var tremoloDB TremoloDB
	tremoloDB.CopyBasicFieldsFromTremolo(tremolo)

	query := backRepoTremolo.db.Create(&tremoloDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo] = tremoloDB.ID
	backRepoTremolo.Map_TremoloDBID_TremoloPtr[tremoloDB.ID] = tremolo
	backRepoTremolo.Map_TremoloDBID_TremoloDB[tremoloDB.ID] = &tremoloDB

	return
}

// BackRepoTremolo.CommitPhaseTwo commits all staged instances of Tremolo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTremolo *BackRepoTremoloStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tremolo := range backRepoTremolo.Map_TremoloDBID_TremoloPtr {
		backRepoTremolo.CommitPhaseTwoInstance(backRepo, idx, tremolo)
	}

	return
}

// BackRepoTremolo.CommitPhaseTwoInstance commits {{structname }} of models.Tremolo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTremolo *BackRepoTremoloStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tremolo *models.Tremolo) (Error error) {

	// fetch matching tremoloDB
	if tremoloDB, ok := backRepoTremolo.Map_TremoloDBID_TremoloDB[idx]; ok {

		tremoloDB.CopyBasicFieldsFromTremolo(tremolo)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTremolo.db.Save(&tremoloDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tremolo intance %s", tremolo.Name))
		return err
	}

	return
}

// BackRepoTremolo.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTremolo *BackRepoTremoloStruct) CheckoutPhaseOne() (Error error) {

	tremoloDBArray := make([]TremoloDB, 0)
	query := backRepoTremolo.db.Find(&tremoloDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tremoloInstancesToBeRemovedFromTheStage := make(map[*models.Tremolo]any)
	for key, value := range backRepoTremolo.stage.Tremolos {
		tremoloInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tremoloDB := range tremoloDBArray {
		backRepoTremolo.CheckoutPhaseOneInstance(&tremoloDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tremolo, ok := backRepoTremolo.Map_TremoloDBID_TremoloPtr[tremoloDB.ID]
		if ok {
			delete(tremoloInstancesToBeRemovedFromTheStage, tremolo)
		}
	}

	// remove from stage and back repo's 3 maps all tremolos that are not in the checkout
	for tremolo := range tremoloInstancesToBeRemovedFromTheStage {
		tremolo.Unstage(backRepoTremolo.GetStage())

		// remove instance from the back repo 3 maps
		tremoloID := backRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo]
		delete(backRepoTremolo.Map_TremoloPtr_TremoloDBID, tremolo)
		delete(backRepoTremolo.Map_TremoloDBID_TremoloDB, tremoloID)
		delete(backRepoTremolo.Map_TremoloDBID_TremoloPtr, tremoloID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tremoloDB that has been found in the DB, updates the backRepo and stages the
// models version of the tremoloDB
func (backRepoTremolo *BackRepoTremoloStruct) CheckoutPhaseOneInstance(tremoloDB *TremoloDB) (Error error) {

	tremolo, ok := backRepoTremolo.Map_TremoloDBID_TremoloPtr[tremoloDB.ID]
	if !ok {
		tremolo = new(models.Tremolo)

		backRepoTremolo.Map_TremoloDBID_TremoloPtr[tremoloDB.ID] = tremolo
		backRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo] = tremoloDB.ID

		// append model store with the new element
		tremolo.Name = tremoloDB.Name_Data.String
		tremolo.Stage(backRepoTremolo.GetStage())
	}
	tremoloDB.CopyBasicFieldsToTremolo(tremolo)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tremolo.Stage(backRepoTremolo.GetStage())

	// preserve pointer to tremoloDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TremoloDBID_TremoloDB)[tremoloDB hold variable pointers
	tremoloDB_Data := *tremoloDB
	preservedPtrToTremolo := &tremoloDB_Data
	backRepoTremolo.Map_TremoloDBID_TremoloDB[tremoloDB.ID] = preservedPtrToTremolo

	return
}

// BackRepoTremolo.CheckoutPhaseTwo Checkouts all staged instances of Tremolo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTremolo *BackRepoTremoloStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tremoloDB := range backRepoTremolo.Map_TremoloDBID_TremoloDB {
		backRepoTremolo.CheckoutPhaseTwoInstance(backRepo, tremoloDB)
	}
	return
}

// BackRepoTremolo.CheckoutPhaseTwoInstance Checkouts staged instances of Tremolo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTremolo *BackRepoTremoloStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tremoloDB *TremoloDB) (Error error) {

	tremolo := backRepoTremolo.Map_TremoloDBID_TremoloPtr[tremoloDB.ID]

	tremoloDB.DecodePointers(backRepo, tremolo)

	return
}

func (tremoloDB *TremoloDB) DecodePointers(backRepo *BackRepoStruct, tremolo *models.Tremolo) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTremolo allows commit of a single tremolo (if already staged)
func (backRepo *BackRepoStruct) CommitTremolo(tremolo *models.Tremolo) {
	backRepo.BackRepoTremolo.CommitPhaseOneInstance(tremolo)
	if id, ok := backRepo.BackRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo]; ok {
		backRepo.BackRepoTremolo.CommitPhaseTwoInstance(backRepo, id, tremolo)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTremolo allows checkout of a single tremolo (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTremolo(tremolo *models.Tremolo) {
	// check if the tremolo is staged
	if _, ok := backRepo.BackRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo]; ok {

		if id, ok := backRepo.BackRepoTremolo.Map_TremoloPtr_TremoloDBID[tremolo]; ok {
			var tremoloDB TremoloDB
			tremoloDB.ID = id

			if err := backRepo.BackRepoTremolo.db.First(&tremoloDB, id).Error; err != nil {
				log.Fatalln("CheckoutTremolo : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTremolo.CheckoutPhaseOneInstance(&tremoloDB)
			backRepo.BackRepoTremolo.CheckoutPhaseTwoInstance(backRepo, &tremoloDB)
		}
	}
}

// CopyBasicFieldsFromTremolo
func (tremoloDB *TremoloDB) CopyBasicFieldsFromTremolo(tremolo *models.Tremolo) {
	// insertion point for fields commit

	tremoloDB.Name_Data.String = tremolo.Name
	tremoloDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTremolo_WOP
func (tremoloDB *TremoloDB) CopyBasicFieldsFromTremolo_WOP(tremolo *models.Tremolo_WOP) {
	// insertion point for fields commit

	tremoloDB.Name_Data.String = tremolo.Name
	tremoloDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTremoloWOP
func (tremoloDB *TremoloDB) CopyBasicFieldsFromTremoloWOP(tremolo *TremoloWOP) {
	// insertion point for fields commit

	tremoloDB.Name_Data.String = tremolo.Name
	tremoloDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTremolo
func (tremoloDB *TremoloDB) CopyBasicFieldsToTremolo(tremolo *models.Tremolo) {
	// insertion point for checkout of basic fields (back repo to stage)
	tremolo.Name = tremoloDB.Name_Data.String
}

// CopyBasicFieldsToTremolo_WOP
func (tremoloDB *TremoloDB) CopyBasicFieldsToTremolo_WOP(tremolo *models.Tremolo_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tremolo.Name = tremoloDB.Name_Data.String
}

// CopyBasicFieldsToTremoloWOP
func (tremoloDB *TremoloDB) CopyBasicFieldsToTremoloWOP(tremolo *TremoloWOP) {
	tremolo.ID = int(tremoloDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tremolo.Name = tremoloDB.Name_Data.String
}

// Backup generates a json file from a slice of all TremoloDB instances in the backrepo
func (backRepoTremolo *BackRepoTremoloStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TremoloDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TremoloDB, 0)
	for _, tremoloDB := range backRepoTremolo.Map_TremoloDBID_TremoloDB {
		forBackup = append(forBackup, tremoloDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tremolo ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tremolo file", err.Error())
	}
}

// Backup generates a json file from a slice of all TremoloDB instances in the backrepo
func (backRepoTremolo *BackRepoTremoloStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TremoloDB, 0)
	for _, tremoloDB := range backRepoTremolo.Map_TremoloDBID_TremoloDB {
		forBackup = append(forBackup, tremoloDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tremolo")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tremolo_Fields, -1)
	for _, tremoloDB := range forBackup {

		var tremoloWOP TremoloWOP
		tremoloDB.CopyBasicFieldsToTremoloWOP(&tremoloWOP)

		row := sh.AddRow()
		row.WriteStruct(&tremoloWOP, -1)
	}
}

// RestoreXL from the "Tremolo" sheet all TremoloDB instances
func (backRepoTremolo *BackRepoTremoloStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTremoloid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tremolo"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTremolo.rowVisitorTremolo)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTremolo *BackRepoTremoloStruct) rowVisitorTremolo(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tremoloWOP TremoloWOP
		row.ReadStruct(&tremoloWOP)

		// add the unmarshalled struct to the stage
		tremoloDB := new(TremoloDB)
		tremoloDB.CopyBasicFieldsFromTremoloWOP(&tremoloWOP)

		tremoloDB_ID_atBackupTime := tremoloDB.ID
		tremoloDB.ID = 0
		query := backRepoTremolo.db.Create(tremoloDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTremolo.Map_TremoloDBID_TremoloDB[tremoloDB.ID] = tremoloDB
		BackRepoTremoloid_atBckpTime_newID[tremoloDB_ID_atBackupTime] = tremoloDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TremoloDB.json" in dirPath that stores an array
// of TremoloDB and stores it in the database
// the map BackRepoTremoloid_atBckpTime_newID is updated accordingly
func (backRepoTremolo *BackRepoTremoloStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTremoloid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TremoloDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tremolo file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TremoloDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TremoloDBID_TremoloDB
	for _, tremoloDB := range forRestore {

		tremoloDB_ID_atBackupTime := tremoloDB.ID
		tremoloDB.ID = 0
		query := backRepoTremolo.db.Create(tremoloDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTremolo.Map_TremoloDBID_TremoloDB[tremoloDB.ID] = tremoloDB
		BackRepoTremoloid_atBckpTime_newID[tremoloDB_ID_atBackupTime] = tremoloDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tremolo file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tremolo>id_atBckpTime_newID
// to compute new index
func (backRepoTremolo *BackRepoTremoloStruct) RestorePhaseTwo() {

	for _, tremoloDB := range backRepoTremolo.Map_TremoloDBID_TremoloDB {

		// next line of code is to avert unused variable compilation error
		_ = tremoloDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTremolo.db.Model(tremoloDB).Updates(*tremoloDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTremolo.ResetReversePointers commits all staged instances of Tremolo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTremolo *BackRepoTremoloStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tremolo := range backRepoTremolo.Map_TremoloDBID_TremoloPtr {
		backRepoTremolo.ResetReversePointersInstance(backRepo, idx, tremolo)
	}

	return
}

func (backRepoTremolo *BackRepoTremoloStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tremolo *models.Tremolo) (Error error) {

	// fetch matching tremoloDB
	if tremoloDB, ok := backRepoTremolo.Map_TremoloDBID_TremoloDB[idx]; ok {
		_ = tremoloDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTremoloid_atBckpTime_newID map[uint]uint
