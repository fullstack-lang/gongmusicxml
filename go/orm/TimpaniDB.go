// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Timpani_sql sql.NullBool
var dummy_Timpani_time time.Duration
var dummy_Timpani_sort sort.Float64Slice

// TimpaniAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model timpaniAPI
type TimpaniAPI struct {
	gorm.Model

	models.Timpani_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TimpaniPointersEncoding TimpaniPointersEncoding
}

// TimpaniPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TimpaniPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TimpaniDB describes a timpani in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model timpaniDB
type TimpaniDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field timpaniDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TimpaniPointersEncoding
}

// TimpaniDBs arrays timpaniDBs
// swagger:response timpaniDBsResponse
type TimpaniDBs []TimpaniDB

// TimpaniDBResponse provides response
// swagger:response timpaniDBResponse
type TimpaniDBResponse struct {
	TimpaniDB
}

// TimpaniWOP is a Timpani without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TimpaniWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Timpani_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTimpaniStruct struct {
	// stores TimpaniDB according to their gorm ID
	Map_TimpaniDBID_TimpaniDB map[uint]*TimpaniDB

	// stores TimpaniDB ID according to Timpani address
	Map_TimpaniPtr_TimpaniDBID map[*models.Timpani]uint

	// stores Timpani according to their gorm ID
	Map_TimpaniDBID_TimpaniPtr map[uint]*models.Timpani

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTimpani *BackRepoTimpaniStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTimpani.stage
	return
}

func (backRepoTimpani *BackRepoTimpaniStruct) GetDB() *gorm.DB {
	return backRepoTimpani.db
}

// GetTimpaniDBFromTimpaniPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTimpani *BackRepoTimpaniStruct) GetTimpaniDBFromTimpaniPtr(timpani *models.Timpani) (timpaniDB *TimpaniDB) {
	id := backRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani]
	timpaniDB = backRepoTimpani.Map_TimpaniDBID_TimpaniDB[id]
	return
}

// BackRepoTimpani.CommitPhaseOne commits all staged instances of Timpani to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTimpani *BackRepoTimpaniStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for timpani := range stage.Timpanis {
		backRepoTimpani.CommitPhaseOneInstance(timpani)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, timpani := range backRepoTimpani.Map_TimpaniDBID_TimpaniPtr {
		if _, ok := stage.Timpanis[timpani]; !ok {
			backRepoTimpani.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTimpani.CommitDeleteInstance commits deletion of Timpani to the BackRepo
func (backRepoTimpani *BackRepoTimpaniStruct) CommitDeleteInstance(id uint) (Error error) {

	timpani := backRepoTimpani.Map_TimpaniDBID_TimpaniPtr[id]

	// timpani is not staged anymore, remove timpaniDB
	timpaniDB := backRepoTimpani.Map_TimpaniDBID_TimpaniDB[id]
	query := backRepoTimpani.db.Unscoped().Delete(&timpaniDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTimpani.Map_TimpaniPtr_TimpaniDBID, timpani)
	delete(backRepoTimpani.Map_TimpaniDBID_TimpaniPtr, id)
	delete(backRepoTimpani.Map_TimpaniDBID_TimpaniDB, id)

	return
}

// BackRepoTimpani.CommitPhaseOneInstance commits timpani staged instances of Timpani to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTimpani *BackRepoTimpaniStruct) CommitPhaseOneInstance(timpani *models.Timpani) (Error error) {

	// check if the timpani is not commited yet
	if _, ok := backRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani]; ok {
		return
	}

	// initiate timpani
	var timpaniDB TimpaniDB
	timpaniDB.CopyBasicFieldsFromTimpani(timpani)

	query := backRepoTimpani.db.Create(&timpaniDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani] = timpaniDB.ID
	backRepoTimpani.Map_TimpaniDBID_TimpaniPtr[timpaniDB.ID] = timpani
	backRepoTimpani.Map_TimpaniDBID_TimpaniDB[timpaniDB.ID] = &timpaniDB

	return
}

// BackRepoTimpani.CommitPhaseTwo commits all staged instances of Timpani to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTimpani *BackRepoTimpaniStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, timpani := range backRepoTimpani.Map_TimpaniDBID_TimpaniPtr {
		backRepoTimpani.CommitPhaseTwoInstance(backRepo, idx, timpani)
	}

	return
}

// BackRepoTimpani.CommitPhaseTwoInstance commits {{structname }} of models.Timpani to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTimpani *BackRepoTimpaniStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, timpani *models.Timpani) (Error error) {

	// fetch matching timpaniDB
	if timpaniDB, ok := backRepoTimpani.Map_TimpaniDBID_TimpaniDB[idx]; ok {

		timpaniDB.CopyBasicFieldsFromTimpani(timpani)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTimpani.db.Save(&timpaniDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Timpani intance %s", timpani.Name))
		return err
	}

	return
}

// BackRepoTimpani.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTimpani *BackRepoTimpaniStruct) CheckoutPhaseOne() (Error error) {

	timpaniDBArray := make([]TimpaniDB, 0)
	query := backRepoTimpani.db.Find(&timpaniDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	timpaniInstancesToBeRemovedFromTheStage := make(map[*models.Timpani]any)
	for key, value := range backRepoTimpani.stage.Timpanis {
		timpaniInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, timpaniDB := range timpaniDBArray {
		backRepoTimpani.CheckoutPhaseOneInstance(&timpaniDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		timpani, ok := backRepoTimpani.Map_TimpaniDBID_TimpaniPtr[timpaniDB.ID]
		if ok {
			delete(timpaniInstancesToBeRemovedFromTheStage, timpani)
		}
	}

	// remove from stage and back repo's 3 maps all timpanis that are not in the checkout
	for timpani := range timpaniInstancesToBeRemovedFromTheStage {
		timpani.Unstage(backRepoTimpani.GetStage())

		// remove instance from the back repo 3 maps
		timpaniID := backRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani]
		delete(backRepoTimpani.Map_TimpaniPtr_TimpaniDBID, timpani)
		delete(backRepoTimpani.Map_TimpaniDBID_TimpaniDB, timpaniID)
		delete(backRepoTimpani.Map_TimpaniDBID_TimpaniPtr, timpaniID)
	}

	return
}

// CheckoutPhaseOneInstance takes a timpaniDB that has been found in the DB, updates the backRepo and stages the
// models version of the timpaniDB
func (backRepoTimpani *BackRepoTimpaniStruct) CheckoutPhaseOneInstance(timpaniDB *TimpaniDB) (Error error) {

	timpani, ok := backRepoTimpani.Map_TimpaniDBID_TimpaniPtr[timpaniDB.ID]
	if !ok {
		timpani = new(models.Timpani)

		backRepoTimpani.Map_TimpaniDBID_TimpaniPtr[timpaniDB.ID] = timpani
		backRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani] = timpaniDB.ID

		// append model store with the new element
		timpani.Name = timpaniDB.Name_Data.String
		timpani.Stage(backRepoTimpani.GetStage())
	}
	timpaniDB.CopyBasicFieldsToTimpani(timpani)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	timpani.Stage(backRepoTimpani.GetStage())

	// preserve pointer to timpaniDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TimpaniDBID_TimpaniDB)[timpaniDB hold variable pointers
	timpaniDB_Data := *timpaniDB
	preservedPtrToTimpani := &timpaniDB_Data
	backRepoTimpani.Map_TimpaniDBID_TimpaniDB[timpaniDB.ID] = preservedPtrToTimpani

	return
}

// BackRepoTimpani.CheckoutPhaseTwo Checkouts all staged instances of Timpani to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTimpani *BackRepoTimpaniStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, timpaniDB := range backRepoTimpani.Map_TimpaniDBID_TimpaniDB {
		backRepoTimpani.CheckoutPhaseTwoInstance(backRepo, timpaniDB)
	}
	return
}

// BackRepoTimpani.CheckoutPhaseTwoInstance Checkouts staged instances of Timpani to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTimpani *BackRepoTimpaniStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, timpaniDB *TimpaniDB) (Error error) {

	timpani := backRepoTimpani.Map_TimpaniDBID_TimpaniPtr[timpaniDB.ID]

	timpaniDB.DecodePointers(backRepo, timpani)

	return
}

func (timpaniDB *TimpaniDB) DecodePointers(backRepo *BackRepoStruct, timpani *models.Timpani) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTimpani allows commit of a single timpani (if already staged)
func (backRepo *BackRepoStruct) CommitTimpani(timpani *models.Timpani) {
	backRepo.BackRepoTimpani.CommitPhaseOneInstance(timpani)
	if id, ok := backRepo.BackRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani]; ok {
		backRepo.BackRepoTimpani.CommitPhaseTwoInstance(backRepo, id, timpani)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTimpani allows checkout of a single timpani (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTimpani(timpani *models.Timpani) {
	// check if the timpani is staged
	if _, ok := backRepo.BackRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani]; ok {

		if id, ok := backRepo.BackRepoTimpani.Map_TimpaniPtr_TimpaniDBID[timpani]; ok {
			var timpaniDB TimpaniDB
			timpaniDB.ID = id

			if err := backRepo.BackRepoTimpani.db.First(&timpaniDB, id).Error; err != nil {
				log.Fatalln("CheckoutTimpani : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTimpani.CheckoutPhaseOneInstance(&timpaniDB)
			backRepo.BackRepoTimpani.CheckoutPhaseTwoInstance(backRepo, &timpaniDB)
		}
	}
}

// CopyBasicFieldsFromTimpani
func (timpaniDB *TimpaniDB) CopyBasicFieldsFromTimpani(timpani *models.Timpani) {
	// insertion point for fields commit

	timpaniDB.Name_Data.String = timpani.Name
	timpaniDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTimpani_WOP
func (timpaniDB *TimpaniDB) CopyBasicFieldsFromTimpani_WOP(timpani *models.Timpani_WOP) {
	// insertion point for fields commit

	timpaniDB.Name_Data.String = timpani.Name
	timpaniDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTimpaniWOP
func (timpaniDB *TimpaniDB) CopyBasicFieldsFromTimpaniWOP(timpani *TimpaniWOP) {
	// insertion point for fields commit

	timpaniDB.Name_Data.String = timpani.Name
	timpaniDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTimpani
func (timpaniDB *TimpaniDB) CopyBasicFieldsToTimpani(timpani *models.Timpani) {
	// insertion point for checkout of basic fields (back repo to stage)
	timpani.Name = timpaniDB.Name_Data.String
}

// CopyBasicFieldsToTimpani_WOP
func (timpaniDB *TimpaniDB) CopyBasicFieldsToTimpani_WOP(timpani *models.Timpani_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	timpani.Name = timpaniDB.Name_Data.String
}

// CopyBasicFieldsToTimpaniWOP
func (timpaniDB *TimpaniDB) CopyBasicFieldsToTimpaniWOP(timpani *TimpaniWOP) {
	timpani.ID = int(timpaniDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	timpani.Name = timpaniDB.Name_Data.String
}

// Backup generates a json file from a slice of all TimpaniDB instances in the backrepo
func (backRepoTimpani *BackRepoTimpaniStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TimpaniDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TimpaniDB, 0)
	for _, timpaniDB := range backRepoTimpani.Map_TimpaniDBID_TimpaniDB {
		forBackup = append(forBackup, timpaniDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Timpani ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Timpani file", err.Error())
	}
}

// Backup generates a json file from a slice of all TimpaniDB instances in the backrepo
func (backRepoTimpani *BackRepoTimpaniStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TimpaniDB, 0)
	for _, timpaniDB := range backRepoTimpani.Map_TimpaniDBID_TimpaniDB {
		forBackup = append(forBackup, timpaniDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Timpani")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Timpani_Fields, -1)
	for _, timpaniDB := range forBackup {

		var timpaniWOP TimpaniWOP
		timpaniDB.CopyBasicFieldsToTimpaniWOP(&timpaniWOP)

		row := sh.AddRow()
		row.WriteStruct(&timpaniWOP, -1)
	}
}

// RestoreXL from the "Timpani" sheet all TimpaniDB instances
func (backRepoTimpani *BackRepoTimpaniStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTimpaniid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Timpani"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTimpani.rowVisitorTimpani)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTimpani *BackRepoTimpaniStruct) rowVisitorTimpani(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var timpaniWOP TimpaniWOP
		row.ReadStruct(&timpaniWOP)

		// add the unmarshalled struct to the stage
		timpaniDB := new(TimpaniDB)
		timpaniDB.CopyBasicFieldsFromTimpaniWOP(&timpaniWOP)

		timpaniDB_ID_atBackupTime := timpaniDB.ID
		timpaniDB.ID = 0
		query := backRepoTimpani.db.Create(timpaniDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTimpani.Map_TimpaniDBID_TimpaniDB[timpaniDB.ID] = timpaniDB
		BackRepoTimpaniid_atBckpTime_newID[timpaniDB_ID_atBackupTime] = timpaniDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TimpaniDB.json" in dirPath that stores an array
// of TimpaniDB and stores it in the database
// the map BackRepoTimpaniid_atBckpTime_newID is updated accordingly
func (backRepoTimpani *BackRepoTimpaniStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTimpaniid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TimpaniDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Timpani file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TimpaniDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TimpaniDBID_TimpaniDB
	for _, timpaniDB := range forRestore {

		timpaniDB_ID_atBackupTime := timpaniDB.ID
		timpaniDB.ID = 0
		query := backRepoTimpani.db.Create(timpaniDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTimpani.Map_TimpaniDBID_TimpaniDB[timpaniDB.ID] = timpaniDB
		BackRepoTimpaniid_atBckpTime_newID[timpaniDB_ID_atBackupTime] = timpaniDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Timpani file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Timpani>id_atBckpTime_newID
// to compute new index
func (backRepoTimpani *BackRepoTimpaniStruct) RestorePhaseTwo() {

	for _, timpaniDB := range backRepoTimpani.Map_TimpaniDBID_TimpaniDB {

		// next line of code is to avert unused variable compilation error
		_ = timpaniDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTimpani.db.Model(timpaniDB).Updates(*timpaniDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTimpani.ResetReversePointers commits all staged instances of Timpani to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTimpani *BackRepoTimpaniStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, timpani := range backRepoTimpani.Map_TimpaniDBID_TimpaniPtr {
		backRepoTimpani.ResetReversePointersInstance(backRepo, idx, timpani)
	}

	return
}

func (backRepoTimpani *BackRepoTimpaniStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, timpani *models.Timpani) (Error error) {

	// fetch matching timpaniDB
	if timpaniDB, ok := backRepoTimpani.Map_TimpaniDBID_TimpaniDB[idx]; ok {
		_ = timpaniDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTimpaniid_atBckpTime_newID map[uint]uint
