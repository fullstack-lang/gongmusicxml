// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Instrument_link_sql sql.NullBool
var dummy_Instrument_link_time time.Duration
var dummy_Instrument_link_sort sort.Float64Slice

// Instrument_linkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model instrument_linkAPI
type Instrument_linkAPI struct {
	gorm.Model

	models.Instrument_link_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Instrument_linkPointersEncoding Instrument_linkPointersEncoding
}

// Instrument_linkPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Instrument_linkPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Instrument_linkDB describes a instrument_link in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model instrument_linkDB
type Instrument_linkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field instrument_linkDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Instrument_linkPointersEncoding
}

// Instrument_linkDBs arrays instrument_linkDBs
// swagger:response instrument_linkDBsResponse
type Instrument_linkDBs []Instrument_linkDB

// Instrument_linkDBResponse provides response
// swagger:response instrument_linkDBResponse
type Instrument_linkDBResponse struct {
	Instrument_linkDB
}

// Instrument_linkWOP is a Instrument_link without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Instrument_linkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Instrument_link_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoInstrument_linkStruct struct {
	// stores Instrument_linkDB according to their gorm ID
	Map_Instrument_linkDBID_Instrument_linkDB map[uint]*Instrument_linkDB

	// stores Instrument_linkDB ID according to Instrument_link address
	Map_Instrument_linkPtr_Instrument_linkDBID map[*models.Instrument_link]uint

	// stores Instrument_link according to their gorm ID
	Map_Instrument_linkDBID_Instrument_linkPtr map[uint]*models.Instrument_link

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoInstrument_link *BackRepoInstrument_linkStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoInstrument_link.stage
	return
}

func (backRepoInstrument_link *BackRepoInstrument_linkStruct) GetDB() *gorm.DB {
	return backRepoInstrument_link.db
}

// GetInstrument_linkDBFromInstrument_linkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) GetInstrument_linkDBFromInstrument_linkPtr(instrument_link *models.Instrument_link) (instrument_linkDB *Instrument_linkDB) {
	id := backRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link]
	instrument_linkDB = backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[id]
	return
}

// BackRepoInstrument_link.CommitPhaseOne commits all staged instances of Instrument_link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for instrument_link := range stage.Instrument_links {
		backRepoInstrument_link.CommitPhaseOneInstance(instrument_link)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, instrument_link := range backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr {
		if _, ok := stage.Instrument_links[instrument_link]; !ok {
			backRepoInstrument_link.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoInstrument_link.CommitDeleteInstance commits deletion of Instrument_link to the BackRepo
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CommitDeleteInstance(id uint) (Error error) {

	instrument_link := backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr[id]

	// instrument_link is not staged anymore, remove instrument_linkDB
	instrument_linkDB := backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[id]
	query := backRepoInstrument_link.db.Unscoped().Delete(&instrument_linkDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID, instrument_link)
	delete(backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr, id)
	delete(backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB, id)

	return
}

// BackRepoInstrument_link.CommitPhaseOneInstance commits instrument_link staged instances of Instrument_link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CommitPhaseOneInstance(instrument_link *models.Instrument_link) (Error error) {

	// check if the instrument_link is not commited yet
	if _, ok := backRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link]; ok {
		return
	}

	// initiate instrument_link
	var instrument_linkDB Instrument_linkDB
	instrument_linkDB.CopyBasicFieldsFromInstrument_link(instrument_link)

	query := backRepoInstrument_link.db.Create(&instrument_linkDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link] = instrument_linkDB.ID
	backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr[instrument_linkDB.ID] = instrument_link
	backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[instrument_linkDB.ID] = &instrument_linkDB

	return
}

// BackRepoInstrument_link.CommitPhaseTwo commits all staged instances of Instrument_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, instrument_link := range backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr {
		backRepoInstrument_link.CommitPhaseTwoInstance(backRepo, idx, instrument_link)
	}

	return
}

// BackRepoInstrument_link.CommitPhaseTwoInstance commits {{structname }} of models.Instrument_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, instrument_link *models.Instrument_link) (Error error) {

	// fetch matching instrument_linkDB
	if instrument_linkDB, ok := backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[idx]; ok {

		instrument_linkDB.CopyBasicFieldsFromInstrument_link(instrument_link)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoInstrument_link.db.Save(&instrument_linkDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Instrument_link intance %s", instrument_link.Name))
		return err
	}

	return
}

// BackRepoInstrument_link.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CheckoutPhaseOne() (Error error) {

	instrument_linkDBArray := make([]Instrument_linkDB, 0)
	query := backRepoInstrument_link.db.Find(&instrument_linkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	instrument_linkInstancesToBeRemovedFromTheStage := make(map[*models.Instrument_link]any)
	for key, value := range backRepoInstrument_link.stage.Instrument_links {
		instrument_linkInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, instrument_linkDB := range instrument_linkDBArray {
		backRepoInstrument_link.CheckoutPhaseOneInstance(&instrument_linkDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		instrument_link, ok := backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr[instrument_linkDB.ID]
		if ok {
			delete(instrument_linkInstancesToBeRemovedFromTheStage, instrument_link)
		}
	}

	// remove from stage and back repo's 3 maps all instrument_links that are not in the checkout
	for instrument_link := range instrument_linkInstancesToBeRemovedFromTheStage {
		instrument_link.Unstage(backRepoInstrument_link.GetStage())

		// remove instance from the back repo 3 maps
		instrument_linkID := backRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link]
		delete(backRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID, instrument_link)
		delete(backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB, instrument_linkID)
		delete(backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr, instrument_linkID)
	}

	return
}

// CheckoutPhaseOneInstance takes a instrument_linkDB that has been found in the DB, updates the backRepo and stages the
// models version of the instrument_linkDB
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CheckoutPhaseOneInstance(instrument_linkDB *Instrument_linkDB) (Error error) {

	instrument_link, ok := backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr[instrument_linkDB.ID]
	if !ok {
		instrument_link = new(models.Instrument_link)

		backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr[instrument_linkDB.ID] = instrument_link
		backRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link] = instrument_linkDB.ID

		// append model store with the new element
		instrument_link.Name = instrument_linkDB.Name_Data.String
		instrument_link.Stage(backRepoInstrument_link.GetStage())
	}
	instrument_linkDB.CopyBasicFieldsToInstrument_link(instrument_link)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	instrument_link.Stage(backRepoInstrument_link.GetStage())

	// preserve pointer to instrument_linkDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Instrument_linkDBID_Instrument_linkDB)[instrument_linkDB hold variable pointers
	instrument_linkDB_Data := *instrument_linkDB
	preservedPtrToInstrument_link := &instrument_linkDB_Data
	backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[instrument_linkDB.ID] = preservedPtrToInstrument_link

	return
}

// BackRepoInstrument_link.CheckoutPhaseTwo Checkouts all staged instances of Instrument_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, instrument_linkDB := range backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB {
		backRepoInstrument_link.CheckoutPhaseTwoInstance(backRepo, instrument_linkDB)
	}
	return
}

// BackRepoInstrument_link.CheckoutPhaseTwoInstance Checkouts staged instances of Instrument_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, instrument_linkDB *Instrument_linkDB) (Error error) {

	instrument_link := backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr[instrument_linkDB.ID]

	instrument_linkDB.DecodePointers(backRepo, instrument_link)

	return
}

func (instrument_linkDB *Instrument_linkDB) DecodePointers(backRepo *BackRepoStruct, instrument_link *models.Instrument_link) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitInstrument_link allows commit of a single instrument_link (if already staged)
func (backRepo *BackRepoStruct) CommitInstrument_link(instrument_link *models.Instrument_link) {
	backRepo.BackRepoInstrument_link.CommitPhaseOneInstance(instrument_link)
	if id, ok := backRepo.BackRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link]; ok {
		backRepo.BackRepoInstrument_link.CommitPhaseTwoInstance(backRepo, id, instrument_link)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitInstrument_link allows checkout of a single instrument_link (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutInstrument_link(instrument_link *models.Instrument_link) {
	// check if the instrument_link is staged
	if _, ok := backRepo.BackRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link]; ok {

		if id, ok := backRepo.BackRepoInstrument_link.Map_Instrument_linkPtr_Instrument_linkDBID[instrument_link]; ok {
			var instrument_linkDB Instrument_linkDB
			instrument_linkDB.ID = id

			if err := backRepo.BackRepoInstrument_link.db.First(&instrument_linkDB, id).Error; err != nil {
				log.Fatalln("CheckoutInstrument_link : Problem with getting object with id:", id)
			}
			backRepo.BackRepoInstrument_link.CheckoutPhaseOneInstance(&instrument_linkDB)
			backRepo.BackRepoInstrument_link.CheckoutPhaseTwoInstance(backRepo, &instrument_linkDB)
		}
	}
}

// CopyBasicFieldsFromInstrument_link
func (instrument_linkDB *Instrument_linkDB) CopyBasicFieldsFromInstrument_link(instrument_link *models.Instrument_link) {
	// insertion point for fields commit

	instrument_linkDB.Name_Data.String = instrument_link.Name
	instrument_linkDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInstrument_link_WOP
func (instrument_linkDB *Instrument_linkDB) CopyBasicFieldsFromInstrument_link_WOP(instrument_link *models.Instrument_link_WOP) {
	// insertion point for fields commit

	instrument_linkDB.Name_Data.String = instrument_link.Name
	instrument_linkDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInstrument_linkWOP
func (instrument_linkDB *Instrument_linkDB) CopyBasicFieldsFromInstrument_linkWOP(instrument_link *Instrument_linkWOP) {
	// insertion point for fields commit

	instrument_linkDB.Name_Data.String = instrument_link.Name
	instrument_linkDB.Name_Data.Valid = true
}

// CopyBasicFieldsToInstrument_link
func (instrument_linkDB *Instrument_linkDB) CopyBasicFieldsToInstrument_link(instrument_link *models.Instrument_link) {
	// insertion point for checkout of basic fields (back repo to stage)
	instrument_link.Name = instrument_linkDB.Name_Data.String
}

// CopyBasicFieldsToInstrument_link_WOP
func (instrument_linkDB *Instrument_linkDB) CopyBasicFieldsToInstrument_link_WOP(instrument_link *models.Instrument_link_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	instrument_link.Name = instrument_linkDB.Name_Data.String
}

// CopyBasicFieldsToInstrument_linkWOP
func (instrument_linkDB *Instrument_linkDB) CopyBasicFieldsToInstrument_linkWOP(instrument_link *Instrument_linkWOP) {
	instrument_link.ID = int(instrument_linkDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	instrument_link.Name = instrument_linkDB.Name_Data.String
}

// Backup generates a json file from a slice of all Instrument_linkDB instances in the backrepo
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Instrument_linkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Instrument_linkDB, 0)
	for _, instrument_linkDB := range backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB {
		forBackup = append(forBackup, instrument_linkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Instrument_link ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Instrument_link file", err.Error())
	}
}

// Backup generates a json file from a slice of all Instrument_linkDB instances in the backrepo
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Instrument_linkDB, 0)
	for _, instrument_linkDB := range backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB {
		forBackup = append(forBackup, instrument_linkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Instrument_link")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Instrument_link_Fields, -1)
	for _, instrument_linkDB := range forBackup {

		var instrument_linkWOP Instrument_linkWOP
		instrument_linkDB.CopyBasicFieldsToInstrument_linkWOP(&instrument_linkWOP)

		row := sh.AddRow()
		row.WriteStruct(&instrument_linkWOP, -1)
	}
}

// RestoreXL from the "Instrument_link" sheet all Instrument_linkDB instances
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoInstrument_linkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Instrument_link"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoInstrument_link.rowVisitorInstrument_link)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoInstrument_link *BackRepoInstrument_linkStruct) rowVisitorInstrument_link(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var instrument_linkWOP Instrument_linkWOP
		row.ReadStruct(&instrument_linkWOP)

		// add the unmarshalled struct to the stage
		instrument_linkDB := new(Instrument_linkDB)
		instrument_linkDB.CopyBasicFieldsFromInstrument_linkWOP(&instrument_linkWOP)

		instrument_linkDB_ID_atBackupTime := instrument_linkDB.ID
		instrument_linkDB.ID = 0
		query := backRepoInstrument_link.db.Create(instrument_linkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[instrument_linkDB.ID] = instrument_linkDB
		BackRepoInstrument_linkid_atBckpTime_newID[instrument_linkDB_ID_atBackupTime] = instrument_linkDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Instrument_linkDB.json" in dirPath that stores an array
// of Instrument_linkDB and stores it in the database
// the map BackRepoInstrument_linkid_atBckpTime_newID is updated accordingly
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoInstrument_linkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Instrument_linkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Instrument_link file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Instrument_linkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Instrument_linkDBID_Instrument_linkDB
	for _, instrument_linkDB := range forRestore {

		instrument_linkDB_ID_atBackupTime := instrument_linkDB.ID
		instrument_linkDB.ID = 0
		query := backRepoInstrument_link.db.Create(instrument_linkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[instrument_linkDB.ID] = instrument_linkDB
		BackRepoInstrument_linkid_atBckpTime_newID[instrument_linkDB_ID_atBackupTime] = instrument_linkDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Instrument_link file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Instrument_link>id_atBckpTime_newID
// to compute new index
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) RestorePhaseTwo() {

	for _, instrument_linkDB := range backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB {

		// next line of code is to avert unused variable compilation error
		_ = instrument_linkDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoInstrument_link.db.Model(instrument_linkDB).Updates(*instrument_linkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoInstrument_link.ResetReversePointers commits all staged instances of Instrument_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_link *BackRepoInstrument_linkStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, instrument_link := range backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr {
		backRepoInstrument_link.ResetReversePointersInstance(backRepo, idx, instrument_link)
	}

	return
}

func (backRepoInstrument_link *BackRepoInstrument_linkStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, instrument_link *models.Instrument_link) (Error error) {

	// fetch matching instrument_linkDB
	if instrument_linkDB, ok := backRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkDB[idx]; ok {
		_ = instrument_linkDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoInstrument_linkid_atBckpTime_newID map[uint]uint
