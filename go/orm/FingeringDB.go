// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Fingering_sql sql.NullBool
var dummy_Fingering_time time.Duration
var dummy_Fingering_sort sort.Float64Slice

// FingeringAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fingeringAPI
type FingeringAPI struct {
	gorm.Model

	models.Fingering_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FingeringPointersEncoding FingeringPointersEncoding
}

// FingeringPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FingeringPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FingeringDB describes a fingering in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fingeringDB
type FingeringDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fingeringDB.Name
	Name_Data sql.NullString

	// Declation for basic field fingeringDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FingeringPointersEncoding
}

// FingeringDBs arrays fingeringDBs
// swagger:response fingeringDBsResponse
type FingeringDBs []FingeringDB

// FingeringDBResponse provides response
// swagger:response fingeringDBResponse
type FingeringDBResponse struct {
	FingeringDB
}

// FingeringWOP is a Fingering without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FingeringWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Fingering_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoFingeringStruct struct {
	// stores FingeringDB according to their gorm ID
	Map_FingeringDBID_FingeringDB map[uint]*FingeringDB

	// stores FingeringDB ID according to Fingering address
	Map_FingeringPtr_FingeringDBID map[*models.Fingering]uint

	// stores Fingering according to their gorm ID
	Map_FingeringDBID_FingeringPtr map[uint]*models.Fingering

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFingering *BackRepoFingeringStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFingering.stage
	return
}

func (backRepoFingering *BackRepoFingeringStruct) GetDB() *gorm.DB {
	return backRepoFingering.db
}

// GetFingeringDBFromFingeringPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFingering *BackRepoFingeringStruct) GetFingeringDBFromFingeringPtr(fingering *models.Fingering) (fingeringDB *FingeringDB) {
	id := backRepoFingering.Map_FingeringPtr_FingeringDBID[fingering]
	fingeringDB = backRepoFingering.Map_FingeringDBID_FingeringDB[id]
	return
}

// BackRepoFingering.CommitPhaseOne commits all staged instances of Fingering to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFingering *BackRepoFingeringStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for fingering := range stage.Fingerings {
		backRepoFingering.CommitPhaseOneInstance(fingering)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, fingering := range backRepoFingering.Map_FingeringDBID_FingeringPtr {
		if _, ok := stage.Fingerings[fingering]; !ok {
			backRepoFingering.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFingering.CommitDeleteInstance commits deletion of Fingering to the BackRepo
func (backRepoFingering *BackRepoFingeringStruct) CommitDeleteInstance(id uint) (Error error) {

	fingering := backRepoFingering.Map_FingeringDBID_FingeringPtr[id]

	// fingering is not staged anymore, remove fingeringDB
	fingeringDB := backRepoFingering.Map_FingeringDBID_FingeringDB[id]
	query := backRepoFingering.db.Unscoped().Delete(&fingeringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFingering.Map_FingeringPtr_FingeringDBID, fingering)
	delete(backRepoFingering.Map_FingeringDBID_FingeringPtr, id)
	delete(backRepoFingering.Map_FingeringDBID_FingeringDB, id)

	return
}

// BackRepoFingering.CommitPhaseOneInstance commits fingering staged instances of Fingering to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFingering *BackRepoFingeringStruct) CommitPhaseOneInstance(fingering *models.Fingering) (Error error) {

	// check if the fingering is not commited yet
	if _, ok := backRepoFingering.Map_FingeringPtr_FingeringDBID[fingering]; ok {
		return
	}

	// initiate fingering
	var fingeringDB FingeringDB
	fingeringDB.CopyBasicFieldsFromFingering(fingering)

	query := backRepoFingering.db.Create(&fingeringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFingering.Map_FingeringPtr_FingeringDBID[fingering] = fingeringDB.ID
	backRepoFingering.Map_FingeringDBID_FingeringPtr[fingeringDB.ID] = fingering
	backRepoFingering.Map_FingeringDBID_FingeringDB[fingeringDB.ID] = &fingeringDB

	return
}

// BackRepoFingering.CommitPhaseTwo commits all staged instances of Fingering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFingering *BackRepoFingeringStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, fingering := range backRepoFingering.Map_FingeringDBID_FingeringPtr {
		backRepoFingering.CommitPhaseTwoInstance(backRepo, idx, fingering)
	}

	return
}

// BackRepoFingering.CommitPhaseTwoInstance commits {{structname }} of models.Fingering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFingering *BackRepoFingeringStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, fingering *models.Fingering) (Error error) {

	// fetch matching fingeringDB
	if fingeringDB, ok := backRepoFingering.Map_FingeringDBID_FingeringDB[idx]; ok {

		fingeringDB.CopyBasicFieldsFromFingering(fingering)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFingering.db.Save(&fingeringDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Fingering intance %s", fingering.Name))
		return err
	}

	return
}

// BackRepoFingering.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFingering *BackRepoFingeringStruct) CheckoutPhaseOne() (Error error) {

	fingeringDBArray := make([]FingeringDB, 0)
	query := backRepoFingering.db.Find(&fingeringDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fingeringInstancesToBeRemovedFromTheStage := make(map[*models.Fingering]any)
	for key, value := range backRepoFingering.stage.Fingerings {
		fingeringInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fingeringDB := range fingeringDBArray {
		backRepoFingering.CheckoutPhaseOneInstance(&fingeringDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		fingering, ok := backRepoFingering.Map_FingeringDBID_FingeringPtr[fingeringDB.ID]
		if ok {
			delete(fingeringInstancesToBeRemovedFromTheStage, fingering)
		}
	}

	// remove from stage and back repo's 3 maps all fingerings that are not in the checkout
	for fingering := range fingeringInstancesToBeRemovedFromTheStage {
		fingering.Unstage(backRepoFingering.GetStage())

		// remove instance from the back repo 3 maps
		fingeringID := backRepoFingering.Map_FingeringPtr_FingeringDBID[fingering]
		delete(backRepoFingering.Map_FingeringPtr_FingeringDBID, fingering)
		delete(backRepoFingering.Map_FingeringDBID_FingeringDB, fingeringID)
		delete(backRepoFingering.Map_FingeringDBID_FingeringPtr, fingeringID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fingeringDB that has been found in the DB, updates the backRepo and stages the
// models version of the fingeringDB
func (backRepoFingering *BackRepoFingeringStruct) CheckoutPhaseOneInstance(fingeringDB *FingeringDB) (Error error) {

	fingering, ok := backRepoFingering.Map_FingeringDBID_FingeringPtr[fingeringDB.ID]
	if !ok {
		fingering = new(models.Fingering)

		backRepoFingering.Map_FingeringDBID_FingeringPtr[fingeringDB.ID] = fingering
		backRepoFingering.Map_FingeringPtr_FingeringDBID[fingering] = fingeringDB.ID

		// append model store with the new element
		fingering.Name = fingeringDB.Name_Data.String
		fingering.Stage(backRepoFingering.GetStage())
	}
	fingeringDB.CopyBasicFieldsToFingering(fingering)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	fingering.Stage(backRepoFingering.GetStage())

	// preserve pointer to fingeringDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FingeringDBID_FingeringDB)[fingeringDB hold variable pointers
	fingeringDB_Data := *fingeringDB
	preservedPtrToFingering := &fingeringDB_Data
	backRepoFingering.Map_FingeringDBID_FingeringDB[fingeringDB.ID] = preservedPtrToFingering

	return
}

// BackRepoFingering.CheckoutPhaseTwo Checkouts all staged instances of Fingering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFingering *BackRepoFingeringStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fingeringDB := range backRepoFingering.Map_FingeringDBID_FingeringDB {
		backRepoFingering.CheckoutPhaseTwoInstance(backRepo, fingeringDB)
	}
	return
}

// BackRepoFingering.CheckoutPhaseTwoInstance Checkouts staged instances of Fingering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFingering *BackRepoFingeringStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fingeringDB *FingeringDB) (Error error) {

	fingering := backRepoFingering.Map_FingeringDBID_FingeringPtr[fingeringDB.ID]

	fingeringDB.DecodePointers(backRepo, fingering)

	return
}

func (fingeringDB *FingeringDB) DecodePointers(backRepo *BackRepoStruct, fingering *models.Fingering) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFingering allows commit of a single fingering (if already staged)
func (backRepo *BackRepoStruct) CommitFingering(fingering *models.Fingering) {
	backRepo.BackRepoFingering.CommitPhaseOneInstance(fingering)
	if id, ok := backRepo.BackRepoFingering.Map_FingeringPtr_FingeringDBID[fingering]; ok {
		backRepo.BackRepoFingering.CommitPhaseTwoInstance(backRepo, id, fingering)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFingering allows checkout of a single fingering (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFingering(fingering *models.Fingering) {
	// check if the fingering is staged
	if _, ok := backRepo.BackRepoFingering.Map_FingeringPtr_FingeringDBID[fingering]; ok {

		if id, ok := backRepo.BackRepoFingering.Map_FingeringPtr_FingeringDBID[fingering]; ok {
			var fingeringDB FingeringDB
			fingeringDB.ID = id

			if err := backRepo.BackRepoFingering.db.First(&fingeringDB, id).Error; err != nil {
				log.Fatalln("CheckoutFingering : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFingering.CheckoutPhaseOneInstance(&fingeringDB)
			backRepo.BackRepoFingering.CheckoutPhaseTwoInstance(backRepo, &fingeringDB)
		}
	}
}

// CopyBasicFieldsFromFingering
func (fingeringDB *FingeringDB) CopyBasicFieldsFromFingering(fingering *models.Fingering) {
	// insertion point for fields commit

	fingeringDB.Name_Data.String = fingering.Name
	fingeringDB.Name_Data.Valid = true

	fingeringDB.Value_Data.String = fingering.Value
	fingeringDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromFingering_WOP
func (fingeringDB *FingeringDB) CopyBasicFieldsFromFingering_WOP(fingering *models.Fingering_WOP) {
	// insertion point for fields commit

	fingeringDB.Name_Data.String = fingering.Name
	fingeringDB.Name_Data.Valid = true

	fingeringDB.Value_Data.String = fingering.Value
	fingeringDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromFingeringWOP
func (fingeringDB *FingeringDB) CopyBasicFieldsFromFingeringWOP(fingering *FingeringWOP) {
	// insertion point for fields commit

	fingeringDB.Name_Data.String = fingering.Name
	fingeringDB.Name_Data.Valid = true

	fingeringDB.Value_Data.String = fingering.Value
	fingeringDB.Value_Data.Valid = true
}

// CopyBasicFieldsToFingering
func (fingeringDB *FingeringDB) CopyBasicFieldsToFingering(fingering *models.Fingering) {
	// insertion point for checkout of basic fields (back repo to stage)
	fingering.Name = fingeringDB.Name_Data.String
	fingering.Value = fingeringDB.Value_Data.String
}

// CopyBasicFieldsToFingering_WOP
func (fingeringDB *FingeringDB) CopyBasicFieldsToFingering_WOP(fingering *models.Fingering_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	fingering.Name = fingeringDB.Name_Data.String
	fingering.Value = fingeringDB.Value_Data.String
}

// CopyBasicFieldsToFingeringWOP
func (fingeringDB *FingeringDB) CopyBasicFieldsToFingeringWOP(fingering *FingeringWOP) {
	fingering.ID = int(fingeringDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	fingering.Name = fingeringDB.Name_Data.String
	fingering.Value = fingeringDB.Value_Data.String
}

// Backup generates a json file from a slice of all FingeringDB instances in the backrepo
func (backRepoFingering *BackRepoFingeringStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FingeringDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FingeringDB, 0)
	for _, fingeringDB := range backRepoFingering.Map_FingeringDBID_FingeringDB {
		forBackup = append(forBackup, fingeringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Fingering ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Fingering file", err.Error())
	}
}

// Backup generates a json file from a slice of all FingeringDB instances in the backrepo
func (backRepoFingering *BackRepoFingeringStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FingeringDB, 0)
	for _, fingeringDB := range backRepoFingering.Map_FingeringDBID_FingeringDB {
		forBackup = append(forBackup, fingeringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Fingering")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Fingering_Fields, -1)
	for _, fingeringDB := range forBackup {

		var fingeringWOP FingeringWOP
		fingeringDB.CopyBasicFieldsToFingeringWOP(&fingeringWOP)

		row := sh.AddRow()
		row.WriteStruct(&fingeringWOP, -1)
	}
}

// RestoreXL from the "Fingering" sheet all FingeringDB instances
func (backRepoFingering *BackRepoFingeringStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFingeringid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Fingering"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFingering.rowVisitorFingering)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFingering *BackRepoFingeringStruct) rowVisitorFingering(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fingeringWOP FingeringWOP
		row.ReadStruct(&fingeringWOP)

		// add the unmarshalled struct to the stage
		fingeringDB := new(FingeringDB)
		fingeringDB.CopyBasicFieldsFromFingeringWOP(&fingeringWOP)

		fingeringDB_ID_atBackupTime := fingeringDB.ID
		fingeringDB.ID = 0
		query := backRepoFingering.db.Create(fingeringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFingering.Map_FingeringDBID_FingeringDB[fingeringDB.ID] = fingeringDB
		BackRepoFingeringid_atBckpTime_newID[fingeringDB_ID_atBackupTime] = fingeringDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FingeringDB.json" in dirPath that stores an array
// of FingeringDB and stores it in the database
// the map BackRepoFingeringid_atBckpTime_newID is updated accordingly
func (backRepoFingering *BackRepoFingeringStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFingeringid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FingeringDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Fingering file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FingeringDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FingeringDBID_FingeringDB
	for _, fingeringDB := range forRestore {

		fingeringDB_ID_atBackupTime := fingeringDB.ID
		fingeringDB.ID = 0
		query := backRepoFingering.db.Create(fingeringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFingering.Map_FingeringDBID_FingeringDB[fingeringDB.ID] = fingeringDB
		BackRepoFingeringid_atBckpTime_newID[fingeringDB_ID_atBackupTime] = fingeringDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Fingering file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Fingering>id_atBckpTime_newID
// to compute new index
func (backRepoFingering *BackRepoFingeringStruct) RestorePhaseTwo() {

	for _, fingeringDB := range backRepoFingering.Map_FingeringDBID_FingeringDB {

		// next line of code is to avert unused variable compilation error
		_ = fingeringDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFingering.db.Model(fingeringDB).Updates(*fingeringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFingering.ResetReversePointers commits all staged instances of Fingering to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFingering *BackRepoFingeringStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, fingering := range backRepoFingering.Map_FingeringDBID_FingeringPtr {
		backRepoFingering.ResetReversePointersInstance(backRepo, idx, fingering)
	}

	return
}

func (backRepoFingering *BackRepoFingeringStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, fingering *models.Fingering) (Error error) {

	// fetch matching fingeringDB
	if fingeringDB, ok := backRepoFingering.Map_FingeringDBID_FingeringDB[idx]; ok {
		_ = fingeringDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFingeringid_atBckpTime_newID map[uint]uint
