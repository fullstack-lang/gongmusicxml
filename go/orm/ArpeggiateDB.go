// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Arpeggiate_sql sql.NullBool
var dummy_Arpeggiate_time time.Duration
var dummy_Arpeggiate_sort sort.Float64Slice

// ArpeggiateAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model arpeggiateAPI
type ArpeggiateAPI struct {
	gorm.Model

	models.Arpeggiate_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ArpeggiatePointersEncoding ArpeggiatePointersEncoding
}

// ArpeggiatePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ArpeggiatePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ArpeggiateDB describes a arpeggiate in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model arpeggiateDB
type ArpeggiateDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field arpeggiateDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ArpeggiatePointersEncoding
}

// ArpeggiateDBs arrays arpeggiateDBs
// swagger:response arpeggiateDBsResponse
type ArpeggiateDBs []ArpeggiateDB

// ArpeggiateDBResponse provides response
// swagger:response arpeggiateDBResponse
type ArpeggiateDBResponse struct {
	ArpeggiateDB
}

// ArpeggiateWOP is a Arpeggiate without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ArpeggiateWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Arpeggiate_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoArpeggiateStruct struct {
	// stores ArpeggiateDB according to their gorm ID
	Map_ArpeggiateDBID_ArpeggiateDB map[uint]*ArpeggiateDB

	// stores ArpeggiateDB ID according to Arpeggiate address
	Map_ArpeggiatePtr_ArpeggiateDBID map[*models.Arpeggiate]uint

	// stores Arpeggiate according to their gorm ID
	Map_ArpeggiateDBID_ArpeggiatePtr map[uint]*models.Arpeggiate

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoArpeggiate *BackRepoArpeggiateStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoArpeggiate.stage
	return
}

func (backRepoArpeggiate *BackRepoArpeggiateStruct) GetDB() *gorm.DB {
	return backRepoArpeggiate.db
}

// GetArpeggiateDBFromArpeggiatePtr is a handy function to access the back repo instance from the stage instance
func (backRepoArpeggiate *BackRepoArpeggiateStruct) GetArpeggiateDBFromArpeggiatePtr(arpeggiate *models.Arpeggiate) (arpeggiateDB *ArpeggiateDB) {
	id := backRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate]
	arpeggiateDB = backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[id]
	return
}

// BackRepoArpeggiate.CommitPhaseOne commits all staged instances of Arpeggiate to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for arpeggiate := range stage.Arpeggiates {
		backRepoArpeggiate.CommitPhaseOneInstance(arpeggiate)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, arpeggiate := range backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr {
		if _, ok := stage.Arpeggiates[arpeggiate]; !ok {
			backRepoArpeggiate.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoArpeggiate.CommitDeleteInstance commits deletion of Arpeggiate to the BackRepo
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CommitDeleteInstance(id uint) (Error error) {

	arpeggiate := backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr[id]

	// arpeggiate is not staged anymore, remove arpeggiateDB
	arpeggiateDB := backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[id]
	query := backRepoArpeggiate.db.Unscoped().Delete(&arpeggiateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID, arpeggiate)
	delete(backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr, id)
	delete(backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB, id)

	return
}

// BackRepoArpeggiate.CommitPhaseOneInstance commits arpeggiate staged instances of Arpeggiate to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CommitPhaseOneInstance(arpeggiate *models.Arpeggiate) (Error error) {

	// check if the arpeggiate is not commited yet
	if _, ok := backRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate]; ok {
		return
	}

	// initiate arpeggiate
	var arpeggiateDB ArpeggiateDB
	arpeggiateDB.CopyBasicFieldsFromArpeggiate(arpeggiate)

	query := backRepoArpeggiate.db.Create(&arpeggiateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate] = arpeggiateDB.ID
	backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr[arpeggiateDB.ID] = arpeggiate
	backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[arpeggiateDB.ID] = &arpeggiateDB

	return
}

// BackRepoArpeggiate.CommitPhaseTwo commits all staged instances of Arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, arpeggiate := range backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr {
		backRepoArpeggiate.CommitPhaseTwoInstance(backRepo, idx, arpeggiate)
	}

	return
}

// BackRepoArpeggiate.CommitPhaseTwoInstance commits {{structname }} of models.Arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, arpeggiate *models.Arpeggiate) (Error error) {

	// fetch matching arpeggiateDB
	if arpeggiateDB, ok := backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[idx]; ok {

		arpeggiateDB.CopyBasicFieldsFromArpeggiate(arpeggiate)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoArpeggiate.db.Save(&arpeggiateDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Arpeggiate intance %s", arpeggiate.Name))
		return err
	}

	return
}

// BackRepoArpeggiate.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CheckoutPhaseOne() (Error error) {

	arpeggiateDBArray := make([]ArpeggiateDB, 0)
	query := backRepoArpeggiate.db.Find(&arpeggiateDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	arpeggiateInstancesToBeRemovedFromTheStage := make(map[*models.Arpeggiate]any)
	for key, value := range backRepoArpeggiate.stage.Arpeggiates {
		arpeggiateInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, arpeggiateDB := range arpeggiateDBArray {
		backRepoArpeggiate.CheckoutPhaseOneInstance(&arpeggiateDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		arpeggiate, ok := backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr[arpeggiateDB.ID]
		if ok {
			delete(arpeggiateInstancesToBeRemovedFromTheStage, arpeggiate)
		}
	}

	// remove from stage and back repo's 3 maps all arpeggiates that are not in the checkout
	for arpeggiate := range arpeggiateInstancesToBeRemovedFromTheStage {
		arpeggiate.Unstage(backRepoArpeggiate.GetStage())

		// remove instance from the back repo 3 maps
		arpeggiateID := backRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate]
		delete(backRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID, arpeggiate)
		delete(backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB, arpeggiateID)
		delete(backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr, arpeggiateID)
	}

	return
}

// CheckoutPhaseOneInstance takes a arpeggiateDB that has been found in the DB, updates the backRepo and stages the
// models version of the arpeggiateDB
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CheckoutPhaseOneInstance(arpeggiateDB *ArpeggiateDB) (Error error) {

	arpeggiate, ok := backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr[arpeggiateDB.ID]
	if !ok {
		arpeggiate = new(models.Arpeggiate)

		backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr[arpeggiateDB.ID] = arpeggiate
		backRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate] = arpeggiateDB.ID

		// append model store with the new element
		arpeggiate.Name = arpeggiateDB.Name_Data.String
		arpeggiate.Stage(backRepoArpeggiate.GetStage())
	}
	arpeggiateDB.CopyBasicFieldsToArpeggiate(arpeggiate)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	arpeggiate.Stage(backRepoArpeggiate.GetStage())

	// preserve pointer to arpeggiateDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ArpeggiateDBID_ArpeggiateDB)[arpeggiateDB hold variable pointers
	arpeggiateDB_Data := *arpeggiateDB
	preservedPtrToArpeggiate := &arpeggiateDB_Data
	backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[arpeggiateDB.ID] = preservedPtrToArpeggiate

	return
}

// BackRepoArpeggiate.CheckoutPhaseTwo Checkouts all staged instances of Arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, arpeggiateDB := range backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB {
		backRepoArpeggiate.CheckoutPhaseTwoInstance(backRepo, arpeggiateDB)
	}
	return
}

// BackRepoArpeggiate.CheckoutPhaseTwoInstance Checkouts staged instances of Arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArpeggiate *BackRepoArpeggiateStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, arpeggiateDB *ArpeggiateDB) (Error error) {

	arpeggiate := backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr[arpeggiateDB.ID]

	arpeggiateDB.DecodePointers(backRepo, arpeggiate)

	return
}

func (arpeggiateDB *ArpeggiateDB) DecodePointers(backRepo *BackRepoStruct, arpeggiate *models.Arpeggiate) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitArpeggiate allows commit of a single arpeggiate (if already staged)
func (backRepo *BackRepoStruct) CommitArpeggiate(arpeggiate *models.Arpeggiate) {
	backRepo.BackRepoArpeggiate.CommitPhaseOneInstance(arpeggiate)
	if id, ok := backRepo.BackRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate]; ok {
		backRepo.BackRepoArpeggiate.CommitPhaseTwoInstance(backRepo, id, arpeggiate)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitArpeggiate allows checkout of a single arpeggiate (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutArpeggiate(arpeggiate *models.Arpeggiate) {
	// check if the arpeggiate is staged
	if _, ok := backRepo.BackRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate]; ok {

		if id, ok := backRepo.BackRepoArpeggiate.Map_ArpeggiatePtr_ArpeggiateDBID[arpeggiate]; ok {
			var arpeggiateDB ArpeggiateDB
			arpeggiateDB.ID = id

			if err := backRepo.BackRepoArpeggiate.db.First(&arpeggiateDB, id).Error; err != nil {
				log.Fatalln("CheckoutArpeggiate : Problem with getting object with id:", id)
			}
			backRepo.BackRepoArpeggiate.CheckoutPhaseOneInstance(&arpeggiateDB)
			backRepo.BackRepoArpeggiate.CheckoutPhaseTwoInstance(backRepo, &arpeggiateDB)
		}
	}
}

// CopyBasicFieldsFromArpeggiate
func (arpeggiateDB *ArpeggiateDB) CopyBasicFieldsFromArpeggiate(arpeggiate *models.Arpeggiate) {
	// insertion point for fields commit

	arpeggiateDB.Name_Data.String = arpeggiate.Name
	arpeggiateDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromArpeggiate_WOP
func (arpeggiateDB *ArpeggiateDB) CopyBasicFieldsFromArpeggiate_WOP(arpeggiate *models.Arpeggiate_WOP) {
	// insertion point for fields commit

	arpeggiateDB.Name_Data.String = arpeggiate.Name
	arpeggiateDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromArpeggiateWOP
func (arpeggiateDB *ArpeggiateDB) CopyBasicFieldsFromArpeggiateWOP(arpeggiate *ArpeggiateWOP) {
	// insertion point for fields commit

	arpeggiateDB.Name_Data.String = arpeggiate.Name
	arpeggiateDB.Name_Data.Valid = true
}

// CopyBasicFieldsToArpeggiate
func (arpeggiateDB *ArpeggiateDB) CopyBasicFieldsToArpeggiate(arpeggiate *models.Arpeggiate) {
	// insertion point for checkout of basic fields (back repo to stage)
	arpeggiate.Name = arpeggiateDB.Name_Data.String
}

// CopyBasicFieldsToArpeggiate_WOP
func (arpeggiateDB *ArpeggiateDB) CopyBasicFieldsToArpeggiate_WOP(arpeggiate *models.Arpeggiate_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	arpeggiate.Name = arpeggiateDB.Name_Data.String
}

// CopyBasicFieldsToArpeggiateWOP
func (arpeggiateDB *ArpeggiateDB) CopyBasicFieldsToArpeggiateWOP(arpeggiate *ArpeggiateWOP) {
	arpeggiate.ID = int(arpeggiateDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	arpeggiate.Name = arpeggiateDB.Name_Data.String
}

// Backup generates a json file from a slice of all ArpeggiateDB instances in the backrepo
func (backRepoArpeggiate *BackRepoArpeggiateStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ArpeggiateDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ArpeggiateDB, 0)
	for _, arpeggiateDB := range backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB {
		forBackup = append(forBackup, arpeggiateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Arpeggiate ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Arpeggiate file", err.Error())
	}
}

// Backup generates a json file from a slice of all ArpeggiateDB instances in the backrepo
func (backRepoArpeggiate *BackRepoArpeggiateStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ArpeggiateDB, 0)
	for _, arpeggiateDB := range backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB {
		forBackup = append(forBackup, arpeggiateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Arpeggiate")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Arpeggiate_Fields, -1)
	for _, arpeggiateDB := range forBackup {

		var arpeggiateWOP ArpeggiateWOP
		arpeggiateDB.CopyBasicFieldsToArpeggiateWOP(&arpeggiateWOP)

		row := sh.AddRow()
		row.WriteStruct(&arpeggiateWOP, -1)
	}
}

// RestoreXL from the "Arpeggiate" sheet all ArpeggiateDB instances
func (backRepoArpeggiate *BackRepoArpeggiateStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoArpeggiateid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Arpeggiate"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoArpeggiate.rowVisitorArpeggiate)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoArpeggiate *BackRepoArpeggiateStruct) rowVisitorArpeggiate(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var arpeggiateWOP ArpeggiateWOP
		row.ReadStruct(&arpeggiateWOP)

		// add the unmarshalled struct to the stage
		arpeggiateDB := new(ArpeggiateDB)
		arpeggiateDB.CopyBasicFieldsFromArpeggiateWOP(&arpeggiateWOP)

		arpeggiateDB_ID_atBackupTime := arpeggiateDB.ID
		arpeggiateDB.ID = 0
		query := backRepoArpeggiate.db.Create(arpeggiateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[arpeggiateDB.ID] = arpeggiateDB
		BackRepoArpeggiateid_atBckpTime_newID[arpeggiateDB_ID_atBackupTime] = arpeggiateDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ArpeggiateDB.json" in dirPath that stores an array
// of ArpeggiateDB and stores it in the database
// the map BackRepoArpeggiateid_atBckpTime_newID is updated accordingly
func (backRepoArpeggiate *BackRepoArpeggiateStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoArpeggiateid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ArpeggiateDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Arpeggiate file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ArpeggiateDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ArpeggiateDBID_ArpeggiateDB
	for _, arpeggiateDB := range forRestore {

		arpeggiateDB_ID_atBackupTime := arpeggiateDB.ID
		arpeggiateDB.ID = 0
		query := backRepoArpeggiate.db.Create(arpeggiateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[arpeggiateDB.ID] = arpeggiateDB
		BackRepoArpeggiateid_atBckpTime_newID[arpeggiateDB_ID_atBackupTime] = arpeggiateDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Arpeggiate file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Arpeggiate>id_atBckpTime_newID
// to compute new index
func (backRepoArpeggiate *BackRepoArpeggiateStruct) RestorePhaseTwo() {

	for _, arpeggiateDB := range backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB {

		// next line of code is to avert unused variable compilation error
		_ = arpeggiateDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoArpeggiate.db.Model(arpeggiateDB).Updates(*arpeggiateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoArpeggiate.ResetReversePointers commits all staged instances of Arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArpeggiate *BackRepoArpeggiateStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, arpeggiate := range backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiatePtr {
		backRepoArpeggiate.ResetReversePointersInstance(backRepo, idx, arpeggiate)
	}

	return
}

func (backRepoArpeggiate *BackRepoArpeggiateStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, arpeggiate *models.Arpeggiate) (Error error) {

	// fetch matching arpeggiateDB
	if arpeggiateDB, ok := backRepoArpeggiate.Map_ArpeggiateDBID_ArpeggiateDB[idx]; ok {
		_ = arpeggiateDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoArpeggiateid_atBckpTime_newID map[uint]uint
