// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Distance_sql sql.NullBool
var dummy_Distance_time time.Duration
var dummy_Distance_sort sort.Float64Slice

// DistanceAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model distanceAPI
type DistanceAPI struct {
	gorm.Model

	models.Distance_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DistancePointersEncoding DistancePointersEncoding
}

// DistancePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DistancePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DistanceDB describes a distance in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model distanceDB
type DistanceDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field distanceDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DistancePointersEncoding
}

// DistanceDBs arrays distanceDBs
// swagger:response distanceDBsResponse
type DistanceDBs []DistanceDB

// DistanceDBResponse provides response
// swagger:response distanceDBResponse
type DistanceDBResponse struct {
	DistanceDB
}

// DistanceWOP is a Distance without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DistanceWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Distance_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDistanceStruct struct {
	// stores DistanceDB according to their gorm ID
	Map_DistanceDBID_DistanceDB map[uint]*DistanceDB

	// stores DistanceDB ID according to Distance address
	Map_DistancePtr_DistanceDBID map[*models.Distance]uint

	// stores Distance according to their gorm ID
	Map_DistanceDBID_DistancePtr map[uint]*models.Distance

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDistance *BackRepoDistanceStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDistance.stage
	return
}

func (backRepoDistance *BackRepoDistanceStruct) GetDB() *gorm.DB {
	return backRepoDistance.db
}

// GetDistanceDBFromDistancePtr is a handy function to access the back repo instance from the stage instance
func (backRepoDistance *BackRepoDistanceStruct) GetDistanceDBFromDistancePtr(distance *models.Distance) (distanceDB *DistanceDB) {
	id := backRepoDistance.Map_DistancePtr_DistanceDBID[distance]
	distanceDB = backRepoDistance.Map_DistanceDBID_DistanceDB[id]
	return
}

// BackRepoDistance.CommitPhaseOne commits all staged instances of Distance to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDistance *BackRepoDistanceStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for distance := range stage.Distances {
		backRepoDistance.CommitPhaseOneInstance(distance)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, distance := range backRepoDistance.Map_DistanceDBID_DistancePtr {
		if _, ok := stage.Distances[distance]; !ok {
			backRepoDistance.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDistance.CommitDeleteInstance commits deletion of Distance to the BackRepo
func (backRepoDistance *BackRepoDistanceStruct) CommitDeleteInstance(id uint) (Error error) {

	distance := backRepoDistance.Map_DistanceDBID_DistancePtr[id]

	// distance is not staged anymore, remove distanceDB
	distanceDB := backRepoDistance.Map_DistanceDBID_DistanceDB[id]
	query := backRepoDistance.db.Unscoped().Delete(&distanceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDistance.Map_DistancePtr_DistanceDBID, distance)
	delete(backRepoDistance.Map_DistanceDBID_DistancePtr, id)
	delete(backRepoDistance.Map_DistanceDBID_DistanceDB, id)

	return
}

// BackRepoDistance.CommitPhaseOneInstance commits distance staged instances of Distance to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDistance *BackRepoDistanceStruct) CommitPhaseOneInstance(distance *models.Distance) (Error error) {

	// check if the distance is not commited yet
	if _, ok := backRepoDistance.Map_DistancePtr_DistanceDBID[distance]; ok {
		return
	}

	// initiate distance
	var distanceDB DistanceDB
	distanceDB.CopyBasicFieldsFromDistance(distance)

	query := backRepoDistance.db.Create(&distanceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDistance.Map_DistancePtr_DistanceDBID[distance] = distanceDB.ID
	backRepoDistance.Map_DistanceDBID_DistancePtr[distanceDB.ID] = distance
	backRepoDistance.Map_DistanceDBID_DistanceDB[distanceDB.ID] = &distanceDB

	return
}

// BackRepoDistance.CommitPhaseTwo commits all staged instances of Distance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDistance *BackRepoDistanceStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, distance := range backRepoDistance.Map_DistanceDBID_DistancePtr {
		backRepoDistance.CommitPhaseTwoInstance(backRepo, idx, distance)
	}

	return
}

// BackRepoDistance.CommitPhaseTwoInstance commits {{structname }} of models.Distance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDistance *BackRepoDistanceStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, distance *models.Distance) (Error error) {

	// fetch matching distanceDB
	if distanceDB, ok := backRepoDistance.Map_DistanceDBID_DistanceDB[idx]; ok {

		distanceDB.CopyBasicFieldsFromDistance(distance)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDistance.db.Save(&distanceDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Distance intance %s", distance.Name))
		return err
	}

	return
}

// BackRepoDistance.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDistance *BackRepoDistanceStruct) CheckoutPhaseOne() (Error error) {

	distanceDBArray := make([]DistanceDB, 0)
	query := backRepoDistance.db.Find(&distanceDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	distanceInstancesToBeRemovedFromTheStage := make(map[*models.Distance]any)
	for key, value := range backRepoDistance.stage.Distances {
		distanceInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, distanceDB := range distanceDBArray {
		backRepoDistance.CheckoutPhaseOneInstance(&distanceDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		distance, ok := backRepoDistance.Map_DistanceDBID_DistancePtr[distanceDB.ID]
		if ok {
			delete(distanceInstancesToBeRemovedFromTheStage, distance)
		}
	}

	// remove from stage and back repo's 3 maps all distances that are not in the checkout
	for distance := range distanceInstancesToBeRemovedFromTheStage {
		distance.Unstage(backRepoDistance.GetStage())

		// remove instance from the back repo 3 maps
		distanceID := backRepoDistance.Map_DistancePtr_DistanceDBID[distance]
		delete(backRepoDistance.Map_DistancePtr_DistanceDBID, distance)
		delete(backRepoDistance.Map_DistanceDBID_DistanceDB, distanceID)
		delete(backRepoDistance.Map_DistanceDBID_DistancePtr, distanceID)
	}

	return
}

// CheckoutPhaseOneInstance takes a distanceDB that has been found in the DB, updates the backRepo and stages the
// models version of the distanceDB
func (backRepoDistance *BackRepoDistanceStruct) CheckoutPhaseOneInstance(distanceDB *DistanceDB) (Error error) {

	distance, ok := backRepoDistance.Map_DistanceDBID_DistancePtr[distanceDB.ID]
	if !ok {
		distance = new(models.Distance)

		backRepoDistance.Map_DistanceDBID_DistancePtr[distanceDB.ID] = distance
		backRepoDistance.Map_DistancePtr_DistanceDBID[distance] = distanceDB.ID

		// append model store with the new element
		distance.Name = distanceDB.Name_Data.String
		distance.Stage(backRepoDistance.GetStage())
	}
	distanceDB.CopyBasicFieldsToDistance(distance)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	distance.Stage(backRepoDistance.GetStage())

	// preserve pointer to distanceDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DistanceDBID_DistanceDB)[distanceDB hold variable pointers
	distanceDB_Data := *distanceDB
	preservedPtrToDistance := &distanceDB_Data
	backRepoDistance.Map_DistanceDBID_DistanceDB[distanceDB.ID] = preservedPtrToDistance

	return
}

// BackRepoDistance.CheckoutPhaseTwo Checkouts all staged instances of Distance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDistance *BackRepoDistanceStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, distanceDB := range backRepoDistance.Map_DistanceDBID_DistanceDB {
		backRepoDistance.CheckoutPhaseTwoInstance(backRepo, distanceDB)
	}
	return
}

// BackRepoDistance.CheckoutPhaseTwoInstance Checkouts staged instances of Distance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDistance *BackRepoDistanceStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, distanceDB *DistanceDB) (Error error) {

	distance := backRepoDistance.Map_DistanceDBID_DistancePtr[distanceDB.ID]

	distanceDB.DecodePointers(backRepo, distance)

	return
}

func (distanceDB *DistanceDB) DecodePointers(backRepo *BackRepoStruct, distance *models.Distance) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDistance allows commit of a single distance (if already staged)
func (backRepo *BackRepoStruct) CommitDistance(distance *models.Distance) {
	backRepo.BackRepoDistance.CommitPhaseOneInstance(distance)
	if id, ok := backRepo.BackRepoDistance.Map_DistancePtr_DistanceDBID[distance]; ok {
		backRepo.BackRepoDistance.CommitPhaseTwoInstance(backRepo, id, distance)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDistance allows checkout of a single distance (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDistance(distance *models.Distance) {
	// check if the distance is staged
	if _, ok := backRepo.BackRepoDistance.Map_DistancePtr_DistanceDBID[distance]; ok {

		if id, ok := backRepo.BackRepoDistance.Map_DistancePtr_DistanceDBID[distance]; ok {
			var distanceDB DistanceDB
			distanceDB.ID = id

			if err := backRepo.BackRepoDistance.db.First(&distanceDB, id).Error; err != nil {
				log.Fatalln("CheckoutDistance : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDistance.CheckoutPhaseOneInstance(&distanceDB)
			backRepo.BackRepoDistance.CheckoutPhaseTwoInstance(backRepo, &distanceDB)
		}
	}
}

// CopyBasicFieldsFromDistance
func (distanceDB *DistanceDB) CopyBasicFieldsFromDistance(distance *models.Distance) {
	// insertion point for fields commit

	distanceDB.Name_Data.String = distance.Name
	distanceDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDistance_WOP
func (distanceDB *DistanceDB) CopyBasicFieldsFromDistance_WOP(distance *models.Distance_WOP) {
	// insertion point for fields commit

	distanceDB.Name_Data.String = distance.Name
	distanceDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDistanceWOP
func (distanceDB *DistanceDB) CopyBasicFieldsFromDistanceWOP(distance *DistanceWOP) {
	// insertion point for fields commit

	distanceDB.Name_Data.String = distance.Name
	distanceDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDistance
func (distanceDB *DistanceDB) CopyBasicFieldsToDistance(distance *models.Distance) {
	// insertion point for checkout of basic fields (back repo to stage)
	distance.Name = distanceDB.Name_Data.String
}

// CopyBasicFieldsToDistance_WOP
func (distanceDB *DistanceDB) CopyBasicFieldsToDistance_WOP(distance *models.Distance_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	distance.Name = distanceDB.Name_Data.String
}

// CopyBasicFieldsToDistanceWOP
func (distanceDB *DistanceDB) CopyBasicFieldsToDistanceWOP(distance *DistanceWOP) {
	distance.ID = int(distanceDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	distance.Name = distanceDB.Name_Data.String
}

// Backup generates a json file from a slice of all DistanceDB instances in the backrepo
func (backRepoDistance *BackRepoDistanceStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DistanceDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DistanceDB, 0)
	for _, distanceDB := range backRepoDistance.Map_DistanceDBID_DistanceDB {
		forBackup = append(forBackup, distanceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Distance ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Distance file", err.Error())
	}
}

// Backup generates a json file from a slice of all DistanceDB instances in the backrepo
func (backRepoDistance *BackRepoDistanceStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DistanceDB, 0)
	for _, distanceDB := range backRepoDistance.Map_DistanceDBID_DistanceDB {
		forBackup = append(forBackup, distanceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Distance")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Distance_Fields, -1)
	for _, distanceDB := range forBackup {

		var distanceWOP DistanceWOP
		distanceDB.CopyBasicFieldsToDistanceWOP(&distanceWOP)

		row := sh.AddRow()
		row.WriteStruct(&distanceWOP, -1)
	}
}

// RestoreXL from the "Distance" sheet all DistanceDB instances
func (backRepoDistance *BackRepoDistanceStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDistanceid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Distance"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDistance.rowVisitorDistance)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDistance *BackRepoDistanceStruct) rowVisitorDistance(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var distanceWOP DistanceWOP
		row.ReadStruct(&distanceWOP)

		// add the unmarshalled struct to the stage
		distanceDB := new(DistanceDB)
		distanceDB.CopyBasicFieldsFromDistanceWOP(&distanceWOP)

		distanceDB_ID_atBackupTime := distanceDB.ID
		distanceDB.ID = 0
		query := backRepoDistance.db.Create(distanceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDistance.Map_DistanceDBID_DistanceDB[distanceDB.ID] = distanceDB
		BackRepoDistanceid_atBckpTime_newID[distanceDB_ID_atBackupTime] = distanceDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DistanceDB.json" in dirPath that stores an array
// of DistanceDB and stores it in the database
// the map BackRepoDistanceid_atBckpTime_newID is updated accordingly
func (backRepoDistance *BackRepoDistanceStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDistanceid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DistanceDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Distance file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DistanceDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DistanceDBID_DistanceDB
	for _, distanceDB := range forRestore {

		distanceDB_ID_atBackupTime := distanceDB.ID
		distanceDB.ID = 0
		query := backRepoDistance.db.Create(distanceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDistance.Map_DistanceDBID_DistanceDB[distanceDB.ID] = distanceDB
		BackRepoDistanceid_atBckpTime_newID[distanceDB_ID_atBackupTime] = distanceDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Distance file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Distance>id_atBckpTime_newID
// to compute new index
func (backRepoDistance *BackRepoDistanceStruct) RestorePhaseTwo() {

	for _, distanceDB := range backRepoDistance.Map_DistanceDBID_DistanceDB {

		// next line of code is to avert unused variable compilation error
		_ = distanceDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDistance.db.Model(distanceDB).Updates(*distanceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDistance.ResetReversePointers commits all staged instances of Distance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDistance *BackRepoDistanceStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, distance := range backRepoDistance.Map_DistanceDBID_DistancePtr {
		backRepoDistance.ResetReversePointersInstance(backRepo, idx, distance)
	}

	return
}

func (backRepoDistance *BackRepoDistanceStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, distance *models.Distance) (Error error) {

	// fetch matching distanceDB
	if distanceDB, ok := backRepoDistance.Map_DistanceDBID_DistanceDB[idx]; ok {
		_ = distanceDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDistanceid_atBckpTime_newID map[uint]uint
