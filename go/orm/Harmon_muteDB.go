// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Harmon_mute_sql sql.NullBool
var dummy_Harmon_mute_time time.Duration
var dummy_Harmon_mute_sort sort.Float64Slice

// Harmon_muteAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model harmon_muteAPI
type Harmon_muteAPI struct {
	gorm.Model

	models.Harmon_mute_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Harmon_mutePointersEncoding Harmon_mutePointersEncoding
}

// Harmon_mutePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Harmon_mutePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Harmon_closed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Harmon_closedID sql.NullInt64
}

// Harmon_muteDB describes a harmon_mute in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model harmon_muteDB
type Harmon_muteDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field harmon_muteDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Harmon_mutePointersEncoding
}

// Harmon_muteDBs arrays harmon_muteDBs
// swagger:response harmon_muteDBsResponse
type Harmon_muteDBs []Harmon_muteDB

// Harmon_muteDBResponse provides response
// swagger:response harmon_muteDBResponse
type Harmon_muteDBResponse struct {
	Harmon_muteDB
}

// Harmon_muteWOP is a Harmon_mute without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Harmon_muteWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Harmon_mute_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHarmon_muteStruct struct {
	// stores Harmon_muteDB according to their gorm ID
	Map_Harmon_muteDBID_Harmon_muteDB map[uint]*Harmon_muteDB

	// stores Harmon_muteDB ID according to Harmon_mute address
	Map_Harmon_mutePtr_Harmon_muteDBID map[*models.Harmon_mute]uint

	// stores Harmon_mute according to their gorm ID
	Map_Harmon_muteDBID_Harmon_mutePtr map[uint]*models.Harmon_mute

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHarmon_mute.stage
	return
}

func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) GetDB() *gorm.DB {
	return backRepoHarmon_mute.db
}

// GetHarmon_muteDBFromHarmon_mutePtr is a handy function to access the back repo instance from the stage instance
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) GetHarmon_muteDBFromHarmon_mutePtr(harmon_mute *models.Harmon_mute) (harmon_muteDB *Harmon_muteDB) {
	id := backRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute]
	harmon_muteDB = backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[id]
	return
}

// BackRepoHarmon_mute.CommitPhaseOne commits all staged instances of Harmon_mute to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for harmon_mute := range stage.Harmon_mutes {
		backRepoHarmon_mute.CommitPhaseOneInstance(harmon_mute)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, harmon_mute := range backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr {
		if _, ok := stage.Harmon_mutes[harmon_mute]; !ok {
			backRepoHarmon_mute.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHarmon_mute.CommitDeleteInstance commits deletion of Harmon_mute to the BackRepo
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CommitDeleteInstance(id uint) (Error error) {

	harmon_mute := backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr[id]

	// harmon_mute is not staged anymore, remove harmon_muteDB
	harmon_muteDB := backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[id]
	query := backRepoHarmon_mute.db.Unscoped().Delete(&harmon_muteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID, harmon_mute)
	delete(backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr, id)
	delete(backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB, id)

	return
}

// BackRepoHarmon_mute.CommitPhaseOneInstance commits harmon_mute staged instances of Harmon_mute to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CommitPhaseOneInstance(harmon_mute *models.Harmon_mute) (Error error) {

	// check if the harmon_mute is not commited yet
	if _, ok := backRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute]; ok {
		return
	}

	// initiate harmon_mute
	var harmon_muteDB Harmon_muteDB
	harmon_muteDB.CopyBasicFieldsFromHarmon_mute(harmon_mute)

	query := backRepoHarmon_mute.db.Create(&harmon_muteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute] = harmon_muteDB.ID
	backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr[harmon_muteDB.ID] = harmon_mute
	backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[harmon_muteDB.ID] = &harmon_muteDB

	return
}

// BackRepoHarmon_mute.CommitPhaseTwo commits all staged instances of Harmon_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, harmon_mute := range backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr {
		backRepoHarmon_mute.CommitPhaseTwoInstance(backRepo, idx, harmon_mute)
	}

	return
}

// BackRepoHarmon_mute.CommitPhaseTwoInstance commits {{structname }} of models.Harmon_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, harmon_mute *models.Harmon_mute) (Error error) {

	// fetch matching harmon_muteDB
	if harmon_muteDB, ok := backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[idx]; ok {

		harmon_muteDB.CopyBasicFieldsFromHarmon_mute(harmon_mute)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value harmon_mute.Harmon_closed translates to updating the harmon_mute.Harmon_closedID
		harmon_muteDB.Harmon_closedID.Valid = true // allow for a 0 value (nil association)
		if harmon_mute.Harmon_closed != nil {
			if Harmon_closedId, ok := backRepo.BackRepoHarmon_closed.Map_Harmon_closedPtr_Harmon_closedDBID[harmon_mute.Harmon_closed]; ok {
				harmon_muteDB.Harmon_closedID.Int64 = int64(Harmon_closedId)
				harmon_muteDB.Harmon_closedID.Valid = true
			}
		} else {
			harmon_muteDB.Harmon_closedID.Int64 = 0
			harmon_muteDB.Harmon_closedID.Valid = true
		}

		query := backRepoHarmon_mute.db.Save(&harmon_muteDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Harmon_mute intance %s", harmon_mute.Name))
		return err
	}

	return
}

// BackRepoHarmon_mute.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CheckoutPhaseOne() (Error error) {

	harmon_muteDBArray := make([]Harmon_muteDB, 0)
	query := backRepoHarmon_mute.db.Find(&harmon_muteDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	harmon_muteInstancesToBeRemovedFromTheStage := make(map[*models.Harmon_mute]any)
	for key, value := range backRepoHarmon_mute.stage.Harmon_mutes {
		harmon_muteInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, harmon_muteDB := range harmon_muteDBArray {
		backRepoHarmon_mute.CheckoutPhaseOneInstance(&harmon_muteDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		harmon_mute, ok := backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr[harmon_muteDB.ID]
		if ok {
			delete(harmon_muteInstancesToBeRemovedFromTheStage, harmon_mute)
		}
	}

	// remove from stage and back repo's 3 maps all harmon_mutes that are not in the checkout
	for harmon_mute := range harmon_muteInstancesToBeRemovedFromTheStage {
		harmon_mute.Unstage(backRepoHarmon_mute.GetStage())

		// remove instance from the back repo 3 maps
		harmon_muteID := backRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute]
		delete(backRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID, harmon_mute)
		delete(backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB, harmon_muteID)
		delete(backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr, harmon_muteID)
	}

	return
}

// CheckoutPhaseOneInstance takes a harmon_muteDB that has been found in the DB, updates the backRepo and stages the
// models version of the harmon_muteDB
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CheckoutPhaseOneInstance(harmon_muteDB *Harmon_muteDB) (Error error) {

	harmon_mute, ok := backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr[harmon_muteDB.ID]
	if !ok {
		harmon_mute = new(models.Harmon_mute)

		backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr[harmon_muteDB.ID] = harmon_mute
		backRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute] = harmon_muteDB.ID

		// append model store with the new element
		harmon_mute.Name = harmon_muteDB.Name_Data.String
		harmon_mute.Stage(backRepoHarmon_mute.GetStage())
	}
	harmon_muteDB.CopyBasicFieldsToHarmon_mute(harmon_mute)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	harmon_mute.Stage(backRepoHarmon_mute.GetStage())

	// preserve pointer to harmon_muteDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Harmon_muteDBID_Harmon_muteDB)[harmon_muteDB hold variable pointers
	harmon_muteDB_Data := *harmon_muteDB
	preservedPtrToHarmon_mute := &harmon_muteDB_Data
	backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[harmon_muteDB.ID] = preservedPtrToHarmon_mute

	return
}

// BackRepoHarmon_mute.CheckoutPhaseTwo Checkouts all staged instances of Harmon_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, harmon_muteDB := range backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB {
		backRepoHarmon_mute.CheckoutPhaseTwoInstance(backRepo, harmon_muteDB)
	}
	return
}

// BackRepoHarmon_mute.CheckoutPhaseTwoInstance Checkouts staged instances of Harmon_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, harmon_muteDB *Harmon_muteDB) (Error error) {

	harmon_mute := backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr[harmon_muteDB.ID]

	harmon_muteDB.DecodePointers(backRepo, harmon_mute)

	return
}

func (harmon_muteDB *Harmon_muteDB) DecodePointers(backRepo *BackRepoStruct, harmon_mute *models.Harmon_mute) {

	// insertion point for checkout of pointer encoding
	// Harmon_closed field
	harmon_mute.Harmon_closed = nil
	if harmon_muteDB.Harmon_closedID.Int64 != 0 {
		harmon_mute.Harmon_closed = backRepo.BackRepoHarmon_closed.Map_Harmon_closedDBID_Harmon_closedPtr[uint(harmon_muteDB.Harmon_closedID.Int64)]
	}
	return
}

// CommitHarmon_mute allows commit of a single harmon_mute (if already staged)
func (backRepo *BackRepoStruct) CommitHarmon_mute(harmon_mute *models.Harmon_mute) {
	backRepo.BackRepoHarmon_mute.CommitPhaseOneInstance(harmon_mute)
	if id, ok := backRepo.BackRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute]; ok {
		backRepo.BackRepoHarmon_mute.CommitPhaseTwoInstance(backRepo, id, harmon_mute)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHarmon_mute allows checkout of a single harmon_mute (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHarmon_mute(harmon_mute *models.Harmon_mute) {
	// check if the harmon_mute is staged
	if _, ok := backRepo.BackRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute]; ok {

		if id, ok := backRepo.BackRepoHarmon_mute.Map_Harmon_mutePtr_Harmon_muteDBID[harmon_mute]; ok {
			var harmon_muteDB Harmon_muteDB
			harmon_muteDB.ID = id

			if err := backRepo.BackRepoHarmon_mute.db.First(&harmon_muteDB, id).Error; err != nil {
				log.Fatalln("CheckoutHarmon_mute : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHarmon_mute.CheckoutPhaseOneInstance(&harmon_muteDB)
			backRepo.BackRepoHarmon_mute.CheckoutPhaseTwoInstance(backRepo, &harmon_muteDB)
		}
	}
}

// CopyBasicFieldsFromHarmon_mute
func (harmon_muteDB *Harmon_muteDB) CopyBasicFieldsFromHarmon_mute(harmon_mute *models.Harmon_mute) {
	// insertion point for fields commit

	harmon_muteDB.Name_Data.String = harmon_mute.Name
	harmon_muteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmon_mute_WOP
func (harmon_muteDB *Harmon_muteDB) CopyBasicFieldsFromHarmon_mute_WOP(harmon_mute *models.Harmon_mute_WOP) {
	// insertion point for fields commit

	harmon_muteDB.Name_Data.String = harmon_mute.Name
	harmon_muteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmon_muteWOP
func (harmon_muteDB *Harmon_muteDB) CopyBasicFieldsFromHarmon_muteWOP(harmon_mute *Harmon_muteWOP) {
	// insertion point for fields commit

	harmon_muteDB.Name_Data.String = harmon_mute.Name
	harmon_muteDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHarmon_mute
func (harmon_muteDB *Harmon_muteDB) CopyBasicFieldsToHarmon_mute(harmon_mute *models.Harmon_mute) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmon_mute.Name = harmon_muteDB.Name_Data.String
}

// CopyBasicFieldsToHarmon_mute_WOP
func (harmon_muteDB *Harmon_muteDB) CopyBasicFieldsToHarmon_mute_WOP(harmon_mute *models.Harmon_mute_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmon_mute.Name = harmon_muteDB.Name_Data.String
}

// CopyBasicFieldsToHarmon_muteWOP
func (harmon_muteDB *Harmon_muteDB) CopyBasicFieldsToHarmon_muteWOP(harmon_mute *Harmon_muteWOP) {
	harmon_mute.ID = int(harmon_muteDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	harmon_mute.Name = harmon_muteDB.Name_Data.String
}

// Backup generates a json file from a slice of all Harmon_muteDB instances in the backrepo
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Harmon_muteDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Harmon_muteDB, 0)
	for _, harmon_muteDB := range backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB {
		forBackup = append(forBackup, harmon_muteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Harmon_mute ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Harmon_mute file", err.Error())
	}
}

// Backup generates a json file from a slice of all Harmon_muteDB instances in the backrepo
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Harmon_muteDB, 0)
	for _, harmon_muteDB := range backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB {
		forBackup = append(forBackup, harmon_muteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Harmon_mute")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Harmon_mute_Fields, -1)
	for _, harmon_muteDB := range forBackup {

		var harmon_muteWOP Harmon_muteWOP
		harmon_muteDB.CopyBasicFieldsToHarmon_muteWOP(&harmon_muteWOP)

		row := sh.AddRow()
		row.WriteStruct(&harmon_muteWOP, -1)
	}
}

// RestoreXL from the "Harmon_mute" sheet all Harmon_muteDB instances
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHarmon_muteid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Harmon_mute"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHarmon_mute.rowVisitorHarmon_mute)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) rowVisitorHarmon_mute(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var harmon_muteWOP Harmon_muteWOP
		row.ReadStruct(&harmon_muteWOP)

		// add the unmarshalled struct to the stage
		harmon_muteDB := new(Harmon_muteDB)
		harmon_muteDB.CopyBasicFieldsFromHarmon_muteWOP(&harmon_muteWOP)

		harmon_muteDB_ID_atBackupTime := harmon_muteDB.ID
		harmon_muteDB.ID = 0
		query := backRepoHarmon_mute.db.Create(harmon_muteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[harmon_muteDB.ID] = harmon_muteDB
		BackRepoHarmon_muteid_atBckpTime_newID[harmon_muteDB_ID_atBackupTime] = harmon_muteDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Harmon_muteDB.json" in dirPath that stores an array
// of Harmon_muteDB and stores it in the database
// the map BackRepoHarmon_muteid_atBckpTime_newID is updated accordingly
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHarmon_muteid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Harmon_muteDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Harmon_mute file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Harmon_muteDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Harmon_muteDBID_Harmon_muteDB
	for _, harmon_muteDB := range forRestore {

		harmon_muteDB_ID_atBackupTime := harmon_muteDB.ID
		harmon_muteDB.ID = 0
		query := backRepoHarmon_mute.db.Create(harmon_muteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[harmon_muteDB.ID] = harmon_muteDB
		BackRepoHarmon_muteid_atBckpTime_newID[harmon_muteDB_ID_atBackupTime] = harmon_muteDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Harmon_mute file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Harmon_mute>id_atBckpTime_newID
// to compute new index
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) RestorePhaseTwo() {

	for _, harmon_muteDB := range backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB {

		// next line of code is to avert unused variable compilation error
		_ = harmon_muteDB

		// insertion point for reindexing pointers encoding
		// reindexing Harmon_closed field
		if harmon_muteDB.Harmon_closedID.Int64 != 0 {
			harmon_muteDB.Harmon_closedID.Int64 = int64(BackRepoHarmon_closedid_atBckpTime_newID[uint(harmon_muteDB.Harmon_closedID.Int64)])
			harmon_muteDB.Harmon_closedID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoHarmon_mute.db.Model(harmon_muteDB).Updates(*harmon_muteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHarmon_mute.ResetReversePointers commits all staged instances of Harmon_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, harmon_mute := range backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_mutePtr {
		backRepoHarmon_mute.ResetReversePointersInstance(backRepo, idx, harmon_mute)
	}

	return
}

func (backRepoHarmon_mute *BackRepoHarmon_muteStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, harmon_mute *models.Harmon_mute) (Error error) {

	// fetch matching harmon_muteDB
	if harmon_muteDB, ok := backRepoHarmon_mute.Map_Harmon_muteDBID_Harmon_muteDB[idx]; ok {
		_ = harmon_muteDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHarmon_muteid_atBckpTime_newID map[uint]uint
