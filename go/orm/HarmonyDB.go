// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Harmony_sql sql.NullBool
var dummy_Harmony_time time.Duration
var dummy_Harmony_sort sort.Float64Slice

// HarmonyAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model harmonyAPI
type HarmonyAPI struct {
	gorm.Model

	models.Harmony_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	HarmonyPointersEncoding HarmonyPointersEncoding
}

// HarmonyPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type HarmonyPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Frame is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FrameID sql.NullInt64

	// field Offset is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	OffsetID sql.NullInt64
}

// HarmonyDB describes a harmony in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model harmonyDB
type HarmonyDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field harmonyDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	HarmonyPointersEncoding
}

// HarmonyDBs arrays harmonyDBs
// swagger:response harmonyDBsResponse
type HarmonyDBs []HarmonyDB

// HarmonyDBResponse provides response
// swagger:response harmonyDBResponse
type HarmonyDBResponse struct {
	HarmonyDB
}

// HarmonyWOP is a Harmony without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type HarmonyWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Harmony_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHarmonyStruct struct {
	// stores HarmonyDB according to their gorm ID
	Map_HarmonyDBID_HarmonyDB map[uint]*HarmonyDB

	// stores HarmonyDB ID according to Harmony address
	Map_HarmonyPtr_HarmonyDBID map[*models.Harmony]uint

	// stores Harmony according to their gorm ID
	Map_HarmonyDBID_HarmonyPtr map[uint]*models.Harmony

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHarmony *BackRepoHarmonyStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHarmony.stage
	return
}

func (backRepoHarmony *BackRepoHarmonyStruct) GetDB() *gorm.DB {
	return backRepoHarmony.db
}

// GetHarmonyDBFromHarmonyPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHarmony *BackRepoHarmonyStruct) GetHarmonyDBFromHarmonyPtr(harmony *models.Harmony) (harmonyDB *HarmonyDB) {
	id := backRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony]
	harmonyDB = backRepoHarmony.Map_HarmonyDBID_HarmonyDB[id]
	return
}

// BackRepoHarmony.CommitPhaseOne commits all staged instances of Harmony to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmony *BackRepoHarmonyStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for harmony := range stage.Harmonys {
		backRepoHarmony.CommitPhaseOneInstance(harmony)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, harmony := range backRepoHarmony.Map_HarmonyDBID_HarmonyPtr {
		if _, ok := stage.Harmonys[harmony]; !ok {
			backRepoHarmony.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHarmony.CommitDeleteInstance commits deletion of Harmony to the BackRepo
func (backRepoHarmony *BackRepoHarmonyStruct) CommitDeleteInstance(id uint) (Error error) {

	harmony := backRepoHarmony.Map_HarmonyDBID_HarmonyPtr[id]

	// harmony is not staged anymore, remove harmonyDB
	harmonyDB := backRepoHarmony.Map_HarmonyDBID_HarmonyDB[id]
	query := backRepoHarmony.db.Unscoped().Delete(&harmonyDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHarmony.Map_HarmonyPtr_HarmonyDBID, harmony)
	delete(backRepoHarmony.Map_HarmonyDBID_HarmonyPtr, id)
	delete(backRepoHarmony.Map_HarmonyDBID_HarmonyDB, id)

	return
}

// BackRepoHarmony.CommitPhaseOneInstance commits harmony staged instances of Harmony to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmony *BackRepoHarmonyStruct) CommitPhaseOneInstance(harmony *models.Harmony) (Error error) {

	// check if the harmony is not commited yet
	if _, ok := backRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony]; ok {
		return
	}

	// initiate harmony
	var harmonyDB HarmonyDB
	harmonyDB.CopyBasicFieldsFromHarmony(harmony)

	query := backRepoHarmony.db.Create(&harmonyDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony] = harmonyDB.ID
	backRepoHarmony.Map_HarmonyDBID_HarmonyPtr[harmonyDB.ID] = harmony
	backRepoHarmony.Map_HarmonyDBID_HarmonyDB[harmonyDB.ID] = &harmonyDB

	return
}

// BackRepoHarmony.CommitPhaseTwo commits all staged instances of Harmony to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony *BackRepoHarmonyStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, harmony := range backRepoHarmony.Map_HarmonyDBID_HarmonyPtr {
		backRepoHarmony.CommitPhaseTwoInstance(backRepo, idx, harmony)
	}

	return
}

// BackRepoHarmony.CommitPhaseTwoInstance commits {{structname }} of models.Harmony to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony *BackRepoHarmonyStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, harmony *models.Harmony) (Error error) {

	// fetch matching harmonyDB
	if harmonyDB, ok := backRepoHarmony.Map_HarmonyDBID_HarmonyDB[idx]; ok {

		harmonyDB.CopyBasicFieldsFromHarmony(harmony)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value harmony.Frame translates to updating the harmony.FrameID
		harmonyDB.FrameID.Valid = true // allow for a 0 value (nil association)
		if harmony.Frame != nil {
			if FrameId, ok := backRepo.BackRepoFrame.Map_FramePtr_FrameDBID[harmony.Frame]; ok {
				harmonyDB.FrameID.Int64 = int64(FrameId)
				harmonyDB.FrameID.Valid = true
			}
		} else {
			harmonyDB.FrameID.Int64 = 0
			harmonyDB.FrameID.Valid = true
		}

		// commit pointer value harmony.Offset translates to updating the harmony.OffsetID
		harmonyDB.OffsetID.Valid = true // allow for a 0 value (nil association)
		if harmony.Offset != nil {
			if OffsetId, ok := backRepo.BackRepoOffset.Map_OffsetPtr_OffsetDBID[harmony.Offset]; ok {
				harmonyDB.OffsetID.Int64 = int64(OffsetId)
				harmonyDB.OffsetID.Valid = true
			}
		} else {
			harmonyDB.OffsetID.Int64 = 0
			harmonyDB.OffsetID.Valid = true
		}

		query := backRepoHarmony.db.Save(&harmonyDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Harmony intance %s", harmony.Name))
		return err
	}

	return
}

// BackRepoHarmony.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHarmony *BackRepoHarmonyStruct) CheckoutPhaseOne() (Error error) {

	harmonyDBArray := make([]HarmonyDB, 0)
	query := backRepoHarmony.db.Find(&harmonyDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	harmonyInstancesToBeRemovedFromTheStage := make(map[*models.Harmony]any)
	for key, value := range backRepoHarmony.stage.Harmonys {
		harmonyInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, harmonyDB := range harmonyDBArray {
		backRepoHarmony.CheckoutPhaseOneInstance(&harmonyDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		harmony, ok := backRepoHarmony.Map_HarmonyDBID_HarmonyPtr[harmonyDB.ID]
		if ok {
			delete(harmonyInstancesToBeRemovedFromTheStage, harmony)
		}
	}

	// remove from stage and back repo's 3 maps all harmonys that are not in the checkout
	for harmony := range harmonyInstancesToBeRemovedFromTheStage {
		harmony.Unstage(backRepoHarmony.GetStage())

		// remove instance from the back repo 3 maps
		harmonyID := backRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony]
		delete(backRepoHarmony.Map_HarmonyPtr_HarmonyDBID, harmony)
		delete(backRepoHarmony.Map_HarmonyDBID_HarmonyDB, harmonyID)
		delete(backRepoHarmony.Map_HarmonyDBID_HarmonyPtr, harmonyID)
	}

	return
}

// CheckoutPhaseOneInstance takes a harmonyDB that has been found in the DB, updates the backRepo and stages the
// models version of the harmonyDB
func (backRepoHarmony *BackRepoHarmonyStruct) CheckoutPhaseOneInstance(harmonyDB *HarmonyDB) (Error error) {

	harmony, ok := backRepoHarmony.Map_HarmonyDBID_HarmonyPtr[harmonyDB.ID]
	if !ok {
		harmony = new(models.Harmony)

		backRepoHarmony.Map_HarmonyDBID_HarmonyPtr[harmonyDB.ID] = harmony
		backRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony] = harmonyDB.ID

		// append model store with the new element
		harmony.Name = harmonyDB.Name_Data.String
		harmony.Stage(backRepoHarmony.GetStage())
	}
	harmonyDB.CopyBasicFieldsToHarmony(harmony)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	harmony.Stage(backRepoHarmony.GetStage())

	// preserve pointer to harmonyDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_HarmonyDBID_HarmonyDB)[harmonyDB hold variable pointers
	harmonyDB_Data := *harmonyDB
	preservedPtrToHarmony := &harmonyDB_Data
	backRepoHarmony.Map_HarmonyDBID_HarmonyDB[harmonyDB.ID] = preservedPtrToHarmony

	return
}

// BackRepoHarmony.CheckoutPhaseTwo Checkouts all staged instances of Harmony to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony *BackRepoHarmonyStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, harmonyDB := range backRepoHarmony.Map_HarmonyDBID_HarmonyDB {
		backRepoHarmony.CheckoutPhaseTwoInstance(backRepo, harmonyDB)
	}
	return
}

// BackRepoHarmony.CheckoutPhaseTwoInstance Checkouts staged instances of Harmony to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony *BackRepoHarmonyStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, harmonyDB *HarmonyDB) (Error error) {

	harmony := backRepoHarmony.Map_HarmonyDBID_HarmonyPtr[harmonyDB.ID]

	harmonyDB.DecodePointers(backRepo, harmony)

	return
}

func (harmonyDB *HarmonyDB) DecodePointers(backRepo *BackRepoStruct, harmony *models.Harmony) {

	// insertion point for checkout of pointer encoding
	// Frame field
	harmony.Frame = nil
	if harmonyDB.FrameID.Int64 != 0 {
		harmony.Frame = backRepo.BackRepoFrame.Map_FrameDBID_FramePtr[uint(harmonyDB.FrameID.Int64)]
	}
	// Offset field
	harmony.Offset = nil
	if harmonyDB.OffsetID.Int64 != 0 {
		harmony.Offset = backRepo.BackRepoOffset.Map_OffsetDBID_OffsetPtr[uint(harmonyDB.OffsetID.Int64)]
	}
	return
}

// CommitHarmony allows commit of a single harmony (if already staged)
func (backRepo *BackRepoStruct) CommitHarmony(harmony *models.Harmony) {
	backRepo.BackRepoHarmony.CommitPhaseOneInstance(harmony)
	if id, ok := backRepo.BackRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony]; ok {
		backRepo.BackRepoHarmony.CommitPhaseTwoInstance(backRepo, id, harmony)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHarmony allows checkout of a single harmony (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHarmony(harmony *models.Harmony) {
	// check if the harmony is staged
	if _, ok := backRepo.BackRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony]; ok {

		if id, ok := backRepo.BackRepoHarmony.Map_HarmonyPtr_HarmonyDBID[harmony]; ok {
			var harmonyDB HarmonyDB
			harmonyDB.ID = id

			if err := backRepo.BackRepoHarmony.db.First(&harmonyDB, id).Error; err != nil {
				log.Fatalln("CheckoutHarmony : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHarmony.CheckoutPhaseOneInstance(&harmonyDB)
			backRepo.BackRepoHarmony.CheckoutPhaseTwoInstance(backRepo, &harmonyDB)
		}
	}
}

// CopyBasicFieldsFromHarmony
func (harmonyDB *HarmonyDB) CopyBasicFieldsFromHarmony(harmony *models.Harmony) {
	// insertion point for fields commit

	harmonyDB.Name_Data.String = harmony.Name
	harmonyDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmony_WOP
func (harmonyDB *HarmonyDB) CopyBasicFieldsFromHarmony_WOP(harmony *models.Harmony_WOP) {
	// insertion point for fields commit

	harmonyDB.Name_Data.String = harmony.Name
	harmonyDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmonyWOP
func (harmonyDB *HarmonyDB) CopyBasicFieldsFromHarmonyWOP(harmony *HarmonyWOP) {
	// insertion point for fields commit

	harmonyDB.Name_Data.String = harmony.Name
	harmonyDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHarmony
func (harmonyDB *HarmonyDB) CopyBasicFieldsToHarmony(harmony *models.Harmony) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmony.Name = harmonyDB.Name_Data.String
}

// CopyBasicFieldsToHarmony_WOP
func (harmonyDB *HarmonyDB) CopyBasicFieldsToHarmony_WOP(harmony *models.Harmony_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmony.Name = harmonyDB.Name_Data.String
}

// CopyBasicFieldsToHarmonyWOP
func (harmonyDB *HarmonyDB) CopyBasicFieldsToHarmonyWOP(harmony *HarmonyWOP) {
	harmony.ID = int(harmonyDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	harmony.Name = harmonyDB.Name_Data.String
}

// Backup generates a json file from a slice of all HarmonyDB instances in the backrepo
func (backRepoHarmony *BackRepoHarmonyStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "HarmonyDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HarmonyDB, 0)
	for _, harmonyDB := range backRepoHarmony.Map_HarmonyDBID_HarmonyDB {
		forBackup = append(forBackup, harmonyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Harmony ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Harmony file", err.Error())
	}
}

// Backup generates a json file from a slice of all HarmonyDB instances in the backrepo
func (backRepoHarmony *BackRepoHarmonyStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HarmonyDB, 0)
	for _, harmonyDB := range backRepoHarmony.Map_HarmonyDBID_HarmonyDB {
		forBackup = append(forBackup, harmonyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Harmony")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Harmony_Fields, -1)
	for _, harmonyDB := range forBackup {

		var harmonyWOP HarmonyWOP
		harmonyDB.CopyBasicFieldsToHarmonyWOP(&harmonyWOP)

		row := sh.AddRow()
		row.WriteStruct(&harmonyWOP, -1)
	}
}

// RestoreXL from the "Harmony" sheet all HarmonyDB instances
func (backRepoHarmony *BackRepoHarmonyStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHarmonyid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Harmony"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHarmony.rowVisitorHarmony)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHarmony *BackRepoHarmonyStruct) rowVisitorHarmony(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var harmonyWOP HarmonyWOP
		row.ReadStruct(&harmonyWOP)

		// add the unmarshalled struct to the stage
		harmonyDB := new(HarmonyDB)
		harmonyDB.CopyBasicFieldsFromHarmonyWOP(&harmonyWOP)

		harmonyDB_ID_atBackupTime := harmonyDB.ID
		harmonyDB.ID = 0
		query := backRepoHarmony.db.Create(harmonyDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmony.Map_HarmonyDBID_HarmonyDB[harmonyDB.ID] = harmonyDB
		BackRepoHarmonyid_atBckpTime_newID[harmonyDB_ID_atBackupTime] = harmonyDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "HarmonyDB.json" in dirPath that stores an array
// of HarmonyDB and stores it in the database
// the map BackRepoHarmonyid_atBckpTime_newID is updated accordingly
func (backRepoHarmony *BackRepoHarmonyStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHarmonyid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "HarmonyDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Harmony file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*HarmonyDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_HarmonyDBID_HarmonyDB
	for _, harmonyDB := range forRestore {

		harmonyDB_ID_atBackupTime := harmonyDB.ID
		harmonyDB.ID = 0
		query := backRepoHarmony.db.Create(harmonyDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmony.Map_HarmonyDBID_HarmonyDB[harmonyDB.ID] = harmonyDB
		BackRepoHarmonyid_atBckpTime_newID[harmonyDB_ID_atBackupTime] = harmonyDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Harmony file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Harmony>id_atBckpTime_newID
// to compute new index
func (backRepoHarmony *BackRepoHarmonyStruct) RestorePhaseTwo() {

	for _, harmonyDB := range backRepoHarmony.Map_HarmonyDBID_HarmonyDB {

		// next line of code is to avert unused variable compilation error
		_ = harmonyDB

		// insertion point for reindexing pointers encoding
		// reindexing Frame field
		if harmonyDB.FrameID.Int64 != 0 {
			harmonyDB.FrameID.Int64 = int64(BackRepoFrameid_atBckpTime_newID[uint(harmonyDB.FrameID.Int64)])
			harmonyDB.FrameID.Valid = true
		}

		// reindexing Offset field
		if harmonyDB.OffsetID.Int64 != 0 {
			harmonyDB.OffsetID.Int64 = int64(BackRepoOffsetid_atBckpTime_newID[uint(harmonyDB.OffsetID.Int64)])
			harmonyDB.OffsetID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoHarmony.db.Model(harmonyDB).Updates(*harmonyDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHarmony.ResetReversePointers commits all staged instances of Harmony to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony *BackRepoHarmonyStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, harmony := range backRepoHarmony.Map_HarmonyDBID_HarmonyPtr {
		backRepoHarmony.ResetReversePointersInstance(backRepo, idx, harmony)
	}

	return
}

func (backRepoHarmony *BackRepoHarmonyStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, harmony *models.Harmony) (Error error) {

	// fetch matching harmonyDB
	if harmonyDB, ok := backRepoHarmony.Map_HarmonyDBID_HarmonyDB[idx]; ok {
		_ = harmonyDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHarmonyid_atBckpTime_newID map[uint]uint
