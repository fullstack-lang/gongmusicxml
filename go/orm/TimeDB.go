// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Time_sql sql.NullBool
var dummy_Time_time time.Duration
var dummy_Time_sort sort.Float64Slice

// TimeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model timeAPI
type TimeAPI struct {
	gorm.Model

	models.Time_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TimePointersEncoding TimePointersEncoding
}

// TimePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TimePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TimeDB describes a time in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model timeDB
type TimeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field timeDB.Name
	Name_Data sql.NullString

	// Declation for basic field timeDB.Senza_misura
	Senza_misura_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TimePointersEncoding
}

// TimeDBs arrays timeDBs
// swagger:response timeDBsResponse
type TimeDBs []TimeDB

// TimeDBResponse provides response
// swagger:response timeDBResponse
type TimeDBResponse struct {
	TimeDB
}

// TimeWOP is a Time without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TimeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Senza_misura string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Time_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Senza_misura",
}

type BackRepoTimeStruct struct {
	// stores TimeDB according to their gorm ID
	Map_TimeDBID_TimeDB map[uint]*TimeDB

	// stores TimeDB ID according to Time address
	Map_TimePtr_TimeDBID map[*models.Time]uint

	// stores Time according to their gorm ID
	Map_TimeDBID_TimePtr map[uint]*models.Time

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTime *BackRepoTimeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTime.stage
	return
}

func (backRepoTime *BackRepoTimeStruct) GetDB() *gorm.DB {
	return backRepoTime.db
}

// GetTimeDBFromTimePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTime *BackRepoTimeStruct) GetTimeDBFromTimePtr(time *models.Time) (timeDB *TimeDB) {
	id := backRepoTime.Map_TimePtr_TimeDBID[time]
	timeDB = backRepoTime.Map_TimeDBID_TimeDB[id]
	return
}

// BackRepoTime.CommitPhaseOne commits all staged instances of Time to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTime *BackRepoTimeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for time := range stage.Times {
		backRepoTime.CommitPhaseOneInstance(time)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, time := range backRepoTime.Map_TimeDBID_TimePtr {
		if _, ok := stage.Times[time]; !ok {
			backRepoTime.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTime.CommitDeleteInstance commits deletion of Time to the BackRepo
func (backRepoTime *BackRepoTimeStruct) CommitDeleteInstance(id uint) (Error error) {

	time := backRepoTime.Map_TimeDBID_TimePtr[id]

	// time is not staged anymore, remove timeDB
	timeDB := backRepoTime.Map_TimeDBID_TimeDB[id]
	query := backRepoTime.db.Unscoped().Delete(&timeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTime.Map_TimePtr_TimeDBID, time)
	delete(backRepoTime.Map_TimeDBID_TimePtr, id)
	delete(backRepoTime.Map_TimeDBID_TimeDB, id)

	return
}

// BackRepoTime.CommitPhaseOneInstance commits time staged instances of Time to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTime *BackRepoTimeStruct) CommitPhaseOneInstance(time *models.Time) (Error error) {

	// check if the time is not commited yet
	if _, ok := backRepoTime.Map_TimePtr_TimeDBID[time]; ok {
		return
	}

	// initiate time
	var timeDB TimeDB
	timeDB.CopyBasicFieldsFromTime(time)

	query := backRepoTime.db.Create(&timeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTime.Map_TimePtr_TimeDBID[time] = timeDB.ID
	backRepoTime.Map_TimeDBID_TimePtr[timeDB.ID] = time
	backRepoTime.Map_TimeDBID_TimeDB[timeDB.ID] = &timeDB

	return
}

// BackRepoTime.CommitPhaseTwo commits all staged instances of Time to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime *BackRepoTimeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, time := range backRepoTime.Map_TimeDBID_TimePtr {
		backRepoTime.CommitPhaseTwoInstance(backRepo, idx, time)
	}

	return
}

// BackRepoTime.CommitPhaseTwoInstance commits {{structname }} of models.Time to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime *BackRepoTimeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, time *models.Time) (Error error) {

	// fetch matching timeDB
	if timeDB, ok := backRepoTime.Map_TimeDBID_TimeDB[idx]; ok {

		timeDB.CopyBasicFieldsFromTime(time)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTime.db.Save(&timeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Time intance %s", time.Name))
		return err
	}

	return
}

// BackRepoTime.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTime *BackRepoTimeStruct) CheckoutPhaseOne() (Error error) {

	timeDBArray := make([]TimeDB, 0)
	query := backRepoTime.db.Find(&timeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	timeInstancesToBeRemovedFromTheStage := make(map[*models.Time]any)
	for key, value := range backRepoTime.stage.Times {
		timeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, timeDB := range timeDBArray {
		backRepoTime.CheckoutPhaseOneInstance(&timeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		time, ok := backRepoTime.Map_TimeDBID_TimePtr[timeDB.ID]
		if ok {
			delete(timeInstancesToBeRemovedFromTheStage, time)
		}
	}

	// remove from stage and back repo's 3 maps all times that are not in the checkout
	for time := range timeInstancesToBeRemovedFromTheStage {
		time.Unstage(backRepoTime.GetStage())

		// remove instance from the back repo 3 maps
		timeID := backRepoTime.Map_TimePtr_TimeDBID[time]
		delete(backRepoTime.Map_TimePtr_TimeDBID, time)
		delete(backRepoTime.Map_TimeDBID_TimeDB, timeID)
		delete(backRepoTime.Map_TimeDBID_TimePtr, timeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a timeDB that has been found in the DB, updates the backRepo and stages the
// models version of the timeDB
func (backRepoTime *BackRepoTimeStruct) CheckoutPhaseOneInstance(timeDB *TimeDB) (Error error) {

	time, ok := backRepoTime.Map_TimeDBID_TimePtr[timeDB.ID]
	if !ok {
		time = new(models.Time)

		backRepoTime.Map_TimeDBID_TimePtr[timeDB.ID] = time
		backRepoTime.Map_TimePtr_TimeDBID[time] = timeDB.ID

		// append model store with the new element
		time.Name = timeDB.Name_Data.String
		time.Stage(backRepoTime.GetStage())
	}
	timeDB.CopyBasicFieldsToTime(time)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	time.Stage(backRepoTime.GetStage())

	// preserve pointer to timeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TimeDBID_TimeDB)[timeDB hold variable pointers
	timeDB_Data := *timeDB
	preservedPtrToTime := &timeDB_Data
	backRepoTime.Map_TimeDBID_TimeDB[timeDB.ID] = preservedPtrToTime

	return
}

// BackRepoTime.CheckoutPhaseTwo Checkouts all staged instances of Time to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime *BackRepoTimeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, timeDB := range backRepoTime.Map_TimeDBID_TimeDB {
		backRepoTime.CheckoutPhaseTwoInstance(backRepo, timeDB)
	}
	return
}

// BackRepoTime.CheckoutPhaseTwoInstance Checkouts staged instances of Time to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime *BackRepoTimeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, timeDB *TimeDB) (Error error) {

	time := backRepoTime.Map_TimeDBID_TimePtr[timeDB.ID]

	timeDB.DecodePointers(backRepo, time)

	return
}

func (timeDB *TimeDB) DecodePointers(backRepo *BackRepoStruct, time *models.Time) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTime allows commit of a single time (if already staged)
func (backRepo *BackRepoStruct) CommitTime(time *models.Time) {
	backRepo.BackRepoTime.CommitPhaseOneInstance(time)
	if id, ok := backRepo.BackRepoTime.Map_TimePtr_TimeDBID[time]; ok {
		backRepo.BackRepoTime.CommitPhaseTwoInstance(backRepo, id, time)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTime allows checkout of a single time (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTime(time *models.Time) {
	// check if the time is staged
	if _, ok := backRepo.BackRepoTime.Map_TimePtr_TimeDBID[time]; ok {

		if id, ok := backRepo.BackRepoTime.Map_TimePtr_TimeDBID[time]; ok {
			var timeDB TimeDB
			timeDB.ID = id

			if err := backRepo.BackRepoTime.db.First(&timeDB, id).Error; err != nil {
				log.Fatalln("CheckoutTime : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTime.CheckoutPhaseOneInstance(&timeDB)
			backRepo.BackRepoTime.CheckoutPhaseTwoInstance(backRepo, &timeDB)
		}
	}
}

// CopyBasicFieldsFromTime
func (timeDB *TimeDB) CopyBasicFieldsFromTime(time *models.Time) {
	// insertion point for fields commit

	timeDB.Name_Data.String = time.Name
	timeDB.Name_Data.Valid = true

	timeDB.Senza_misura_Data.String = time.Senza_misura
	timeDB.Senza_misura_Data.Valid = true
}

// CopyBasicFieldsFromTime_WOP
func (timeDB *TimeDB) CopyBasicFieldsFromTime_WOP(time *models.Time_WOP) {
	// insertion point for fields commit

	timeDB.Name_Data.String = time.Name
	timeDB.Name_Data.Valid = true

	timeDB.Senza_misura_Data.String = time.Senza_misura
	timeDB.Senza_misura_Data.Valid = true
}

// CopyBasicFieldsFromTimeWOP
func (timeDB *TimeDB) CopyBasicFieldsFromTimeWOP(time *TimeWOP) {
	// insertion point for fields commit

	timeDB.Name_Data.String = time.Name
	timeDB.Name_Data.Valid = true

	timeDB.Senza_misura_Data.String = time.Senza_misura
	timeDB.Senza_misura_Data.Valid = true
}

// CopyBasicFieldsToTime
func (timeDB *TimeDB) CopyBasicFieldsToTime(time *models.Time) {
	// insertion point for checkout of basic fields (back repo to stage)
	time.Name = timeDB.Name_Data.String
	time.Senza_misura = timeDB.Senza_misura_Data.String
}

// CopyBasicFieldsToTime_WOP
func (timeDB *TimeDB) CopyBasicFieldsToTime_WOP(time *models.Time_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	time.Name = timeDB.Name_Data.String
	time.Senza_misura = timeDB.Senza_misura_Data.String
}

// CopyBasicFieldsToTimeWOP
func (timeDB *TimeDB) CopyBasicFieldsToTimeWOP(time *TimeWOP) {
	time.ID = int(timeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	time.Name = timeDB.Name_Data.String
	time.Senza_misura = timeDB.Senza_misura_Data.String
}

// Backup generates a json file from a slice of all TimeDB instances in the backrepo
func (backRepoTime *BackRepoTimeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TimeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TimeDB, 0)
	for _, timeDB := range backRepoTime.Map_TimeDBID_TimeDB {
		forBackup = append(forBackup, timeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Time ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Time file", err.Error())
	}
}

// Backup generates a json file from a slice of all TimeDB instances in the backrepo
func (backRepoTime *BackRepoTimeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TimeDB, 0)
	for _, timeDB := range backRepoTime.Map_TimeDBID_TimeDB {
		forBackup = append(forBackup, timeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Time")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Time_Fields, -1)
	for _, timeDB := range forBackup {

		var timeWOP TimeWOP
		timeDB.CopyBasicFieldsToTimeWOP(&timeWOP)

		row := sh.AddRow()
		row.WriteStruct(&timeWOP, -1)
	}
}

// RestoreXL from the "Time" sheet all TimeDB instances
func (backRepoTime *BackRepoTimeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTimeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Time"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTime.rowVisitorTime)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTime *BackRepoTimeStruct) rowVisitorTime(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var timeWOP TimeWOP
		row.ReadStruct(&timeWOP)

		// add the unmarshalled struct to the stage
		timeDB := new(TimeDB)
		timeDB.CopyBasicFieldsFromTimeWOP(&timeWOP)

		timeDB_ID_atBackupTime := timeDB.ID
		timeDB.ID = 0
		query := backRepoTime.db.Create(timeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTime.Map_TimeDBID_TimeDB[timeDB.ID] = timeDB
		BackRepoTimeid_atBckpTime_newID[timeDB_ID_atBackupTime] = timeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TimeDB.json" in dirPath that stores an array
// of TimeDB and stores it in the database
// the map BackRepoTimeid_atBckpTime_newID is updated accordingly
func (backRepoTime *BackRepoTimeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTimeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TimeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Time file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TimeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TimeDBID_TimeDB
	for _, timeDB := range forRestore {

		timeDB_ID_atBackupTime := timeDB.ID
		timeDB.ID = 0
		query := backRepoTime.db.Create(timeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTime.Map_TimeDBID_TimeDB[timeDB.ID] = timeDB
		BackRepoTimeid_atBckpTime_newID[timeDB_ID_atBackupTime] = timeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Time file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Time>id_atBckpTime_newID
// to compute new index
func (backRepoTime *BackRepoTimeStruct) RestorePhaseTwo() {

	for _, timeDB := range backRepoTime.Map_TimeDBID_TimeDB {

		// next line of code is to avert unused variable compilation error
		_ = timeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTime.db.Model(timeDB).Updates(*timeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTime.ResetReversePointers commits all staged instances of Time to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime *BackRepoTimeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, time := range backRepoTime.Map_TimeDBID_TimePtr {
		backRepoTime.ResetReversePointersInstance(backRepo, idx, time)
	}

	return
}

func (backRepoTime *BackRepoTimeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, time *models.Time) (Error error) {

	// fetch matching timeDB
	if timeDB, ok := backRepoTime.Map_TimeDBID_TimeDB[idx]; ok {
		_ = timeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTimeid_atBckpTime_newID map[uint]uint
