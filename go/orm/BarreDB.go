// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Barre_sql sql.NullBool
var dummy_Barre_time time.Duration
var dummy_Barre_sort sort.Float64Slice

// BarreAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model barreAPI
type BarreAPI struct {
	gorm.Model

	models.Barre_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BarrePointersEncoding BarrePointersEncoding
}

// BarrePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BarrePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// BarreDB describes a barre in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model barreDB
type BarreDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field barreDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BarrePointersEncoding
}

// BarreDBs arrays barreDBs
// swagger:response barreDBsResponse
type BarreDBs []BarreDB

// BarreDBResponse provides response
// swagger:response barreDBResponse
type BarreDBResponse struct {
	BarreDB
}

// BarreWOP is a Barre without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BarreWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Barre_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBarreStruct struct {
	// stores BarreDB according to their gorm ID
	Map_BarreDBID_BarreDB map[uint]*BarreDB

	// stores BarreDB ID according to Barre address
	Map_BarrePtr_BarreDBID map[*models.Barre]uint

	// stores Barre according to their gorm ID
	Map_BarreDBID_BarrePtr map[uint]*models.Barre

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBarre *BackRepoBarreStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBarre.stage
	return
}

func (backRepoBarre *BackRepoBarreStruct) GetDB() *gorm.DB {
	return backRepoBarre.db
}

// GetBarreDBFromBarrePtr is a handy function to access the back repo instance from the stage instance
func (backRepoBarre *BackRepoBarreStruct) GetBarreDBFromBarrePtr(barre *models.Barre) (barreDB *BarreDB) {
	id := backRepoBarre.Map_BarrePtr_BarreDBID[barre]
	barreDB = backRepoBarre.Map_BarreDBID_BarreDB[id]
	return
}

// BackRepoBarre.CommitPhaseOne commits all staged instances of Barre to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBarre *BackRepoBarreStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for barre := range stage.Barres {
		backRepoBarre.CommitPhaseOneInstance(barre)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, barre := range backRepoBarre.Map_BarreDBID_BarrePtr {
		if _, ok := stage.Barres[barre]; !ok {
			backRepoBarre.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBarre.CommitDeleteInstance commits deletion of Barre to the BackRepo
func (backRepoBarre *BackRepoBarreStruct) CommitDeleteInstance(id uint) (Error error) {

	barre := backRepoBarre.Map_BarreDBID_BarrePtr[id]

	// barre is not staged anymore, remove barreDB
	barreDB := backRepoBarre.Map_BarreDBID_BarreDB[id]
	query := backRepoBarre.db.Unscoped().Delete(&barreDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBarre.Map_BarrePtr_BarreDBID, barre)
	delete(backRepoBarre.Map_BarreDBID_BarrePtr, id)
	delete(backRepoBarre.Map_BarreDBID_BarreDB, id)

	return
}

// BackRepoBarre.CommitPhaseOneInstance commits barre staged instances of Barre to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBarre *BackRepoBarreStruct) CommitPhaseOneInstance(barre *models.Barre) (Error error) {

	// check if the barre is not commited yet
	if _, ok := backRepoBarre.Map_BarrePtr_BarreDBID[barre]; ok {
		return
	}

	// initiate barre
	var barreDB BarreDB
	barreDB.CopyBasicFieldsFromBarre(barre)

	query := backRepoBarre.db.Create(&barreDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBarre.Map_BarrePtr_BarreDBID[barre] = barreDB.ID
	backRepoBarre.Map_BarreDBID_BarrePtr[barreDB.ID] = barre
	backRepoBarre.Map_BarreDBID_BarreDB[barreDB.ID] = &barreDB

	return
}

// BackRepoBarre.CommitPhaseTwo commits all staged instances of Barre to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarre *BackRepoBarreStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, barre := range backRepoBarre.Map_BarreDBID_BarrePtr {
		backRepoBarre.CommitPhaseTwoInstance(backRepo, idx, barre)
	}

	return
}

// BackRepoBarre.CommitPhaseTwoInstance commits {{structname }} of models.Barre to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarre *BackRepoBarreStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, barre *models.Barre) (Error error) {

	// fetch matching barreDB
	if barreDB, ok := backRepoBarre.Map_BarreDBID_BarreDB[idx]; ok {

		barreDB.CopyBasicFieldsFromBarre(barre)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBarre.db.Save(&barreDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Barre intance %s", barre.Name))
		return err
	}

	return
}

// BackRepoBarre.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBarre *BackRepoBarreStruct) CheckoutPhaseOne() (Error error) {

	barreDBArray := make([]BarreDB, 0)
	query := backRepoBarre.db.Find(&barreDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	barreInstancesToBeRemovedFromTheStage := make(map[*models.Barre]any)
	for key, value := range backRepoBarre.stage.Barres {
		barreInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, barreDB := range barreDBArray {
		backRepoBarre.CheckoutPhaseOneInstance(&barreDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		barre, ok := backRepoBarre.Map_BarreDBID_BarrePtr[barreDB.ID]
		if ok {
			delete(barreInstancesToBeRemovedFromTheStage, barre)
		}
	}

	// remove from stage and back repo's 3 maps all barres that are not in the checkout
	for barre := range barreInstancesToBeRemovedFromTheStage {
		barre.Unstage(backRepoBarre.GetStage())

		// remove instance from the back repo 3 maps
		barreID := backRepoBarre.Map_BarrePtr_BarreDBID[barre]
		delete(backRepoBarre.Map_BarrePtr_BarreDBID, barre)
		delete(backRepoBarre.Map_BarreDBID_BarreDB, barreID)
		delete(backRepoBarre.Map_BarreDBID_BarrePtr, barreID)
	}

	return
}

// CheckoutPhaseOneInstance takes a barreDB that has been found in the DB, updates the backRepo and stages the
// models version of the barreDB
func (backRepoBarre *BackRepoBarreStruct) CheckoutPhaseOneInstance(barreDB *BarreDB) (Error error) {

	barre, ok := backRepoBarre.Map_BarreDBID_BarrePtr[barreDB.ID]
	if !ok {
		barre = new(models.Barre)

		backRepoBarre.Map_BarreDBID_BarrePtr[barreDB.ID] = barre
		backRepoBarre.Map_BarrePtr_BarreDBID[barre] = barreDB.ID

		// append model store with the new element
		barre.Name = barreDB.Name_Data.String
		barre.Stage(backRepoBarre.GetStage())
	}
	barreDB.CopyBasicFieldsToBarre(barre)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	barre.Stage(backRepoBarre.GetStage())

	// preserve pointer to barreDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BarreDBID_BarreDB)[barreDB hold variable pointers
	barreDB_Data := *barreDB
	preservedPtrToBarre := &barreDB_Data
	backRepoBarre.Map_BarreDBID_BarreDB[barreDB.ID] = preservedPtrToBarre

	return
}

// BackRepoBarre.CheckoutPhaseTwo Checkouts all staged instances of Barre to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarre *BackRepoBarreStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, barreDB := range backRepoBarre.Map_BarreDBID_BarreDB {
		backRepoBarre.CheckoutPhaseTwoInstance(backRepo, barreDB)
	}
	return
}

// BackRepoBarre.CheckoutPhaseTwoInstance Checkouts staged instances of Barre to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarre *BackRepoBarreStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, barreDB *BarreDB) (Error error) {

	barre := backRepoBarre.Map_BarreDBID_BarrePtr[barreDB.ID]

	barreDB.DecodePointers(backRepo, barre)

	return
}

func (barreDB *BarreDB) DecodePointers(backRepo *BackRepoStruct, barre *models.Barre) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBarre allows commit of a single barre (if already staged)
func (backRepo *BackRepoStruct) CommitBarre(barre *models.Barre) {
	backRepo.BackRepoBarre.CommitPhaseOneInstance(barre)
	if id, ok := backRepo.BackRepoBarre.Map_BarrePtr_BarreDBID[barre]; ok {
		backRepo.BackRepoBarre.CommitPhaseTwoInstance(backRepo, id, barre)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBarre allows checkout of a single barre (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBarre(barre *models.Barre) {
	// check if the barre is staged
	if _, ok := backRepo.BackRepoBarre.Map_BarrePtr_BarreDBID[barre]; ok {

		if id, ok := backRepo.BackRepoBarre.Map_BarrePtr_BarreDBID[barre]; ok {
			var barreDB BarreDB
			barreDB.ID = id

			if err := backRepo.BackRepoBarre.db.First(&barreDB, id).Error; err != nil {
				log.Fatalln("CheckoutBarre : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBarre.CheckoutPhaseOneInstance(&barreDB)
			backRepo.BackRepoBarre.CheckoutPhaseTwoInstance(backRepo, &barreDB)
		}
	}
}

// CopyBasicFieldsFromBarre
func (barreDB *BarreDB) CopyBasicFieldsFromBarre(barre *models.Barre) {
	// insertion point for fields commit

	barreDB.Name_Data.String = barre.Name
	barreDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBarre_WOP
func (barreDB *BarreDB) CopyBasicFieldsFromBarre_WOP(barre *models.Barre_WOP) {
	// insertion point for fields commit

	barreDB.Name_Data.String = barre.Name
	barreDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBarreWOP
func (barreDB *BarreDB) CopyBasicFieldsFromBarreWOP(barre *BarreWOP) {
	// insertion point for fields commit

	barreDB.Name_Data.String = barre.Name
	barreDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBarre
func (barreDB *BarreDB) CopyBasicFieldsToBarre(barre *models.Barre) {
	// insertion point for checkout of basic fields (back repo to stage)
	barre.Name = barreDB.Name_Data.String
}

// CopyBasicFieldsToBarre_WOP
func (barreDB *BarreDB) CopyBasicFieldsToBarre_WOP(barre *models.Barre_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	barre.Name = barreDB.Name_Data.String
}

// CopyBasicFieldsToBarreWOP
func (barreDB *BarreDB) CopyBasicFieldsToBarreWOP(barre *BarreWOP) {
	barre.ID = int(barreDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	barre.Name = barreDB.Name_Data.String
}

// Backup generates a json file from a slice of all BarreDB instances in the backrepo
func (backRepoBarre *BackRepoBarreStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BarreDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BarreDB, 0)
	for _, barreDB := range backRepoBarre.Map_BarreDBID_BarreDB {
		forBackup = append(forBackup, barreDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Barre ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Barre file", err.Error())
	}
}

// Backup generates a json file from a slice of all BarreDB instances in the backrepo
func (backRepoBarre *BackRepoBarreStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BarreDB, 0)
	for _, barreDB := range backRepoBarre.Map_BarreDBID_BarreDB {
		forBackup = append(forBackup, barreDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Barre")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Barre_Fields, -1)
	for _, barreDB := range forBackup {

		var barreWOP BarreWOP
		barreDB.CopyBasicFieldsToBarreWOP(&barreWOP)

		row := sh.AddRow()
		row.WriteStruct(&barreWOP, -1)
	}
}

// RestoreXL from the "Barre" sheet all BarreDB instances
func (backRepoBarre *BackRepoBarreStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBarreid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Barre"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBarre.rowVisitorBarre)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBarre *BackRepoBarreStruct) rowVisitorBarre(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var barreWOP BarreWOP
		row.ReadStruct(&barreWOP)

		// add the unmarshalled struct to the stage
		barreDB := new(BarreDB)
		barreDB.CopyBasicFieldsFromBarreWOP(&barreWOP)

		barreDB_ID_atBackupTime := barreDB.ID
		barreDB.ID = 0
		query := backRepoBarre.db.Create(barreDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBarre.Map_BarreDBID_BarreDB[barreDB.ID] = barreDB
		BackRepoBarreid_atBckpTime_newID[barreDB_ID_atBackupTime] = barreDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BarreDB.json" in dirPath that stores an array
// of BarreDB and stores it in the database
// the map BackRepoBarreid_atBckpTime_newID is updated accordingly
func (backRepoBarre *BackRepoBarreStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBarreid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BarreDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Barre file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BarreDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BarreDBID_BarreDB
	for _, barreDB := range forRestore {

		barreDB_ID_atBackupTime := barreDB.ID
		barreDB.ID = 0
		query := backRepoBarre.db.Create(barreDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBarre.Map_BarreDBID_BarreDB[barreDB.ID] = barreDB
		BackRepoBarreid_atBckpTime_newID[barreDB_ID_atBackupTime] = barreDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Barre file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Barre>id_atBckpTime_newID
// to compute new index
func (backRepoBarre *BackRepoBarreStruct) RestorePhaseTwo() {

	for _, barreDB := range backRepoBarre.Map_BarreDBID_BarreDB {

		// next line of code is to avert unused variable compilation error
		_ = barreDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBarre.db.Model(barreDB).Updates(*barreDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBarre.ResetReversePointers commits all staged instances of Barre to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBarre *BackRepoBarreStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, barre := range backRepoBarre.Map_BarreDBID_BarrePtr {
		backRepoBarre.ResetReversePointersInstance(backRepo, idx, barre)
	}

	return
}

func (backRepoBarre *BackRepoBarreStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, barre *models.Barre) (Error error) {

	// fetch matching barreDB
	if barreDB, ok := backRepoBarre.Map_BarreDBID_BarreDB[idx]; ok {
		_ = barreDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBarreid_atBckpTime_newID map[uint]uint
