// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Staff_layout_sql sql.NullBool
var dummy_Staff_layout_time time.Duration
var dummy_Staff_layout_sort sort.Float64Slice

// Staff_layoutAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staff_layoutAPI
type Staff_layoutAPI struct {
	gorm.Model

	models.Staff_layout_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Staff_layoutPointersEncoding Staff_layoutPointersEncoding
}

// Staff_layoutPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Staff_layoutPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Staff_layoutDB describes a staff_layout in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staff_layoutDB
type Staff_layoutDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staff_layoutDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Staff_layoutPointersEncoding
}

// Staff_layoutDBs arrays staff_layoutDBs
// swagger:response staff_layoutDBsResponse
type Staff_layoutDBs []Staff_layoutDB

// Staff_layoutDBResponse provides response
// swagger:response staff_layoutDBResponse
type Staff_layoutDBResponse struct {
	Staff_layoutDB
}

// Staff_layoutWOP is a Staff_layout without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Staff_layoutWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Staff_layout_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoStaff_layoutStruct struct {
	// stores Staff_layoutDB according to their gorm ID
	Map_Staff_layoutDBID_Staff_layoutDB map[uint]*Staff_layoutDB

	// stores Staff_layoutDB ID according to Staff_layout address
	Map_Staff_layoutPtr_Staff_layoutDBID map[*models.Staff_layout]uint

	// stores Staff_layout according to their gorm ID
	Map_Staff_layoutDBID_Staff_layoutPtr map[uint]*models.Staff_layout

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoStaff_layout *BackRepoStaff_layoutStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoStaff_layout.stage
	return
}

func (backRepoStaff_layout *BackRepoStaff_layoutStruct) GetDB() *gorm.DB {
	return backRepoStaff_layout.db
}

// GetStaff_layoutDBFromStaff_layoutPtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) GetStaff_layoutDBFromStaff_layoutPtr(staff_layout *models.Staff_layout) (staff_layoutDB *Staff_layoutDB) {
	id := backRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout]
	staff_layoutDB = backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[id]
	return
}

// BackRepoStaff_layout.CommitPhaseOne commits all staged instances of Staff_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for staff_layout := range stage.Staff_layouts {
		backRepoStaff_layout.CommitPhaseOneInstance(staff_layout)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staff_layout := range backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr {
		if _, ok := stage.Staff_layouts[staff_layout]; !ok {
			backRepoStaff_layout.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaff_layout.CommitDeleteInstance commits deletion of Staff_layout to the BackRepo
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CommitDeleteInstance(id uint) (Error error) {

	staff_layout := backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr[id]

	// staff_layout is not staged anymore, remove staff_layoutDB
	staff_layoutDB := backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[id]
	query := backRepoStaff_layout.db.Unscoped().Delete(&staff_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID, staff_layout)
	delete(backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr, id)
	delete(backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB, id)

	return
}

// BackRepoStaff_layout.CommitPhaseOneInstance commits staff_layout staged instances of Staff_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CommitPhaseOneInstance(staff_layout *models.Staff_layout) (Error error) {

	// check if the staff_layout is not commited yet
	if _, ok := backRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout]; ok {
		return
	}

	// initiate staff_layout
	var staff_layoutDB Staff_layoutDB
	staff_layoutDB.CopyBasicFieldsFromStaff_layout(staff_layout)

	query := backRepoStaff_layout.db.Create(&staff_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout] = staff_layoutDB.ID
	backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr[staff_layoutDB.ID] = staff_layout
	backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[staff_layoutDB.ID] = &staff_layoutDB

	return
}

// BackRepoStaff_layout.CommitPhaseTwo commits all staged instances of Staff_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_layout := range backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr {
		backRepoStaff_layout.CommitPhaseTwoInstance(backRepo, idx, staff_layout)
	}

	return
}

// BackRepoStaff_layout.CommitPhaseTwoInstance commits {{structname }} of models.Staff_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staff_layout *models.Staff_layout) (Error error) {

	// fetch matching staff_layoutDB
	if staff_layoutDB, ok := backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[idx]; ok {

		staff_layoutDB.CopyBasicFieldsFromStaff_layout(staff_layout)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoStaff_layout.db.Save(&staff_layoutDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Staff_layout intance %s", staff_layout.Name))
		return err
	}

	return
}

// BackRepoStaff_layout.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CheckoutPhaseOne() (Error error) {

	staff_layoutDBArray := make([]Staff_layoutDB, 0)
	query := backRepoStaff_layout.db.Find(&staff_layoutDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staff_layoutInstancesToBeRemovedFromTheStage := make(map[*models.Staff_layout]any)
	for key, value := range backRepoStaff_layout.stage.Staff_layouts {
		staff_layoutInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staff_layoutDB := range staff_layoutDBArray {
		backRepoStaff_layout.CheckoutPhaseOneInstance(&staff_layoutDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staff_layout, ok := backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr[staff_layoutDB.ID]
		if ok {
			delete(staff_layoutInstancesToBeRemovedFromTheStage, staff_layout)
		}
	}

	// remove from stage and back repo's 3 maps all staff_layouts that are not in the checkout
	for staff_layout := range staff_layoutInstancesToBeRemovedFromTheStage {
		staff_layout.Unstage(backRepoStaff_layout.GetStage())

		// remove instance from the back repo 3 maps
		staff_layoutID := backRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout]
		delete(backRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID, staff_layout)
		delete(backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB, staff_layoutID)
		delete(backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr, staff_layoutID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staff_layoutDB that has been found in the DB, updates the backRepo and stages the
// models version of the staff_layoutDB
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CheckoutPhaseOneInstance(staff_layoutDB *Staff_layoutDB) (Error error) {

	staff_layout, ok := backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr[staff_layoutDB.ID]
	if !ok {
		staff_layout = new(models.Staff_layout)

		backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr[staff_layoutDB.ID] = staff_layout
		backRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout] = staff_layoutDB.ID

		// append model store with the new element
		staff_layout.Name = staff_layoutDB.Name_Data.String
		staff_layout.Stage(backRepoStaff_layout.GetStage())
	}
	staff_layoutDB.CopyBasicFieldsToStaff_layout(staff_layout)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staff_layout.Stage(backRepoStaff_layout.GetStage())

	// preserve pointer to staff_layoutDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Staff_layoutDBID_Staff_layoutDB)[staff_layoutDB hold variable pointers
	staff_layoutDB_Data := *staff_layoutDB
	preservedPtrToStaff_layout := &staff_layoutDB_Data
	backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[staff_layoutDB.ID] = preservedPtrToStaff_layout

	return
}

// BackRepoStaff_layout.CheckoutPhaseTwo Checkouts all staged instances of Staff_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staff_layoutDB := range backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB {
		backRepoStaff_layout.CheckoutPhaseTwoInstance(backRepo, staff_layoutDB)
	}
	return
}

// BackRepoStaff_layout.CheckoutPhaseTwoInstance Checkouts staged instances of Staff_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staff_layoutDB *Staff_layoutDB) (Error error) {

	staff_layout := backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr[staff_layoutDB.ID]

	staff_layoutDB.DecodePointers(backRepo, staff_layout)

	return
}

func (staff_layoutDB *Staff_layoutDB) DecodePointers(backRepo *BackRepoStruct, staff_layout *models.Staff_layout) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStaff_layout allows commit of a single staff_layout (if already staged)
func (backRepo *BackRepoStruct) CommitStaff_layout(staff_layout *models.Staff_layout) {
	backRepo.BackRepoStaff_layout.CommitPhaseOneInstance(staff_layout)
	if id, ok := backRepo.BackRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout]; ok {
		backRepo.BackRepoStaff_layout.CommitPhaseTwoInstance(backRepo, id, staff_layout)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaff_layout allows checkout of a single staff_layout (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaff_layout(staff_layout *models.Staff_layout) {
	// check if the staff_layout is staged
	if _, ok := backRepo.BackRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout]; ok {

		if id, ok := backRepo.BackRepoStaff_layout.Map_Staff_layoutPtr_Staff_layoutDBID[staff_layout]; ok {
			var staff_layoutDB Staff_layoutDB
			staff_layoutDB.ID = id

			if err := backRepo.BackRepoStaff_layout.db.First(&staff_layoutDB, id).Error; err != nil {
				log.Fatalln("CheckoutStaff_layout : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaff_layout.CheckoutPhaseOneInstance(&staff_layoutDB)
			backRepo.BackRepoStaff_layout.CheckoutPhaseTwoInstance(backRepo, &staff_layoutDB)
		}
	}
}

// CopyBasicFieldsFromStaff_layout
func (staff_layoutDB *Staff_layoutDB) CopyBasicFieldsFromStaff_layout(staff_layout *models.Staff_layout) {
	// insertion point for fields commit

	staff_layoutDB.Name_Data.String = staff_layout.Name
	staff_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_layout_WOP
func (staff_layoutDB *Staff_layoutDB) CopyBasicFieldsFromStaff_layout_WOP(staff_layout *models.Staff_layout_WOP) {
	// insertion point for fields commit

	staff_layoutDB.Name_Data.String = staff_layout.Name
	staff_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_layoutWOP
func (staff_layoutDB *Staff_layoutDB) CopyBasicFieldsFromStaff_layoutWOP(staff_layout *Staff_layoutWOP) {
	// insertion point for fields commit

	staff_layoutDB.Name_Data.String = staff_layout.Name
	staff_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsToStaff_layout
func (staff_layoutDB *Staff_layoutDB) CopyBasicFieldsToStaff_layout(staff_layout *models.Staff_layout) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_layout.Name = staff_layoutDB.Name_Data.String
}

// CopyBasicFieldsToStaff_layout_WOP
func (staff_layoutDB *Staff_layoutDB) CopyBasicFieldsToStaff_layout_WOP(staff_layout *models.Staff_layout_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_layout.Name = staff_layoutDB.Name_Data.String
}

// CopyBasicFieldsToStaff_layoutWOP
func (staff_layoutDB *Staff_layoutDB) CopyBasicFieldsToStaff_layoutWOP(staff_layout *Staff_layoutWOP) {
	staff_layout.ID = int(staff_layoutDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staff_layout.Name = staff_layoutDB.Name_Data.String
}

// Backup generates a json file from a slice of all Staff_layoutDB instances in the backrepo
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Staff_layoutDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_layoutDB, 0)
	for _, staff_layoutDB := range backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB {
		forBackup = append(forBackup, staff_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Staff_layout ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Staff_layout file", err.Error())
	}
}

// Backup generates a json file from a slice of all Staff_layoutDB instances in the backrepo
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_layoutDB, 0)
	for _, staff_layoutDB := range backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB {
		forBackup = append(forBackup, staff_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Staff_layout")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Staff_layout_Fields, -1)
	for _, staff_layoutDB := range forBackup {

		var staff_layoutWOP Staff_layoutWOP
		staff_layoutDB.CopyBasicFieldsToStaff_layoutWOP(&staff_layoutWOP)

		row := sh.AddRow()
		row.WriteStruct(&staff_layoutWOP, -1)
	}
}

// RestoreXL from the "Staff_layout" sheet all Staff_layoutDB instances
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaff_layoutid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Staff_layout"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaff_layout.rowVisitorStaff_layout)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaff_layout *BackRepoStaff_layoutStruct) rowVisitorStaff_layout(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staff_layoutWOP Staff_layoutWOP
		row.ReadStruct(&staff_layoutWOP)

		// add the unmarshalled struct to the stage
		staff_layoutDB := new(Staff_layoutDB)
		staff_layoutDB.CopyBasicFieldsFromStaff_layoutWOP(&staff_layoutWOP)

		staff_layoutDB_ID_atBackupTime := staff_layoutDB.ID
		staff_layoutDB.ID = 0
		query := backRepoStaff_layout.db.Create(staff_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[staff_layoutDB.ID] = staff_layoutDB
		BackRepoStaff_layoutid_atBckpTime_newID[staff_layoutDB_ID_atBackupTime] = staff_layoutDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Staff_layoutDB.json" in dirPath that stores an array
// of Staff_layoutDB and stores it in the database
// the map BackRepoStaff_layoutid_atBckpTime_newID is updated accordingly
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaff_layoutid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Staff_layoutDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Staff_layout file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Staff_layoutDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Staff_layoutDBID_Staff_layoutDB
	for _, staff_layoutDB := range forRestore {

		staff_layoutDB_ID_atBackupTime := staff_layoutDB.ID
		staff_layoutDB.ID = 0
		query := backRepoStaff_layout.db.Create(staff_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[staff_layoutDB.ID] = staff_layoutDB
		BackRepoStaff_layoutid_atBckpTime_newID[staff_layoutDB_ID_atBackupTime] = staff_layoutDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Staff_layout file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Staff_layout>id_atBckpTime_newID
// to compute new index
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) RestorePhaseTwo() {

	for _, staff_layoutDB := range backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB {

		// next line of code is to avert unused variable compilation error
		_ = staff_layoutDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoStaff_layout.db.Model(staff_layoutDB).Updates(*staff_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoStaff_layout.ResetReversePointers commits all staged instances of Staff_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_layout *BackRepoStaff_layoutStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_layout := range backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutPtr {
		backRepoStaff_layout.ResetReversePointersInstance(backRepo, idx, staff_layout)
	}

	return
}

func (backRepoStaff_layout *BackRepoStaff_layoutStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staff_layout *models.Staff_layout) (Error error) {

	// fetch matching staff_layoutDB
	if staff_layoutDB, ok := backRepoStaff_layout.Map_Staff_layoutDBID_Staff_layoutDB[idx]; ok {
		_ = staff_layoutDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaff_layoutid_atBckpTime_newID map[uint]uint
