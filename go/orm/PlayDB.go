// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Play_sql sql.NullBool
var dummy_Play_time time.Duration
var dummy_Play_sort sort.Float64Slice

// PlayAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model playAPI
type PlayAPI struct {
	gorm.Model

	models.Play_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PlayPointersEncoding PlayPointersEncoding
}

// PlayPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PlayPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Other_play is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Other_playID sql.NullInt64
}

// PlayDB describes a play in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model playDB
type PlayDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field playDB.Name
	Name_Data sql.NullString

	// Declation for basic field playDB.Ipa
	Ipa_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PlayPointersEncoding
}

// PlayDBs arrays playDBs
// swagger:response playDBsResponse
type PlayDBs []PlayDB

// PlayDBResponse provides response
// swagger:response playDBResponse
type PlayDBResponse struct {
	PlayDB
}

// PlayWOP is a Play without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PlayWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Ipa string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Play_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Ipa",
}

type BackRepoPlayStruct struct {
	// stores PlayDB according to their gorm ID
	Map_PlayDBID_PlayDB map[uint]*PlayDB

	// stores PlayDB ID according to Play address
	Map_PlayPtr_PlayDBID map[*models.Play]uint

	// stores Play according to their gorm ID
	Map_PlayDBID_PlayPtr map[uint]*models.Play

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPlay *BackRepoPlayStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPlay.stage
	return
}

func (backRepoPlay *BackRepoPlayStruct) GetDB() *gorm.DB {
	return backRepoPlay.db
}

// GetPlayDBFromPlayPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPlay *BackRepoPlayStruct) GetPlayDBFromPlayPtr(play *models.Play) (playDB *PlayDB) {
	id := backRepoPlay.Map_PlayPtr_PlayDBID[play]
	playDB = backRepoPlay.Map_PlayDBID_PlayDB[id]
	return
}

// BackRepoPlay.CommitPhaseOne commits all staged instances of Play to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPlay *BackRepoPlayStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for play := range stage.Plays {
		backRepoPlay.CommitPhaseOneInstance(play)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, play := range backRepoPlay.Map_PlayDBID_PlayPtr {
		if _, ok := stage.Plays[play]; !ok {
			backRepoPlay.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPlay.CommitDeleteInstance commits deletion of Play to the BackRepo
func (backRepoPlay *BackRepoPlayStruct) CommitDeleteInstance(id uint) (Error error) {

	play := backRepoPlay.Map_PlayDBID_PlayPtr[id]

	// play is not staged anymore, remove playDB
	playDB := backRepoPlay.Map_PlayDBID_PlayDB[id]
	query := backRepoPlay.db.Unscoped().Delete(&playDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPlay.Map_PlayPtr_PlayDBID, play)
	delete(backRepoPlay.Map_PlayDBID_PlayPtr, id)
	delete(backRepoPlay.Map_PlayDBID_PlayDB, id)

	return
}

// BackRepoPlay.CommitPhaseOneInstance commits play staged instances of Play to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPlay *BackRepoPlayStruct) CommitPhaseOneInstance(play *models.Play) (Error error) {

	// check if the play is not commited yet
	if _, ok := backRepoPlay.Map_PlayPtr_PlayDBID[play]; ok {
		return
	}

	// initiate play
	var playDB PlayDB
	playDB.CopyBasicFieldsFromPlay(play)

	query := backRepoPlay.db.Create(&playDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPlay.Map_PlayPtr_PlayDBID[play] = playDB.ID
	backRepoPlay.Map_PlayDBID_PlayPtr[playDB.ID] = play
	backRepoPlay.Map_PlayDBID_PlayDB[playDB.ID] = &playDB

	return
}

// BackRepoPlay.CommitPhaseTwo commits all staged instances of Play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlay *BackRepoPlayStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, play := range backRepoPlay.Map_PlayDBID_PlayPtr {
		backRepoPlay.CommitPhaseTwoInstance(backRepo, idx, play)
	}

	return
}

// BackRepoPlay.CommitPhaseTwoInstance commits {{structname }} of models.Play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlay *BackRepoPlayStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, play *models.Play) (Error error) {

	// fetch matching playDB
	if playDB, ok := backRepoPlay.Map_PlayDBID_PlayDB[idx]; ok {

		playDB.CopyBasicFieldsFromPlay(play)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value play.Other_play translates to updating the play.Other_playID
		playDB.Other_playID.Valid = true // allow for a 0 value (nil association)
		if play.Other_play != nil {
			if Other_playId, ok := backRepo.BackRepoOther_play.Map_Other_playPtr_Other_playDBID[play.Other_play]; ok {
				playDB.Other_playID.Int64 = int64(Other_playId)
				playDB.Other_playID.Valid = true
			}
		} else {
			playDB.Other_playID.Int64 = 0
			playDB.Other_playID.Valid = true
		}

		query := backRepoPlay.db.Save(&playDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Play intance %s", play.Name))
		return err
	}

	return
}

// BackRepoPlay.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPlay *BackRepoPlayStruct) CheckoutPhaseOne() (Error error) {

	playDBArray := make([]PlayDB, 0)
	query := backRepoPlay.db.Find(&playDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	playInstancesToBeRemovedFromTheStage := make(map[*models.Play]any)
	for key, value := range backRepoPlay.stage.Plays {
		playInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, playDB := range playDBArray {
		backRepoPlay.CheckoutPhaseOneInstance(&playDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		play, ok := backRepoPlay.Map_PlayDBID_PlayPtr[playDB.ID]
		if ok {
			delete(playInstancesToBeRemovedFromTheStage, play)
		}
	}

	// remove from stage and back repo's 3 maps all plays that are not in the checkout
	for play := range playInstancesToBeRemovedFromTheStage {
		play.Unstage(backRepoPlay.GetStage())

		// remove instance from the back repo 3 maps
		playID := backRepoPlay.Map_PlayPtr_PlayDBID[play]
		delete(backRepoPlay.Map_PlayPtr_PlayDBID, play)
		delete(backRepoPlay.Map_PlayDBID_PlayDB, playID)
		delete(backRepoPlay.Map_PlayDBID_PlayPtr, playID)
	}

	return
}

// CheckoutPhaseOneInstance takes a playDB that has been found in the DB, updates the backRepo and stages the
// models version of the playDB
func (backRepoPlay *BackRepoPlayStruct) CheckoutPhaseOneInstance(playDB *PlayDB) (Error error) {

	play, ok := backRepoPlay.Map_PlayDBID_PlayPtr[playDB.ID]
	if !ok {
		play = new(models.Play)

		backRepoPlay.Map_PlayDBID_PlayPtr[playDB.ID] = play
		backRepoPlay.Map_PlayPtr_PlayDBID[play] = playDB.ID

		// append model store with the new element
		play.Name = playDB.Name_Data.String
		play.Stage(backRepoPlay.GetStage())
	}
	playDB.CopyBasicFieldsToPlay(play)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	play.Stage(backRepoPlay.GetStage())

	// preserve pointer to playDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PlayDBID_PlayDB)[playDB hold variable pointers
	playDB_Data := *playDB
	preservedPtrToPlay := &playDB_Data
	backRepoPlay.Map_PlayDBID_PlayDB[playDB.ID] = preservedPtrToPlay

	return
}

// BackRepoPlay.CheckoutPhaseTwo Checkouts all staged instances of Play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlay *BackRepoPlayStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, playDB := range backRepoPlay.Map_PlayDBID_PlayDB {
		backRepoPlay.CheckoutPhaseTwoInstance(backRepo, playDB)
	}
	return
}

// BackRepoPlay.CheckoutPhaseTwoInstance Checkouts staged instances of Play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlay *BackRepoPlayStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, playDB *PlayDB) (Error error) {

	play := backRepoPlay.Map_PlayDBID_PlayPtr[playDB.ID]

	playDB.DecodePointers(backRepo, play)

	return
}

func (playDB *PlayDB) DecodePointers(backRepo *BackRepoStruct, play *models.Play) {

	// insertion point for checkout of pointer encoding
	// Other_play field
	play.Other_play = nil
	if playDB.Other_playID.Int64 != 0 {
		play.Other_play = backRepo.BackRepoOther_play.Map_Other_playDBID_Other_playPtr[uint(playDB.Other_playID.Int64)]
	}
	return
}

// CommitPlay allows commit of a single play (if already staged)
func (backRepo *BackRepoStruct) CommitPlay(play *models.Play) {
	backRepo.BackRepoPlay.CommitPhaseOneInstance(play)
	if id, ok := backRepo.BackRepoPlay.Map_PlayPtr_PlayDBID[play]; ok {
		backRepo.BackRepoPlay.CommitPhaseTwoInstance(backRepo, id, play)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPlay allows checkout of a single play (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPlay(play *models.Play) {
	// check if the play is staged
	if _, ok := backRepo.BackRepoPlay.Map_PlayPtr_PlayDBID[play]; ok {

		if id, ok := backRepo.BackRepoPlay.Map_PlayPtr_PlayDBID[play]; ok {
			var playDB PlayDB
			playDB.ID = id

			if err := backRepo.BackRepoPlay.db.First(&playDB, id).Error; err != nil {
				log.Fatalln("CheckoutPlay : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPlay.CheckoutPhaseOneInstance(&playDB)
			backRepo.BackRepoPlay.CheckoutPhaseTwoInstance(backRepo, &playDB)
		}
	}
}

// CopyBasicFieldsFromPlay
func (playDB *PlayDB) CopyBasicFieldsFromPlay(play *models.Play) {
	// insertion point for fields commit

	playDB.Name_Data.String = play.Name
	playDB.Name_Data.Valid = true

	playDB.Ipa_Data.String = play.Ipa
	playDB.Ipa_Data.Valid = true
}

// CopyBasicFieldsFromPlay_WOP
func (playDB *PlayDB) CopyBasicFieldsFromPlay_WOP(play *models.Play_WOP) {
	// insertion point for fields commit

	playDB.Name_Data.String = play.Name
	playDB.Name_Data.Valid = true

	playDB.Ipa_Data.String = play.Ipa
	playDB.Ipa_Data.Valid = true
}

// CopyBasicFieldsFromPlayWOP
func (playDB *PlayDB) CopyBasicFieldsFromPlayWOP(play *PlayWOP) {
	// insertion point for fields commit

	playDB.Name_Data.String = play.Name
	playDB.Name_Data.Valid = true

	playDB.Ipa_Data.String = play.Ipa
	playDB.Ipa_Data.Valid = true
}

// CopyBasicFieldsToPlay
func (playDB *PlayDB) CopyBasicFieldsToPlay(play *models.Play) {
	// insertion point for checkout of basic fields (back repo to stage)
	play.Name = playDB.Name_Data.String
	play.Ipa = playDB.Ipa_Data.String
}

// CopyBasicFieldsToPlay_WOP
func (playDB *PlayDB) CopyBasicFieldsToPlay_WOP(play *models.Play_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	play.Name = playDB.Name_Data.String
	play.Ipa = playDB.Ipa_Data.String
}

// CopyBasicFieldsToPlayWOP
func (playDB *PlayDB) CopyBasicFieldsToPlayWOP(play *PlayWOP) {
	play.ID = int(playDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	play.Name = playDB.Name_Data.String
	play.Ipa = playDB.Ipa_Data.String
}

// Backup generates a json file from a slice of all PlayDB instances in the backrepo
func (backRepoPlay *BackRepoPlayStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PlayDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PlayDB, 0)
	for _, playDB := range backRepoPlay.Map_PlayDBID_PlayDB {
		forBackup = append(forBackup, playDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Play ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Play file", err.Error())
	}
}

// Backup generates a json file from a slice of all PlayDB instances in the backrepo
func (backRepoPlay *BackRepoPlayStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PlayDB, 0)
	for _, playDB := range backRepoPlay.Map_PlayDBID_PlayDB {
		forBackup = append(forBackup, playDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Play")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Play_Fields, -1)
	for _, playDB := range forBackup {

		var playWOP PlayWOP
		playDB.CopyBasicFieldsToPlayWOP(&playWOP)

		row := sh.AddRow()
		row.WriteStruct(&playWOP, -1)
	}
}

// RestoreXL from the "Play" sheet all PlayDB instances
func (backRepoPlay *BackRepoPlayStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPlayid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Play"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPlay.rowVisitorPlay)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPlay *BackRepoPlayStruct) rowVisitorPlay(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var playWOP PlayWOP
		row.ReadStruct(&playWOP)

		// add the unmarshalled struct to the stage
		playDB := new(PlayDB)
		playDB.CopyBasicFieldsFromPlayWOP(&playWOP)

		playDB_ID_atBackupTime := playDB.ID
		playDB.ID = 0
		query := backRepoPlay.db.Create(playDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPlay.Map_PlayDBID_PlayDB[playDB.ID] = playDB
		BackRepoPlayid_atBckpTime_newID[playDB_ID_atBackupTime] = playDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PlayDB.json" in dirPath that stores an array
// of PlayDB and stores it in the database
// the map BackRepoPlayid_atBckpTime_newID is updated accordingly
func (backRepoPlay *BackRepoPlayStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPlayid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PlayDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Play file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PlayDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PlayDBID_PlayDB
	for _, playDB := range forRestore {

		playDB_ID_atBackupTime := playDB.ID
		playDB.ID = 0
		query := backRepoPlay.db.Create(playDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPlay.Map_PlayDBID_PlayDB[playDB.ID] = playDB
		BackRepoPlayid_atBckpTime_newID[playDB_ID_atBackupTime] = playDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Play file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Play>id_atBckpTime_newID
// to compute new index
func (backRepoPlay *BackRepoPlayStruct) RestorePhaseTwo() {

	for _, playDB := range backRepoPlay.Map_PlayDBID_PlayDB {

		// next line of code is to avert unused variable compilation error
		_ = playDB

		// insertion point for reindexing pointers encoding
		// reindexing Other_play field
		if playDB.Other_playID.Int64 != 0 {
			playDB.Other_playID.Int64 = int64(BackRepoOther_playid_atBckpTime_newID[uint(playDB.Other_playID.Int64)])
			playDB.Other_playID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoPlay.db.Model(playDB).Updates(*playDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPlay.ResetReversePointers commits all staged instances of Play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPlay *BackRepoPlayStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, play := range backRepoPlay.Map_PlayDBID_PlayPtr {
		backRepoPlay.ResetReversePointersInstance(backRepo, idx, play)
	}

	return
}

func (backRepoPlay *BackRepoPlayStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, play *models.Play) (Error error) {

	// fetch matching playDB
	if playDB, ok := backRepoPlay.Map_PlayDBID_PlayDB[idx]; ok {
		_ = playDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPlayid_atBckpTime_newID map[uint]uint
