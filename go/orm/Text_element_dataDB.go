// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Text_element_data_sql sql.NullBool
var dummy_Text_element_data_time time.Duration
var dummy_Text_element_data_sort sort.Float64Slice

// Text_element_dataAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model text_element_dataAPI
type Text_element_dataAPI struct {
	gorm.Model

	models.Text_element_data_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Text_element_dataPointersEncoding Text_element_dataPointersEncoding
}

// Text_element_dataPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Text_element_dataPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Text_element_dataDB describes a text_element_data in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model text_element_dataDB
type Text_element_dataDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field text_element_dataDB.Name
	Name_Data sql.NullString

	// Declation for basic field text_element_dataDB.Value
	Value_Data sql.NullString

	// Declation for basic field text_element_dataDB.EmptyString
	EmptyString_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Text_element_dataPointersEncoding
}

// Text_element_dataDBs arrays text_element_dataDBs
// swagger:response text_element_dataDBsResponse
type Text_element_dataDBs []Text_element_dataDB

// Text_element_dataDBResponse provides response
// swagger:response text_element_dataDBResponse
type Text_element_dataDBResponse struct {
	Text_element_dataDB
}

// Text_element_dataWOP is a Text_element_data without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Text_element_dataWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`

	EmptyString string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Text_element_data_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
	"EmptyString",
}

type BackRepoText_element_dataStruct struct {
	// stores Text_element_dataDB according to their gorm ID
	Map_Text_element_dataDBID_Text_element_dataDB map[uint]*Text_element_dataDB

	// stores Text_element_dataDB ID according to Text_element_data address
	Map_Text_element_dataPtr_Text_element_dataDBID map[*models.Text_element_data]uint

	// stores Text_element_data according to their gorm ID
	Map_Text_element_dataDBID_Text_element_dataPtr map[uint]*models.Text_element_data

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoText_element_data *BackRepoText_element_dataStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoText_element_data.stage
	return
}

func (backRepoText_element_data *BackRepoText_element_dataStruct) GetDB() *gorm.DB {
	return backRepoText_element_data.db
}

// GetText_element_dataDBFromText_element_dataPtr is a handy function to access the back repo instance from the stage instance
func (backRepoText_element_data *BackRepoText_element_dataStruct) GetText_element_dataDBFromText_element_dataPtr(text_element_data *models.Text_element_data) (text_element_dataDB *Text_element_dataDB) {
	id := backRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data]
	text_element_dataDB = backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[id]
	return
}

// BackRepoText_element_data.CommitPhaseOne commits all staged instances of Text_element_data to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoText_element_data *BackRepoText_element_dataStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for text_element_data := range stage.Text_element_datas {
		backRepoText_element_data.CommitPhaseOneInstance(text_element_data)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, text_element_data := range backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr {
		if _, ok := stage.Text_element_datas[text_element_data]; !ok {
			backRepoText_element_data.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoText_element_data.CommitDeleteInstance commits deletion of Text_element_data to the BackRepo
func (backRepoText_element_data *BackRepoText_element_dataStruct) CommitDeleteInstance(id uint) (Error error) {

	text_element_data := backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr[id]

	// text_element_data is not staged anymore, remove text_element_dataDB
	text_element_dataDB := backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[id]
	query := backRepoText_element_data.db.Unscoped().Delete(&text_element_dataDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID, text_element_data)
	delete(backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr, id)
	delete(backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB, id)

	return
}

// BackRepoText_element_data.CommitPhaseOneInstance commits text_element_data staged instances of Text_element_data to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoText_element_data *BackRepoText_element_dataStruct) CommitPhaseOneInstance(text_element_data *models.Text_element_data) (Error error) {

	// check if the text_element_data is not commited yet
	if _, ok := backRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data]; ok {
		return
	}

	// initiate text_element_data
	var text_element_dataDB Text_element_dataDB
	text_element_dataDB.CopyBasicFieldsFromText_element_data(text_element_data)

	query := backRepoText_element_data.db.Create(&text_element_dataDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data] = text_element_dataDB.ID
	backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr[text_element_dataDB.ID] = text_element_data
	backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[text_element_dataDB.ID] = &text_element_dataDB

	return
}

// BackRepoText_element_data.CommitPhaseTwo commits all staged instances of Text_element_data to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText_element_data *BackRepoText_element_dataStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, text_element_data := range backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr {
		backRepoText_element_data.CommitPhaseTwoInstance(backRepo, idx, text_element_data)
	}

	return
}

// BackRepoText_element_data.CommitPhaseTwoInstance commits {{structname }} of models.Text_element_data to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText_element_data *BackRepoText_element_dataStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, text_element_data *models.Text_element_data) (Error error) {

	// fetch matching text_element_dataDB
	if text_element_dataDB, ok := backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[idx]; ok {

		text_element_dataDB.CopyBasicFieldsFromText_element_data(text_element_data)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoText_element_data.db.Save(&text_element_dataDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Text_element_data intance %s", text_element_data.Name))
		return err
	}

	return
}

// BackRepoText_element_data.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoText_element_data *BackRepoText_element_dataStruct) CheckoutPhaseOne() (Error error) {

	text_element_dataDBArray := make([]Text_element_dataDB, 0)
	query := backRepoText_element_data.db.Find(&text_element_dataDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	text_element_dataInstancesToBeRemovedFromTheStage := make(map[*models.Text_element_data]any)
	for key, value := range backRepoText_element_data.stage.Text_element_datas {
		text_element_dataInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, text_element_dataDB := range text_element_dataDBArray {
		backRepoText_element_data.CheckoutPhaseOneInstance(&text_element_dataDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		text_element_data, ok := backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr[text_element_dataDB.ID]
		if ok {
			delete(text_element_dataInstancesToBeRemovedFromTheStage, text_element_data)
		}
	}

	// remove from stage and back repo's 3 maps all text_element_datas that are not in the checkout
	for text_element_data := range text_element_dataInstancesToBeRemovedFromTheStage {
		text_element_data.Unstage(backRepoText_element_data.GetStage())

		// remove instance from the back repo 3 maps
		text_element_dataID := backRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data]
		delete(backRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID, text_element_data)
		delete(backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB, text_element_dataID)
		delete(backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr, text_element_dataID)
	}

	return
}

// CheckoutPhaseOneInstance takes a text_element_dataDB that has been found in the DB, updates the backRepo and stages the
// models version of the text_element_dataDB
func (backRepoText_element_data *BackRepoText_element_dataStruct) CheckoutPhaseOneInstance(text_element_dataDB *Text_element_dataDB) (Error error) {

	text_element_data, ok := backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr[text_element_dataDB.ID]
	if !ok {
		text_element_data = new(models.Text_element_data)

		backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr[text_element_dataDB.ID] = text_element_data
		backRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data] = text_element_dataDB.ID

		// append model store with the new element
		text_element_data.Name = text_element_dataDB.Name_Data.String
		text_element_data.Stage(backRepoText_element_data.GetStage())
	}
	text_element_dataDB.CopyBasicFieldsToText_element_data(text_element_data)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	text_element_data.Stage(backRepoText_element_data.GetStage())

	// preserve pointer to text_element_dataDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Text_element_dataDBID_Text_element_dataDB)[text_element_dataDB hold variable pointers
	text_element_dataDB_Data := *text_element_dataDB
	preservedPtrToText_element_data := &text_element_dataDB_Data
	backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[text_element_dataDB.ID] = preservedPtrToText_element_data

	return
}

// BackRepoText_element_data.CheckoutPhaseTwo Checkouts all staged instances of Text_element_data to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText_element_data *BackRepoText_element_dataStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, text_element_dataDB := range backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB {
		backRepoText_element_data.CheckoutPhaseTwoInstance(backRepo, text_element_dataDB)
	}
	return
}

// BackRepoText_element_data.CheckoutPhaseTwoInstance Checkouts staged instances of Text_element_data to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText_element_data *BackRepoText_element_dataStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, text_element_dataDB *Text_element_dataDB) (Error error) {

	text_element_data := backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr[text_element_dataDB.ID]

	text_element_dataDB.DecodePointers(backRepo, text_element_data)

	return
}

func (text_element_dataDB *Text_element_dataDB) DecodePointers(backRepo *BackRepoStruct, text_element_data *models.Text_element_data) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitText_element_data allows commit of a single text_element_data (if already staged)
func (backRepo *BackRepoStruct) CommitText_element_data(text_element_data *models.Text_element_data) {
	backRepo.BackRepoText_element_data.CommitPhaseOneInstance(text_element_data)
	if id, ok := backRepo.BackRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data]; ok {
		backRepo.BackRepoText_element_data.CommitPhaseTwoInstance(backRepo, id, text_element_data)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitText_element_data allows checkout of a single text_element_data (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutText_element_data(text_element_data *models.Text_element_data) {
	// check if the text_element_data is staged
	if _, ok := backRepo.BackRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data]; ok {

		if id, ok := backRepo.BackRepoText_element_data.Map_Text_element_dataPtr_Text_element_dataDBID[text_element_data]; ok {
			var text_element_dataDB Text_element_dataDB
			text_element_dataDB.ID = id

			if err := backRepo.BackRepoText_element_data.db.First(&text_element_dataDB, id).Error; err != nil {
				log.Fatalln("CheckoutText_element_data : Problem with getting object with id:", id)
			}
			backRepo.BackRepoText_element_data.CheckoutPhaseOneInstance(&text_element_dataDB)
			backRepo.BackRepoText_element_data.CheckoutPhaseTwoInstance(backRepo, &text_element_dataDB)
		}
	}
}

// CopyBasicFieldsFromText_element_data
func (text_element_dataDB *Text_element_dataDB) CopyBasicFieldsFromText_element_data(text_element_data *models.Text_element_data) {
	// insertion point for fields commit

	text_element_dataDB.Name_Data.String = text_element_data.Name
	text_element_dataDB.Name_Data.Valid = true

	text_element_dataDB.Value_Data.String = text_element_data.Value
	text_element_dataDB.Value_Data.Valid = true

	text_element_dataDB.EmptyString_Data.String = text_element_data.EmptyString
	text_element_dataDB.EmptyString_Data.Valid = true
}

// CopyBasicFieldsFromText_element_data_WOP
func (text_element_dataDB *Text_element_dataDB) CopyBasicFieldsFromText_element_data_WOP(text_element_data *models.Text_element_data_WOP) {
	// insertion point for fields commit

	text_element_dataDB.Name_Data.String = text_element_data.Name
	text_element_dataDB.Name_Data.Valid = true

	text_element_dataDB.Value_Data.String = text_element_data.Value
	text_element_dataDB.Value_Data.Valid = true

	text_element_dataDB.EmptyString_Data.String = text_element_data.EmptyString
	text_element_dataDB.EmptyString_Data.Valid = true
}

// CopyBasicFieldsFromText_element_dataWOP
func (text_element_dataDB *Text_element_dataDB) CopyBasicFieldsFromText_element_dataWOP(text_element_data *Text_element_dataWOP) {
	// insertion point for fields commit

	text_element_dataDB.Name_Data.String = text_element_data.Name
	text_element_dataDB.Name_Data.Valid = true

	text_element_dataDB.Value_Data.String = text_element_data.Value
	text_element_dataDB.Value_Data.Valid = true

	text_element_dataDB.EmptyString_Data.String = text_element_data.EmptyString
	text_element_dataDB.EmptyString_Data.Valid = true
}

// CopyBasicFieldsToText_element_data
func (text_element_dataDB *Text_element_dataDB) CopyBasicFieldsToText_element_data(text_element_data *models.Text_element_data) {
	// insertion point for checkout of basic fields (back repo to stage)
	text_element_data.Name = text_element_dataDB.Name_Data.String
	text_element_data.Value = text_element_dataDB.Value_Data.String
	text_element_data.EmptyString = text_element_dataDB.EmptyString_Data.String
}

// CopyBasicFieldsToText_element_data_WOP
func (text_element_dataDB *Text_element_dataDB) CopyBasicFieldsToText_element_data_WOP(text_element_data *models.Text_element_data_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	text_element_data.Name = text_element_dataDB.Name_Data.String
	text_element_data.Value = text_element_dataDB.Value_Data.String
	text_element_data.EmptyString = text_element_dataDB.EmptyString_Data.String
}

// CopyBasicFieldsToText_element_dataWOP
func (text_element_dataDB *Text_element_dataDB) CopyBasicFieldsToText_element_dataWOP(text_element_data *Text_element_dataWOP) {
	text_element_data.ID = int(text_element_dataDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	text_element_data.Name = text_element_dataDB.Name_Data.String
	text_element_data.Value = text_element_dataDB.Value_Data.String
	text_element_data.EmptyString = text_element_dataDB.EmptyString_Data.String
}

// Backup generates a json file from a slice of all Text_element_dataDB instances in the backrepo
func (backRepoText_element_data *BackRepoText_element_dataStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Text_element_dataDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Text_element_dataDB, 0)
	for _, text_element_dataDB := range backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB {
		forBackup = append(forBackup, text_element_dataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Text_element_data ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Text_element_data file", err.Error())
	}
}

// Backup generates a json file from a slice of all Text_element_dataDB instances in the backrepo
func (backRepoText_element_data *BackRepoText_element_dataStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Text_element_dataDB, 0)
	for _, text_element_dataDB := range backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB {
		forBackup = append(forBackup, text_element_dataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Text_element_data")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Text_element_data_Fields, -1)
	for _, text_element_dataDB := range forBackup {

		var text_element_dataWOP Text_element_dataWOP
		text_element_dataDB.CopyBasicFieldsToText_element_dataWOP(&text_element_dataWOP)

		row := sh.AddRow()
		row.WriteStruct(&text_element_dataWOP, -1)
	}
}

// RestoreXL from the "Text_element_data" sheet all Text_element_dataDB instances
func (backRepoText_element_data *BackRepoText_element_dataStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoText_element_dataid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Text_element_data"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoText_element_data.rowVisitorText_element_data)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoText_element_data *BackRepoText_element_dataStruct) rowVisitorText_element_data(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var text_element_dataWOP Text_element_dataWOP
		row.ReadStruct(&text_element_dataWOP)

		// add the unmarshalled struct to the stage
		text_element_dataDB := new(Text_element_dataDB)
		text_element_dataDB.CopyBasicFieldsFromText_element_dataWOP(&text_element_dataWOP)

		text_element_dataDB_ID_atBackupTime := text_element_dataDB.ID
		text_element_dataDB.ID = 0
		query := backRepoText_element_data.db.Create(text_element_dataDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[text_element_dataDB.ID] = text_element_dataDB
		BackRepoText_element_dataid_atBckpTime_newID[text_element_dataDB_ID_atBackupTime] = text_element_dataDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Text_element_dataDB.json" in dirPath that stores an array
// of Text_element_dataDB and stores it in the database
// the map BackRepoText_element_dataid_atBckpTime_newID is updated accordingly
func (backRepoText_element_data *BackRepoText_element_dataStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoText_element_dataid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Text_element_dataDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Text_element_data file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Text_element_dataDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Text_element_dataDBID_Text_element_dataDB
	for _, text_element_dataDB := range forRestore {

		text_element_dataDB_ID_atBackupTime := text_element_dataDB.ID
		text_element_dataDB.ID = 0
		query := backRepoText_element_data.db.Create(text_element_dataDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[text_element_dataDB.ID] = text_element_dataDB
		BackRepoText_element_dataid_atBckpTime_newID[text_element_dataDB_ID_atBackupTime] = text_element_dataDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Text_element_data file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Text_element_data>id_atBckpTime_newID
// to compute new index
func (backRepoText_element_data *BackRepoText_element_dataStruct) RestorePhaseTwo() {

	for _, text_element_dataDB := range backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB {

		// next line of code is to avert unused variable compilation error
		_ = text_element_dataDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoText_element_data.db.Model(text_element_dataDB).Updates(*text_element_dataDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoText_element_data.ResetReversePointers commits all staged instances of Text_element_data to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoText_element_data *BackRepoText_element_dataStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, text_element_data := range backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataPtr {
		backRepoText_element_data.ResetReversePointersInstance(backRepo, idx, text_element_data)
	}

	return
}

func (backRepoText_element_data *BackRepoText_element_dataStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, text_element_data *models.Text_element_data) (Error error) {

	// fetch matching text_element_dataDB
	if text_element_dataDB, ok := backRepoText_element_data.Map_Text_element_dataDBID_Text_element_dataDB[idx]; ok {
		_ = text_element_dataDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoText_element_dataid_atBckpTime_newID map[uint]uint
