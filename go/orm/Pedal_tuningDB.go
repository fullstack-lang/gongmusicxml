// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Pedal_tuning_sql sql.NullBool
var dummy_Pedal_tuning_time time.Duration
var dummy_Pedal_tuning_sort sort.Float64Slice

// Pedal_tuningAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pedal_tuningAPI
type Pedal_tuningAPI struct {
	gorm.Model

	models.Pedal_tuning_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Pedal_tuningPointersEncoding Pedal_tuningPointersEncoding
}

// Pedal_tuningPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Pedal_tuningPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Pedal_tuningDB describes a pedal_tuning in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pedal_tuningDB
type Pedal_tuningDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pedal_tuningDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Pedal_tuningPointersEncoding
}

// Pedal_tuningDBs arrays pedal_tuningDBs
// swagger:response pedal_tuningDBsResponse
type Pedal_tuningDBs []Pedal_tuningDB

// Pedal_tuningDBResponse provides response
// swagger:response pedal_tuningDBResponse
type Pedal_tuningDBResponse struct {
	Pedal_tuningDB
}

// Pedal_tuningWOP is a Pedal_tuning without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Pedal_tuningWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Pedal_tuning_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPedal_tuningStruct struct {
	// stores Pedal_tuningDB according to their gorm ID
	Map_Pedal_tuningDBID_Pedal_tuningDB map[uint]*Pedal_tuningDB

	// stores Pedal_tuningDB ID according to Pedal_tuning address
	Map_Pedal_tuningPtr_Pedal_tuningDBID map[*models.Pedal_tuning]uint

	// stores Pedal_tuning according to their gorm ID
	Map_Pedal_tuningDBID_Pedal_tuningPtr map[uint]*models.Pedal_tuning

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPedal_tuning.stage
	return
}

func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) GetDB() *gorm.DB {
	return backRepoPedal_tuning.db
}

// GetPedal_tuningDBFromPedal_tuningPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) GetPedal_tuningDBFromPedal_tuningPtr(pedal_tuning *models.Pedal_tuning) (pedal_tuningDB *Pedal_tuningDB) {
	id := backRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning]
	pedal_tuningDB = backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[id]
	return
}

// BackRepoPedal_tuning.CommitPhaseOne commits all staged instances of Pedal_tuning to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pedal_tuning := range stage.Pedal_tunings {
		backRepoPedal_tuning.CommitPhaseOneInstance(pedal_tuning)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pedal_tuning := range backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr {
		if _, ok := stage.Pedal_tunings[pedal_tuning]; !ok {
			backRepoPedal_tuning.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPedal_tuning.CommitDeleteInstance commits deletion of Pedal_tuning to the BackRepo
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CommitDeleteInstance(id uint) (Error error) {

	pedal_tuning := backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr[id]

	// pedal_tuning is not staged anymore, remove pedal_tuningDB
	pedal_tuningDB := backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[id]
	query := backRepoPedal_tuning.db.Unscoped().Delete(&pedal_tuningDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID, pedal_tuning)
	delete(backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr, id)
	delete(backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB, id)

	return
}

// BackRepoPedal_tuning.CommitPhaseOneInstance commits pedal_tuning staged instances of Pedal_tuning to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CommitPhaseOneInstance(pedal_tuning *models.Pedal_tuning) (Error error) {

	// check if the pedal_tuning is not commited yet
	if _, ok := backRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning]; ok {
		return
	}

	// initiate pedal_tuning
	var pedal_tuningDB Pedal_tuningDB
	pedal_tuningDB.CopyBasicFieldsFromPedal_tuning(pedal_tuning)

	query := backRepoPedal_tuning.db.Create(&pedal_tuningDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning] = pedal_tuningDB.ID
	backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr[pedal_tuningDB.ID] = pedal_tuning
	backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[pedal_tuningDB.ID] = &pedal_tuningDB

	return
}

// BackRepoPedal_tuning.CommitPhaseTwo commits all staged instances of Pedal_tuning to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pedal_tuning := range backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr {
		backRepoPedal_tuning.CommitPhaseTwoInstance(backRepo, idx, pedal_tuning)
	}

	return
}

// BackRepoPedal_tuning.CommitPhaseTwoInstance commits {{structname }} of models.Pedal_tuning to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pedal_tuning *models.Pedal_tuning) (Error error) {

	// fetch matching pedal_tuningDB
	if pedal_tuningDB, ok := backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[idx]; ok {

		pedal_tuningDB.CopyBasicFieldsFromPedal_tuning(pedal_tuning)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPedal_tuning.db.Save(&pedal_tuningDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pedal_tuning intance %s", pedal_tuning.Name))
		return err
	}

	return
}

// BackRepoPedal_tuning.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CheckoutPhaseOne() (Error error) {

	pedal_tuningDBArray := make([]Pedal_tuningDB, 0)
	query := backRepoPedal_tuning.db.Find(&pedal_tuningDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pedal_tuningInstancesToBeRemovedFromTheStage := make(map[*models.Pedal_tuning]any)
	for key, value := range backRepoPedal_tuning.stage.Pedal_tunings {
		pedal_tuningInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pedal_tuningDB := range pedal_tuningDBArray {
		backRepoPedal_tuning.CheckoutPhaseOneInstance(&pedal_tuningDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pedal_tuning, ok := backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr[pedal_tuningDB.ID]
		if ok {
			delete(pedal_tuningInstancesToBeRemovedFromTheStage, pedal_tuning)
		}
	}

	// remove from stage and back repo's 3 maps all pedal_tunings that are not in the checkout
	for pedal_tuning := range pedal_tuningInstancesToBeRemovedFromTheStage {
		pedal_tuning.Unstage(backRepoPedal_tuning.GetStage())

		// remove instance from the back repo 3 maps
		pedal_tuningID := backRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning]
		delete(backRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID, pedal_tuning)
		delete(backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB, pedal_tuningID)
		delete(backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr, pedal_tuningID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pedal_tuningDB that has been found in the DB, updates the backRepo and stages the
// models version of the pedal_tuningDB
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CheckoutPhaseOneInstance(pedal_tuningDB *Pedal_tuningDB) (Error error) {

	pedal_tuning, ok := backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr[pedal_tuningDB.ID]
	if !ok {
		pedal_tuning = new(models.Pedal_tuning)

		backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr[pedal_tuningDB.ID] = pedal_tuning
		backRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning] = pedal_tuningDB.ID

		// append model store with the new element
		pedal_tuning.Name = pedal_tuningDB.Name_Data.String
		pedal_tuning.Stage(backRepoPedal_tuning.GetStage())
	}
	pedal_tuningDB.CopyBasicFieldsToPedal_tuning(pedal_tuning)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	pedal_tuning.Stage(backRepoPedal_tuning.GetStage())

	// preserve pointer to pedal_tuningDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Pedal_tuningDBID_Pedal_tuningDB)[pedal_tuningDB hold variable pointers
	pedal_tuningDB_Data := *pedal_tuningDB
	preservedPtrToPedal_tuning := &pedal_tuningDB_Data
	backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[pedal_tuningDB.ID] = preservedPtrToPedal_tuning

	return
}

// BackRepoPedal_tuning.CheckoutPhaseTwo Checkouts all staged instances of Pedal_tuning to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pedal_tuningDB := range backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB {
		backRepoPedal_tuning.CheckoutPhaseTwoInstance(backRepo, pedal_tuningDB)
	}
	return
}

// BackRepoPedal_tuning.CheckoutPhaseTwoInstance Checkouts staged instances of Pedal_tuning to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pedal_tuningDB *Pedal_tuningDB) (Error error) {

	pedal_tuning := backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr[pedal_tuningDB.ID]

	pedal_tuningDB.DecodePointers(backRepo, pedal_tuning)

	return
}

func (pedal_tuningDB *Pedal_tuningDB) DecodePointers(backRepo *BackRepoStruct, pedal_tuning *models.Pedal_tuning) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPedal_tuning allows commit of a single pedal_tuning (if already staged)
func (backRepo *BackRepoStruct) CommitPedal_tuning(pedal_tuning *models.Pedal_tuning) {
	backRepo.BackRepoPedal_tuning.CommitPhaseOneInstance(pedal_tuning)
	if id, ok := backRepo.BackRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning]; ok {
		backRepo.BackRepoPedal_tuning.CommitPhaseTwoInstance(backRepo, id, pedal_tuning)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPedal_tuning allows checkout of a single pedal_tuning (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPedal_tuning(pedal_tuning *models.Pedal_tuning) {
	// check if the pedal_tuning is staged
	if _, ok := backRepo.BackRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning]; ok {

		if id, ok := backRepo.BackRepoPedal_tuning.Map_Pedal_tuningPtr_Pedal_tuningDBID[pedal_tuning]; ok {
			var pedal_tuningDB Pedal_tuningDB
			pedal_tuningDB.ID = id

			if err := backRepo.BackRepoPedal_tuning.db.First(&pedal_tuningDB, id).Error; err != nil {
				log.Fatalln("CheckoutPedal_tuning : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPedal_tuning.CheckoutPhaseOneInstance(&pedal_tuningDB)
			backRepo.BackRepoPedal_tuning.CheckoutPhaseTwoInstance(backRepo, &pedal_tuningDB)
		}
	}
}

// CopyBasicFieldsFromPedal_tuning
func (pedal_tuningDB *Pedal_tuningDB) CopyBasicFieldsFromPedal_tuning(pedal_tuning *models.Pedal_tuning) {
	// insertion point for fields commit

	pedal_tuningDB.Name_Data.String = pedal_tuning.Name
	pedal_tuningDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPedal_tuning_WOP
func (pedal_tuningDB *Pedal_tuningDB) CopyBasicFieldsFromPedal_tuning_WOP(pedal_tuning *models.Pedal_tuning_WOP) {
	// insertion point for fields commit

	pedal_tuningDB.Name_Data.String = pedal_tuning.Name
	pedal_tuningDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPedal_tuningWOP
func (pedal_tuningDB *Pedal_tuningDB) CopyBasicFieldsFromPedal_tuningWOP(pedal_tuning *Pedal_tuningWOP) {
	// insertion point for fields commit

	pedal_tuningDB.Name_Data.String = pedal_tuning.Name
	pedal_tuningDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPedal_tuning
func (pedal_tuningDB *Pedal_tuningDB) CopyBasicFieldsToPedal_tuning(pedal_tuning *models.Pedal_tuning) {
	// insertion point for checkout of basic fields (back repo to stage)
	pedal_tuning.Name = pedal_tuningDB.Name_Data.String
}

// CopyBasicFieldsToPedal_tuning_WOP
func (pedal_tuningDB *Pedal_tuningDB) CopyBasicFieldsToPedal_tuning_WOP(pedal_tuning *models.Pedal_tuning_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	pedal_tuning.Name = pedal_tuningDB.Name_Data.String
}

// CopyBasicFieldsToPedal_tuningWOP
func (pedal_tuningDB *Pedal_tuningDB) CopyBasicFieldsToPedal_tuningWOP(pedal_tuning *Pedal_tuningWOP) {
	pedal_tuning.ID = int(pedal_tuningDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pedal_tuning.Name = pedal_tuningDB.Name_Data.String
}

// Backup generates a json file from a slice of all Pedal_tuningDB instances in the backrepo
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Pedal_tuningDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Pedal_tuningDB, 0)
	for _, pedal_tuningDB := range backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB {
		forBackup = append(forBackup, pedal_tuningDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Pedal_tuning ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Pedal_tuning file", err.Error())
	}
}

// Backup generates a json file from a slice of all Pedal_tuningDB instances in the backrepo
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Pedal_tuningDB, 0)
	for _, pedal_tuningDB := range backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB {
		forBackup = append(forBackup, pedal_tuningDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Pedal_tuning")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Pedal_tuning_Fields, -1)
	for _, pedal_tuningDB := range forBackup {

		var pedal_tuningWOP Pedal_tuningWOP
		pedal_tuningDB.CopyBasicFieldsToPedal_tuningWOP(&pedal_tuningWOP)

		row := sh.AddRow()
		row.WriteStruct(&pedal_tuningWOP, -1)
	}
}

// RestoreXL from the "Pedal_tuning" sheet all Pedal_tuningDB instances
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPedal_tuningid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Pedal_tuning"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPedal_tuning.rowVisitorPedal_tuning)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) rowVisitorPedal_tuning(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pedal_tuningWOP Pedal_tuningWOP
		row.ReadStruct(&pedal_tuningWOP)

		// add the unmarshalled struct to the stage
		pedal_tuningDB := new(Pedal_tuningDB)
		pedal_tuningDB.CopyBasicFieldsFromPedal_tuningWOP(&pedal_tuningWOP)

		pedal_tuningDB_ID_atBackupTime := pedal_tuningDB.ID
		pedal_tuningDB.ID = 0
		query := backRepoPedal_tuning.db.Create(pedal_tuningDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[pedal_tuningDB.ID] = pedal_tuningDB
		BackRepoPedal_tuningid_atBckpTime_newID[pedal_tuningDB_ID_atBackupTime] = pedal_tuningDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Pedal_tuningDB.json" in dirPath that stores an array
// of Pedal_tuningDB and stores it in the database
// the map BackRepoPedal_tuningid_atBckpTime_newID is updated accordingly
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPedal_tuningid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Pedal_tuningDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Pedal_tuning file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Pedal_tuningDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Pedal_tuningDBID_Pedal_tuningDB
	for _, pedal_tuningDB := range forRestore {

		pedal_tuningDB_ID_atBackupTime := pedal_tuningDB.ID
		pedal_tuningDB.ID = 0
		query := backRepoPedal_tuning.db.Create(pedal_tuningDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[pedal_tuningDB.ID] = pedal_tuningDB
		BackRepoPedal_tuningid_atBckpTime_newID[pedal_tuningDB_ID_atBackupTime] = pedal_tuningDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Pedal_tuning file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Pedal_tuning>id_atBckpTime_newID
// to compute new index
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) RestorePhaseTwo() {

	for _, pedal_tuningDB := range backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB {

		// next line of code is to avert unused variable compilation error
		_ = pedal_tuningDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPedal_tuning.db.Model(pedal_tuningDB).Updates(*pedal_tuningDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPedal_tuning.ResetReversePointers commits all staged instances of Pedal_tuning to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, pedal_tuning := range backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningPtr {
		backRepoPedal_tuning.ResetReversePointersInstance(backRepo, idx, pedal_tuning)
	}

	return
}

func (backRepoPedal_tuning *BackRepoPedal_tuningStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, pedal_tuning *models.Pedal_tuning) (Error error) {

	// fetch matching pedal_tuningDB
	if pedal_tuningDB, ok := backRepoPedal_tuning.Map_Pedal_tuningDBID_Pedal_tuningDB[idx]; ok {
		_ = pedal_tuningDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPedal_tuningid_atBckpTime_newID map[uint]uint
