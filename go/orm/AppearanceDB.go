// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Appearance_sql sql.NullBool
var dummy_Appearance_time time.Duration
var dummy_Appearance_sort sort.Float64Slice

// AppearanceAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model appearanceAPI
type AppearanceAPI struct {
	gorm.Model

	models.Appearance_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AppearancePointersEncoding AppearancePointersEncoding
}

// AppearancePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AppearancePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Line_width is a slice of pointers to another Struct (optional or 0..1)
	Line_width IntSlice `gorm:"type:TEXT"`

	// field Note_size is a slice of pointers to another Struct (optional or 0..1)
	Note_size IntSlice `gorm:"type:TEXT"`

	// field Distance is a slice of pointers to another Struct (optional or 0..1)
	Distance IntSlice `gorm:"type:TEXT"`

	// field Glyph is a slice of pointers to another Struct (optional or 0..1)
	Glyph IntSlice `gorm:"type:TEXT"`

	// field Other_appearance is a slice of pointers to another Struct (optional or 0..1)
	Other_appearance IntSlice `gorm:"type:TEXT"`
}

// AppearanceDB describes a appearance in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model appearanceDB
type AppearanceDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field appearanceDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AppearancePointersEncoding
}

// AppearanceDBs arrays appearanceDBs
// swagger:response appearanceDBsResponse
type AppearanceDBs []AppearanceDB

// AppearanceDBResponse provides response
// swagger:response appearanceDBResponse
type AppearanceDBResponse struct {
	AppearanceDB
}

// AppearanceWOP is a Appearance without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AppearanceWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Appearance_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAppearanceStruct struct {
	// stores AppearanceDB according to their gorm ID
	Map_AppearanceDBID_AppearanceDB map[uint]*AppearanceDB

	// stores AppearanceDB ID according to Appearance address
	Map_AppearancePtr_AppearanceDBID map[*models.Appearance]uint

	// stores Appearance according to their gorm ID
	Map_AppearanceDBID_AppearancePtr map[uint]*models.Appearance

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAppearance *BackRepoAppearanceStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAppearance.stage
	return
}

func (backRepoAppearance *BackRepoAppearanceStruct) GetDB() *gorm.DB {
	return backRepoAppearance.db
}

// GetAppearanceDBFromAppearancePtr is a handy function to access the back repo instance from the stage instance
func (backRepoAppearance *BackRepoAppearanceStruct) GetAppearanceDBFromAppearancePtr(appearance *models.Appearance) (appearanceDB *AppearanceDB) {
	id := backRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance]
	appearanceDB = backRepoAppearance.Map_AppearanceDBID_AppearanceDB[id]
	return
}

// BackRepoAppearance.CommitPhaseOne commits all staged instances of Appearance to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAppearance *BackRepoAppearanceStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for appearance := range stage.Appearances {
		backRepoAppearance.CommitPhaseOneInstance(appearance)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, appearance := range backRepoAppearance.Map_AppearanceDBID_AppearancePtr {
		if _, ok := stage.Appearances[appearance]; !ok {
			backRepoAppearance.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAppearance.CommitDeleteInstance commits deletion of Appearance to the BackRepo
func (backRepoAppearance *BackRepoAppearanceStruct) CommitDeleteInstance(id uint) (Error error) {

	appearance := backRepoAppearance.Map_AppearanceDBID_AppearancePtr[id]

	// appearance is not staged anymore, remove appearanceDB
	appearanceDB := backRepoAppearance.Map_AppearanceDBID_AppearanceDB[id]
	query := backRepoAppearance.db.Unscoped().Delete(&appearanceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAppearance.Map_AppearancePtr_AppearanceDBID, appearance)
	delete(backRepoAppearance.Map_AppearanceDBID_AppearancePtr, id)
	delete(backRepoAppearance.Map_AppearanceDBID_AppearanceDB, id)

	return
}

// BackRepoAppearance.CommitPhaseOneInstance commits appearance staged instances of Appearance to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAppearance *BackRepoAppearanceStruct) CommitPhaseOneInstance(appearance *models.Appearance) (Error error) {

	// check if the appearance is not commited yet
	if _, ok := backRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance]; ok {
		return
	}

	// initiate appearance
	var appearanceDB AppearanceDB
	appearanceDB.CopyBasicFieldsFromAppearance(appearance)

	query := backRepoAppearance.db.Create(&appearanceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance] = appearanceDB.ID
	backRepoAppearance.Map_AppearanceDBID_AppearancePtr[appearanceDB.ID] = appearance
	backRepoAppearance.Map_AppearanceDBID_AppearanceDB[appearanceDB.ID] = &appearanceDB

	return
}

// BackRepoAppearance.CommitPhaseTwo commits all staged instances of Appearance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAppearance *BackRepoAppearanceStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, appearance := range backRepoAppearance.Map_AppearanceDBID_AppearancePtr {
		backRepoAppearance.CommitPhaseTwoInstance(backRepo, idx, appearance)
	}

	return
}

// BackRepoAppearance.CommitPhaseTwoInstance commits {{structname }} of models.Appearance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAppearance *BackRepoAppearanceStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, appearance *models.Appearance) (Error error) {

	// fetch matching appearanceDB
	if appearanceDB, ok := backRepoAppearance.Map_AppearanceDBID_AppearanceDB[idx]; ok {

		appearanceDB.CopyBasicFieldsFromAppearance(appearance)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		appearanceDB.AppearancePointersEncoding.Line_width = make([]int, 0)
		// 2. encode
		for _, line_widthAssocEnd := range appearance.Line_width {
			line_widthAssocEnd_DB :=
				backRepo.BackRepoLine_width.GetLine_widthDBFromLine_widthPtr(line_widthAssocEnd)
			
			// the stage might be inconsistant, meaning that the line_widthAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if line_widthAssocEnd_DB == nil {
				continue
			}
			
			appearanceDB.AppearancePointersEncoding.Line_width =
				append(appearanceDB.AppearancePointersEncoding.Line_width, int(line_widthAssocEnd_DB.ID))
		}

		// 1. reset
		appearanceDB.AppearancePointersEncoding.Note_size = make([]int, 0)
		// 2. encode
		for _, note_sizeAssocEnd := range appearance.Note_size {
			note_sizeAssocEnd_DB :=
				backRepo.BackRepoNote_size.GetNote_sizeDBFromNote_sizePtr(note_sizeAssocEnd)
			
			// the stage might be inconsistant, meaning that the note_sizeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if note_sizeAssocEnd_DB == nil {
				continue
			}
			
			appearanceDB.AppearancePointersEncoding.Note_size =
				append(appearanceDB.AppearancePointersEncoding.Note_size, int(note_sizeAssocEnd_DB.ID))
		}

		// 1. reset
		appearanceDB.AppearancePointersEncoding.Distance = make([]int, 0)
		// 2. encode
		for _, distanceAssocEnd := range appearance.Distance {
			distanceAssocEnd_DB :=
				backRepo.BackRepoDistance.GetDistanceDBFromDistancePtr(distanceAssocEnd)
			
			// the stage might be inconsistant, meaning that the distanceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if distanceAssocEnd_DB == nil {
				continue
			}
			
			appearanceDB.AppearancePointersEncoding.Distance =
				append(appearanceDB.AppearancePointersEncoding.Distance, int(distanceAssocEnd_DB.ID))
		}

		// 1. reset
		appearanceDB.AppearancePointersEncoding.Glyph = make([]int, 0)
		// 2. encode
		for _, glyphAssocEnd := range appearance.Glyph {
			glyphAssocEnd_DB :=
				backRepo.BackRepoGlyph.GetGlyphDBFromGlyphPtr(glyphAssocEnd)
			
			// the stage might be inconsistant, meaning that the glyphAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if glyphAssocEnd_DB == nil {
				continue
			}
			
			appearanceDB.AppearancePointersEncoding.Glyph =
				append(appearanceDB.AppearancePointersEncoding.Glyph, int(glyphAssocEnd_DB.ID))
		}

		// 1. reset
		appearanceDB.AppearancePointersEncoding.Other_appearance = make([]int, 0)
		// 2. encode
		for _, other_appearanceAssocEnd := range appearance.Other_appearance {
			other_appearanceAssocEnd_DB :=
				backRepo.BackRepoOther_appearance.GetOther_appearanceDBFromOther_appearancePtr(other_appearanceAssocEnd)
			
			// the stage might be inconsistant, meaning that the other_appearanceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if other_appearanceAssocEnd_DB == nil {
				continue
			}
			
			appearanceDB.AppearancePointersEncoding.Other_appearance =
				append(appearanceDB.AppearancePointersEncoding.Other_appearance, int(other_appearanceAssocEnd_DB.ID))
		}

		query := backRepoAppearance.db.Save(&appearanceDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Appearance intance %s", appearance.Name))
		return err
	}

	return
}

// BackRepoAppearance.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAppearance *BackRepoAppearanceStruct) CheckoutPhaseOne() (Error error) {

	appearanceDBArray := make([]AppearanceDB, 0)
	query := backRepoAppearance.db.Find(&appearanceDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	appearanceInstancesToBeRemovedFromTheStage := make(map[*models.Appearance]any)
	for key, value := range backRepoAppearance.stage.Appearances {
		appearanceInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, appearanceDB := range appearanceDBArray {
		backRepoAppearance.CheckoutPhaseOneInstance(&appearanceDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		appearance, ok := backRepoAppearance.Map_AppearanceDBID_AppearancePtr[appearanceDB.ID]
		if ok {
			delete(appearanceInstancesToBeRemovedFromTheStage, appearance)
		}
	}

	// remove from stage and back repo's 3 maps all appearances that are not in the checkout
	for appearance := range appearanceInstancesToBeRemovedFromTheStage {
		appearance.Unstage(backRepoAppearance.GetStage())

		// remove instance from the back repo 3 maps
		appearanceID := backRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance]
		delete(backRepoAppearance.Map_AppearancePtr_AppearanceDBID, appearance)
		delete(backRepoAppearance.Map_AppearanceDBID_AppearanceDB, appearanceID)
		delete(backRepoAppearance.Map_AppearanceDBID_AppearancePtr, appearanceID)
	}

	return
}

// CheckoutPhaseOneInstance takes a appearanceDB that has been found in the DB, updates the backRepo and stages the
// models version of the appearanceDB
func (backRepoAppearance *BackRepoAppearanceStruct) CheckoutPhaseOneInstance(appearanceDB *AppearanceDB) (Error error) {

	appearance, ok := backRepoAppearance.Map_AppearanceDBID_AppearancePtr[appearanceDB.ID]
	if !ok {
		appearance = new(models.Appearance)

		backRepoAppearance.Map_AppearanceDBID_AppearancePtr[appearanceDB.ID] = appearance
		backRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance] = appearanceDB.ID

		// append model store with the new element
		appearance.Name = appearanceDB.Name_Data.String
		appearance.Stage(backRepoAppearance.GetStage())
	}
	appearanceDB.CopyBasicFieldsToAppearance(appearance)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	appearance.Stage(backRepoAppearance.GetStage())

	// preserve pointer to appearanceDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AppearanceDBID_AppearanceDB)[appearanceDB hold variable pointers
	appearanceDB_Data := *appearanceDB
	preservedPtrToAppearance := &appearanceDB_Data
	backRepoAppearance.Map_AppearanceDBID_AppearanceDB[appearanceDB.ID] = preservedPtrToAppearance

	return
}

// BackRepoAppearance.CheckoutPhaseTwo Checkouts all staged instances of Appearance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAppearance *BackRepoAppearanceStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, appearanceDB := range backRepoAppearance.Map_AppearanceDBID_AppearanceDB {
		backRepoAppearance.CheckoutPhaseTwoInstance(backRepo, appearanceDB)
	}
	return
}

// BackRepoAppearance.CheckoutPhaseTwoInstance Checkouts staged instances of Appearance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAppearance *BackRepoAppearanceStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, appearanceDB *AppearanceDB) (Error error) {

	appearance := backRepoAppearance.Map_AppearanceDBID_AppearancePtr[appearanceDB.ID]

	appearanceDB.DecodePointers(backRepo, appearance)

	return
}

func (appearanceDB *AppearanceDB) DecodePointers(backRepo *BackRepoStruct, appearance *models.Appearance) {

	// insertion point for checkout of pointer encoding
	// This loop redeem appearance.Line_width in the stage from the encode in the back repo
	// It parses all Line_widthDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	appearance.Line_width = appearance.Line_width[:0]
	for _, _Line_widthid := range appearanceDB.AppearancePointersEncoding.Line_width {
		appearance.Line_width = append(appearance.Line_width, backRepo.BackRepoLine_width.Map_Line_widthDBID_Line_widthPtr[uint(_Line_widthid)])
	}

	// This loop redeem appearance.Note_size in the stage from the encode in the back repo
	// It parses all Note_sizeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	appearance.Note_size = appearance.Note_size[:0]
	for _, _Note_sizeid := range appearanceDB.AppearancePointersEncoding.Note_size {
		appearance.Note_size = append(appearance.Note_size, backRepo.BackRepoNote_size.Map_Note_sizeDBID_Note_sizePtr[uint(_Note_sizeid)])
	}

	// This loop redeem appearance.Distance in the stage from the encode in the back repo
	// It parses all DistanceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	appearance.Distance = appearance.Distance[:0]
	for _, _Distanceid := range appearanceDB.AppearancePointersEncoding.Distance {
		appearance.Distance = append(appearance.Distance, backRepo.BackRepoDistance.Map_DistanceDBID_DistancePtr[uint(_Distanceid)])
	}

	// This loop redeem appearance.Glyph in the stage from the encode in the back repo
	// It parses all GlyphDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	appearance.Glyph = appearance.Glyph[:0]
	for _, _Glyphid := range appearanceDB.AppearancePointersEncoding.Glyph {
		appearance.Glyph = append(appearance.Glyph, backRepo.BackRepoGlyph.Map_GlyphDBID_GlyphPtr[uint(_Glyphid)])
	}

	// This loop redeem appearance.Other_appearance in the stage from the encode in the back repo
	// It parses all Other_appearanceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	appearance.Other_appearance = appearance.Other_appearance[:0]
	for _, _Other_appearanceid := range appearanceDB.AppearancePointersEncoding.Other_appearance {
		appearance.Other_appearance = append(appearance.Other_appearance, backRepo.BackRepoOther_appearance.Map_Other_appearanceDBID_Other_appearancePtr[uint(_Other_appearanceid)])
	}

	return
}

// CommitAppearance allows commit of a single appearance (if already staged)
func (backRepo *BackRepoStruct) CommitAppearance(appearance *models.Appearance) {
	backRepo.BackRepoAppearance.CommitPhaseOneInstance(appearance)
	if id, ok := backRepo.BackRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance]; ok {
		backRepo.BackRepoAppearance.CommitPhaseTwoInstance(backRepo, id, appearance)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAppearance allows checkout of a single appearance (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAppearance(appearance *models.Appearance) {
	// check if the appearance is staged
	if _, ok := backRepo.BackRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance]; ok {

		if id, ok := backRepo.BackRepoAppearance.Map_AppearancePtr_AppearanceDBID[appearance]; ok {
			var appearanceDB AppearanceDB
			appearanceDB.ID = id

			if err := backRepo.BackRepoAppearance.db.First(&appearanceDB, id).Error; err != nil {
				log.Fatalln("CheckoutAppearance : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAppearance.CheckoutPhaseOneInstance(&appearanceDB)
			backRepo.BackRepoAppearance.CheckoutPhaseTwoInstance(backRepo, &appearanceDB)
		}
	}
}

// CopyBasicFieldsFromAppearance
func (appearanceDB *AppearanceDB) CopyBasicFieldsFromAppearance(appearance *models.Appearance) {
	// insertion point for fields commit

	appearanceDB.Name_Data.String = appearance.Name
	appearanceDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAppearance_WOP
func (appearanceDB *AppearanceDB) CopyBasicFieldsFromAppearance_WOP(appearance *models.Appearance_WOP) {
	// insertion point for fields commit

	appearanceDB.Name_Data.String = appearance.Name
	appearanceDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAppearanceWOP
func (appearanceDB *AppearanceDB) CopyBasicFieldsFromAppearanceWOP(appearance *AppearanceWOP) {
	// insertion point for fields commit

	appearanceDB.Name_Data.String = appearance.Name
	appearanceDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAppearance
func (appearanceDB *AppearanceDB) CopyBasicFieldsToAppearance(appearance *models.Appearance) {
	// insertion point for checkout of basic fields (back repo to stage)
	appearance.Name = appearanceDB.Name_Data.String
}

// CopyBasicFieldsToAppearance_WOP
func (appearanceDB *AppearanceDB) CopyBasicFieldsToAppearance_WOP(appearance *models.Appearance_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	appearance.Name = appearanceDB.Name_Data.String
}

// CopyBasicFieldsToAppearanceWOP
func (appearanceDB *AppearanceDB) CopyBasicFieldsToAppearanceWOP(appearance *AppearanceWOP) {
	appearance.ID = int(appearanceDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	appearance.Name = appearanceDB.Name_Data.String
}

// Backup generates a json file from a slice of all AppearanceDB instances in the backrepo
func (backRepoAppearance *BackRepoAppearanceStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AppearanceDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AppearanceDB, 0)
	for _, appearanceDB := range backRepoAppearance.Map_AppearanceDBID_AppearanceDB {
		forBackup = append(forBackup, appearanceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Appearance ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Appearance file", err.Error())
	}
}

// Backup generates a json file from a slice of all AppearanceDB instances in the backrepo
func (backRepoAppearance *BackRepoAppearanceStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AppearanceDB, 0)
	for _, appearanceDB := range backRepoAppearance.Map_AppearanceDBID_AppearanceDB {
		forBackup = append(forBackup, appearanceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Appearance")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Appearance_Fields, -1)
	for _, appearanceDB := range forBackup {

		var appearanceWOP AppearanceWOP
		appearanceDB.CopyBasicFieldsToAppearanceWOP(&appearanceWOP)

		row := sh.AddRow()
		row.WriteStruct(&appearanceWOP, -1)
	}
}

// RestoreXL from the "Appearance" sheet all AppearanceDB instances
func (backRepoAppearance *BackRepoAppearanceStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAppearanceid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Appearance"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAppearance.rowVisitorAppearance)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAppearance *BackRepoAppearanceStruct) rowVisitorAppearance(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var appearanceWOP AppearanceWOP
		row.ReadStruct(&appearanceWOP)

		// add the unmarshalled struct to the stage
		appearanceDB := new(AppearanceDB)
		appearanceDB.CopyBasicFieldsFromAppearanceWOP(&appearanceWOP)

		appearanceDB_ID_atBackupTime := appearanceDB.ID
		appearanceDB.ID = 0
		query := backRepoAppearance.db.Create(appearanceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAppearance.Map_AppearanceDBID_AppearanceDB[appearanceDB.ID] = appearanceDB
		BackRepoAppearanceid_atBckpTime_newID[appearanceDB_ID_atBackupTime] = appearanceDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AppearanceDB.json" in dirPath that stores an array
// of AppearanceDB and stores it in the database
// the map BackRepoAppearanceid_atBckpTime_newID is updated accordingly
func (backRepoAppearance *BackRepoAppearanceStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAppearanceid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AppearanceDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Appearance file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AppearanceDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AppearanceDBID_AppearanceDB
	for _, appearanceDB := range forRestore {

		appearanceDB_ID_atBackupTime := appearanceDB.ID
		appearanceDB.ID = 0
		query := backRepoAppearance.db.Create(appearanceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAppearance.Map_AppearanceDBID_AppearanceDB[appearanceDB.ID] = appearanceDB
		BackRepoAppearanceid_atBckpTime_newID[appearanceDB_ID_atBackupTime] = appearanceDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Appearance file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Appearance>id_atBckpTime_newID
// to compute new index
func (backRepoAppearance *BackRepoAppearanceStruct) RestorePhaseTwo() {

	for _, appearanceDB := range backRepoAppearance.Map_AppearanceDBID_AppearanceDB {

		// next line of code is to avert unused variable compilation error
		_ = appearanceDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoAppearance.db.Model(appearanceDB).Updates(*appearanceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAppearance.ResetReversePointers commits all staged instances of Appearance to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAppearance *BackRepoAppearanceStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, appearance := range backRepoAppearance.Map_AppearanceDBID_AppearancePtr {
		backRepoAppearance.ResetReversePointersInstance(backRepo, idx, appearance)
	}

	return
}

func (backRepoAppearance *BackRepoAppearanceStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, appearance *models.Appearance) (Error error) {

	// fetch matching appearanceDB
	if appearanceDB, ok := backRepoAppearance.Map_AppearanceDBID_AppearanceDB[idx]; ok {
		_ = appearanceDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAppearanceid_atBckpTime_newID map[uint]uint
