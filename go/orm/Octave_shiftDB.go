// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Octave_shift_sql sql.NullBool
var dummy_Octave_shift_time time.Duration
var dummy_Octave_shift_sort sort.Float64Slice

// Octave_shiftAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model octave_shiftAPI
type Octave_shiftAPI struct {
	gorm.Model

	models.Octave_shift_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Octave_shiftPointersEncoding Octave_shiftPointersEncoding
}

// Octave_shiftPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Octave_shiftPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Octave_shiftDB describes a octave_shift in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model octave_shiftDB
type Octave_shiftDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field octave_shiftDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Octave_shiftPointersEncoding
}

// Octave_shiftDBs arrays octave_shiftDBs
// swagger:response octave_shiftDBsResponse
type Octave_shiftDBs []Octave_shiftDB

// Octave_shiftDBResponse provides response
// swagger:response octave_shiftDBResponse
type Octave_shiftDBResponse struct {
	Octave_shiftDB
}

// Octave_shiftWOP is a Octave_shift without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Octave_shiftWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Octave_shift_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoOctave_shiftStruct struct {
	// stores Octave_shiftDB according to their gorm ID
	Map_Octave_shiftDBID_Octave_shiftDB map[uint]*Octave_shiftDB

	// stores Octave_shiftDB ID according to Octave_shift address
	Map_Octave_shiftPtr_Octave_shiftDBID map[*models.Octave_shift]uint

	// stores Octave_shift according to their gorm ID
	Map_Octave_shiftDBID_Octave_shiftPtr map[uint]*models.Octave_shift

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOctave_shift *BackRepoOctave_shiftStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOctave_shift.stage
	return
}

func (backRepoOctave_shift *BackRepoOctave_shiftStruct) GetDB() *gorm.DB {
	return backRepoOctave_shift.db
}

// GetOctave_shiftDBFromOctave_shiftPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) GetOctave_shiftDBFromOctave_shiftPtr(octave_shift *models.Octave_shift) (octave_shiftDB *Octave_shiftDB) {
	id := backRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift]
	octave_shiftDB = backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[id]
	return
}

// BackRepoOctave_shift.CommitPhaseOne commits all staged instances of Octave_shift to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for octave_shift := range stage.Octave_shifts {
		backRepoOctave_shift.CommitPhaseOneInstance(octave_shift)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, octave_shift := range backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr {
		if _, ok := stage.Octave_shifts[octave_shift]; !ok {
			backRepoOctave_shift.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOctave_shift.CommitDeleteInstance commits deletion of Octave_shift to the BackRepo
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CommitDeleteInstance(id uint) (Error error) {

	octave_shift := backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr[id]

	// octave_shift is not staged anymore, remove octave_shiftDB
	octave_shiftDB := backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[id]
	query := backRepoOctave_shift.db.Unscoped().Delete(&octave_shiftDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID, octave_shift)
	delete(backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr, id)
	delete(backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB, id)

	return
}

// BackRepoOctave_shift.CommitPhaseOneInstance commits octave_shift staged instances of Octave_shift to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CommitPhaseOneInstance(octave_shift *models.Octave_shift) (Error error) {

	// check if the octave_shift is not commited yet
	if _, ok := backRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift]; ok {
		return
	}

	// initiate octave_shift
	var octave_shiftDB Octave_shiftDB
	octave_shiftDB.CopyBasicFieldsFromOctave_shift(octave_shift)

	query := backRepoOctave_shift.db.Create(&octave_shiftDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift] = octave_shiftDB.ID
	backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr[octave_shiftDB.ID] = octave_shift
	backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[octave_shiftDB.ID] = &octave_shiftDB

	return
}

// BackRepoOctave_shift.CommitPhaseTwo commits all staged instances of Octave_shift to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, octave_shift := range backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr {
		backRepoOctave_shift.CommitPhaseTwoInstance(backRepo, idx, octave_shift)
	}

	return
}

// BackRepoOctave_shift.CommitPhaseTwoInstance commits {{structname }} of models.Octave_shift to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, octave_shift *models.Octave_shift) (Error error) {

	// fetch matching octave_shiftDB
	if octave_shiftDB, ok := backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[idx]; ok {

		octave_shiftDB.CopyBasicFieldsFromOctave_shift(octave_shift)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOctave_shift.db.Save(&octave_shiftDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Octave_shift intance %s", octave_shift.Name))
		return err
	}

	return
}

// BackRepoOctave_shift.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CheckoutPhaseOne() (Error error) {

	octave_shiftDBArray := make([]Octave_shiftDB, 0)
	query := backRepoOctave_shift.db.Find(&octave_shiftDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	octave_shiftInstancesToBeRemovedFromTheStage := make(map[*models.Octave_shift]any)
	for key, value := range backRepoOctave_shift.stage.Octave_shifts {
		octave_shiftInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, octave_shiftDB := range octave_shiftDBArray {
		backRepoOctave_shift.CheckoutPhaseOneInstance(&octave_shiftDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		octave_shift, ok := backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr[octave_shiftDB.ID]
		if ok {
			delete(octave_shiftInstancesToBeRemovedFromTheStage, octave_shift)
		}
	}

	// remove from stage and back repo's 3 maps all octave_shifts that are not in the checkout
	for octave_shift := range octave_shiftInstancesToBeRemovedFromTheStage {
		octave_shift.Unstage(backRepoOctave_shift.GetStage())

		// remove instance from the back repo 3 maps
		octave_shiftID := backRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift]
		delete(backRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID, octave_shift)
		delete(backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB, octave_shiftID)
		delete(backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr, octave_shiftID)
	}

	return
}

// CheckoutPhaseOneInstance takes a octave_shiftDB that has been found in the DB, updates the backRepo and stages the
// models version of the octave_shiftDB
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CheckoutPhaseOneInstance(octave_shiftDB *Octave_shiftDB) (Error error) {

	octave_shift, ok := backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr[octave_shiftDB.ID]
	if !ok {
		octave_shift = new(models.Octave_shift)

		backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr[octave_shiftDB.ID] = octave_shift
		backRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift] = octave_shiftDB.ID

		// append model store with the new element
		octave_shift.Name = octave_shiftDB.Name_Data.String
		octave_shift.Stage(backRepoOctave_shift.GetStage())
	}
	octave_shiftDB.CopyBasicFieldsToOctave_shift(octave_shift)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	octave_shift.Stage(backRepoOctave_shift.GetStage())

	// preserve pointer to octave_shiftDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Octave_shiftDBID_Octave_shiftDB)[octave_shiftDB hold variable pointers
	octave_shiftDB_Data := *octave_shiftDB
	preservedPtrToOctave_shift := &octave_shiftDB_Data
	backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[octave_shiftDB.ID] = preservedPtrToOctave_shift

	return
}

// BackRepoOctave_shift.CheckoutPhaseTwo Checkouts all staged instances of Octave_shift to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, octave_shiftDB := range backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB {
		backRepoOctave_shift.CheckoutPhaseTwoInstance(backRepo, octave_shiftDB)
	}
	return
}

// BackRepoOctave_shift.CheckoutPhaseTwoInstance Checkouts staged instances of Octave_shift to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, octave_shiftDB *Octave_shiftDB) (Error error) {

	octave_shift := backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr[octave_shiftDB.ID]

	octave_shiftDB.DecodePointers(backRepo, octave_shift)

	return
}

func (octave_shiftDB *Octave_shiftDB) DecodePointers(backRepo *BackRepoStruct, octave_shift *models.Octave_shift) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOctave_shift allows commit of a single octave_shift (if already staged)
func (backRepo *BackRepoStruct) CommitOctave_shift(octave_shift *models.Octave_shift) {
	backRepo.BackRepoOctave_shift.CommitPhaseOneInstance(octave_shift)
	if id, ok := backRepo.BackRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift]; ok {
		backRepo.BackRepoOctave_shift.CommitPhaseTwoInstance(backRepo, id, octave_shift)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOctave_shift allows checkout of a single octave_shift (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOctave_shift(octave_shift *models.Octave_shift) {
	// check if the octave_shift is staged
	if _, ok := backRepo.BackRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift]; ok {

		if id, ok := backRepo.BackRepoOctave_shift.Map_Octave_shiftPtr_Octave_shiftDBID[octave_shift]; ok {
			var octave_shiftDB Octave_shiftDB
			octave_shiftDB.ID = id

			if err := backRepo.BackRepoOctave_shift.db.First(&octave_shiftDB, id).Error; err != nil {
				log.Fatalln("CheckoutOctave_shift : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOctave_shift.CheckoutPhaseOneInstance(&octave_shiftDB)
			backRepo.BackRepoOctave_shift.CheckoutPhaseTwoInstance(backRepo, &octave_shiftDB)
		}
	}
}

// CopyBasicFieldsFromOctave_shift
func (octave_shiftDB *Octave_shiftDB) CopyBasicFieldsFromOctave_shift(octave_shift *models.Octave_shift) {
	// insertion point for fields commit

	octave_shiftDB.Name_Data.String = octave_shift.Name
	octave_shiftDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOctave_shift_WOP
func (octave_shiftDB *Octave_shiftDB) CopyBasicFieldsFromOctave_shift_WOP(octave_shift *models.Octave_shift_WOP) {
	// insertion point for fields commit

	octave_shiftDB.Name_Data.String = octave_shift.Name
	octave_shiftDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOctave_shiftWOP
func (octave_shiftDB *Octave_shiftDB) CopyBasicFieldsFromOctave_shiftWOP(octave_shift *Octave_shiftWOP) {
	// insertion point for fields commit

	octave_shiftDB.Name_Data.String = octave_shift.Name
	octave_shiftDB.Name_Data.Valid = true
}

// CopyBasicFieldsToOctave_shift
func (octave_shiftDB *Octave_shiftDB) CopyBasicFieldsToOctave_shift(octave_shift *models.Octave_shift) {
	// insertion point for checkout of basic fields (back repo to stage)
	octave_shift.Name = octave_shiftDB.Name_Data.String
}

// CopyBasicFieldsToOctave_shift_WOP
func (octave_shiftDB *Octave_shiftDB) CopyBasicFieldsToOctave_shift_WOP(octave_shift *models.Octave_shift_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	octave_shift.Name = octave_shiftDB.Name_Data.String
}

// CopyBasicFieldsToOctave_shiftWOP
func (octave_shiftDB *Octave_shiftDB) CopyBasicFieldsToOctave_shiftWOP(octave_shift *Octave_shiftWOP) {
	octave_shift.ID = int(octave_shiftDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	octave_shift.Name = octave_shiftDB.Name_Data.String
}

// Backup generates a json file from a slice of all Octave_shiftDB instances in the backrepo
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Octave_shiftDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Octave_shiftDB, 0)
	for _, octave_shiftDB := range backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB {
		forBackup = append(forBackup, octave_shiftDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Octave_shift ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Octave_shift file", err.Error())
	}
}

// Backup generates a json file from a slice of all Octave_shiftDB instances in the backrepo
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Octave_shiftDB, 0)
	for _, octave_shiftDB := range backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB {
		forBackup = append(forBackup, octave_shiftDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Octave_shift")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Octave_shift_Fields, -1)
	for _, octave_shiftDB := range forBackup {

		var octave_shiftWOP Octave_shiftWOP
		octave_shiftDB.CopyBasicFieldsToOctave_shiftWOP(&octave_shiftWOP)

		row := sh.AddRow()
		row.WriteStruct(&octave_shiftWOP, -1)
	}
}

// RestoreXL from the "Octave_shift" sheet all Octave_shiftDB instances
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOctave_shiftid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Octave_shift"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOctave_shift.rowVisitorOctave_shift)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOctave_shift *BackRepoOctave_shiftStruct) rowVisitorOctave_shift(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var octave_shiftWOP Octave_shiftWOP
		row.ReadStruct(&octave_shiftWOP)

		// add the unmarshalled struct to the stage
		octave_shiftDB := new(Octave_shiftDB)
		octave_shiftDB.CopyBasicFieldsFromOctave_shiftWOP(&octave_shiftWOP)

		octave_shiftDB_ID_atBackupTime := octave_shiftDB.ID
		octave_shiftDB.ID = 0
		query := backRepoOctave_shift.db.Create(octave_shiftDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[octave_shiftDB.ID] = octave_shiftDB
		BackRepoOctave_shiftid_atBckpTime_newID[octave_shiftDB_ID_atBackupTime] = octave_shiftDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Octave_shiftDB.json" in dirPath that stores an array
// of Octave_shiftDB and stores it in the database
// the map BackRepoOctave_shiftid_atBckpTime_newID is updated accordingly
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOctave_shiftid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Octave_shiftDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Octave_shift file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Octave_shiftDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Octave_shiftDBID_Octave_shiftDB
	for _, octave_shiftDB := range forRestore {

		octave_shiftDB_ID_atBackupTime := octave_shiftDB.ID
		octave_shiftDB.ID = 0
		query := backRepoOctave_shift.db.Create(octave_shiftDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[octave_shiftDB.ID] = octave_shiftDB
		BackRepoOctave_shiftid_atBckpTime_newID[octave_shiftDB_ID_atBackupTime] = octave_shiftDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Octave_shift file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Octave_shift>id_atBckpTime_newID
// to compute new index
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) RestorePhaseTwo() {

	for _, octave_shiftDB := range backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB {

		// next line of code is to avert unused variable compilation error
		_ = octave_shiftDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOctave_shift.db.Model(octave_shiftDB).Updates(*octave_shiftDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOctave_shift.ResetReversePointers commits all staged instances of Octave_shift to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOctave_shift *BackRepoOctave_shiftStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, octave_shift := range backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftPtr {
		backRepoOctave_shift.ResetReversePointersInstance(backRepo, idx, octave_shift)
	}

	return
}

func (backRepoOctave_shift *BackRepoOctave_shiftStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, octave_shift *models.Octave_shift) (Error error) {

	// fetch matching octave_shiftDB
	if octave_shiftDB, ok := backRepoOctave_shift.Map_Octave_shiftDBID_Octave_shiftDB[idx]; ok {
		_ = octave_shiftDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOctave_shiftid_atBckpTime_newID map[uint]uint
