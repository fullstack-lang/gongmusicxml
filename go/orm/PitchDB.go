// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Pitch_sql sql.NullBool
var dummy_Pitch_time time.Duration
var dummy_Pitch_sort sort.Float64Slice

// PitchAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pitchAPI
type PitchAPI struct {
	gorm.Model

	models.Pitch_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PitchPointersEncoding PitchPointersEncoding
}

// PitchPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PitchPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// PitchDB describes a pitch in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pitchDB
type PitchDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pitchDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PitchPointersEncoding
}

// PitchDBs arrays pitchDBs
// swagger:response pitchDBsResponse
type PitchDBs []PitchDB

// PitchDBResponse provides response
// swagger:response pitchDBResponse
type PitchDBResponse struct {
	PitchDB
}

// PitchWOP is a Pitch without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PitchWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Pitch_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPitchStruct struct {
	// stores PitchDB according to their gorm ID
	Map_PitchDBID_PitchDB map[uint]*PitchDB

	// stores PitchDB ID according to Pitch address
	Map_PitchPtr_PitchDBID map[*models.Pitch]uint

	// stores Pitch according to their gorm ID
	Map_PitchDBID_PitchPtr map[uint]*models.Pitch

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPitch *BackRepoPitchStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPitch.stage
	return
}

func (backRepoPitch *BackRepoPitchStruct) GetDB() *gorm.DB {
	return backRepoPitch.db
}

// GetPitchDBFromPitchPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPitch *BackRepoPitchStruct) GetPitchDBFromPitchPtr(pitch *models.Pitch) (pitchDB *PitchDB) {
	id := backRepoPitch.Map_PitchPtr_PitchDBID[pitch]
	pitchDB = backRepoPitch.Map_PitchDBID_PitchDB[id]
	return
}

// BackRepoPitch.CommitPhaseOne commits all staged instances of Pitch to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPitch *BackRepoPitchStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pitch := range stage.Pitchs {
		backRepoPitch.CommitPhaseOneInstance(pitch)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pitch := range backRepoPitch.Map_PitchDBID_PitchPtr {
		if _, ok := stage.Pitchs[pitch]; !ok {
			backRepoPitch.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPitch.CommitDeleteInstance commits deletion of Pitch to the BackRepo
func (backRepoPitch *BackRepoPitchStruct) CommitDeleteInstance(id uint) (Error error) {

	pitch := backRepoPitch.Map_PitchDBID_PitchPtr[id]

	// pitch is not staged anymore, remove pitchDB
	pitchDB := backRepoPitch.Map_PitchDBID_PitchDB[id]
	query := backRepoPitch.db.Unscoped().Delete(&pitchDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPitch.Map_PitchPtr_PitchDBID, pitch)
	delete(backRepoPitch.Map_PitchDBID_PitchPtr, id)
	delete(backRepoPitch.Map_PitchDBID_PitchDB, id)

	return
}

// BackRepoPitch.CommitPhaseOneInstance commits pitch staged instances of Pitch to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPitch *BackRepoPitchStruct) CommitPhaseOneInstance(pitch *models.Pitch) (Error error) {

	// check if the pitch is not commited yet
	if _, ok := backRepoPitch.Map_PitchPtr_PitchDBID[pitch]; ok {
		return
	}

	// initiate pitch
	var pitchDB PitchDB
	pitchDB.CopyBasicFieldsFromPitch(pitch)

	query := backRepoPitch.db.Create(&pitchDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPitch.Map_PitchPtr_PitchDBID[pitch] = pitchDB.ID
	backRepoPitch.Map_PitchDBID_PitchPtr[pitchDB.ID] = pitch
	backRepoPitch.Map_PitchDBID_PitchDB[pitchDB.ID] = &pitchDB

	return
}

// BackRepoPitch.CommitPhaseTwo commits all staged instances of Pitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitch *BackRepoPitchStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pitch := range backRepoPitch.Map_PitchDBID_PitchPtr {
		backRepoPitch.CommitPhaseTwoInstance(backRepo, idx, pitch)
	}

	return
}

// BackRepoPitch.CommitPhaseTwoInstance commits {{structname }} of models.Pitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitch *BackRepoPitchStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pitch *models.Pitch) (Error error) {

	// fetch matching pitchDB
	if pitchDB, ok := backRepoPitch.Map_PitchDBID_PitchDB[idx]; ok {

		pitchDB.CopyBasicFieldsFromPitch(pitch)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPitch.db.Save(&pitchDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pitch intance %s", pitch.Name))
		return err
	}

	return
}

// BackRepoPitch.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPitch *BackRepoPitchStruct) CheckoutPhaseOne() (Error error) {

	pitchDBArray := make([]PitchDB, 0)
	query := backRepoPitch.db.Find(&pitchDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pitchInstancesToBeRemovedFromTheStage := make(map[*models.Pitch]any)
	for key, value := range backRepoPitch.stage.Pitchs {
		pitchInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pitchDB := range pitchDBArray {
		backRepoPitch.CheckoutPhaseOneInstance(&pitchDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pitch, ok := backRepoPitch.Map_PitchDBID_PitchPtr[pitchDB.ID]
		if ok {
			delete(pitchInstancesToBeRemovedFromTheStage, pitch)
		}
	}

	// remove from stage and back repo's 3 maps all pitchs that are not in the checkout
	for pitch := range pitchInstancesToBeRemovedFromTheStage {
		pitch.Unstage(backRepoPitch.GetStage())

		// remove instance from the back repo 3 maps
		pitchID := backRepoPitch.Map_PitchPtr_PitchDBID[pitch]
		delete(backRepoPitch.Map_PitchPtr_PitchDBID, pitch)
		delete(backRepoPitch.Map_PitchDBID_PitchDB, pitchID)
		delete(backRepoPitch.Map_PitchDBID_PitchPtr, pitchID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pitchDB that has been found in the DB, updates the backRepo and stages the
// models version of the pitchDB
func (backRepoPitch *BackRepoPitchStruct) CheckoutPhaseOneInstance(pitchDB *PitchDB) (Error error) {

	pitch, ok := backRepoPitch.Map_PitchDBID_PitchPtr[pitchDB.ID]
	if !ok {
		pitch = new(models.Pitch)

		backRepoPitch.Map_PitchDBID_PitchPtr[pitchDB.ID] = pitch
		backRepoPitch.Map_PitchPtr_PitchDBID[pitch] = pitchDB.ID

		// append model store with the new element
		pitch.Name = pitchDB.Name_Data.String
		pitch.Stage(backRepoPitch.GetStage())
	}
	pitchDB.CopyBasicFieldsToPitch(pitch)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	pitch.Stage(backRepoPitch.GetStage())

	// preserve pointer to pitchDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PitchDBID_PitchDB)[pitchDB hold variable pointers
	pitchDB_Data := *pitchDB
	preservedPtrToPitch := &pitchDB_Data
	backRepoPitch.Map_PitchDBID_PitchDB[pitchDB.ID] = preservedPtrToPitch

	return
}

// BackRepoPitch.CheckoutPhaseTwo Checkouts all staged instances of Pitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitch *BackRepoPitchStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pitchDB := range backRepoPitch.Map_PitchDBID_PitchDB {
		backRepoPitch.CheckoutPhaseTwoInstance(backRepo, pitchDB)
	}
	return
}

// BackRepoPitch.CheckoutPhaseTwoInstance Checkouts staged instances of Pitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitch *BackRepoPitchStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pitchDB *PitchDB) (Error error) {

	pitch := backRepoPitch.Map_PitchDBID_PitchPtr[pitchDB.ID]

	pitchDB.DecodePointers(backRepo, pitch)

	return
}

func (pitchDB *PitchDB) DecodePointers(backRepo *BackRepoStruct, pitch *models.Pitch) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPitch allows commit of a single pitch (if already staged)
func (backRepo *BackRepoStruct) CommitPitch(pitch *models.Pitch) {
	backRepo.BackRepoPitch.CommitPhaseOneInstance(pitch)
	if id, ok := backRepo.BackRepoPitch.Map_PitchPtr_PitchDBID[pitch]; ok {
		backRepo.BackRepoPitch.CommitPhaseTwoInstance(backRepo, id, pitch)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPitch allows checkout of a single pitch (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPitch(pitch *models.Pitch) {
	// check if the pitch is staged
	if _, ok := backRepo.BackRepoPitch.Map_PitchPtr_PitchDBID[pitch]; ok {

		if id, ok := backRepo.BackRepoPitch.Map_PitchPtr_PitchDBID[pitch]; ok {
			var pitchDB PitchDB
			pitchDB.ID = id

			if err := backRepo.BackRepoPitch.db.First(&pitchDB, id).Error; err != nil {
				log.Fatalln("CheckoutPitch : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPitch.CheckoutPhaseOneInstance(&pitchDB)
			backRepo.BackRepoPitch.CheckoutPhaseTwoInstance(backRepo, &pitchDB)
		}
	}
}

// CopyBasicFieldsFromPitch
func (pitchDB *PitchDB) CopyBasicFieldsFromPitch(pitch *models.Pitch) {
	// insertion point for fields commit

	pitchDB.Name_Data.String = pitch.Name
	pitchDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPitch_WOP
func (pitchDB *PitchDB) CopyBasicFieldsFromPitch_WOP(pitch *models.Pitch_WOP) {
	// insertion point for fields commit

	pitchDB.Name_Data.String = pitch.Name
	pitchDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPitchWOP
func (pitchDB *PitchDB) CopyBasicFieldsFromPitchWOP(pitch *PitchWOP) {
	// insertion point for fields commit

	pitchDB.Name_Data.String = pitch.Name
	pitchDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPitch
func (pitchDB *PitchDB) CopyBasicFieldsToPitch(pitch *models.Pitch) {
	// insertion point for checkout of basic fields (back repo to stage)
	pitch.Name = pitchDB.Name_Data.String
}

// CopyBasicFieldsToPitch_WOP
func (pitchDB *PitchDB) CopyBasicFieldsToPitch_WOP(pitch *models.Pitch_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	pitch.Name = pitchDB.Name_Data.String
}

// CopyBasicFieldsToPitchWOP
func (pitchDB *PitchDB) CopyBasicFieldsToPitchWOP(pitch *PitchWOP) {
	pitch.ID = int(pitchDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pitch.Name = pitchDB.Name_Data.String
}

// Backup generates a json file from a slice of all PitchDB instances in the backrepo
func (backRepoPitch *BackRepoPitchStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PitchDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PitchDB, 0)
	for _, pitchDB := range backRepoPitch.Map_PitchDBID_PitchDB {
		forBackup = append(forBackup, pitchDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Pitch ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Pitch file", err.Error())
	}
}

// Backup generates a json file from a slice of all PitchDB instances in the backrepo
func (backRepoPitch *BackRepoPitchStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PitchDB, 0)
	for _, pitchDB := range backRepoPitch.Map_PitchDBID_PitchDB {
		forBackup = append(forBackup, pitchDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Pitch")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Pitch_Fields, -1)
	for _, pitchDB := range forBackup {

		var pitchWOP PitchWOP
		pitchDB.CopyBasicFieldsToPitchWOP(&pitchWOP)

		row := sh.AddRow()
		row.WriteStruct(&pitchWOP, -1)
	}
}

// RestoreXL from the "Pitch" sheet all PitchDB instances
func (backRepoPitch *BackRepoPitchStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPitchid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Pitch"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPitch.rowVisitorPitch)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPitch *BackRepoPitchStruct) rowVisitorPitch(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pitchWOP PitchWOP
		row.ReadStruct(&pitchWOP)

		// add the unmarshalled struct to the stage
		pitchDB := new(PitchDB)
		pitchDB.CopyBasicFieldsFromPitchWOP(&pitchWOP)

		pitchDB_ID_atBackupTime := pitchDB.ID
		pitchDB.ID = 0
		query := backRepoPitch.db.Create(pitchDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPitch.Map_PitchDBID_PitchDB[pitchDB.ID] = pitchDB
		BackRepoPitchid_atBckpTime_newID[pitchDB_ID_atBackupTime] = pitchDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PitchDB.json" in dirPath that stores an array
// of PitchDB and stores it in the database
// the map BackRepoPitchid_atBckpTime_newID is updated accordingly
func (backRepoPitch *BackRepoPitchStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPitchid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PitchDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Pitch file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PitchDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PitchDBID_PitchDB
	for _, pitchDB := range forRestore {

		pitchDB_ID_atBackupTime := pitchDB.ID
		pitchDB.ID = 0
		query := backRepoPitch.db.Create(pitchDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPitch.Map_PitchDBID_PitchDB[pitchDB.ID] = pitchDB
		BackRepoPitchid_atBckpTime_newID[pitchDB_ID_atBackupTime] = pitchDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Pitch file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Pitch>id_atBckpTime_newID
// to compute new index
func (backRepoPitch *BackRepoPitchStruct) RestorePhaseTwo() {

	for _, pitchDB := range backRepoPitch.Map_PitchDBID_PitchDB {

		// next line of code is to avert unused variable compilation error
		_ = pitchDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPitch.db.Model(pitchDB).Updates(*pitchDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPitch.ResetReversePointers commits all staged instances of Pitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitch *BackRepoPitchStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, pitch := range backRepoPitch.Map_PitchDBID_PitchPtr {
		backRepoPitch.ResetReversePointersInstance(backRepo, idx, pitch)
	}

	return
}

func (backRepoPitch *BackRepoPitchStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, pitch *models.Pitch) (Error error) {

	// fetch matching pitchDB
	if pitchDB, ok := backRepoPitch.Map_PitchDBID_PitchDB[idx]; ok {
		_ = pitchDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPitchid_atBckpTime_newID map[uint]uint
