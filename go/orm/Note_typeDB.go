// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Note_type_sql sql.NullBool
var dummy_Note_type_time time.Duration
var dummy_Note_type_sort sort.Float64Slice

// Note_typeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model note_typeAPI
type Note_typeAPI struct {
	gorm.Model

	models.Note_type_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Note_typePointersEncoding Note_typePointersEncoding
}

// Note_typePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Note_typePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Note_typeDB describes a note_type in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model note_typeDB
type Note_typeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field note_typeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Note_typePointersEncoding
}

// Note_typeDBs arrays note_typeDBs
// swagger:response note_typeDBsResponse
type Note_typeDBs []Note_typeDB

// Note_typeDBResponse provides response
// swagger:response note_typeDBResponse
type Note_typeDBResponse struct {
	Note_typeDB
}

// Note_typeWOP is a Note_type without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Note_typeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Note_type_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoNote_typeStruct struct {
	// stores Note_typeDB according to their gorm ID
	Map_Note_typeDBID_Note_typeDB map[uint]*Note_typeDB

	// stores Note_typeDB ID according to Note_type address
	Map_Note_typePtr_Note_typeDBID map[*models.Note_type]uint

	// stores Note_type according to their gorm ID
	Map_Note_typeDBID_Note_typePtr map[uint]*models.Note_type

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNote_type *BackRepoNote_typeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNote_type.stage
	return
}

func (backRepoNote_type *BackRepoNote_typeStruct) GetDB() *gorm.DB {
	return backRepoNote_type.db
}

// GetNote_typeDBFromNote_typePtr is a handy function to access the back repo instance from the stage instance
func (backRepoNote_type *BackRepoNote_typeStruct) GetNote_typeDBFromNote_typePtr(note_type *models.Note_type) (note_typeDB *Note_typeDB) {
	id := backRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type]
	note_typeDB = backRepoNote_type.Map_Note_typeDBID_Note_typeDB[id]
	return
}

// BackRepoNote_type.CommitPhaseOne commits all staged instances of Note_type to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNote_type *BackRepoNote_typeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for note_type := range stage.Note_types {
		backRepoNote_type.CommitPhaseOneInstance(note_type)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, note_type := range backRepoNote_type.Map_Note_typeDBID_Note_typePtr {
		if _, ok := stage.Note_types[note_type]; !ok {
			backRepoNote_type.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNote_type.CommitDeleteInstance commits deletion of Note_type to the BackRepo
func (backRepoNote_type *BackRepoNote_typeStruct) CommitDeleteInstance(id uint) (Error error) {

	note_type := backRepoNote_type.Map_Note_typeDBID_Note_typePtr[id]

	// note_type is not staged anymore, remove note_typeDB
	note_typeDB := backRepoNote_type.Map_Note_typeDBID_Note_typeDB[id]
	query := backRepoNote_type.db.Unscoped().Delete(&note_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNote_type.Map_Note_typePtr_Note_typeDBID, note_type)
	delete(backRepoNote_type.Map_Note_typeDBID_Note_typePtr, id)
	delete(backRepoNote_type.Map_Note_typeDBID_Note_typeDB, id)

	return
}

// BackRepoNote_type.CommitPhaseOneInstance commits note_type staged instances of Note_type to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNote_type *BackRepoNote_typeStruct) CommitPhaseOneInstance(note_type *models.Note_type) (Error error) {

	// check if the note_type is not commited yet
	if _, ok := backRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type]; ok {
		return
	}

	// initiate note_type
	var note_typeDB Note_typeDB
	note_typeDB.CopyBasicFieldsFromNote_type(note_type)

	query := backRepoNote_type.db.Create(&note_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type] = note_typeDB.ID
	backRepoNote_type.Map_Note_typeDBID_Note_typePtr[note_typeDB.ID] = note_type
	backRepoNote_type.Map_Note_typeDBID_Note_typeDB[note_typeDB.ID] = &note_typeDB

	return
}

// BackRepoNote_type.CommitPhaseTwo commits all staged instances of Note_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_type *BackRepoNote_typeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, note_type := range backRepoNote_type.Map_Note_typeDBID_Note_typePtr {
		backRepoNote_type.CommitPhaseTwoInstance(backRepo, idx, note_type)
	}

	return
}

// BackRepoNote_type.CommitPhaseTwoInstance commits {{structname }} of models.Note_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_type *BackRepoNote_typeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, note_type *models.Note_type) (Error error) {

	// fetch matching note_typeDB
	if note_typeDB, ok := backRepoNote_type.Map_Note_typeDBID_Note_typeDB[idx]; ok {

		note_typeDB.CopyBasicFieldsFromNote_type(note_type)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoNote_type.db.Save(&note_typeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Note_type intance %s", note_type.Name))
		return err
	}

	return
}

// BackRepoNote_type.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNote_type *BackRepoNote_typeStruct) CheckoutPhaseOne() (Error error) {

	note_typeDBArray := make([]Note_typeDB, 0)
	query := backRepoNote_type.db.Find(&note_typeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	note_typeInstancesToBeRemovedFromTheStage := make(map[*models.Note_type]any)
	for key, value := range backRepoNote_type.stage.Note_types {
		note_typeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, note_typeDB := range note_typeDBArray {
		backRepoNote_type.CheckoutPhaseOneInstance(&note_typeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		note_type, ok := backRepoNote_type.Map_Note_typeDBID_Note_typePtr[note_typeDB.ID]
		if ok {
			delete(note_typeInstancesToBeRemovedFromTheStage, note_type)
		}
	}

	// remove from stage and back repo's 3 maps all note_types that are not in the checkout
	for note_type := range note_typeInstancesToBeRemovedFromTheStage {
		note_type.Unstage(backRepoNote_type.GetStage())

		// remove instance from the back repo 3 maps
		note_typeID := backRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type]
		delete(backRepoNote_type.Map_Note_typePtr_Note_typeDBID, note_type)
		delete(backRepoNote_type.Map_Note_typeDBID_Note_typeDB, note_typeID)
		delete(backRepoNote_type.Map_Note_typeDBID_Note_typePtr, note_typeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a note_typeDB that has been found in the DB, updates the backRepo and stages the
// models version of the note_typeDB
func (backRepoNote_type *BackRepoNote_typeStruct) CheckoutPhaseOneInstance(note_typeDB *Note_typeDB) (Error error) {

	note_type, ok := backRepoNote_type.Map_Note_typeDBID_Note_typePtr[note_typeDB.ID]
	if !ok {
		note_type = new(models.Note_type)

		backRepoNote_type.Map_Note_typeDBID_Note_typePtr[note_typeDB.ID] = note_type
		backRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type] = note_typeDB.ID

		// append model store with the new element
		note_type.Name = note_typeDB.Name_Data.String
		note_type.Stage(backRepoNote_type.GetStage())
	}
	note_typeDB.CopyBasicFieldsToNote_type(note_type)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	note_type.Stage(backRepoNote_type.GetStage())

	// preserve pointer to note_typeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Note_typeDBID_Note_typeDB)[note_typeDB hold variable pointers
	note_typeDB_Data := *note_typeDB
	preservedPtrToNote_type := &note_typeDB_Data
	backRepoNote_type.Map_Note_typeDBID_Note_typeDB[note_typeDB.ID] = preservedPtrToNote_type

	return
}

// BackRepoNote_type.CheckoutPhaseTwo Checkouts all staged instances of Note_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_type *BackRepoNote_typeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, note_typeDB := range backRepoNote_type.Map_Note_typeDBID_Note_typeDB {
		backRepoNote_type.CheckoutPhaseTwoInstance(backRepo, note_typeDB)
	}
	return
}

// BackRepoNote_type.CheckoutPhaseTwoInstance Checkouts staged instances of Note_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_type *BackRepoNote_typeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, note_typeDB *Note_typeDB) (Error error) {

	note_type := backRepoNote_type.Map_Note_typeDBID_Note_typePtr[note_typeDB.ID]

	note_typeDB.DecodePointers(backRepo, note_type)

	return
}

func (note_typeDB *Note_typeDB) DecodePointers(backRepo *BackRepoStruct, note_type *models.Note_type) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitNote_type allows commit of a single note_type (if already staged)
func (backRepo *BackRepoStruct) CommitNote_type(note_type *models.Note_type) {
	backRepo.BackRepoNote_type.CommitPhaseOneInstance(note_type)
	if id, ok := backRepo.BackRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type]; ok {
		backRepo.BackRepoNote_type.CommitPhaseTwoInstance(backRepo, id, note_type)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNote_type allows checkout of a single note_type (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNote_type(note_type *models.Note_type) {
	// check if the note_type is staged
	if _, ok := backRepo.BackRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type]; ok {

		if id, ok := backRepo.BackRepoNote_type.Map_Note_typePtr_Note_typeDBID[note_type]; ok {
			var note_typeDB Note_typeDB
			note_typeDB.ID = id

			if err := backRepo.BackRepoNote_type.db.First(&note_typeDB, id).Error; err != nil {
				log.Fatalln("CheckoutNote_type : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNote_type.CheckoutPhaseOneInstance(&note_typeDB)
			backRepo.BackRepoNote_type.CheckoutPhaseTwoInstance(backRepo, &note_typeDB)
		}
	}
}

// CopyBasicFieldsFromNote_type
func (note_typeDB *Note_typeDB) CopyBasicFieldsFromNote_type(note_type *models.Note_type) {
	// insertion point for fields commit

	note_typeDB.Name_Data.String = note_type.Name
	note_typeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNote_type_WOP
func (note_typeDB *Note_typeDB) CopyBasicFieldsFromNote_type_WOP(note_type *models.Note_type_WOP) {
	// insertion point for fields commit

	note_typeDB.Name_Data.String = note_type.Name
	note_typeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNote_typeWOP
func (note_typeDB *Note_typeDB) CopyBasicFieldsFromNote_typeWOP(note_type *Note_typeWOP) {
	// insertion point for fields commit

	note_typeDB.Name_Data.String = note_type.Name
	note_typeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToNote_type
func (note_typeDB *Note_typeDB) CopyBasicFieldsToNote_type(note_type *models.Note_type) {
	// insertion point for checkout of basic fields (back repo to stage)
	note_type.Name = note_typeDB.Name_Data.String
}

// CopyBasicFieldsToNote_type_WOP
func (note_typeDB *Note_typeDB) CopyBasicFieldsToNote_type_WOP(note_type *models.Note_type_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	note_type.Name = note_typeDB.Name_Data.String
}

// CopyBasicFieldsToNote_typeWOP
func (note_typeDB *Note_typeDB) CopyBasicFieldsToNote_typeWOP(note_type *Note_typeWOP) {
	note_type.ID = int(note_typeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	note_type.Name = note_typeDB.Name_Data.String
}

// Backup generates a json file from a slice of all Note_typeDB instances in the backrepo
func (backRepoNote_type *BackRepoNote_typeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Note_typeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Note_typeDB, 0)
	for _, note_typeDB := range backRepoNote_type.Map_Note_typeDBID_Note_typeDB {
		forBackup = append(forBackup, note_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Note_type ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Note_type file", err.Error())
	}
}

// Backup generates a json file from a slice of all Note_typeDB instances in the backrepo
func (backRepoNote_type *BackRepoNote_typeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Note_typeDB, 0)
	for _, note_typeDB := range backRepoNote_type.Map_Note_typeDBID_Note_typeDB {
		forBackup = append(forBackup, note_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Note_type")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Note_type_Fields, -1)
	for _, note_typeDB := range forBackup {

		var note_typeWOP Note_typeWOP
		note_typeDB.CopyBasicFieldsToNote_typeWOP(&note_typeWOP)

		row := sh.AddRow()
		row.WriteStruct(&note_typeWOP, -1)
	}
}

// RestoreXL from the "Note_type" sheet all Note_typeDB instances
func (backRepoNote_type *BackRepoNote_typeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNote_typeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Note_type"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNote_type.rowVisitorNote_type)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNote_type *BackRepoNote_typeStruct) rowVisitorNote_type(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var note_typeWOP Note_typeWOP
		row.ReadStruct(&note_typeWOP)

		// add the unmarshalled struct to the stage
		note_typeDB := new(Note_typeDB)
		note_typeDB.CopyBasicFieldsFromNote_typeWOP(&note_typeWOP)

		note_typeDB_ID_atBackupTime := note_typeDB.ID
		note_typeDB.ID = 0
		query := backRepoNote_type.db.Create(note_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNote_type.Map_Note_typeDBID_Note_typeDB[note_typeDB.ID] = note_typeDB
		BackRepoNote_typeid_atBckpTime_newID[note_typeDB_ID_atBackupTime] = note_typeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Note_typeDB.json" in dirPath that stores an array
// of Note_typeDB and stores it in the database
// the map BackRepoNote_typeid_atBckpTime_newID is updated accordingly
func (backRepoNote_type *BackRepoNote_typeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNote_typeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Note_typeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Note_type file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Note_typeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Note_typeDBID_Note_typeDB
	for _, note_typeDB := range forRestore {

		note_typeDB_ID_atBackupTime := note_typeDB.ID
		note_typeDB.ID = 0
		query := backRepoNote_type.db.Create(note_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNote_type.Map_Note_typeDBID_Note_typeDB[note_typeDB.ID] = note_typeDB
		BackRepoNote_typeid_atBckpTime_newID[note_typeDB_ID_atBackupTime] = note_typeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Note_type file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Note_type>id_atBckpTime_newID
// to compute new index
func (backRepoNote_type *BackRepoNote_typeStruct) RestorePhaseTwo() {

	for _, note_typeDB := range backRepoNote_type.Map_Note_typeDBID_Note_typeDB {

		// next line of code is to avert unused variable compilation error
		_ = note_typeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoNote_type.db.Model(note_typeDB).Updates(*note_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNote_type.ResetReversePointers commits all staged instances of Note_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_type *BackRepoNote_typeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, note_type := range backRepoNote_type.Map_Note_typeDBID_Note_typePtr {
		backRepoNote_type.ResetReversePointersInstance(backRepo, idx, note_type)
	}

	return
}

func (backRepoNote_type *BackRepoNote_typeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, note_type *models.Note_type) (Error error) {

	// fetch matching note_typeDB
	if note_typeDB, ok := backRepoNote_type.Map_Note_typeDBID_Note_typeDB[idx]; ok {
		_ = note_typeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNote_typeid_atBckpTime_newID map[uint]uint
