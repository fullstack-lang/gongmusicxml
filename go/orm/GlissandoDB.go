// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Glissando_sql sql.NullBool
var dummy_Glissando_time time.Duration
var dummy_Glissando_sort sort.Float64Slice

// GlissandoAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model glissandoAPI
type GlissandoAPI struct {
	gorm.Model

	models.Glissando_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GlissandoPointersEncoding GlissandoPointersEncoding
}

// GlissandoPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GlissandoPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GlissandoDB describes a glissando in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model glissandoDB
type GlissandoDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field glissandoDB.Name
	Name_Data sql.NullString

	// Declation for basic field glissandoDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GlissandoPointersEncoding
}

// GlissandoDBs arrays glissandoDBs
// swagger:response glissandoDBsResponse
type GlissandoDBs []GlissandoDB

// GlissandoDBResponse provides response
// swagger:response glissandoDBResponse
type GlissandoDBResponse struct {
	GlissandoDB
}

// GlissandoWOP is a Glissando without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GlissandoWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Glissando_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoGlissandoStruct struct {
	// stores GlissandoDB according to their gorm ID
	Map_GlissandoDBID_GlissandoDB map[uint]*GlissandoDB

	// stores GlissandoDB ID according to Glissando address
	Map_GlissandoPtr_GlissandoDBID map[*models.Glissando]uint

	// stores Glissando according to their gorm ID
	Map_GlissandoDBID_GlissandoPtr map[uint]*models.Glissando

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGlissando *BackRepoGlissandoStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGlissando.stage
	return
}

func (backRepoGlissando *BackRepoGlissandoStruct) GetDB() *gorm.DB {
	return backRepoGlissando.db
}

// GetGlissandoDBFromGlissandoPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGlissando *BackRepoGlissandoStruct) GetGlissandoDBFromGlissandoPtr(glissando *models.Glissando) (glissandoDB *GlissandoDB) {
	id := backRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando]
	glissandoDB = backRepoGlissando.Map_GlissandoDBID_GlissandoDB[id]
	return
}

// BackRepoGlissando.CommitPhaseOne commits all staged instances of Glissando to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGlissando *BackRepoGlissandoStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for glissando := range stage.Glissandos {
		backRepoGlissando.CommitPhaseOneInstance(glissando)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, glissando := range backRepoGlissando.Map_GlissandoDBID_GlissandoPtr {
		if _, ok := stage.Glissandos[glissando]; !ok {
			backRepoGlissando.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGlissando.CommitDeleteInstance commits deletion of Glissando to the BackRepo
func (backRepoGlissando *BackRepoGlissandoStruct) CommitDeleteInstance(id uint) (Error error) {

	glissando := backRepoGlissando.Map_GlissandoDBID_GlissandoPtr[id]

	// glissando is not staged anymore, remove glissandoDB
	glissandoDB := backRepoGlissando.Map_GlissandoDBID_GlissandoDB[id]
	query := backRepoGlissando.db.Unscoped().Delete(&glissandoDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGlissando.Map_GlissandoPtr_GlissandoDBID, glissando)
	delete(backRepoGlissando.Map_GlissandoDBID_GlissandoPtr, id)
	delete(backRepoGlissando.Map_GlissandoDBID_GlissandoDB, id)

	return
}

// BackRepoGlissando.CommitPhaseOneInstance commits glissando staged instances of Glissando to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGlissando *BackRepoGlissandoStruct) CommitPhaseOneInstance(glissando *models.Glissando) (Error error) {

	// check if the glissando is not commited yet
	if _, ok := backRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando]; ok {
		return
	}

	// initiate glissando
	var glissandoDB GlissandoDB
	glissandoDB.CopyBasicFieldsFromGlissando(glissando)

	query := backRepoGlissando.db.Create(&glissandoDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando] = glissandoDB.ID
	backRepoGlissando.Map_GlissandoDBID_GlissandoPtr[glissandoDB.ID] = glissando
	backRepoGlissando.Map_GlissandoDBID_GlissandoDB[glissandoDB.ID] = &glissandoDB

	return
}

// BackRepoGlissando.CommitPhaseTwo commits all staged instances of Glissando to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlissando *BackRepoGlissandoStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, glissando := range backRepoGlissando.Map_GlissandoDBID_GlissandoPtr {
		backRepoGlissando.CommitPhaseTwoInstance(backRepo, idx, glissando)
	}

	return
}

// BackRepoGlissando.CommitPhaseTwoInstance commits {{structname }} of models.Glissando to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlissando *BackRepoGlissandoStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, glissando *models.Glissando) (Error error) {

	// fetch matching glissandoDB
	if glissandoDB, ok := backRepoGlissando.Map_GlissandoDBID_GlissandoDB[idx]; ok {

		glissandoDB.CopyBasicFieldsFromGlissando(glissando)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGlissando.db.Save(&glissandoDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Glissando intance %s", glissando.Name))
		return err
	}

	return
}

// BackRepoGlissando.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGlissando *BackRepoGlissandoStruct) CheckoutPhaseOne() (Error error) {

	glissandoDBArray := make([]GlissandoDB, 0)
	query := backRepoGlissando.db.Find(&glissandoDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	glissandoInstancesToBeRemovedFromTheStage := make(map[*models.Glissando]any)
	for key, value := range backRepoGlissando.stage.Glissandos {
		glissandoInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, glissandoDB := range glissandoDBArray {
		backRepoGlissando.CheckoutPhaseOneInstance(&glissandoDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		glissando, ok := backRepoGlissando.Map_GlissandoDBID_GlissandoPtr[glissandoDB.ID]
		if ok {
			delete(glissandoInstancesToBeRemovedFromTheStage, glissando)
		}
	}

	// remove from stage and back repo's 3 maps all glissandos that are not in the checkout
	for glissando := range glissandoInstancesToBeRemovedFromTheStage {
		glissando.Unstage(backRepoGlissando.GetStage())

		// remove instance from the back repo 3 maps
		glissandoID := backRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando]
		delete(backRepoGlissando.Map_GlissandoPtr_GlissandoDBID, glissando)
		delete(backRepoGlissando.Map_GlissandoDBID_GlissandoDB, glissandoID)
		delete(backRepoGlissando.Map_GlissandoDBID_GlissandoPtr, glissandoID)
	}

	return
}

// CheckoutPhaseOneInstance takes a glissandoDB that has been found in the DB, updates the backRepo and stages the
// models version of the glissandoDB
func (backRepoGlissando *BackRepoGlissandoStruct) CheckoutPhaseOneInstance(glissandoDB *GlissandoDB) (Error error) {

	glissando, ok := backRepoGlissando.Map_GlissandoDBID_GlissandoPtr[glissandoDB.ID]
	if !ok {
		glissando = new(models.Glissando)

		backRepoGlissando.Map_GlissandoDBID_GlissandoPtr[glissandoDB.ID] = glissando
		backRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando] = glissandoDB.ID

		// append model store with the new element
		glissando.Name = glissandoDB.Name_Data.String
		glissando.Stage(backRepoGlissando.GetStage())
	}
	glissandoDB.CopyBasicFieldsToGlissando(glissando)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	glissando.Stage(backRepoGlissando.GetStage())

	// preserve pointer to glissandoDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GlissandoDBID_GlissandoDB)[glissandoDB hold variable pointers
	glissandoDB_Data := *glissandoDB
	preservedPtrToGlissando := &glissandoDB_Data
	backRepoGlissando.Map_GlissandoDBID_GlissandoDB[glissandoDB.ID] = preservedPtrToGlissando

	return
}

// BackRepoGlissando.CheckoutPhaseTwo Checkouts all staged instances of Glissando to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlissando *BackRepoGlissandoStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, glissandoDB := range backRepoGlissando.Map_GlissandoDBID_GlissandoDB {
		backRepoGlissando.CheckoutPhaseTwoInstance(backRepo, glissandoDB)
	}
	return
}

// BackRepoGlissando.CheckoutPhaseTwoInstance Checkouts staged instances of Glissando to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlissando *BackRepoGlissandoStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, glissandoDB *GlissandoDB) (Error error) {

	glissando := backRepoGlissando.Map_GlissandoDBID_GlissandoPtr[glissandoDB.ID]

	glissandoDB.DecodePointers(backRepo, glissando)

	return
}

func (glissandoDB *GlissandoDB) DecodePointers(backRepo *BackRepoStruct, glissando *models.Glissando) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGlissando allows commit of a single glissando (if already staged)
func (backRepo *BackRepoStruct) CommitGlissando(glissando *models.Glissando) {
	backRepo.BackRepoGlissando.CommitPhaseOneInstance(glissando)
	if id, ok := backRepo.BackRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando]; ok {
		backRepo.BackRepoGlissando.CommitPhaseTwoInstance(backRepo, id, glissando)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGlissando allows checkout of a single glissando (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGlissando(glissando *models.Glissando) {
	// check if the glissando is staged
	if _, ok := backRepo.BackRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando]; ok {

		if id, ok := backRepo.BackRepoGlissando.Map_GlissandoPtr_GlissandoDBID[glissando]; ok {
			var glissandoDB GlissandoDB
			glissandoDB.ID = id

			if err := backRepo.BackRepoGlissando.db.First(&glissandoDB, id).Error; err != nil {
				log.Fatalln("CheckoutGlissando : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGlissando.CheckoutPhaseOneInstance(&glissandoDB)
			backRepo.BackRepoGlissando.CheckoutPhaseTwoInstance(backRepo, &glissandoDB)
		}
	}
}

// CopyBasicFieldsFromGlissando
func (glissandoDB *GlissandoDB) CopyBasicFieldsFromGlissando(glissando *models.Glissando) {
	// insertion point for fields commit

	glissandoDB.Name_Data.String = glissando.Name
	glissandoDB.Name_Data.Valid = true

	glissandoDB.Value_Data.String = glissando.Value
	glissandoDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromGlissando_WOP
func (glissandoDB *GlissandoDB) CopyBasicFieldsFromGlissando_WOP(glissando *models.Glissando_WOP) {
	// insertion point for fields commit

	glissandoDB.Name_Data.String = glissando.Name
	glissandoDB.Name_Data.Valid = true

	glissandoDB.Value_Data.String = glissando.Value
	glissandoDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromGlissandoWOP
func (glissandoDB *GlissandoDB) CopyBasicFieldsFromGlissandoWOP(glissando *GlissandoWOP) {
	// insertion point for fields commit

	glissandoDB.Name_Data.String = glissando.Name
	glissandoDB.Name_Data.Valid = true

	glissandoDB.Value_Data.String = glissando.Value
	glissandoDB.Value_Data.Valid = true
}

// CopyBasicFieldsToGlissando
func (glissandoDB *GlissandoDB) CopyBasicFieldsToGlissando(glissando *models.Glissando) {
	// insertion point for checkout of basic fields (back repo to stage)
	glissando.Name = glissandoDB.Name_Data.String
	glissando.Value = glissandoDB.Value_Data.String
}

// CopyBasicFieldsToGlissando_WOP
func (glissandoDB *GlissandoDB) CopyBasicFieldsToGlissando_WOP(glissando *models.Glissando_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	glissando.Name = glissandoDB.Name_Data.String
	glissando.Value = glissandoDB.Value_Data.String
}

// CopyBasicFieldsToGlissandoWOP
func (glissandoDB *GlissandoDB) CopyBasicFieldsToGlissandoWOP(glissando *GlissandoWOP) {
	glissando.ID = int(glissandoDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	glissando.Name = glissandoDB.Name_Data.String
	glissando.Value = glissandoDB.Value_Data.String
}

// Backup generates a json file from a slice of all GlissandoDB instances in the backrepo
func (backRepoGlissando *BackRepoGlissandoStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GlissandoDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GlissandoDB, 0)
	for _, glissandoDB := range backRepoGlissando.Map_GlissandoDBID_GlissandoDB {
		forBackup = append(forBackup, glissandoDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Glissando ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Glissando file", err.Error())
	}
}

// Backup generates a json file from a slice of all GlissandoDB instances in the backrepo
func (backRepoGlissando *BackRepoGlissandoStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GlissandoDB, 0)
	for _, glissandoDB := range backRepoGlissando.Map_GlissandoDBID_GlissandoDB {
		forBackup = append(forBackup, glissandoDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Glissando")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Glissando_Fields, -1)
	for _, glissandoDB := range forBackup {

		var glissandoWOP GlissandoWOP
		glissandoDB.CopyBasicFieldsToGlissandoWOP(&glissandoWOP)

		row := sh.AddRow()
		row.WriteStruct(&glissandoWOP, -1)
	}
}

// RestoreXL from the "Glissando" sheet all GlissandoDB instances
func (backRepoGlissando *BackRepoGlissandoStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGlissandoid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Glissando"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGlissando.rowVisitorGlissando)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGlissando *BackRepoGlissandoStruct) rowVisitorGlissando(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var glissandoWOP GlissandoWOP
		row.ReadStruct(&glissandoWOP)

		// add the unmarshalled struct to the stage
		glissandoDB := new(GlissandoDB)
		glissandoDB.CopyBasicFieldsFromGlissandoWOP(&glissandoWOP)

		glissandoDB_ID_atBackupTime := glissandoDB.ID
		glissandoDB.ID = 0
		query := backRepoGlissando.db.Create(glissandoDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGlissando.Map_GlissandoDBID_GlissandoDB[glissandoDB.ID] = glissandoDB
		BackRepoGlissandoid_atBckpTime_newID[glissandoDB_ID_atBackupTime] = glissandoDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GlissandoDB.json" in dirPath that stores an array
// of GlissandoDB and stores it in the database
// the map BackRepoGlissandoid_atBckpTime_newID is updated accordingly
func (backRepoGlissando *BackRepoGlissandoStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGlissandoid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GlissandoDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Glissando file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GlissandoDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GlissandoDBID_GlissandoDB
	for _, glissandoDB := range forRestore {

		glissandoDB_ID_atBackupTime := glissandoDB.ID
		glissandoDB.ID = 0
		query := backRepoGlissando.db.Create(glissandoDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGlissando.Map_GlissandoDBID_GlissandoDB[glissandoDB.ID] = glissandoDB
		BackRepoGlissandoid_atBckpTime_newID[glissandoDB_ID_atBackupTime] = glissandoDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Glissando file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Glissando>id_atBckpTime_newID
// to compute new index
func (backRepoGlissando *BackRepoGlissandoStruct) RestorePhaseTwo() {

	for _, glissandoDB := range backRepoGlissando.Map_GlissandoDBID_GlissandoDB {

		// next line of code is to avert unused variable compilation error
		_ = glissandoDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGlissando.db.Model(glissandoDB).Updates(*glissandoDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGlissando.ResetReversePointers commits all staged instances of Glissando to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlissando *BackRepoGlissandoStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, glissando := range backRepoGlissando.Map_GlissandoDBID_GlissandoPtr {
		backRepoGlissando.ResetReversePointersInstance(backRepo, idx, glissando)
	}

	return
}

func (backRepoGlissando *BackRepoGlissandoStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, glissando *models.Glissando) (Error error) {

	// fetch matching glissandoDB
	if glissandoDB, ok := backRepoGlissando.Map_GlissandoDBID_GlissandoDB[idx]; ok {
		_ = glissandoDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGlissandoid_atBckpTime_newID map[uint]uint
