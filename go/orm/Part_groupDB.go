// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Part_group_sql sql.NullBool
var dummy_Part_group_time time.Duration
var dummy_Part_group_sort sort.Float64Slice

// Part_groupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model part_groupAPI
type Part_groupAPI struct {
	gorm.Model

	models.Part_group_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Part_groupPointersEncoding Part_groupPointersEncoding
}

// Part_groupPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Part_groupPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Group_name_display is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Group_name_displayID sql.NullInt64

	// field Group_abbreviation_display is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Group_abbreviation_displayID sql.NullInt64

	// field Group_symbol is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Group_symbolID sql.NullInt64

	// field Group_barline is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Group_barlineID sql.NullInt64

	// field Group_time is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Group_timeID sql.NullInt64
}

// Part_groupDB describes a part_group in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model part_groupDB
type Part_groupDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field part_groupDB.Name
	Name_Data sql.NullString

	// Declation for basic field part_groupDB.Number
	Number_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Part_groupPointersEncoding
}

// Part_groupDBs arrays part_groupDBs
// swagger:response part_groupDBsResponse
type Part_groupDBs []Part_groupDB

// Part_groupDBResponse provides response
// swagger:response part_groupDBResponse
type Part_groupDBResponse struct {
	Part_groupDB
}

// Part_groupWOP is a Part_group without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Part_groupWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Number string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Part_group_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Number",
}

type BackRepoPart_groupStruct struct {
	// stores Part_groupDB according to their gorm ID
	Map_Part_groupDBID_Part_groupDB map[uint]*Part_groupDB

	// stores Part_groupDB ID according to Part_group address
	Map_Part_groupPtr_Part_groupDBID map[*models.Part_group]uint

	// stores Part_group according to their gorm ID
	Map_Part_groupDBID_Part_groupPtr map[uint]*models.Part_group

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPart_group *BackRepoPart_groupStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPart_group.stage
	return
}

func (backRepoPart_group *BackRepoPart_groupStruct) GetDB() *gorm.DB {
	return backRepoPart_group.db
}

// GetPart_groupDBFromPart_groupPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPart_group *BackRepoPart_groupStruct) GetPart_groupDBFromPart_groupPtr(part_group *models.Part_group) (part_groupDB *Part_groupDB) {
	id := backRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group]
	part_groupDB = backRepoPart_group.Map_Part_groupDBID_Part_groupDB[id]
	return
}

// BackRepoPart_group.CommitPhaseOne commits all staged instances of Part_group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_group *BackRepoPart_groupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for part_group := range stage.Part_groups {
		backRepoPart_group.CommitPhaseOneInstance(part_group)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, part_group := range backRepoPart_group.Map_Part_groupDBID_Part_groupPtr {
		if _, ok := stage.Part_groups[part_group]; !ok {
			backRepoPart_group.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPart_group.CommitDeleteInstance commits deletion of Part_group to the BackRepo
func (backRepoPart_group *BackRepoPart_groupStruct) CommitDeleteInstance(id uint) (Error error) {

	part_group := backRepoPart_group.Map_Part_groupDBID_Part_groupPtr[id]

	// part_group is not staged anymore, remove part_groupDB
	part_groupDB := backRepoPart_group.Map_Part_groupDBID_Part_groupDB[id]
	query := backRepoPart_group.db.Unscoped().Delete(&part_groupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPart_group.Map_Part_groupPtr_Part_groupDBID, part_group)
	delete(backRepoPart_group.Map_Part_groupDBID_Part_groupPtr, id)
	delete(backRepoPart_group.Map_Part_groupDBID_Part_groupDB, id)

	return
}

// BackRepoPart_group.CommitPhaseOneInstance commits part_group staged instances of Part_group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_group *BackRepoPart_groupStruct) CommitPhaseOneInstance(part_group *models.Part_group) (Error error) {

	// check if the part_group is not commited yet
	if _, ok := backRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group]; ok {
		return
	}

	// initiate part_group
	var part_groupDB Part_groupDB
	part_groupDB.CopyBasicFieldsFromPart_group(part_group)

	query := backRepoPart_group.db.Create(&part_groupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group] = part_groupDB.ID
	backRepoPart_group.Map_Part_groupDBID_Part_groupPtr[part_groupDB.ID] = part_group
	backRepoPart_group.Map_Part_groupDBID_Part_groupDB[part_groupDB.ID] = &part_groupDB

	return
}

// BackRepoPart_group.CommitPhaseTwo commits all staged instances of Part_group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_group *BackRepoPart_groupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, part_group := range backRepoPart_group.Map_Part_groupDBID_Part_groupPtr {
		backRepoPart_group.CommitPhaseTwoInstance(backRepo, idx, part_group)
	}

	return
}

// BackRepoPart_group.CommitPhaseTwoInstance commits {{structname }} of models.Part_group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_group *BackRepoPart_groupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, part_group *models.Part_group) (Error error) {

	// fetch matching part_groupDB
	if part_groupDB, ok := backRepoPart_group.Map_Part_groupDBID_Part_groupDB[idx]; ok {

		part_groupDB.CopyBasicFieldsFromPart_group(part_group)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value part_group.Group_name_display translates to updating the part_group.Group_name_displayID
		part_groupDB.Group_name_displayID.Valid = true // allow for a 0 value (nil association)
		if part_group.Group_name_display != nil {
			if Group_name_displayId, ok := backRepo.BackRepoName_display.Map_Name_displayPtr_Name_displayDBID[part_group.Group_name_display]; ok {
				part_groupDB.Group_name_displayID.Int64 = int64(Group_name_displayId)
				part_groupDB.Group_name_displayID.Valid = true
			}
		} else {
			part_groupDB.Group_name_displayID.Int64 = 0
			part_groupDB.Group_name_displayID.Valid = true
		}

		// commit pointer value part_group.Group_abbreviation_display translates to updating the part_group.Group_abbreviation_displayID
		part_groupDB.Group_abbreviation_displayID.Valid = true // allow for a 0 value (nil association)
		if part_group.Group_abbreviation_display != nil {
			if Group_abbreviation_displayId, ok := backRepo.BackRepoName_display.Map_Name_displayPtr_Name_displayDBID[part_group.Group_abbreviation_display]; ok {
				part_groupDB.Group_abbreviation_displayID.Int64 = int64(Group_abbreviation_displayId)
				part_groupDB.Group_abbreviation_displayID.Valid = true
			}
		} else {
			part_groupDB.Group_abbreviation_displayID.Int64 = 0
			part_groupDB.Group_abbreviation_displayID.Valid = true
		}

		// commit pointer value part_group.Group_symbol translates to updating the part_group.Group_symbolID
		part_groupDB.Group_symbolID.Valid = true // allow for a 0 value (nil association)
		if part_group.Group_symbol != nil {
			if Group_symbolId, ok := backRepo.BackRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[part_group.Group_symbol]; ok {
				part_groupDB.Group_symbolID.Int64 = int64(Group_symbolId)
				part_groupDB.Group_symbolID.Valid = true
			}
		} else {
			part_groupDB.Group_symbolID.Int64 = 0
			part_groupDB.Group_symbolID.Valid = true
		}

		// commit pointer value part_group.Group_barline translates to updating the part_group.Group_barlineID
		part_groupDB.Group_barlineID.Valid = true // allow for a 0 value (nil association)
		if part_group.Group_barline != nil {
			if Group_barlineId, ok := backRepo.BackRepoGroup_barline.Map_Group_barlinePtr_Group_barlineDBID[part_group.Group_barline]; ok {
				part_groupDB.Group_barlineID.Int64 = int64(Group_barlineId)
				part_groupDB.Group_barlineID.Valid = true
			}
		} else {
			part_groupDB.Group_barlineID.Int64 = 0
			part_groupDB.Group_barlineID.Valid = true
		}

		// commit pointer value part_group.Group_time translates to updating the part_group.Group_timeID
		part_groupDB.Group_timeID.Valid = true // allow for a 0 value (nil association)
		if part_group.Group_time != nil {
			if Group_timeId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[part_group.Group_time]; ok {
				part_groupDB.Group_timeID.Int64 = int64(Group_timeId)
				part_groupDB.Group_timeID.Valid = true
			}
		} else {
			part_groupDB.Group_timeID.Int64 = 0
			part_groupDB.Group_timeID.Valid = true
		}

		query := backRepoPart_group.db.Save(&part_groupDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Part_group intance %s", part_group.Name))
		return err
	}

	return
}

// BackRepoPart_group.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPart_group *BackRepoPart_groupStruct) CheckoutPhaseOne() (Error error) {

	part_groupDBArray := make([]Part_groupDB, 0)
	query := backRepoPart_group.db.Find(&part_groupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	part_groupInstancesToBeRemovedFromTheStage := make(map[*models.Part_group]any)
	for key, value := range backRepoPart_group.stage.Part_groups {
		part_groupInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, part_groupDB := range part_groupDBArray {
		backRepoPart_group.CheckoutPhaseOneInstance(&part_groupDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		part_group, ok := backRepoPart_group.Map_Part_groupDBID_Part_groupPtr[part_groupDB.ID]
		if ok {
			delete(part_groupInstancesToBeRemovedFromTheStage, part_group)
		}
	}

	// remove from stage and back repo's 3 maps all part_groups that are not in the checkout
	for part_group := range part_groupInstancesToBeRemovedFromTheStage {
		part_group.Unstage(backRepoPart_group.GetStage())

		// remove instance from the back repo 3 maps
		part_groupID := backRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group]
		delete(backRepoPart_group.Map_Part_groupPtr_Part_groupDBID, part_group)
		delete(backRepoPart_group.Map_Part_groupDBID_Part_groupDB, part_groupID)
		delete(backRepoPart_group.Map_Part_groupDBID_Part_groupPtr, part_groupID)
	}

	return
}

// CheckoutPhaseOneInstance takes a part_groupDB that has been found in the DB, updates the backRepo and stages the
// models version of the part_groupDB
func (backRepoPart_group *BackRepoPart_groupStruct) CheckoutPhaseOneInstance(part_groupDB *Part_groupDB) (Error error) {

	part_group, ok := backRepoPart_group.Map_Part_groupDBID_Part_groupPtr[part_groupDB.ID]
	if !ok {
		part_group = new(models.Part_group)

		backRepoPart_group.Map_Part_groupDBID_Part_groupPtr[part_groupDB.ID] = part_group
		backRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group] = part_groupDB.ID

		// append model store with the new element
		part_group.Name = part_groupDB.Name_Data.String
		part_group.Stage(backRepoPart_group.GetStage())
	}
	part_groupDB.CopyBasicFieldsToPart_group(part_group)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	part_group.Stage(backRepoPart_group.GetStage())

	// preserve pointer to part_groupDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Part_groupDBID_Part_groupDB)[part_groupDB hold variable pointers
	part_groupDB_Data := *part_groupDB
	preservedPtrToPart_group := &part_groupDB_Data
	backRepoPart_group.Map_Part_groupDBID_Part_groupDB[part_groupDB.ID] = preservedPtrToPart_group

	return
}

// BackRepoPart_group.CheckoutPhaseTwo Checkouts all staged instances of Part_group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_group *BackRepoPart_groupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, part_groupDB := range backRepoPart_group.Map_Part_groupDBID_Part_groupDB {
		backRepoPart_group.CheckoutPhaseTwoInstance(backRepo, part_groupDB)
	}
	return
}

// BackRepoPart_group.CheckoutPhaseTwoInstance Checkouts staged instances of Part_group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_group *BackRepoPart_groupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, part_groupDB *Part_groupDB) (Error error) {

	part_group := backRepoPart_group.Map_Part_groupDBID_Part_groupPtr[part_groupDB.ID]

	part_groupDB.DecodePointers(backRepo, part_group)

	return
}

func (part_groupDB *Part_groupDB) DecodePointers(backRepo *BackRepoStruct, part_group *models.Part_group) {

	// insertion point for checkout of pointer encoding
	// Group_name_display field
	part_group.Group_name_display = nil
	if part_groupDB.Group_name_displayID.Int64 != 0 {
		part_group.Group_name_display = backRepo.BackRepoName_display.Map_Name_displayDBID_Name_displayPtr[uint(part_groupDB.Group_name_displayID.Int64)]
	}
	// Group_abbreviation_display field
	part_group.Group_abbreviation_display = nil
	if part_groupDB.Group_abbreviation_displayID.Int64 != 0 {
		part_group.Group_abbreviation_display = backRepo.BackRepoName_display.Map_Name_displayDBID_Name_displayPtr[uint(part_groupDB.Group_abbreviation_displayID.Int64)]
	}
	// Group_symbol field
	part_group.Group_symbol = nil
	if part_groupDB.Group_symbolID.Int64 != 0 {
		part_group.Group_symbol = backRepo.BackRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr[uint(part_groupDB.Group_symbolID.Int64)]
	}
	// Group_barline field
	part_group.Group_barline = nil
	if part_groupDB.Group_barlineID.Int64 != 0 {
		part_group.Group_barline = backRepo.BackRepoGroup_barline.Map_Group_barlineDBID_Group_barlinePtr[uint(part_groupDB.Group_barlineID.Int64)]
	}
	// Group_time field
	part_group.Group_time = nil
	if part_groupDB.Group_timeID.Int64 != 0 {
		part_group.Group_time = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(part_groupDB.Group_timeID.Int64)]
	}
	return
}

// CommitPart_group allows commit of a single part_group (if already staged)
func (backRepo *BackRepoStruct) CommitPart_group(part_group *models.Part_group) {
	backRepo.BackRepoPart_group.CommitPhaseOneInstance(part_group)
	if id, ok := backRepo.BackRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group]; ok {
		backRepo.BackRepoPart_group.CommitPhaseTwoInstance(backRepo, id, part_group)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPart_group allows checkout of a single part_group (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPart_group(part_group *models.Part_group) {
	// check if the part_group is staged
	if _, ok := backRepo.BackRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group]; ok {

		if id, ok := backRepo.BackRepoPart_group.Map_Part_groupPtr_Part_groupDBID[part_group]; ok {
			var part_groupDB Part_groupDB
			part_groupDB.ID = id

			if err := backRepo.BackRepoPart_group.db.First(&part_groupDB, id).Error; err != nil {
				log.Fatalln("CheckoutPart_group : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPart_group.CheckoutPhaseOneInstance(&part_groupDB)
			backRepo.BackRepoPart_group.CheckoutPhaseTwoInstance(backRepo, &part_groupDB)
		}
	}
}

// CopyBasicFieldsFromPart_group
func (part_groupDB *Part_groupDB) CopyBasicFieldsFromPart_group(part_group *models.Part_group) {
	// insertion point for fields commit

	part_groupDB.Name_Data.String = part_group.Name
	part_groupDB.Name_Data.Valid = true

	part_groupDB.Number_Data.String = part_group.Number
	part_groupDB.Number_Data.Valid = true
}

// CopyBasicFieldsFromPart_group_WOP
func (part_groupDB *Part_groupDB) CopyBasicFieldsFromPart_group_WOP(part_group *models.Part_group_WOP) {
	// insertion point for fields commit

	part_groupDB.Name_Data.String = part_group.Name
	part_groupDB.Name_Data.Valid = true

	part_groupDB.Number_Data.String = part_group.Number
	part_groupDB.Number_Data.Valid = true
}

// CopyBasicFieldsFromPart_groupWOP
func (part_groupDB *Part_groupDB) CopyBasicFieldsFromPart_groupWOP(part_group *Part_groupWOP) {
	// insertion point for fields commit

	part_groupDB.Name_Data.String = part_group.Name
	part_groupDB.Name_Data.Valid = true

	part_groupDB.Number_Data.String = part_group.Number
	part_groupDB.Number_Data.Valid = true
}

// CopyBasicFieldsToPart_group
func (part_groupDB *Part_groupDB) CopyBasicFieldsToPart_group(part_group *models.Part_group) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_group.Name = part_groupDB.Name_Data.String
	part_group.Number = part_groupDB.Number_Data.String
}

// CopyBasicFieldsToPart_group_WOP
func (part_groupDB *Part_groupDB) CopyBasicFieldsToPart_group_WOP(part_group *models.Part_group_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_group.Name = part_groupDB.Name_Data.String
	part_group.Number = part_groupDB.Number_Data.String
}

// CopyBasicFieldsToPart_groupWOP
func (part_groupDB *Part_groupDB) CopyBasicFieldsToPart_groupWOP(part_group *Part_groupWOP) {
	part_group.ID = int(part_groupDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	part_group.Name = part_groupDB.Name_Data.String
	part_group.Number = part_groupDB.Number_Data.String
}

// Backup generates a json file from a slice of all Part_groupDB instances in the backrepo
func (backRepoPart_group *BackRepoPart_groupStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Part_groupDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_groupDB, 0)
	for _, part_groupDB := range backRepoPart_group.Map_Part_groupDBID_Part_groupDB {
		forBackup = append(forBackup, part_groupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Part_group ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Part_group file", err.Error())
	}
}

// Backup generates a json file from a slice of all Part_groupDB instances in the backrepo
func (backRepoPart_group *BackRepoPart_groupStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_groupDB, 0)
	for _, part_groupDB := range backRepoPart_group.Map_Part_groupDBID_Part_groupDB {
		forBackup = append(forBackup, part_groupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Part_group")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Part_group_Fields, -1)
	for _, part_groupDB := range forBackup {

		var part_groupWOP Part_groupWOP
		part_groupDB.CopyBasicFieldsToPart_groupWOP(&part_groupWOP)

		row := sh.AddRow()
		row.WriteStruct(&part_groupWOP, -1)
	}
}

// RestoreXL from the "Part_group" sheet all Part_groupDB instances
func (backRepoPart_group *BackRepoPart_groupStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPart_groupid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Part_group"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPart_group.rowVisitorPart_group)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPart_group *BackRepoPart_groupStruct) rowVisitorPart_group(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var part_groupWOP Part_groupWOP
		row.ReadStruct(&part_groupWOP)

		// add the unmarshalled struct to the stage
		part_groupDB := new(Part_groupDB)
		part_groupDB.CopyBasicFieldsFromPart_groupWOP(&part_groupWOP)

		part_groupDB_ID_atBackupTime := part_groupDB.ID
		part_groupDB.ID = 0
		query := backRepoPart_group.db.Create(part_groupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_group.Map_Part_groupDBID_Part_groupDB[part_groupDB.ID] = part_groupDB
		BackRepoPart_groupid_atBckpTime_newID[part_groupDB_ID_atBackupTime] = part_groupDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Part_groupDB.json" in dirPath that stores an array
// of Part_groupDB and stores it in the database
// the map BackRepoPart_groupid_atBckpTime_newID is updated accordingly
func (backRepoPart_group *BackRepoPart_groupStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPart_groupid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Part_groupDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Part_group file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Part_groupDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Part_groupDBID_Part_groupDB
	for _, part_groupDB := range forRestore {

		part_groupDB_ID_atBackupTime := part_groupDB.ID
		part_groupDB.ID = 0
		query := backRepoPart_group.db.Create(part_groupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_group.Map_Part_groupDBID_Part_groupDB[part_groupDB.ID] = part_groupDB
		BackRepoPart_groupid_atBckpTime_newID[part_groupDB_ID_atBackupTime] = part_groupDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Part_group file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Part_group>id_atBckpTime_newID
// to compute new index
func (backRepoPart_group *BackRepoPart_groupStruct) RestorePhaseTwo() {

	for _, part_groupDB := range backRepoPart_group.Map_Part_groupDBID_Part_groupDB {

		// next line of code is to avert unused variable compilation error
		_ = part_groupDB

		// insertion point for reindexing pointers encoding
		// reindexing Group_name_display field
		if part_groupDB.Group_name_displayID.Int64 != 0 {
			part_groupDB.Group_name_displayID.Int64 = int64(BackRepoName_displayid_atBckpTime_newID[uint(part_groupDB.Group_name_displayID.Int64)])
			part_groupDB.Group_name_displayID.Valid = true
		}

		// reindexing Group_abbreviation_display field
		if part_groupDB.Group_abbreviation_displayID.Int64 != 0 {
			part_groupDB.Group_abbreviation_displayID.Int64 = int64(BackRepoName_displayid_atBckpTime_newID[uint(part_groupDB.Group_abbreviation_displayID.Int64)])
			part_groupDB.Group_abbreviation_displayID.Valid = true
		}

		// reindexing Group_symbol field
		if part_groupDB.Group_symbolID.Int64 != 0 {
			part_groupDB.Group_symbolID.Int64 = int64(BackRepoGroup_symbolid_atBckpTime_newID[uint(part_groupDB.Group_symbolID.Int64)])
			part_groupDB.Group_symbolID.Valid = true
		}

		// reindexing Group_barline field
		if part_groupDB.Group_barlineID.Int64 != 0 {
			part_groupDB.Group_barlineID.Int64 = int64(BackRepoGroup_barlineid_atBckpTime_newID[uint(part_groupDB.Group_barlineID.Int64)])
			part_groupDB.Group_barlineID.Valid = true
		}

		// reindexing Group_time field
		if part_groupDB.Group_timeID.Int64 != 0 {
			part_groupDB.Group_timeID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(part_groupDB.Group_timeID.Int64)])
			part_groupDB.Group_timeID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoPart_group.db.Model(part_groupDB).Updates(*part_groupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPart_group.ResetReversePointers commits all staged instances of Part_group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_group *BackRepoPart_groupStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, part_group := range backRepoPart_group.Map_Part_groupDBID_Part_groupPtr {
		backRepoPart_group.ResetReversePointersInstance(backRepo, idx, part_group)
	}

	return
}

func (backRepoPart_group *BackRepoPart_groupStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, part_group *models.Part_group) (Error error) {

	// fetch matching part_groupDB
	if part_groupDB, ok := backRepoPart_group.Map_Part_groupDBID_Part_groupDB[idx]; ok {
		_ = part_groupDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPart_groupid_atBckpTime_newID map[uint]uint
