// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Multiple_rest_sql sql.NullBool
var dummy_Multiple_rest_time time.Duration
var dummy_Multiple_rest_sort sort.Float64Slice

// Multiple_restAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model multiple_restAPI
type Multiple_restAPI struct {
	gorm.Model

	models.Multiple_rest_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Multiple_restPointersEncoding Multiple_restPointersEncoding
}

// Multiple_restPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Multiple_restPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Multiple_restDB describes a multiple_rest in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model multiple_restDB
type Multiple_restDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field multiple_restDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Multiple_restPointersEncoding
}

// Multiple_restDBs arrays multiple_restDBs
// swagger:response multiple_restDBsResponse
type Multiple_restDBs []Multiple_restDB

// Multiple_restDBResponse provides response
// swagger:response multiple_restDBResponse
type Multiple_restDBResponse struct {
	Multiple_restDB
}

// Multiple_restWOP is a Multiple_rest without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Multiple_restWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Multiple_rest_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMultiple_restStruct struct {
	// stores Multiple_restDB according to their gorm ID
	Map_Multiple_restDBID_Multiple_restDB map[uint]*Multiple_restDB

	// stores Multiple_restDB ID according to Multiple_rest address
	Map_Multiple_restPtr_Multiple_restDBID map[*models.Multiple_rest]uint

	// stores Multiple_rest according to their gorm ID
	Map_Multiple_restDBID_Multiple_restPtr map[uint]*models.Multiple_rest

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMultiple_rest *BackRepoMultiple_restStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMultiple_rest.stage
	return
}

func (backRepoMultiple_rest *BackRepoMultiple_restStruct) GetDB() *gorm.DB {
	return backRepoMultiple_rest.db
}

// GetMultiple_restDBFromMultiple_restPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) GetMultiple_restDBFromMultiple_restPtr(multiple_rest *models.Multiple_rest) (multiple_restDB *Multiple_restDB) {
	id := backRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest]
	multiple_restDB = backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[id]
	return
}

// BackRepoMultiple_rest.CommitPhaseOne commits all staged instances of Multiple_rest to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for multiple_rest := range stage.Multiple_rests {
		backRepoMultiple_rest.CommitPhaseOneInstance(multiple_rest)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, multiple_rest := range backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr {
		if _, ok := stage.Multiple_rests[multiple_rest]; !ok {
			backRepoMultiple_rest.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMultiple_rest.CommitDeleteInstance commits deletion of Multiple_rest to the BackRepo
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CommitDeleteInstance(id uint) (Error error) {

	multiple_rest := backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr[id]

	// multiple_rest is not staged anymore, remove multiple_restDB
	multiple_restDB := backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[id]
	query := backRepoMultiple_rest.db.Unscoped().Delete(&multiple_restDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID, multiple_rest)
	delete(backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr, id)
	delete(backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB, id)

	return
}

// BackRepoMultiple_rest.CommitPhaseOneInstance commits multiple_rest staged instances of Multiple_rest to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CommitPhaseOneInstance(multiple_rest *models.Multiple_rest) (Error error) {

	// check if the multiple_rest is not commited yet
	if _, ok := backRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest]; ok {
		return
	}

	// initiate multiple_rest
	var multiple_restDB Multiple_restDB
	multiple_restDB.CopyBasicFieldsFromMultiple_rest(multiple_rest)

	query := backRepoMultiple_rest.db.Create(&multiple_restDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest] = multiple_restDB.ID
	backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr[multiple_restDB.ID] = multiple_rest
	backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[multiple_restDB.ID] = &multiple_restDB

	return
}

// BackRepoMultiple_rest.CommitPhaseTwo commits all staged instances of Multiple_rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, multiple_rest := range backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr {
		backRepoMultiple_rest.CommitPhaseTwoInstance(backRepo, idx, multiple_rest)
	}

	return
}

// BackRepoMultiple_rest.CommitPhaseTwoInstance commits {{structname }} of models.Multiple_rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, multiple_rest *models.Multiple_rest) (Error error) {

	// fetch matching multiple_restDB
	if multiple_restDB, ok := backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[idx]; ok {

		multiple_restDB.CopyBasicFieldsFromMultiple_rest(multiple_rest)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMultiple_rest.db.Save(&multiple_restDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Multiple_rest intance %s", multiple_rest.Name))
		return err
	}

	return
}

// BackRepoMultiple_rest.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CheckoutPhaseOne() (Error error) {

	multiple_restDBArray := make([]Multiple_restDB, 0)
	query := backRepoMultiple_rest.db.Find(&multiple_restDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	multiple_restInstancesToBeRemovedFromTheStage := make(map[*models.Multiple_rest]any)
	for key, value := range backRepoMultiple_rest.stage.Multiple_rests {
		multiple_restInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, multiple_restDB := range multiple_restDBArray {
		backRepoMultiple_rest.CheckoutPhaseOneInstance(&multiple_restDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		multiple_rest, ok := backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr[multiple_restDB.ID]
		if ok {
			delete(multiple_restInstancesToBeRemovedFromTheStage, multiple_rest)
		}
	}

	// remove from stage and back repo's 3 maps all multiple_rests that are not in the checkout
	for multiple_rest := range multiple_restInstancesToBeRemovedFromTheStage {
		multiple_rest.Unstage(backRepoMultiple_rest.GetStage())

		// remove instance from the back repo 3 maps
		multiple_restID := backRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest]
		delete(backRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID, multiple_rest)
		delete(backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB, multiple_restID)
		delete(backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr, multiple_restID)
	}

	return
}

// CheckoutPhaseOneInstance takes a multiple_restDB that has been found in the DB, updates the backRepo and stages the
// models version of the multiple_restDB
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CheckoutPhaseOneInstance(multiple_restDB *Multiple_restDB) (Error error) {

	multiple_rest, ok := backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr[multiple_restDB.ID]
	if !ok {
		multiple_rest = new(models.Multiple_rest)

		backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr[multiple_restDB.ID] = multiple_rest
		backRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest] = multiple_restDB.ID

		// append model store with the new element
		multiple_rest.Name = multiple_restDB.Name_Data.String
		multiple_rest.Stage(backRepoMultiple_rest.GetStage())
	}
	multiple_restDB.CopyBasicFieldsToMultiple_rest(multiple_rest)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	multiple_rest.Stage(backRepoMultiple_rest.GetStage())

	// preserve pointer to multiple_restDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Multiple_restDBID_Multiple_restDB)[multiple_restDB hold variable pointers
	multiple_restDB_Data := *multiple_restDB
	preservedPtrToMultiple_rest := &multiple_restDB_Data
	backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[multiple_restDB.ID] = preservedPtrToMultiple_rest

	return
}

// BackRepoMultiple_rest.CheckoutPhaseTwo Checkouts all staged instances of Multiple_rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, multiple_restDB := range backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB {
		backRepoMultiple_rest.CheckoutPhaseTwoInstance(backRepo, multiple_restDB)
	}
	return
}

// BackRepoMultiple_rest.CheckoutPhaseTwoInstance Checkouts staged instances of Multiple_rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, multiple_restDB *Multiple_restDB) (Error error) {

	multiple_rest := backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr[multiple_restDB.ID]

	multiple_restDB.DecodePointers(backRepo, multiple_rest)

	return
}

func (multiple_restDB *Multiple_restDB) DecodePointers(backRepo *BackRepoStruct, multiple_rest *models.Multiple_rest) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMultiple_rest allows commit of a single multiple_rest (if already staged)
func (backRepo *BackRepoStruct) CommitMultiple_rest(multiple_rest *models.Multiple_rest) {
	backRepo.BackRepoMultiple_rest.CommitPhaseOneInstance(multiple_rest)
	if id, ok := backRepo.BackRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest]; ok {
		backRepo.BackRepoMultiple_rest.CommitPhaseTwoInstance(backRepo, id, multiple_rest)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMultiple_rest allows checkout of a single multiple_rest (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMultiple_rest(multiple_rest *models.Multiple_rest) {
	// check if the multiple_rest is staged
	if _, ok := backRepo.BackRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest]; ok {

		if id, ok := backRepo.BackRepoMultiple_rest.Map_Multiple_restPtr_Multiple_restDBID[multiple_rest]; ok {
			var multiple_restDB Multiple_restDB
			multiple_restDB.ID = id

			if err := backRepo.BackRepoMultiple_rest.db.First(&multiple_restDB, id).Error; err != nil {
				log.Fatalln("CheckoutMultiple_rest : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMultiple_rest.CheckoutPhaseOneInstance(&multiple_restDB)
			backRepo.BackRepoMultiple_rest.CheckoutPhaseTwoInstance(backRepo, &multiple_restDB)
		}
	}
}

// CopyBasicFieldsFromMultiple_rest
func (multiple_restDB *Multiple_restDB) CopyBasicFieldsFromMultiple_rest(multiple_rest *models.Multiple_rest) {
	// insertion point for fields commit

	multiple_restDB.Name_Data.String = multiple_rest.Name
	multiple_restDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMultiple_rest_WOP
func (multiple_restDB *Multiple_restDB) CopyBasicFieldsFromMultiple_rest_WOP(multiple_rest *models.Multiple_rest_WOP) {
	// insertion point for fields commit

	multiple_restDB.Name_Data.String = multiple_rest.Name
	multiple_restDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMultiple_restWOP
func (multiple_restDB *Multiple_restDB) CopyBasicFieldsFromMultiple_restWOP(multiple_rest *Multiple_restWOP) {
	// insertion point for fields commit

	multiple_restDB.Name_Data.String = multiple_rest.Name
	multiple_restDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMultiple_rest
func (multiple_restDB *Multiple_restDB) CopyBasicFieldsToMultiple_rest(multiple_rest *models.Multiple_rest) {
	// insertion point for checkout of basic fields (back repo to stage)
	multiple_rest.Name = multiple_restDB.Name_Data.String
}

// CopyBasicFieldsToMultiple_rest_WOP
func (multiple_restDB *Multiple_restDB) CopyBasicFieldsToMultiple_rest_WOP(multiple_rest *models.Multiple_rest_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	multiple_rest.Name = multiple_restDB.Name_Data.String
}

// CopyBasicFieldsToMultiple_restWOP
func (multiple_restDB *Multiple_restDB) CopyBasicFieldsToMultiple_restWOP(multiple_rest *Multiple_restWOP) {
	multiple_rest.ID = int(multiple_restDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	multiple_rest.Name = multiple_restDB.Name_Data.String
}

// Backup generates a json file from a slice of all Multiple_restDB instances in the backrepo
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Multiple_restDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Multiple_restDB, 0)
	for _, multiple_restDB := range backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB {
		forBackup = append(forBackup, multiple_restDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Multiple_rest ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Multiple_rest file", err.Error())
	}
}

// Backup generates a json file from a slice of all Multiple_restDB instances in the backrepo
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Multiple_restDB, 0)
	for _, multiple_restDB := range backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB {
		forBackup = append(forBackup, multiple_restDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Multiple_rest")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Multiple_rest_Fields, -1)
	for _, multiple_restDB := range forBackup {

		var multiple_restWOP Multiple_restWOP
		multiple_restDB.CopyBasicFieldsToMultiple_restWOP(&multiple_restWOP)

		row := sh.AddRow()
		row.WriteStruct(&multiple_restWOP, -1)
	}
}

// RestoreXL from the "Multiple_rest" sheet all Multiple_restDB instances
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMultiple_restid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Multiple_rest"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMultiple_rest.rowVisitorMultiple_rest)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMultiple_rest *BackRepoMultiple_restStruct) rowVisitorMultiple_rest(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var multiple_restWOP Multiple_restWOP
		row.ReadStruct(&multiple_restWOP)

		// add the unmarshalled struct to the stage
		multiple_restDB := new(Multiple_restDB)
		multiple_restDB.CopyBasicFieldsFromMultiple_restWOP(&multiple_restWOP)

		multiple_restDB_ID_atBackupTime := multiple_restDB.ID
		multiple_restDB.ID = 0
		query := backRepoMultiple_rest.db.Create(multiple_restDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[multiple_restDB.ID] = multiple_restDB
		BackRepoMultiple_restid_atBckpTime_newID[multiple_restDB_ID_atBackupTime] = multiple_restDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Multiple_restDB.json" in dirPath that stores an array
// of Multiple_restDB and stores it in the database
// the map BackRepoMultiple_restid_atBckpTime_newID is updated accordingly
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMultiple_restid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Multiple_restDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Multiple_rest file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Multiple_restDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Multiple_restDBID_Multiple_restDB
	for _, multiple_restDB := range forRestore {

		multiple_restDB_ID_atBackupTime := multiple_restDB.ID
		multiple_restDB.ID = 0
		query := backRepoMultiple_rest.db.Create(multiple_restDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[multiple_restDB.ID] = multiple_restDB
		BackRepoMultiple_restid_atBckpTime_newID[multiple_restDB_ID_atBackupTime] = multiple_restDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Multiple_rest file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Multiple_rest>id_atBckpTime_newID
// to compute new index
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) RestorePhaseTwo() {

	for _, multiple_restDB := range backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB {

		// next line of code is to avert unused variable compilation error
		_ = multiple_restDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMultiple_rest.db.Model(multiple_restDB).Updates(*multiple_restDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMultiple_rest.ResetReversePointers commits all staged instances of Multiple_rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMultiple_rest *BackRepoMultiple_restStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, multiple_rest := range backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restPtr {
		backRepoMultiple_rest.ResetReversePointersInstance(backRepo, idx, multiple_rest)
	}

	return
}

func (backRepoMultiple_rest *BackRepoMultiple_restStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, multiple_rest *models.Multiple_rest) (Error error) {

	// fetch matching multiple_restDB
	if multiple_restDB, ok := backRepoMultiple_rest.Map_Multiple_restDBID_Multiple_restDB[idx]; ok {
		_ = multiple_restDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMultiple_restid_atBckpTime_newID map[uint]uint
