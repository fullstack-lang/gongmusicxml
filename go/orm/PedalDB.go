// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Pedal_sql sql.NullBool
var dummy_Pedal_time time.Duration
var dummy_Pedal_sort sort.Float64Slice

// PedalAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pedalAPI
type PedalAPI struct {
	gorm.Model

	models.Pedal_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PedalPointersEncoding PedalPointersEncoding
}

// PedalPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PedalPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// PedalDB describes a pedal in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pedalDB
type PedalDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pedalDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PedalPointersEncoding
}

// PedalDBs arrays pedalDBs
// swagger:response pedalDBsResponse
type PedalDBs []PedalDB

// PedalDBResponse provides response
// swagger:response pedalDBResponse
type PedalDBResponse struct {
	PedalDB
}

// PedalWOP is a Pedal without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PedalWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Pedal_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPedalStruct struct {
	// stores PedalDB according to their gorm ID
	Map_PedalDBID_PedalDB map[uint]*PedalDB

	// stores PedalDB ID according to Pedal address
	Map_PedalPtr_PedalDBID map[*models.Pedal]uint

	// stores Pedal according to their gorm ID
	Map_PedalDBID_PedalPtr map[uint]*models.Pedal

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPedal *BackRepoPedalStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPedal.stage
	return
}

func (backRepoPedal *BackRepoPedalStruct) GetDB() *gorm.DB {
	return backRepoPedal.db
}

// GetPedalDBFromPedalPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPedal *BackRepoPedalStruct) GetPedalDBFromPedalPtr(pedal *models.Pedal) (pedalDB *PedalDB) {
	id := backRepoPedal.Map_PedalPtr_PedalDBID[pedal]
	pedalDB = backRepoPedal.Map_PedalDBID_PedalDB[id]
	return
}

// BackRepoPedal.CommitPhaseOne commits all staged instances of Pedal to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPedal *BackRepoPedalStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pedal := range stage.Pedals {
		backRepoPedal.CommitPhaseOneInstance(pedal)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pedal := range backRepoPedal.Map_PedalDBID_PedalPtr {
		if _, ok := stage.Pedals[pedal]; !ok {
			backRepoPedal.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPedal.CommitDeleteInstance commits deletion of Pedal to the BackRepo
func (backRepoPedal *BackRepoPedalStruct) CommitDeleteInstance(id uint) (Error error) {

	pedal := backRepoPedal.Map_PedalDBID_PedalPtr[id]

	// pedal is not staged anymore, remove pedalDB
	pedalDB := backRepoPedal.Map_PedalDBID_PedalDB[id]
	query := backRepoPedal.db.Unscoped().Delete(&pedalDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPedal.Map_PedalPtr_PedalDBID, pedal)
	delete(backRepoPedal.Map_PedalDBID_PedalPtr, id)
	delete(backRepoPedal.Map_PedalDBID_PedalDB, id)

	return
}

// BackRepoPedal.CommitPhaseOneInstance commits pedal staged instances of Pedal to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPedal *BackRepoPedalStruct) CommitPhaseOneInstance(pedal *models.Pedal) (Error error) {

	// check if the pedal is not commited yet
	if _, ok := backRepoPedal.Map_PedalPtr_PedalDBID[pedal]; ok {
		return
	}

	// initiate pedal
	var pedalDB PedalDB
	pedalDB.CopyBasicFieldsFromPedal(pedal)

	query := backRepoPedal.db.Create(&pedalDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPedal.Map_PedalPtr_PedalDBID[pedal] = pedalDB.ID
	backRepoPedal.Map_PedalDBID_PedalPtr[pedalDB.ID] = pedal
	backRepoPedal.Map_PedalDBID_PedalDB[pedalDB.ID] = &pedalDB

	return
}

// BackRepoPedal.CommitPhaseTwo commits all staged instances of Pedal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal *BackRepoPedalStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pedal := range backRepoPedal.Map_PedalDBID_PedalPtr {
		backRepoPedal.CommitPhaseTwoInstance(backRepo, idx, pedal)
	}

	return
}

// BackRepoPedal.CommitPhaseTwoInstance commits {{structname }} of models.Pedal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal *BackRepoPedalStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pedal *models.Pedal) (Error error) {

	// fetch matching pedalDB
	if pedalDB, ok := backRepoPedal.Map_PedalDBID_PedalDB[idx]; ok {

		pedalDB.CopyBasicFieldsFromPedal(pedal)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPedal.db.Save(&pedalDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pedal intance %s", pedal.Name))
		return err
	}

	return
}

// BackRepoPedal.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPedal *BackRepoPedalStruct) CheckoutPhaseOne() (Error error) {

	pedalDBArray := make([]PedalDB, 0)
	query := backRepoPedal.db.Find(&pedalDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pedalInstancesToBeRemovedFromTheStage := make(map[*models.Pedal]any)
	for key, value := range backRepoPedal.stage.Pedals {
		pedalInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pedalDB := range pedalDBArray {
		backRepoPedal.CheckoutPhaseOneInstance(&pedalDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pedal, ok := backRepoPedal.Map_PedalDBID_PedalPtr[pedalDB.ID]
		if ok {
			delete(pedalInstancesToBeRemovedFromTheStage, pedal)
		}
	}

	// remove from stage and back repo's 3 maps all pedals that are not in the checkout
	for pedal := range pedalInstancesToBeRemovedFromTheStage {
		pedal.Unstage(backRepoPedal.GetStage())

		// remove instance from the back repo 3 maps
		pedalID := backRepoPedal.Map_PedalPtr_PedalDBID[pedal]
		delete(backRepoPedal.Map_PedalPtr_PedalDBID, pedal)
		delete(backRepoPedal.Map_PedalDBID_PedalDB, pedalID)
		delete(backRepoPedal.Map_PedalDBID_PedalPtr, pedalID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pedalDB that has been found in the DB, updates the backRepo and stages the
// models version of the pedalDB
func (backRepoPedal *BackRepoPedalStruct) CheckoutPhaseOneInstance(pedalDB *PedalDB) (Error error) {

	pedal, ok := backRepoPedal.Map_PedalDBID_PedalPtr[pedalDB.ID]
	if !ok {
		pedal = new(models.Pedal)

		backRepoPedal.Map_PedalDBID_PedalPtr[pedalDB.ID] = pedal
		backRepoPedal.Map_PedalPtr_PedalDBID[pedal] = pedalDB.ID

		// append model store with the new element
		pedal.Name = pedalDB.Name_Data.String
		pedal.Stage(backRepoPedal.GetStage())
	}
	pedalDB.CopyBasicFieldsToPedal(pedal)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	pedal.Stage(backRepoPedal.GetStage())

	// preserve pointer to pedalDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PedalDBID_PedalDB)[pedalDB hold variable pointers
	pedalDB_Data := *pedalDB
	preservedPtrToPedal := &pedalDB_Data
	backRepoPedal.Map_PedalDBID_PedalDB[pedalDB.ID] = preservedPtrToPedal

	return
}

// BackRepoPedal.CheckoutPhaseTwo Checkouts all staged instances of Pedal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal *BackRepoPedalStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pedalDB := range backRepoPedal.Map_PedalDBID_PedalDB {
		backRepoPedal.CheckoutPhaseTwoInstance(backRepo, pedalDB)
	}
	return
}

// BackRepoPedal.CheckoutPhaseTwoInstance Checkouts staged instances of Pedal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal *BackRepoPedalStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pedalDB *PedalDB) (Error error) {

	pedal := backRepoPedal.Map_PedalDBID_PedalPtr[pedalDB.ID]

	pedalDB.DecodePointers(backRepo, pedal)

	return
}

func (pedalDB *PedalDB) DecodePointers(backRepo *BackRepoStruct, pedal *models.Pedal) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPedal allows commit of a single pedal (if already staged)
func (backRepo *BackRepoStruct) CommitPedal(pedal *models.Pedal) {
	backRepo.BackRepoPedal.CommitPhaseOneInstance(pedal)
	if id, ok := backRepo.BackRepoPedal.Map_PedalPtr_PedalDBID[pedal]; ok {
		backRepo.BackRepoPedal.CommitPhaseTwoInstance(backRepo, id, pedal)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPedal allows checkout of a single pedal (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPedal(pedal *models.Pedal) {
	// check if the pedal is staged
	if _, ok := backRepo.BackRepoPedal.Map_PedalPtr_PedalDBID[pedal]; ok {

		if id, ok := backRepo.BackRepoPedal.Map_PedalPtr_PedalDBID[pedal]; ok {
			var pedalDB PedalDB
			pedalDB.ID = id

			if err := backRepo.BackRepoPedal.db.First(&pedalDB, id).Error; err != nil {
				log.Fatalln("CheckoutPedal : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPedal.CheckoutPhaseOneInstance(&pedalDB)
			backRepo.BackRepoPedal.CheckoutPhaseTwoInstance(backRepo, &pedalDB)
		}
	}
}

// CopyBasicFieldsFromPedal
func (pedalDB *PedalDB) CopyBasicFieldsFromPedal(pedal *models.Pedal) {
	// insertion point for fields commit

	pedalDB.Name_Data.String = pedal.Name
	pedalDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPedal_WOP
func (pedalDB *PedalDB) CopyBasicFieldsFromPedal_WOP(pedal *models.Pedal_WOP) {
	// insertion point for fields commit

	pedalDB.Name_Data.String = pedal.Name
	pedalDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPedalWOP
func (pedalDB *PedalDB) CopyBasicFieldsFromPedalWOP(pedal *PedalWOP) {
	// insertion point for fields commit

	pedalDB.Name_Data.String = pedal.Name
	pedalDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPedal
func (pedalDB *PedalDB) CopyBasicFieldsToPedal(pedal *models.Pedal) {
	// insertion point for checkout of basic fields (back repo to stage)
	pedal.Name = pedalDB.Name_Data.String
}

// CopyBasicFieldsToPedal_WOP
func (pedalDB *PedalDB) CopyBasicFieldsToPedal_WOP(pedal *models.Pedal_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	pedal.Name = pedalDB.Name_Data.String
}

// CopyBasicFieldsToPedalWOP
func (pedalDB *PedalDB) CopyBasicFieldsToPedalWOP(pedal *PedalWOP) {
	pedal.ID = int(pedalDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pedal.Name = pedalDB.Name_Data.String
}

// Backup generates a json file from a slice of all PedalDB instances in the backrepo
func (backRepoPedal *BackRepoPedalStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PedalDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PedalDB, 0)
	for _, pedalDB := range backRepoPedal.Map_PedalDBID_PedalDB {
		forBackup = append(forBackup, pedalDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Pedal ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Pedal file", err.Error())
	}
}

// Backup generates a json file from a slice of all PedalDB instances in the backrepo
func (backRepoPedal *BackRepoPedalStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PedalDB, 0)
	for _, pedalDB := range backRepoPedal.Map_PedalDBID_PedalDB {
		forBackup = append(forBackup, pedalDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Pedal")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Pedal_Fields, -1)
	for _, pedalDB := range forBackup {

		var pedalWOP PedalWOP
		pedalDB.CopyBasicFieldsToPedalWOP(&pedalWOP)

		row := sh.AddRow()
		row.WriteStruct(&pedalWOP, -1)
	}
}

// RestoreXL from the "Pedal" sheet all PedalDB instances
func (backRepoPedal *BackRepoPedalStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPedalid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Pedal"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPedal.rowVisitorPedal)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPedal *BackRepoPedalStruct) rowVisitorPedal(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pedalWOP PedalWOP
		row.ReadStruct(&pedalWOP)

		// add the unmarshalled struct to the stage
		pedalDB := new(PedalDB)
		pedalDB.CopyBasicFieldsFromPedalWOP(&pedalWOP)

		pedalDB_ID_atBackupTime := pedalDB.ID
		pedalDB.ID = 0
		query := backRepoPedal.db.Create(pedalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPedal.Map_PedalDBID_PedalDB[pedalDB.ID] = pedalDB
		BackRepoPedalid_atBckpTime_newID[pedalDB_ID_atBackupTime] = pedalDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PedalDB.json" in dirPath that stores an array
// of PedalDB and stores it in the database
// the map BackRepoPedalid_atBckpTime_newID is updated accordingly
func (backRepoPedal *BackRepoPedalStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPedalid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PedalDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Pedal file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PedalDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PedalDBID_PedalDB
	for _, pedalDB := range forRestore {

		pedalDB_ID_atBackupTime := pedalDB.ID
		pedalDB.ID = 0
		query := backRepoPedal.db.Create(pedalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPedal.Map_PedalDBID_PedalDB[pedalDB.ID] = pedalDB
		BackRepoPedalid_atBckpTime_newID[pedalDB_ID_atBackupTime] = pedalDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Pedal file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Pedal>id_atBckpTime_newID
// to compute new index
func (backRepoPedal *BackRepoPedalStruct) RestorePhaseTwo() {

	for _, pedalDB := range backRepoPedal.Map_PedalDBID_PedalDB {

		// next line of code is to avert unused variable compilation error
		_ = pedalDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPedal.db.Model(pedalDB).Updates(*pedalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPedal.ResetReversePointers commits all staged instances of Pedal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPedal *BackRepoPedalStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, pedal := range backRepoPedal.Map_PedalDBID_PedalPtr {
		backRepoPedal.ResetReversePointersInstance(backRepo, idx, pedal)
	}

	return
}

func (backRepoPedal *BackRepoPedalStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, pedal *models.Pedal) (Error error) {

	// fetch matching pedalDB
	if pedalDB, ok := backRepoPedal.Map_PedalDBID_PedalDB[idx]; ok {
		_ = pedalDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPedalid_atBckpTime_newID map[uint]uint
