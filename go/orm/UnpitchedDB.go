// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Unpitched_sql sql.NullBool
var dummy_Unpitched_time time.Duration
var dummy_Unpitched_sort sort.Float64Slice

// UnpitchedAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model unpitchedAPI
type UnpitchedAPI struct {
	gorm.Model

	models.Unpitched_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	UnpitchedPointersEncoding UnpitchedPointersEncoding
}

// UnpitchedPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type UnpitchedPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// UnpitchedDB describes a unpitched in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model unpitchedDB
type UnpitchedDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field unpitchedDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	UnpitchedPointersEncoding
}

// UnpitchedDBs arrays unpitchedDBs
// swagger:response unpitchedDBsResponse
type UnpitchedDBs []UnpitchedDB

// UnpitchedDBResponse provides response
// swagger:response unpitchedDBResponse
type UnpitchedDBResponse struct {
	UnpitchedDB
}

// UnpitchedWOP is a Unpitched without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type UnpitchedWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Unpitched_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoUnpitchedStruct struct {
	// stores UnpitchedDB according to their gorm ID
	Map_UnpitchedDBID_UnpitchedDB map[uint]*UnpitchedDB

	// stores UnpitchedDB ID according to Unpitched address
	Map_UnpitchedPtr_UnpitchedDBID map[*models.Unpitched]uint

	// stores Unpitched according to their gorm ID
	Map_UnpitchedDBID_UnpitchedPtr map[uint]*models.Unpitched

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoUnpitched *BackRepoUnpitchedStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoUnpitched.stage
	return
}

func (backRepoUnpitched *BackRepoUnpitchedStruct) GetDB() *gorm.DB {
	return backRepoUnpitched.db
}

// GetUnpitchedDBFromUnpitchedPtr is a handy function to access the back repo instance from the stage instance
func (backRepoUnpitched *BackRepoUnpitchedStruct) GetUnpitchedDBFromUnpitchedPtr(unpitched *models.Unpitched) (unpitchedDB *UnpitchedDB) {
	id := backRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched]
	unpitchedDB = backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[id]
	return
}

// BackRepoUnpitched.CommitPhaseOne commits all staged instances of Unpitched to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUnpitched *BackRepoUnpitchedStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for unpitched := range stage.Unpitcheds {
		backRepoUnpitched.CommitPhaseOneInstance(unpitched)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, unpitched := range backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr {
		if _, ok := stage.Unpitcheds[unpitched]; !ok {
			backRepoUnpitched.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoUnpitched.CommitDeleteInstance commits deletion of Unpitched to the BackRepo
func (backRepoUnpitched *BackRepoUnpitchedStruct) CommitDeleteInstance(id uint) (Error error) {

	unpitched := backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr[id]

	// unpitched is not staged anymore, remove unpitchedDB
	unpitchedDB := backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[id]
	query := backRepoUnpitched.db.Unscoped().Delete(&unpitchedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID, unpitched)
	delete(backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr, id)
	delete(backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB, id)

	return
}

// BackRepoUnpitched.CommitPhaseOneInstance commits unpitched staged instances of Unpitched to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUnpitched *BackRepoUnpitchedStruct) CommitPhaseOneInstance(unpitched *models.Unpitched) (Error error) {

	// check if the unpitched is not commited yet
	if _, ok := backRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched]; ok {
		return
	}

	// initiate unpitched
	var unpitchedDB UnpitchedDB
	unpitchedDB.CopyBasicFieldsFromUnpitched(unpitched)

	query := backRepoUnpitched.db.Create(&unpitchedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched] = unpitchedDB.ID
	backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr[unpitchedDB.ID] = unpitched
	backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[unpitchedDB.ID] = &unpitchedDB

	return
}

// BackRepoUnpitched.CommitPhaseTwo commits all staged instances of Unpitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnpitched *BackRepoUnpitchedStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, unpitched := range backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr {
		backRepoUnpitched.CommitPhaseTwoInstance(backRepo, idx, unpitched)
	}

	return
}

// BackRepoUnpitched.CommitPhaseTwoInstance commits {{structname }} of models.Unpitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnpitched *BackRepoUnpitchedStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, unpitched *models.Unpitched) (Error error) {

	// fetch matching unpitchedDB
	if unpitchedDB, ok := backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[idx]; ok {

		unpitchedDB.CopyBasicFieldsFromUnpitched(unpitched)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoUnpitched.db.Save(&unpitchedDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Unpitched intance %s", unpitched.Name))
		return err
	}

	return
}

// BackRepoUnpitched.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoUnpitched *BackRepoUnpitchedStruct) CheckoutPhaseOne() (Error error) {

	unpitchedDBArray := make([]UnpitchedDB, 0)
	query := backRepoUnpitched.db.Find(&unpitchedDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	unpitchedInstancesToBeRemovedFromTheStage := make(map[*models.Unpitched]any)
	for key, value := range backRepoUnpitched.stage.Unpitcheds {
		unpitchedInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, unpitchedDB := range unpitchedDBArray {
		backRepoUnpitched.CheckoutPhaseOneInstance(&unpitchedDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		unpitched, ok := backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr[unpitchedDB.ID]
		if ok {
			delete(unpitchedInstancesToBeRemovedFromTheStage, unpitched)
		}
	}

	// remove from stage and back repo's 3 maps all unpitcheds that are not in the checkout
	for unpitched := range unpitchedInstancesToBeRemovedFromTheStage {
		unpitched.Unstage(backRepoUnpitched.GetStage())

		// remove instance from the back repo 3 maps
		unpitchedID := backRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched]
		delete(backRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID, unpitched)
		delete(backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB, unpitchedID)
		delete(backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr, unpitchedID)
	}

	return
}

// CheckoutPhaseOneInstance takes a unpitchedDB that has been found in the DB, updates the backRepo and stages the
// models version of the unpitchedDB
func (backRepoUnpitched *BackRepoUnpitchedStruct) CheckoutPhaseOneInstance(unpitchedDB *UnpitchedDB) (Error error) {

	unpitched, ok := backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr[unpitchedDB.ID]
	if !ok {
		unpitched = new(models.Unpitched)

		backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr[unpitchedDB.ID] = unpitched
		backRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched] = unpitchedDB.ID

		// append model store with the new element
		unpitched.Name = unpitchedDB.Name_Data.String
		unpitched.Stage(backRepoUnpitched.GetStage())
	}
	unpitchedDB.CopyBasicFieldsToUnpitched(unpitched)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	unpitched.Stage(backRepoUnpitched.GetStage())

	// preserve pointer to unpitchedDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_UnpitchedDBID_UnpitchedDB)[unpitchedDB hold variable pointers
	unpitchedDB_Data := *unpitchedDB
	preservedPtrToUnpitched := &unpitchedDB_Data
	backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[unpitchedDB.ID] = preservedPtrToUnpitched

	return
}

// BackRepoUnpitched.CheckoutPhaseTwo Checkouts all staged instances of Unpitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnpitched *BackRepoUnpitchedStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, unpitchedDB := range backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB {
		backRepoUnpitched.CheckoutPhaseTwoInstance(backRepo, unpitchedDB)
	}
	return
}

// BackRepoUnpitched.CheckoutPhaseTwoInstance Checkouts staged instances of Unpitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnpitched *BackRepoUnpitchedStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, unpitchedDB *UnpitchedDB) (Error error) {

	unpitched := backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr[unpitchedDB.ID]

	unpitchedDB.DecodePointers(backRepo, unpitched)

	return
}

func (unpitchedDB *UnpitchedDB) DecodePointers(backRepo *BackRepoStruct, unpitched *models.Unpitched) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitUnpitched allows commit of a single unpitched (if already staged)
func (backRepo *BackRepoStruct) CommitUnpitched(unpitched *models.Unpitched) {
	backRepo.BackRepoUnpitched.CommitPhaseOneInstance(unpitched)
	if id, ok := backRepo.BackRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched]; ok {
		backRepo.BackRepoUnpitched.CommitPhaseTwoInstance(backRepo, id, unpitched)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitUnpitched allows checkout of a single unpitched (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutUnpitched(unpitched *models.Unpitched) {
	// check if the unpitched is staged
	if _, ok := backRepo.BackRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched]; ok {

		if id, ok := backRepo.BackRepoUnpitched.Map_UnpitchedPtr_UnpitchedDBID[unpitched]; ok {
			var unpitchedDB UnpitchedDB
			unpitchedDB.ID = id

			if err := backRepo.BackRepoUnpitched.db.First(&unpitchedDB, id).Error; err != nil {
				log.Fatalln("CheckoutUnpitched : Problem with getting object with id:", id)
			}
			backRepo.BackRepoUnpitched.CheckoutPhaseOneInstance(&unpitchedDB)
			backRepo.BackRepoUnpitched.CheckoutPhaseTwoInstance(backRepo, &unpitchedDB)
		}
	}
}

// CopyBasicFieldsFromUnpitched
func (unpitchedDB *UnpitchedDB) CopyBasicFieldsFromUnpitched(unpitched *models.Unpitched) {
	// insertion point for fields commit

	unpitchedDB.Name_Data.String = unpitched.Name
	unpitchedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromUnpitched_WOP
func (unpitchedDB *UnpitchedDB) CopyBasicFieldsFromUnpitched_WOP(unpitched *models.Unpitched_WOP) {
	// insertion point for fields commit

	unpitchedDB.Name_Data.String = unpitched.Name
	unpitchedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromUnpitchedWOP
func (unpitchedDB *UnpitchedDB) CopyBasicFieldsFromUnpitchedWOP(unpitched *UnpitchedWOP) {
	// insertion point for fields commit

	unpitchedDB.Name_Data.String = unpitched.Name
	unpitchedDB.Name_Data.Valid = true
}

// CopyBasicFieldsToUnpitched
func (unpitchedDB *UnpitchedDB) CopyBasicFieldsToUnpitched(unpitched *models.Unpitched) {
	// insertion point for checkout of basic fields (back repo to stage)
	unpitched.Name = unpitchedDB.Name_Data.String
}

// CopyBasicFieldsToUnpitched_WOP
func (unpitchedDB *UnpitchedDB) CopyBasicFieldsToUnpitched_WOP(unpitched *models.Unpitched_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	unpitched.Name = unpitchedDB.Name_Data.String
}

// CopyBasicFieldsToUnpitchedWOP
func (unpitchedDB *UnpitchedDB) CopyBasicFieldsToUnpitchedWOP(unpitched *UnpitchedWOP) {
	unpitched.ID = int(unpitchedDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	unpitched.Name = unpitchedDB.Name_Data.String
}

// Backup generates a json file from a slice of all UnpitchedDB instances in the backrepo
func (backRepoUnpitched *BackRepoUnpitchedStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "UnpitchedDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UnpitchedDB, 0)
	for _, unpitchedDB := range backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB {
		forBackup = append(forBackup, unpitchedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Unpitched ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Unpitched file", err.Error())
	}
}

// Backup generates a json file from a slice of all UnpitchedDB instances in the backrepo
func (backRepoUnpitched *BackRepoUnpitchedStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UnpitchedDB, 0)
	for _, unpitchedDB := range backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB {
		forBackup = append(forBackup, unpitchedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Unpitched")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Unpitched_Fields, -1)
	for _, unpitchedDB := range forBackup {

		var unpitchedWOP UnpitchedWOP
		unpitchedDB.CopyBasicFieldsToUnpitchedWOP(&unpitchedWOP)

		row := sh.AddRow()
		row.WriteStruct(&unpitchedWOP, -1)
	}
}

// RestoreXL from the "Unpitched" sheet all UnpitchedDB instances
func (backRepoUnpitched *BackRepoUnpitchedStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoUnpitchedid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Unpitched"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoUnpitched.rowVisitorUnpitched)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoUnpitched *BackRepoUnpitchedStruct) rowVisitorUnpitched(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var unpitchedWOP UnpitchedWOP
		row.ReadStruct(&unpitchedWOP)

		// add the unmarshalled struct to the stage
		unpitchedDB := new(UnpitchedDB)
		unpitchedDB.CopyBasicFieldsFromUnpitchedWOP(&unpitchedWOP)

		unpitchedDB_ID_atBackupTime := unpitchedDB.ID
		unpitchedDB.ID = 0
		query := backRepoUnpitched.db.Create(unpitchedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[unpitchedDB.ID] = unpitchedDB
		BackRepoUnpitchedid_atBckpTime_newID[unpitchedDB_ID_atBackupTime] = unpitchedDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "UnpitchedDB.json" in dirPath that stores an array
// of UnpitchedDB and stores it in the database
// the map BackRepoUnpitchedid_atBckpTime_newID is updated accordingly
func (backRepoUnpitched *BackRepoUnpitchedStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoUnpitchedid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "UnpitchedDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Unpitched file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*UnpitchedDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_UnpitchedDBID_UnpitchedDB
	for _, unpitchedDB := range forRestore {

		unpitchedDB_ID_atBackupTime := unpitchedDB.ID
		unpitchedDB.ID = 0
		query := backRepoUnpitched.db.Create(unpitchedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[unpitchedDB.ID] = unpitchedDB
		BackRepoUnpitchedid_atBckpTime_newID[unpitchedDB_ID_atBackupTime] = unpitchedDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Unpitched file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Unpitched>id_atBckpTime_newID
// to compute new index
func (backRepoUnpitched *BackRepoUnpitchedStruct) RestorePhaseTwo() {

	for _, unpitchedDB := range backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB {

		// next line of code is to avert unused variable compilation error
		_ = unpitchedDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoUnpitched.db.Model(unpitchedDB).Updates(*unpitchedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoUnpitched.ResetReversePointers commits all staged instances of Unpitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnpitched *BackRepoUnpitchedStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, unpitched := range backRepoUnpitched.Map_UnpitchedDBID_UnpitchedPtr {
		backRepoUnpitched.ResetReversePointersInstance(backRepo, idx, unpitched)
	}

	return
}

func (backRepoUnpitched *BackRepoUnpitchedStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, unpitched *models.Unpitched) (Error error) {

	// fetch matching unpitchedDB
	if unpitchedDB, ok := backRepoUnpitched.Map_UnpitchedDBID_UnpitchedDB[idx]; ok {
		_ = unpitchedDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoUnpitchedid_atBckpTime_newID map[uint]uint
