// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Empty_placement_sql sql.NullBool
var dummy_Empty_placement_time time.Duration
var dummy_Empty_placement_sort sort.Float64Slice

// Empty_placementAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model empty_placementAPI
type Empty_placementAPI struct {
	gorm.Model

	models.Empty_placement_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Empty_placementPointersEncoding Empty_placementPointersEncoding
}

// Empty_placementPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Empty_placementPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Empty_placementDB describes a empty_placement in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model empty_placementDB
type Empty_placementDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field empty_placementDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Empty_placementPointersEncoding
}

// Empty_placementDBs arrays empty_placementDBs
// swagger:response empty_placementDBsResponse
type Empty_placementDBs []Empty_placementDB

// Empty_placementDBResponse provides response
// swagger:response empty_placementDBResponse
type Empty_placementDBResponse struct {
	Empty_placementDB
}

// Empty_placementWOP is a Empty_placement without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Empty_placementWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Empty_placement_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEmpty_placementStruct struct {
	// stores Empty_placementDB according to their gorm ID
	Map_Empty_placementDBID_Empty_placementDB map[uint]*Empty_placementDB

	// stores Empty_placementDB ID according to Empty_placement address
	Map_Empty_placementPtr_Empty_placementDBID map[*models.Empty_placement]uint

	// stores Empty_placement according to their gorm ID
	Map_Empty_placementDBID_Empty_placementPtr map[uint]*models.Empty_placement

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEmpty_placement.stage
	return
}

func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) GetDB() *gorm.DB {
	return backRepoEmpty_placement.db
}

// GetEmpty_placementDBFromEmpty_placementPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) GetEmpty_placementDBFromEmpty_placementPtr(empty_placement *models.Empty_placement) (empty_placementDB *Empty_placementDB) {
	id := backRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement]
	empty_placementDB = backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[id]
	return
}

// BackRepoEmpty_placement.CommitPhaseOne commits all staged instances of Empty_placement to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for empty_placement := range stage.Empty_placements {
		backRepoEmpty_placement.CommitPhaseOneInstance(empty_placement)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, empty_placement := range backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr {
		if _, ok := stage.Empty_placements[empty_placement]; !ok {
			backRepoEmpty_placement.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmpty_placement.CommitDeleteInstance commits deletion of Empty_placement to the BackRepo
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CommitDeleteInstance(id uint) (Error error) {

	empty_placement := backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr[id]

	// empty_placement is not staged anymore, remove empty_placementDB
	empty_placementDB := backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[id]
	query := backRepoEmpty_placement.db.Unscoped().Delete(&empty_placementDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID, empty_placement)
	delete(backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr, id)
	delete(backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB, id)

	return
}

// BackRepoEmpty_placement.CommitPhaseOneInstance commits empty_placement staged instances of Empty_placement to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CommitPhaseOneInstance(empty_placement *models.Empty_placement) (Error error) {

	// check if the empty_placement is not commited yet
	if _, ok := backRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement]; ok {
		return
	}

	// initiate empty_placement
	var empty_placementDB Empty_placementDB
	empty_placementDB.CopyBasicFieldsFromEmpty_placement(empty_placement)

	query := backRepoEmpty_placement.db.Create(&empty_placementDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement] = empty_placementDB.ID
	backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr[empty_placementDB.ID] = empty_placement
	backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[empty_placementDB.ID] = &empty_placementDB

	return
}

// BackRepoEmpty_placement.CommitPhaseTwo commits all staged instances of Empty_placement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_placement := range backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr {
		backRepoEmpty_placement.CommitPhaseTwoInstance(backRepo, idx, empty_placement)
	}

	return
}

// BackRepoEmpty_placement.CommitPhaseTwoInstance commits {{structname }} of models.Empty_placement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, empty_placement *models.Empty_placement) (Error error) {

	// fetch matching empty_placementDB
	if empty_placementDB, ok := backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[idx]; ok {

		empty_placementDB.CopyBasicFieldsFromEmpty_placement(empty_placement)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEmpty_placement.db.Save(&empty_placementDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Empty_placement intance %s", empty_placement.Name))
		return err
	}

	return
}

// BackRepoEmpty_placement.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CheckoutPhaseOne() (Error error) {

	empty_placementDBArray := make([]Empty_placementDB, 0)
	query := backRepoEmpty_placement.db.Find(&empty_placementDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	empty_placementInstancesToBeRemovedFromTheStage := make(map[*models.Empty_placement]any)
	for key, value := range backRepoEmpty_placement.stage.Empty_placements {
		empty_placementInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, empty_placementDB := range empty_placementDBArray {
		backRepoEmpty_placement.CheckoutPhaseOneInstance(&empty_placementDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		empty_placement, ok := backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr[empty_placementDB.ID]
		if ok {
			delete(empty_placementInstancesToBeRemovedFromTheStage, empty_placement)
		}
	}

	// remove from stage and back repo's 3 maps all empty_placements that are not in the checkout
	for empty_placement := range empty_placementInstancesToBeRemovedFromTheStage {
		empty_placement.Unstage(backRepoEmpty_placement.GetStage())

		// remove instance from the back repo 3 maps
		empty_placementID := backRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement]
		delete(backRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID, empty_placement)
		delete(backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB, empty_placementID)
		delete(backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr, empty_placementID)
	}

	return
}

// CheckoutPhaseOneInstance takes a empty_placementDB that has been found in the DB, updates the backRepo and stages the
// models version of the empty_placementDB
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CheckoutPhaseOneInstance(empty_placementDB *Empty_placementDB) (Error error) {

	empty_placement, ok := backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr[empty_placementDB.ID]
	if !ok {
		empty_placement = new(models.Empty_placement)

		backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr[empty_placementDB.ID] = empty_placement
		backRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement] = empty_placementDB.ID

		// append model store with the new element
		empty_placement.Name = empty_placementDB.Name_Data.String
		empty_placement.Stage(backRepoEmpty_placement.GetStage())
	}
	empty_placementDB.CopyBasicFieldsToEmpty_placement(empty_placement)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	empty_placement.Stage(backRepoEmpty_placement.GetStage())

	// preserve pointer to empty_placementDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Empty_placementDBID_Empty_placementDB)[empty_placementDB hold variable pointers
	empty_placementDB_Data := *empty_placementDB
	preservedPtrToEmpty_placement := &empty_placementDB_Data
	backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[empty_placementDB.ID] = preservedPtrToEmpty_placement

	return
}

// BackRepoEmpty_placement.CheckoutPhaseTwo Checkouts all staged instances of Empty_placement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, empty_placementDB := range backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB {
		backRepoEmpty_placement.CheckoutPhaseTwoInstance(backRepo, empty_placementDB)
	}
	return
}

// BackRepoEmpty_placement.CheckoutPhaseTwoInstance Checkouts staged instances of Empty_placement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, empty_placementDB *Empty_placementDB) (Error error) {

	empty_placement := backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr[empty_placementDB.ID]

	empty_placementDB.DecodePointers(backRepo, empty_placement)

	return
}

func (empty_placementDB *Empty_placementDB) DecodePointers(backRepo *BackRepoStruct, empty_placement *models.Empty_placement) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmpty_placement allows commit of a single empty_placement (if already staged)
func (backRepo *BackRepoStruct) CommitEmpty_placement(empty_placement *models.Empty_placement) {
	backRepo.BackRepoEmpty_placement.CommitPhaseOneInstance(empty_placement)
	if id, ok := backRepo.BackRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement]; ok {
		backRepo.BackRepoEmpty_placement.CommitPhaseTwoInstance(backRepo, id, empty_placement)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmpty_placement allows checkout of a single empty_placement (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmpty_placement(empty_placement *models.Empty_placement) {
	// check if the empty_placement is staged
	if _, ok := backRepo.BackRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement]; ok {

		if id, ok := backRepo.BackRepoEmpty_placement.Map_Empty_placementPtr_Empty_placementDBID[empty_placement]; ok {
			var empty_placementDB Empty_placementDB
			empty_placementDB.ID = id

			if err := backRepo.BackRepoEmpty_placement.db.First(&empty_placementDB, id).Error; err != nil {
				log.Fatalln("CheckoutEmpty_placement : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmpty_placement.CheckoutPhaseOneInstance(&empty_placementDB)
			backRepo.BackRepoEmpty_placement.CheckoutPhaseTwoInstance(backRepo, &empty_placementDB)
		}
	}
}

// CopyBasicFieldsFromEmpty_placement
func (empty_placementDB *Empty_placementDB) CopyBasicFieldsFromEmpty_placement(empty_placement *models.Empty_placement) {
	// insertion point for fields commit

	empty_placementDB.Name_Data.String = empty_placement.Name
	empty_placementDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_placement_WOP
func (empty_placementDB *Empty_placementDB) CopyBasicFieldsFromEmpty_placement_WOP(empty_placement *models.Empty_placement_WOP) {
	// insertion point for fields commit

	empty_placementDB.Name_Data.String = empty_placement.Name
	empty_placementDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_placementWOP
func (empty_placementDB *Empty_placementDB) CopyBasicFieldsFromEmpty_placementWOP(empty_placement *Empty_placementWOP) {
	// insertion point for fields commit

	empty_placementDB.Name_Data.String = empty_placement.Name
	empty_placementDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEmpty_placement
func (empty_placementDB *Empty_placementDB) CopyBasicFieldsToEmpty_placement(empty_placement *models.Empty_placement) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_placement.Name = empty_placementDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_placement_WOP
func (empty_placementDB *Empty_placementDB) CopyBasicFieldsToEmpty_placement_WOP(empty_placement *models.Empty_placement_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_placement.Name = empty_placementDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_placementWOP
func (empty_placementDB *Empty_placementDB) CopyBasicFieldsToEmpty_placementWOP(empty_placement *Empty_placementWOP) {
	empty_placement.ID = int(empty_placementDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	empty_placement.Name = empty_placementDB.Name_Data.String
}

// Backup generates a json file from a slice of all Empty_placementDB instances in the backrepo
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Empty_placementDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_placementDB, 0)
	for _, empty_placementDB := range backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB {
		forBackup = append(forBackup, empty_placementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Empty_placement ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Empty_placement file", err.Error())
	}
}

// Backup generates a json file from a slice of all Empty_placementDB instances in the backrepo
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_placementDB, 0)
	for _, empty_placementDB := range backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB {
		forBackup = append(forBackup, empty_placementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Empty_placement")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Empty_placement_Fields, -1)
	for _, empty_placementDB := range forBackup {

		var empty_placementWOP Empty_placementWOP
		empty_placementDB.CopyBasicFieldsToEmpty_placementWOP(&empty_placementWOP)

		row := sh.AddRow()
		row.WriteStruct(&empty_placementWOP, -1)
	}
}

// RestoreXL from the "Empty_placement" sheet all Empty_placementDB instances
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmpty_placementid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Empty_placement"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmpty_placement.rowVisitorEmpty_placement)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) rowVisitorEmpty_placement(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var empty_placementWOP Empty_placementWOP
		row.ReadStruct(&empty_placementWOP)

		// add the unmarshalled struct to the stage
		empty_placementDB := new(Empty_placementDB)
		empty_placementDB.CopyBasicFieldsFromEmpty_placementWOP(&empty_placementWOP)

		empty_placementDB_ID_atBackupTime := empty_placementDB.ID
		empty_placementDB.ID = 0
		query := backRepoEmpty_placement.db.Create(empty_placementDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[empty_placementDB.ID] = empty_placementDB
		BackRepoEmpty_placementid_atBckpTime_newID[empty_placementDB_ID_atBackupTime] = empty_placementDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Empty_placementDB.json" in dirPath that stores an array
// of Empty_placementDB and stores it in the database
// the map BackRepoEmpty_placementid_atBckpTime_newID is updated accordingly
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmpty_placementid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Empty_placementDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Empty_placement file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Empty_placementDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Empty_placementDBID_Empty_placementDB
	for _, empty_placementDB := range forRestore {

		empty_placementDB_ID_atBackupTime := empty_placementDB.ID
		empty_placementDB.ID = 0
		query := backRepoEmpty_placement.db.Create(empty_placementDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[empty_placementDB.ID] = empty_placementDB
		BackRepoEmpty_placementid_atBckpTime_newID[empty_placementDB_ID_atBackupTime] = empty_placementDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Empty_placement file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Empty_placement>id_atBckpTime_newID
// to compute new index
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) RestorePhaseTwo() {

	for _, empty_placementDB := range backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB {

		// next line of code is to avert unused variable compilation error
		_ = empty_placementDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEmpty_placement.db.Model(empty_placementDB).Updates(*empty_placementDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEmpty_placement.ResetReversePointers commits all staged instances of Empty_placement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_placement := range backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr {
		backRepoEmpty_placement.ResetReversePointersInstance(backRepo, idx, empty_placement)
	}

	return
}

func (backRepoEmpty_placement *BackRepoEmpty_placementStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, empty_placement *models.Empty_placement) (Error error) {

	// fetch matching empty_placementDB
	if empty_placementDB, ok := backRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementDB[idx]; ok {
		_ = empty_placementDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmpty_placementid_atBckpTime_newID map[uint]uint
