// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Beat_unit_tied_sql sql.NullBool
var dummy_Beat_unit_tied_time time.Duration
var dummy_Beat_unit_tied_sort sort.Float64Slice

// Beat_unit_tiedAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model beat_unit_tiedAPI
type Beat_unit_tiedAPI struct {
	gorm.Model

	models.Beat_unit_tied_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Beat_unit_tiedPointersEncoding Beat_unit_tiedPointersEncoding
}

// Beat_unit_tiedPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Beat_unit_tiedPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Beat_unit_tiedDB describes a beat_unit_tied in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model beat_unit_tiedDB
type Beat_unit_tiedDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field beat_unit_tiedDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Beat_unit_tiedPointersEncoding
}

// Beat_unit_tiedDBs arrays beat_unit_tiedDBs
// swagger:response beat_unit_tiedDBsResponse
type Beat_unit_tiedDBs []Beat_unit_tiedDB

// Beat_unit_tiedDBResponse provides response
// swagger:response beat_unit_tiedDBResponse
type Beat_unit_tiedDBResponse struct {
	Beat_unit_tiedDB
}

// Beat_unit_tiedWOP is a Beat_unit_tied without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Beat_unit_tiedWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Beat_unit_tied_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBeat_unit_tiedStruct struct {
	// stores Beat_unit_tiedDB according to their gorm ID
	Map_Beat_unit_tiedDBID_Beat_unit_tiedDB map[uint]*Beat_unit_tiedDB

	// stores Beat_unit_tiedDB ID according to Beat_unit_tied address
	Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID map[*models.Beat_unit_tied]uint

	// stores Beat_unit_tied according to their gorm ID
	Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr map[uint]*models.Beat_unit_tied

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBeat_unit_tied.stage
	return
}

func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) GetDB() *gorm.DB {
	return backRepoBeat_unit_tied.db
}

// GetBeat_unit_tiedDBFromBeat_unit_tiedPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) GetBeat_unit_tiedDBFromBeat_unit_tiedPtr(beat_unit_tied *models.Beat_unit_tied) (beat_unit_tiedDB *Beat_unit_tiedDB) {
	id := backRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied]
	beat_unit_tiedDB = backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[id]
	return
}

// BackRepoBeat_unit_tied.CommitPhaseOne commits all staged instances of Beat_unit_tied to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for beat_unit_tied := range stage.Beat_unit_tieds {
		backRepoBeat_unit_tied.CommitPhaseOneInstance(beat_unit_tied)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, beat_unit_tied := range backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr {
		if _, ok := stage.Beat_unit_tieds[beat_unit_tied]; !ok {
			backRepoBeat_unit_tied.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBeat_unit_tied.CommitDeleteInstance commits deletion of Beat_unit_tied to the BackRepo
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CommitDeleteInstance(id uint) (Error error) {

	beat_unit_tied := backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr[id]

	// beat_unit_tied is not staged anymore, remove beat_unit_tiedDB
	beat_unit_tiedDB := backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[id]
	query := backRepoBeat_unit_tied.db.Unscoped().Delete(&beat_unit_tiedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID, beat_unit_tied)
	delete(backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr, id)
	delete(backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB, id)

	return
}

// BackRepoBeat_unit_tied.CommitPhaseOneInstance commits beat_unit_tied staged instances of Beat_unit_tied to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CommitPhaseOneInstance(beat_unit_tied *models.Beat_unit_tied) (Error error) {

	// check if the beat_unit_tied is not commited yet
	if _, ok := backRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied]; ok {
		return
	}

	// initiate beat_unit_tied
	var beat_unit_tiedDB Beat_unit_tiedDB
	beat_unit_tiedDB.CopyBasicFieldsFromBeat_unit_tied(beat_unit_tied)

	query := backRepoBeat_unit_tied.db.Create(&beat_unit_tiedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied] = beat_unit_tiedDB.ID
	backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr[beat_unit_tiedDB.ID] = beat_unit_tied
	backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[beat_unit_tiedDB.ID] = &beat_unit_tiedDB

	return
}

// BackRepoBeat_unit_tied.CommitPhaseTwo commits all staged instances of Beat_unit_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, beat_unit_tied := range backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr {
		backRepoBeat_unit_tied.CommitPhaseTwoInstance(backRepo, idx, beat_unit_tied)
	}

	return
}

// BackRepoBeat_unit_tied.CommitPhaseTwoInstance commits {{structname }} of models.Beat_unit_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, beat_unit_tied *models.Beat_unit_tied) (Error error) {

	// fetch matching beat_unit_tiedDB
	if beat_unit_tiedDB, ok := backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[idx]; ok {

		beat_unit_tiedDB.CopyBasicFieldsFromBeat_unit_tied(beat_unit_tied)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBeat_unit_tied.db.Save(&beat_unit_tiedDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Beat_unit_tied intance %s", beat_unit_tied.Name))
		return err
	}

	return
}

// BackRepoBeat_unit_tied.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CheckoutPhaseOne() (Error error) {

	beat_unit_tiedDBArray := make([]Beat_unit_tiedDB, 0)
	query := backRepoBeat_unit_tied.db.Find(&beat_unit_tiedDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	beat_unit_tiedInstancesToBeRemovedFromTheStage := make(map[*models.Beat_unit_tied]any)
	for key, value := range backRepoBeat_unit_tied.stage.Beat_unit_tieds {
		beat_unit_tiedInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, beat_unit_tiedDB := range beat_unit_tiedDBArray {
		backRepoBeat_unit_tied.CheckoutPhaseOneInstance(&beat_unit_tiedDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		beat_unit_tied, ok := backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr[beat_unit_tiedDB.ID]
		if ok {
			delete(beat_unit_tiedInstancesToBeRemovedFromTheStage, beat_unit_tied)
		}
	}

	// remove from stage and back repo's 3 maps all beat_unit_tieds that are not in the checkout
	for beat_unit_tied := range beat_unit_tiedInstancesToBeRemovedFromTheStage {
		beat_unit_tied.Unstage(backRepoBeat_unit_tied.GetStage())

		// remove instance from the back repo 3 maps
		beat_unit_tiedID := backRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied]
		delete(backRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID, beat_unit_tied)
		delete(backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB, beat_unit_tiedID)
		delete(backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr, beat_unit_tiedID)
	}

	return
}

// CheckoutPhaseOneInstance takes a beat_unit_tiedDB that has been found in the DB, updates the backRepo and stages the
// models version of the beat_unit_tiedDB
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CheckoutPhaseOneInstance(beat_unit_tiedDB *Beat_unit_tiedDB) (Error error) {

	beat_unit_tied, ok := backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr[beat_unit_tiedDB.ID]
	if !ok {
		beat_unit_tied = new(models.Beat_unit_tied)

		backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr[beat_unit_tiedDB.ID] = beat_unit_tied
		backRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied] = beat_unit_tiedDB.ID

		// append model store with the new element
		beat_unit_tied.Name = beat_unit_tiedDB.Name_Data.String
		beat_unit_tied.Stage(backRepoBeat_unit_tied.GetStage())
	}
	beat_unit_tiedDB.CopyBasicFieldsToBeat_unit_tied(beat_unit_tied)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	beat_unit_tied.Stage(backRepoBeat_unit_tied.GetStage())

	// preserve pointer to beat_unit_tiedDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Beat_unit_tiedDBID_Beat_unit_tiedDB)[beat_unit_tiedDB hold variable pointers
	beat_unit_tiedDB_Data := *beat_unit_tiedDB
	preservedPtrToBeat_unit_tied := &beat_unit_tiedDB_Data
	backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[beat_unit_tiedDB.ID] = preservedPtrToBeat_unit_tied

	return
}

// BackRepoBeat_unit_tied.CheckoutPhaseTwo Checkouts all staged instances of Beat_unit_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, beat_unit_tiedDB := range backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB {
		backRepoBeat_unit_tied.CheckoutPhaseTwoInstance(backRepo, beat_unit_tiedDB)
	}
	return
}

// BackRepoBeat_unit_tied.CheckoutPhaseTwoInstance Checkouts staged instances of Beat_unit_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, beat_unit_tiedDB *Beat_unit_tiedDB) (Error error) {

	beat_unit_tied := backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr[beat_unit_tiedDB.ID]

	beat_unit_tiedDB.DecodePointers(backRepo, beat_unit_tied)

	return
}

func (beat_unit_tiedDB *Beat_unit_tiedDB) DecodePointers(backRepo *BackRepoStruct, beat_unit_tied *models.Beat_unit_tied) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBeat_unit_tied allows commit of a single beat_unit_tied (if already staged)
func (backRepo *BackRepoStruct) CommitBeat_unit_tied(beat_unit_tied *models.Beat_unit_tied) {
	backRepo.BackRepoBeat_unit_tied.CommitPhaseOneInstance(beat_unit_tied)
	if id, ok := backRepo.BackRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied]; ok {
		backRepo.BackRepoBeat_unit_tied.CommitPhaseTwoInstance(backRepo, id, beat_unit_tied)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBeat_unit_tied allows checkout of a single beat_unit_tied (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBeat_unit_tied(beat_unit_tied *models.Beat_unit_tied) {
	// check if the beat_unit_tied is staged
	if _, ok := backRepo.BackRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied]; ok {

		if id, ok := backRepo.BackRepoBeat_unit_tied.Map_Beat_unit_tiedPtr_Beat_unit_tiedDBID[beat_unit_tied]; ok {
			var beat_unit_tiedDB Beat_unit_tiedDB
			beat_unit_tiedDB.ID = id

			if err := backRepo.BackRepoBeat_unit_tied.db.First(&beat_unit_tiedDB, id).Error; err != nil {
				log.Fatalln("CheckoutBeat_unit_tied : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBeat_unit_tied.CheckoutPhaseOneInstance(&beat_unit_tiedDB)
			backRepo.BackRepoBeat_unit_tied.CheckoutPhaseTwoInstance(backRepo, &beat_unit_tiedDB)
		}
	}
}

// CopyBasicFieldsFromBeat_unit_tied
func (beat_unit_tiedDB *Beat_unit_tiedDB) CopyBasicFieldsFromBeat_unit_tied(beat_unit_tied *models.Beat_unit_tied) {
	// insertion point for fields commit

	beat_unit_tiedDB.Name_Data.String = beat_unit_tied.Name
	beat_unit_tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBeat_unit_tied_WOP
func (beat_unit_tiedDB *Beat_unit_tiedDB) CopyBasicFieldsFromBeat_unit_tied_WOP(beat_unit_tied *models.Beat_unit_tied_WOP) {
	// insertion point for fields commit

	beat_unit_tiedDB.Name_Data.String = beat_unit_tied.Name
	beat_unit_tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBeat_unit_tiedWOP
func (beat_unit_tiedDB *Beat_unit_tiedDB) CopyBasicFieldsFromBeat_unit_tiedWOP(beat_unit_tied *Beat_unit_tiedWOP) {
	// insertion point for fields commit

	beat_unit_tiedDB.Name_Data.String = beat_unit_tied.Name
	beat_unit_tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBeat_unit_tied
func (beat_unit_tiedDB *Beat_unit_tiedDB) CopyBasicFieldsToBeat_unit_tied(beat_unit_tied *models.Beat_unit_tied) {
	// insertion point for checkout of basic fields (back repo to stage)
	beat_unit_tied.Name = beat_unit_tiedDB.Name_Data.String
}

// CopyBasicFieldsToBeat_unit_tied_WOP
func (beat_unit_tiedDB *Beat_unit_tiedDB) CopyBasicFieldsToBeat_unit_tied_WOP(beat_unit_tied *models.Beat_unit_tied_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	beat_unit_tied.Name = beat_unit_tiedDB.Name_Data.String
}

// CopyBasicFieldsToBeat_unit_tiedWOP
func (beat_unit_tiedDB *Beat_unit_tiedDB) CopyBasicFieldsToBeat_unit_tiedWOP(beat_unit_tied *Beat_unit_tiedWOP) {
	beat_unit_tied.ID = int(beat_unit_tiedDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	beat_unit_tied.Name = beat_unit_tiedDB.Name_Data.String
}

// Backup generates a json file from a slice of all Beat_unit_tiedDB instances in the backrepo
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Beat_unit_tiedDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Beat_unit_tiedDB, 0)
	for _, beat_unit_tiedDB := range backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB {
		forBackup = append(forBackup, beat_unit_tiedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Beat_unit_tied ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Beat_unit_tied file", err.Error())
	}
}

// Backup generates a json file from a slice of all Beat_unit_tiedDB instances in the backrepo
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Beat_unit_tiedDB, 0)
	for _, beat_unit_tiedDB := range backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB {
		forBackup = append(forBackup, beat_unit_tiedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Beat_unit_tied")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Beat_unit_tied_Fields, -1)
	for _, beat_unit_tiedDB := range forBackup {

		var beat_unit_tiedWOP Beat_unit_tiedWOP
		beat_unit_tiedDB.CopyBasicFieldsToBeat_unit_tiedWOP(&beat_unit_tiedWOP)

		row := sh.AddRow()
		row.WriteStruct(&beat_unit_tiedWOP, -1)
	}
}

// RestoreXL from the "Beat_unit_tied" sheet all Beat_unit_tiedDB instances
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBeat_unit_tiedid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Beat_unit_tied"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBeat_unit_tied.rowVisitorBeat_unit_tied)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) rowVisitorBeat_unit_tied(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var beat_unit_tiedWOP Beat_unit_tiedWOP
		row.ReadStruct(&beat_unit_tiedWOP)

		// add the unmarshalled struct to the stage
		beat_unit_tiedDB := new(Beat_unit_tiedDB)
		beat_unit_tiedDB.CopyBasicFieldsFromBeat_unit_tiedWOP(&beat_unit_tiedWOP)

		beat_unit_tiedDB_ID_atBackupTime := beat_unit_tiedDB.ID
		beat_unit_tiedDB.ID = 0
		query := backRepoBeat_unit_tied.db.Create(beat_unit_tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[beat_unit_tiedDB.ID] = beat_unit_tiedDB
		BackRepoBeat_unit_tiedid_atBckpTime_newID[beat_unit_tiedDB_ID_atBackupTime] = beat_unit_tiedDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Beat_unit_tiedDB.json" in dirPath that stores an array
// of Beat_unit_tiedDB and stores it in the database
// the map BackRepoBeat_unit_tiedid_atBckpTime_newID is updated accordingly
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBeat_unit_tiedid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Beat_unit_tiedDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Beat_unit_tied file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Beat_unit_tiedDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Beat_unit_tiedDBID_Beat_unit_tiedDB
	for _, beat_unit_tiedDB := range forRestore {

		beat_unit_tiedDB_ID_atBackupTime := beat_unit_tiedDB.ID
		beat_unit_tiedDB.ID = 0
		query := backRepoBeat_unit_tied.db.Create(beat_unit_tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[beat_unit_tiedDB.ID] = beat_unit_tiedDB
		BackRepoBeat_unit_tiedid_atBckpTime_newID[beat_unit_tiedDB_ID_atBackupTime] = beat_unit_tiedDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Beat_unit_tied file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Beat_unit_tied>id_atBckpTime_newID
// to compute new index
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) RestorePhaseTwo() {

	for _, beat_unit_tiedDB := range backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB {

		// next line of code is to avert unused variable compilation error
		_ = beat_unit_tiedDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBeat_unit_tied.db.Model(beat_unit_tiedDB).Updates(*beat_unit_tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBeat_unit_tied.ResetReversePointers commits all staged instances of Beat_unit_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, beat_unit_tied := range backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedPtr {
		backRepoBeat_unit_tied.ResetReversePointersInstance(backRepo, idx, beat_unit_tied)
	}

	return
}

func (backRepoBeat_unit_tied *BackRepoBeat_unit_tiedStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, beat_unit_tied *models.Beat_unit_tied) (Error error) {

	// fetch matching beat_unit_tiedDB
	if beat_unit_tiedDB, ok := backRepoBeat_unit_tied.Map_Beat_unit_tiedDBID_Beat_unit_tiedDB[idx]; ok {
		_ = beat_unit_tiedDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBeat_unit_tiedid_atBckpTime_newID map[uint]uint
