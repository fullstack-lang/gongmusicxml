// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Double_sql sql.NullBool
var dummy_Double_time time.Duration
var dummy_Double_sort sort.Float64Slice

// DoubleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model doubleAPI
type DoubleAPI struct {
	gorm.Model

	models.Double_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DoublePointersEncoding DoublePointersEncoding
}

// DoublePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DoublePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DoubleDB describes a double in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model doubleDB
type DoubleDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field doubleDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DoublePointersEncoding
}

// DoubleDBs arrays doubleDBs
// swagger:response doubleDBsResponse
type DoubleDBs []DoubleDB

// DoubleDBResponse provides response
// swagger:response doubleDBResponse
type DoubleDBResponse struct {
	DoubleDB
}

// DoubleWOP is a Double without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DoubleWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Double_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDoubleStruct struct {
	// stores DoubleDB according to their gorm ID
	Map_DoubleDBID_DoubleDB map[uint]*DoubleDB

	// stores DoubleDB ID according to Double address
	Map_DoublePtr_DoubleDBID map[*models.Double]uint

	// stores Double according to their gorm ID
	Map_DoubleDBID_DoublePtr map[uint]*models.Double

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDouble *BackRepoDoubleStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDouble.stage
	return
}

func (backRepoDouble *BackRepoDoubleStruct) GetDB() *gorm.DB {
	return backRepoDouble.db
}

// GetDoubleDBFromDoublePtr is a handy function to access the back repo instance from the stage instance
func (backRepoDouble *BackRepoDoubleStruct) GetDoubleDBFromDoublePtr(double *models.Double) (doubleDB *DoubleDB) {
	id := backRepoDouble.Map_DoublePtr_DoubleDBID[double]
	doubleDB = backRepoDouble.Map_DoubleDBID_DoubleDB[id]
	return
}

// BackRepoDouble.CommitPhaseOne commits all staged instances of Double to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDouble *BackRepoDoubleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for double := range stage.Doubles {
		backRepoDouble.CommitPhaseOneInstance(double)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, double := range backRepoDouble.Map_DoubleDBID_DoublePtr {
		if _, ok := stage.Doubles[double]; !ok {
			backRepoDouble.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDouble.CommitDeleteInstance commits deletion of Double to the BackRepo
func (backRepoDouble *BackRepoDoubleStruct) CommitDeleteInstance(id uint) (Error error) {

	double := backRepoDouble.Map_DoubleDBID_DoublePtr[id]

	// double is not staged anymore, remove doubleDB
	doubleDB := backRepoDouble.Map_DoubleDBID_DoubleDB[id]
	query := backRepoDouble.db.Unscoped().Delete(&doubleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDouble.Map_DoublePtr_DoubleDBID, double)
	delete(backRepoDouble.Map_DoubleDBID_DoublePtr, id)
	delete(backRepoDouble.Map_DoubleDBID_DoubleDB, id)

	return
}

// BackRepoDouble.CommitPhaseOneInstance commits double staged instances of Double to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDouble *BackRepoDoubleStruct) CommitPhaseOneInstance(double *models.Double) (Error error) {

	// check if the double is not commited yet
	if _, ok := backRepoDouble.Map_DoublePtr_DoubleDBID[double]; ok {
		return
	}

	// initiate double
	var doubleDB DoubleDB
	doubleDB.CopyBasicFieldsFromDouble(double)

	query := backRepoDouble.db.Create(&doubleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDouble.Map_DoublePtr_DoubleDBID[double] = doubleDB.ID
	backRepoDouble.Map_DoubleDBID_DoublePtr[doubleDB.ID] = double
	backRepoDouble.Map_DoubleDBID_DoubleDB[doubleDB.ID] = &doubleDB

	return
}

// BackRepoDouble.CommitPhaseTwo commits all staged instances of Double to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDouble *BackRepoDoubleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, double := range backRepoDouble.Map_DoubleDBID_DoublePtr {
		backRepoDouble.CommitPhaseTwoInstance(backRepo, idx, double)
	}

	return
}

// BackRepoDouble.CommitPhaseTwoInstance commits {{structname }} of models.Double to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDouble *BackRepoDoubleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, double *models.Double) (Error error) {

	// fetch matching doubleDB
	if doubleDB, ok := backRepoDouble.Map_DoubleDBID_DoubleDB[idx]; ok {

		doubleDB.CopyBasicFieldsFromDouble(double)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDouble.db.Save(&doubleDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Double intance %s", double.Name))
		return err
	}

	return
}

// BackRepoDouble.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDouble *BackRepoDoubleStruct) CheckoutPhaseOne() (Error error) {

	doubleDBArray := make([]DoubleDB, 0)
	query := backRepoDouble.db.Find(&doubleDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	doubleInstancesToBeRemovedFromTheStage := make(map[*models.Double]any)
	for key, value := range backRepoDouble.stage.Doubles {
		doubleInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, doubleDB := range doubleDBArray {
		backRepoDouble.CheckoutPhaseOneInstance(&doubleDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		double, ok := backRepoDouble.Map_DoubleDBID_DoublePtr[doubleDB.ID]
		if ok {
			delete(doubleInstancesToBeRemovedFromTheStage, double)
		}
	}

	// remove from stage and back repo's 3 maps all doubles that are not in the checkout
	for double := range doubleInstancesToBeRemovedFromTheStage {
		double.Unstage(backRepoDouble.GetStage())

		// remove instance from the back repo 3 maps
		doubleID := backRepoDouble.Map_DoublePtr_DoubleDBID[double]
		delete(backRepoDouble.Map_DoublePtr_DoubleDBID, double)
		delete(backRepoDouble.Map_DoubleDBID_DoubleDB, doubleID)
		delete(backRepoDouble.Map_DoubleDBID_DoublePtr, doubleID)
	}

	return
}

// CheckoutPhaseOneInstance takes a doubleDB that has been found in the DB, updates the backRepo and stages the
// models version of the doubleDB
func (backRepoDouble *BackRepoDoubleStruct) CheckoutPhaseOneInstance(doubleDB *DoubleDB) (Error error) {

	double, ok := backRepoDouble.Map_DoubleDBID_DoublePtr[doubleDB.ID]
	if !ok {
		double = new(models.Double)

		backRepoDouble.Map_DoubleDBID_DoublePtr[doubleDB.ID] = double
		backRepoDouble.Map_DoublePtr_DoubleDBID[double] = doubleDB.ID

		// append model store with the new element
		double.Name = doubleDB.Name_Data.String
		double.Stage(backRepoDouble.GetStage())
	}
	doubleDB.CopyBasicFieldsToDouble(double)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	double.Stage(backRepoDouble.GetStage())

	// preserve pointer to doubleDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DoubleDBID_DoubleDB)[doubleDB hold variable pointers
	doubleDB_Data := *doubleDB
	preservedPtrToDouble := &doubleDB_Data
	backRepoDouble.Map_DoubleDBID_DoubleDB[doubleDB.ID] = preservedPtrToDouble

	return
}

// BackRepoDouble.CheckoutPhaseTwo Checkouts all staged instances of Double to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDouble *BackRepoDoubleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, doubleDB := range backRepoDouble.Map_DoubleDBID_DoubleDB {
		backRepoDouble.CheckoutPhaseTwoInstance(backRepo, doubleDB)
	}
	return
}

// BackRepoDouble.CheckoutPhaseTwoInstance Checkouts staged instances of Double to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDouble *BackRepoDoubleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, doubleDB *DoubleDB) (Error error) {

	double := backRepoDouble.Map_DoubleDBID_DoublePtr[doubleDB.ID]

	doubleDB.DecodePointers(backRepo, double)

	return
}

func (doubleDB *DoubleDB) DecodePointers(backRepo *BackRepoStruct, double *models.Double) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDouble allows commit of a single double (if already staged)
func (backRepo *BackRepoStruct) CommitDouble(double *models.Double) {
	backRepo.BackRepoDouble.CommitPhaseOneInstance(double)
	if id, ok := backRepo.BackRepoDouble.Map_DoublePtr_DoubleDBID[double]; ok {
		backRepo.BackRepoDouble.CommitPhaseTwoInstance(backRepo, id, double)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDouble allows checkout of a single double (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDouble(double *models.Double) {
	// check if the double is staged
	if _, ok := backRepo.BackRepoDouble.Map_DoublePtr_DoubleDBID[double]; ok {

		if id, ok := backRepo.BackRepoDouble.Map_DoublePtr_DoubleDBID[double]; ok {
			var doubleDB DoubleDB
			doubleDB.ID = id

			if err := backRepo.BackRepoDouble.db.First(&doubleDB, id).Error; err != nil {
				log.Fatalln("CheckoutDouble : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDouble.CheckoutPhaseOneInstance(&doubleDB)
			backRepo.BackRepoDouble.CheckoutPhaseTwoInstance(backRepo, &doubleDB)
		}
	}
}

// CopyBasicFieldsFromDouble
func (doubleDB *DoubleDB) CopyBasicFieldsFromDouble(double *models.Double) {
	// insertion point for fields commit

	doubleDB.Name_Data.String = double.Name
	doubleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDouble_WOP
func (doubleDB *DoubleDB) CopyBasicFieldsFromDouble_WOP(double *models.Double_WOP) {
	// insertion point for fields commit

	doubleDB.Name_Data.String = double.Name
	doubleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDoubleWOP
func (doubleDB *DoubleDB) CopyBasicFieldsFromDoubleWOP(double *DoubleWOP) {
	// insertion point for fields commit

	doubleDB.Name_Data.String = double.Name
	doubleDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDouble
func (doubleDB *DoubleDB) CopyBasicFieldsToDouble(double *models.Double) {
	// insertion point for checkout of basic fields (back repo to stage)
	double.Name = doubleDB.Name_Data.String
}

// CopyBasicFieldsToDouble_WOP
func (doubleDB *DoubleDB) CopyBasicFieldsToDouble_WOP(double *models.Double_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	double.Name = doubleDB.Name_Data.String
}

// CopyBasicFieldsToDoubleWOP
func (doubleDB *DoubleDB) CopyBasicFieldsToDoubleWOP(double *DoubleWOP) {
	double.ID = int(doubleDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	double.Name = doubleDB.Name_Data.String
}

// Backup generates a json file from a slice of all DoubleDB instances in the backrepo
func (backRepoDouble *BackRepoDoubleStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DoubleDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DoubleDB, 0)
	for _, doubleDB := range backRepoDouble.Map_DoubleDBID_DoubleDB {
		forBackup = append(forBackup, doubleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Double ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Double file", err.Error())
	}
}

// Backup generates a json file from a slice of all DoubleDB instances in the backrepo
func (backRepoDouble *BackRepoDoubleStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DoubleDB, 0)
	for _, doubleDB := range backRepoDouble.Map_DoubleDBID_DoubleDB {
		forBackup = append(forBackup, doubleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Double")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Double_Fields, -1)
	for _, doubleDB := range forBackup {

		var doubleWOP DoubleWOP
		doubleDB.CopyBasicFieldsToDoubleWOP(&doubleWOP)

		row := sh.AddRow()
		row.WriteStruct(&doubleWOP, -1)
	}
}

// RestoreXL from the "Double" sheet all DoubleDB instances
func (backRepoDouble *BackRepoDoubleStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDoubleid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Double"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDouble.rowVisitorDouble)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDouble *BackRepoDoubleStruct) rowVisitorDouble(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var doubleWOP DoubleWOP
		row.ReadStruct(&doubleWOP)

		// add the unmarshalled struct to the stage
		doubleDB := new(DoubleDB)
		doubleDB.CopyBasicFieldsFromDoubleWOP(&doubleWOP)

		doubleDB_ID_atBackupTime := doubleDB.ID
		doubleDB.ID = 0
		query := backRepoDouble.db.Create(doubleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDouble.Map_DoubleDBID_DoubleDB[doubleDB.ID] = doubleDB
		BackRepoDoubleid_atBckpTime_newID[doubleDB_ID_atBackupTime] = doubleDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DoubleDB.json" in dirPath that stores an array
// of DoubleDB and stores it in the database
// the map BackRepoDoubleid_atBckpTime_newID is updated accordingly
func (backRepoDouble *BackRepoDoubleStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDoubleid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DoubleDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Double file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DoubleDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DoubleDBID_DoubleDB
	for _, doubleDB := range forRestore {

		doubleDB_ID_atBackupTime := doubleDB.ID
		doubleDB.ID = 0
		query := backRepoDouble.db.Create(doubleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDouble.Map_DoubleDBID_DoubleDB[doubleDB.ID] = doubleDB
		BackRepoDoubleid_atBckpTime_newID[doubleDB_ID_atBackupTime] = doubleDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Double file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Double>id_atBckpTime_newID
// to compute new index
func (backRepoDouble *BackRepoDoubleStruct) RestorePhaseTwo() {

	for _, doubleDB := range backRepoDouble.Map_DoubleDBID_DoubleDB {

		// next line of code is to avert unused variable compilation error
		_ = doubleDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDouble.db.Model(doubleDB).Updates(*doubleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDouble.ResetReversePointers commits all staged instances of Double to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDouble *BackRepoDoubleStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, double := range backRepoDouble.Map_DoubleDBID_DoublePtr {
		backRepoDouble.ResetReversePointersInstance(backRepo, idx, double)
	}

	return
}

func (backRepoDouble *BackRepoDoubleStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, double *models.Double) (Error error) {

	// fetch matching doubleDB
	if doubleDB, ok := backRepoDouble.Map_DoubleDBID_DoubleDB[idx]; ok {
		_ = doubleDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDoubleid_atBckpTime_newID map[uint]uint
