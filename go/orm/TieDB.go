// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tie_sql sql.NullBool
var dummy_Tie_time time.Duration
var dummy_Tie_sort sort.Float64Slice

// TieAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tieAPI
type TieAPI struct {
	gorm.Model

	models.Tie_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TiePointersEncoding TiePointersEncoding
}

// TiePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TiePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TieDB describes a tie in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tieDB
type TieDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tieDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TiePointersEncoding
}

// TieDBs arrays tieDBs
// swagger:response tieDBsResponse
type TieDBs []TieDB

// TieDBResponse provides response
// swagger:response tieDBResponse
type TieDBResponse struct {
	TieDB
}

// TieWOP is a Tie without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TieWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Tie_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTieStruct struct {
	// stores TieDB according to their gorm ID
	Map_TieDBID_TieDB map[uint]*TieDB

	// stores TieDB ID according to Tie address
	Map_TiePtr_TieDBID map[*models.Tie]uint

	// stores Tie according to their gorm ID
	Map_TieDBID_TiePtr map[uint]*models.Tie

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTie *BackRepoTieStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTie.stage
	return
}

func (backRepoTie *BackRepoTieStruct) GetDB() *gorm.DB {
	return backRepoTie.db
}

// GetTieDBFromTiePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTie *BackRepoTieStruct) GetTieDBFromTiePtr(tie *models.Tie) (tieDB *TieDB) {
	id := backRepoTie.Map_TiePtr_TieDBID[tie]
	tieDB = backRepoTie.Map_TieDBID_TieDB[id]
	return
}

// BackRepoTie.CommitPhaseOne commits all staged instances of Tie to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTie *BackRepoTieStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tie := range stage.Ties {
		backRepoTie.CommitPhaseOneInstance(tie)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tie := range backRepoTie.Map_TieDBID_TiePtr {
		if _, ok := stage.Ties[tie]; !ok {
			backRepoTie.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTie.CommitDeleteInstance commits deletion of Tie to the BackRepo
func (backRepoTie *BackRepoTieStruct) CommitDeleteInstance(id uint) (Error error) {

	tie := backRepoTie.Map_TieDBID_TiePtr[id]

	// tie is not staged anymore, remove tieDB
	tieDB := backRepoTie.Map_TieDBID_TieDB[id]
	query := backRepoTie.db.Unscoped().Delete(&tieDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTie.Map_TiePtr_TieDBID, tie)
	delete(backRepoTie.Map_TieDBID_TiePtr, id)
	delete(backRepoTie.Map_TieDBID_TieDB, id)

	return
}

// BackRepoTie.CommitPhaseOneInstance commits tie staged instances of Tie to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTie *BackRepoTieStruct) CommitPhaseOneInstance(tie *models.Tie) (Error error) {

	// check if the tie is not commited yet
	if _, ok := backRepoTie.Map_TiePtr_TieDBID[tie]; ok {
		return
	}

	// initiate tie
	var tieDB TieDB
	tieDB.CopyBasicFieldsFromTie(tie)

	query := backRepoTie.db.Create(&tieDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTie.Map_TiePtr_TieDBID[tie] = tieDB.ID
	backRepoTie.Map_TieDBID_TiePtr[tieDB.ID] = tie
	backRepoTie.Map_TieDBID_TieDB[tieDB.ID] = &tieDB

	return
}

// BackRepoTie.CommitPhaseTwo commits all staged instances of Tie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTie *BackRepoTieStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tie := range backRepoTie.Map_TieDBID_TiePtr {
		backRepoTie.CommitPhaseTwoInstance(backRepo, idx, tie)
	}

	return
}

// BackRepoTie.CommitPhaseTwoInstance commits {{structname }} of models.Tie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTie *BackRepoTieStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tie *models.Tie) (Error error) {

	// fetch matching tieDB
	if tieDB, ok := backRepoTie.Map_TieDBID_TieDB[idx]; ok {

		tieDB.CopyBasicFieldsFromTie(tie)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTie.db.Save(&tieDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tie intance %s", tie.Name))
		return err
	}

	return
}

// BackRepoTie.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTie *BackRepoTieStruct) CheckoutPhaseOne() (Error error) {

	tieDBArray := make([]TieDB, 0)
	query := backRepoTie.db.Find(&tieDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tieInstancesToBeRemovedFromTheStage := make(map[*models.Tie]any)
	for key, value := range backRepoTie.stage.Ties {
		tieInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tieDB := range tieDBArray {
		backRepoTie.CheckoutPhaseOneInstance(&tieDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tie, ok := backRepoTie.Map_TieDBID_TiePtr[tieDB.ID]
		if ok {
			delete(tieInstancesToBeRemovedFromTheStage, tie)
		}
	}

	// remove from stage and back repo's 3 maps all ties that are not in the checkout
	for tie := range tieInstancesToBeRemovedFromTheStage {
		tie.Unstage(backRepoTie.GetStage())

		// remove instance from the back repo 3 maps
		tieID := backRepoTie.Map_TiePtr_TieDBID[tie]
		delete(backRepoTie.Map_TiePtr_TieDBID, tie)
		delete(backRepoTie.Map_TieDBID_TieDB, tieID)
		delete(backRepoTie.Map_TieDBID_TiePtr, tieID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tieDB that has been found in the DB, updates the backRepo and stages the
// models version of the tieDB
func (backRepoTie *BackRepoTieStruct) CheckoutPhaseOneInstance(tieDB *TieDB) (Error error) {

	tie, ok := backRepoTie.Map_TieDBID_TiePtr[tieDB.ID]
	if !ok {
		tie = new(models.Tie)

		backRepoTie.Map_TieDBID_TiePtr[tieDB.ID] = tie
		backRepoTie.Map_TiePtr_TieDBID[tie] = tieDB.ID

		// append model store with the new element
		tie.Name = tieDB.Name_Data.String
		tie.Stage(backRepoTie.GetStage())
	}
	tieDB.CopyBasicFieldsToTie(tie)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tie.Stage(backRepoTie.GetStage())

	// preserve pointer to tieDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TieDBID_TieDB)[tieDB hold variable pointers
	tieDB_Data := *tieDB
	preservedPtrToTie := &tieDB_Data
	backRepoTie.Map_TieDBID_TieDB[tieDB.ID] = preservedPtrToTie

	return
}

// BackRepoTie.CheckoutPhaseTwo Checkouts all staged instances of Tie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTie *BackRepoTieStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tieDB := range backRepoTie.Map_TieDBID_TieDB {
		backRepoTie.CheckoutPhaseTwoInstance(backRepo, tieDB)
	}
	return
}

// BackRepoTie.CheckoutPhaseTwoInstance Checkouts staged instances of Tie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTie *BackRepoTieStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tieDB *TieDB) (Error error) {

	tie := backRepoTie.Map_TieDBID_TiePtr[tieDB.ID]

	tieDB.DecodePointers(backRepo, tie)

	return
}

func (tieDB *TieDB) DecodePointers(backRepo *BackRepoStruct, tie *models.Tie) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTie allows commit of a single tie (if already staged)
func (backRepo *BackRepoStruct) CommitTie(tie *models.Tie) {
	backRepo.BackRepoTie.CommitPhaseOneInstance(tie)
	if id, ok := backRepo.BackRepoTie.Map_TiePtr_TieDBID[tie]; ok {
		backRepo.BackRepoTie.CommitPhaseTwoInstance(backRepo, id, tie)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTie allows checkout of a single tie (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTie(tie *models.Tie) {
	// check if the tie is staged
	if _, ok := backRepo.BackRepoTie.Map_TiePtr_TieDBID[tie]; ok {

		if id, ok := backRepo.BackRepoTie.Map_TiePtr_TieDBID[tie]; ok {
			var tieDB TieDB
			tieDB.ID = id

			if err := backRepo.BackRepoTie.db.First(&tieDB, id).Error; err != nil {
				log.Fatalln("CheckoutTie : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTie.CheckoutPhaseOneInstance(&tieDB)
			backRepo.BackRepoTie.CheckoutPhaseTwoInstance(backRepo, &tieDB)
		}
	}
}

// CopyBasicFieldsFromTie
func (tieDB *TieDB) CopyBasicFieldsFromTie(tie *models.Tie) {
	// insertion point for fields commit

	tieDB.Name_Data.String = tie.Name
	tieDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTie_WOP
func (tieDB *TieDB) CopyBasicFieldsFromTie_WOP(tie *models.Tie_WOP) {
	// insertion point for fields commit

	tieDB.Name_Data.String = tie.Name
	tieDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTieWOP
func (tieDB *TieDB) CopyBasicFieldsFromTieWOP(tie *TieWOP) {
	// insertion point for fields commit

	tieDB.Name_Data.String = tie.Name
	tieDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTie
func (tieDB *TieDB) CopyBasicFieldsToTie(tie *models.Tie) {
	// insertion point for checkout of basic fields (back repo to stage)
	tie.Name = tieDB.Name_Data.String
}

// CopyBasicFieldsToTie_WOP
func (tieDB *TieDB) CopyBasicFieldsToTie_WOP(tie *models.Tie_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tie.Name = tieDB.Name_Data.String
}

// CopyBasicFieldsToTieWOP
func (tieDB *TieDB) CopyBasicFieldsToTieWOP(tie *TieWOP) {
	tie.ID = int(tieDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tie.Name = tieDB.Name_Data.String
}

// Backup generates a json file from a slice of all TieDB instances in the backrepo
func (backRepoTie *BackRepoTieStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TieDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TieDB, 0)
	for _, tieDB := range backRepoTie.Map_TieDBID_TieDB {
		forBackup = append(forBackup, tieDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tie ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tie file", err.Error())
	}
}

// Backup generates a json file from a slice of all TieDB instances in the backrepo
func (backRepoTie *BackRepoTieStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TieDB, 0)
	for _, tieDB := range backRepoTie.Map_TieDBID_TieDB {
		forBackup = append(forBackup, tieDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tie")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tie_Fields, -1)
	for _, tieDB := range forBackup {

		var tieWOP TieWOP
		tieDB.CopyBasicFieldsToTieWOP(&tieWOP)

		row := sh.AddRow()
		row.WriteStruct(&tieWOP, -1)
	}
}

// RestoreXL from the "Tie" sheet all TieDB instances
func (backRepoTie *BackRepoTieStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTieid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tie"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTie.rowVisitorTie)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTie *BackRepoTieStruct) rowVisitorTie(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tieWOP TieWOP
		row.ReadStruct(&tieWOP)

		// add the unmarshalled struct to the stage
		tieDB := new(TieDB)
		tieDB.CopyBasicFieldsFromTieWOP(&tieWOP)

		tieDB_ID_atBackupTime := tieDB.ID
		tieDB.ID = 0
		query := backRepoTie.db.Create(tieDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTie.Map_TieDBID_TieDB[tieDB.ID] = tieDB
		BackRepoTieid_atBckpTime_newID[tieDB_ID_atBackupTime] = tieDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TieDB.json" in dirPath that stores an array
// of TieDB and stores it in the database
// the map BackRepoTieid_atBckpTime_newID is updated accordingly
func (backRepoTie *BackRepoTieStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTieid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TieDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tie file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TieDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TieDBID_TieDB
	for _, tieDB := range forRestore {

		tieDB_ID_atBackupTime := tieDB.ID
		tieDB.ID = 0
		query := backRepoTie.db.Create(tieDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTie.Map_TieDBID_TieDB[tieDB.ID] = tieDB
		BackRepoTieid_atBckpTime_newID[tieDB_ID_atBackupTime] = tieDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tie file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tie>id_atBckpTime_newID
// to compute new index
func (backRepoTie *BackRepoTieStruct) RestorePhaseTwo() {

	for _, tieDB := range backRepoTie.Map_TieDBID_TieDB {

		// next line of code is to avert unused variable compilation error
		_ = tieDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTie.db.Model(tieDB).Updates(*tieDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTie.ResetReversePointers commits all staged instances of Tie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTie *BackRepoTieStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tie := range backRepoTie.Map_TieDBID_TiePtr {
		backRepoTie.ResetReversePointersInstance(backRepo, idx, tie)
	}

	return
}

func (backRepoTie *BackRepoTieStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tie *models.Tie) (Error error) {

	// fetch matching tieDB
	if tieDB, ok := backRepoTie.Map_TieDBID_TieDB[idx]; ok {
		_ = tieDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTieid_atBckpTime_newID map[uint]uint
