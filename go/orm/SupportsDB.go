// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Supports_sql sql.NullBool
var dummy_Supports_time time.Duration
var dummy_Supports_sort sort.Float64Slice

// SupportsAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model supportsAPI
type SupportsAPI struct {
	gorm.Model

	models.Supports_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SupportsPointersEncoding SupportsPointersEncoding
}

// SupportsPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SupportsPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SupportsDB describes a supports in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model supportsDB
type SupportsDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field supportsDB.Name
	Name_Data sql.NullString

	// Declation for basic field supportsDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SupportsPointersEncoding
}

// SupportsDBs arrays supportsDBs
// swagger:response supportsDBsResponse
type SupportsDBs []SupportsDB

// SupportsDBResponse provides response
// swagger:response supportsDBResponse
type SupportsDBResponse struct {
	SupportsDB
}

// SupportsWOP is a Supports without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SupportsWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Supports_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoSupportsStruct struct {
	// stores SupportsDB according to their gorm ID
	Map_SupportsDBID_SupportsDB map[uint]*SupportsDB

	// stores SupportsDB ID according to Supports address
	Map_SupportsPtr_SupportsDBID map[*models.Supports]uint

	// stores Supports according to their gorm ID
	Map_SupportsDBID_SupportsPtr map[uint]*models.Supports

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSupports *BackRepoSupportsStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSupports.stage
	return
}

func (backRepoSupports *BackRepoSupportsStruct) GetDB() *gorm.DB {
	return backRepoSupports.db
}

// GetSupportsDBFromSupportsPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSupports *BackRepoSupportsStruct) GetSupportsDBFromSupportsPtr(supports *models.Supports) (supportsDB *SupportsDB) {
	id := backRepoSupports.Map_SupportsPtr_SupportsDBID[supports]
	supportsDB = backRepoSupports.Map_SupportsDBID_SupportsDB[id]
	return
}

// BackRepoSupports.CommitPhaseOne commits all staged instances of Supports to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSupports *BackRepoSupportsStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for supports := range stage.Supportss {
		backRepoSupports.CommitPhaseOneInstance(supports)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, supports := range backRepoSupports.Map_SupportsDBID_SupportsPtr {
		if _, ok := stage.Supportss[supports]; !ok {
			backRepoSupports.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSupports.CommitDeleteInstance commits deletion of Supports to the BackRepo
func (backRepoSupports *BackRepoSupportsStruct) CommitDeleteInstance(id uint) (Error error) {

	supports := backRepoSupports.Map_SupportsDBID_SupportsPtr[id]

	// supports is not staged anymore, remove supportsDB
	supportsDB := backRepoSupports.Map_SupportsDBID_SupportsDB[id]
	query := backRepoSupports.db.Unscoped().Delete(&supportsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSupports.Map_SupportsPtr_SupportsDBID, supports)
	delete(backRepoSupports.Map_SupportsDBID_SupportsPtr, id)
	delete(backRepoSupports.Map_SupportsDBID_SupportsDB, id)

	return
}

// BackRepoSupports.CommitPhaseOneInstance commits supports staged instances of Supports to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSupports *BackRepoSupportsStruct) CommitPhaseOneInstance(supports *models.Supports) (Error error) {

	// check if the supports is not commited yet
	if _, ok := backRepoSupports.Map_SupportsPtr_SupportsDBID[supports]; ok {
		return
	}

	// initiate supports
	var supportsDB SupportsDB
	supportsDB.CopyBasicFieldsFromSupports(supports)

	query := backRepoSupports.db.Create(&supportsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSupports.Map_SupportsPtr_SupportsDBID[supports] = supportsDB.ID
	backRepoSupports.Map_SupportsDBID_SupportsPtr[supportsDB.ID] = supports
	backRepoSupports.Map_SupportsDBID_SupportsDB[supportsDB.ID] = &supportsDB

	return
}

// BackRepoSupports.CommitPhaseTwo commits all staged instances of Supports to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSupports *BackRepoSupportsStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, supports := range backRepoSupports.Map_SupportsDBID_SupportsPtr {
		backRepoSupports.CommitPhaseTwoInstance(backRepo, idx, supports)
	}

	return
}

// BackRepoSupports.CommitPhaseTwoInstance commits {{structname }} of models.Supports to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSupports *BackRepoSupportsStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, supports *models.Supports) (Error error) {

	// fetch matching supportsDB
	if supportsDB, ok := backRepoSupports.Map_SupportsDBID_SupportsDB[idx]; ok {

		supportsDB.CopyBasicFieldsFromSupports(supports)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSupports.db.Save(&supportsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Supports intance %s", supports.Name))
		return err
	}

	return
}

// BackRepoSupports.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSupports *BackRepoSupportsStruct) CheckoutPhaseOne() (Error error) {

	supportsDBArray := make([]SupportsDB, 0)
	query := backRepoSupports.db.Find(&supportsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	supportsInstancesToBeRemovedFromTheStage := make(map[*models.Supports]any)
	for key, value := range backRepoSupports.stage.Supportss {
		supportsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, supportsDB := range supportsDBArray {
		backRepoSupports.CheckoutPhaseOneInstance(&supportsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		supports, ok := backRepoSupports.Map_SupportsDBID_SupportsPtr[supportsDB.ID]
		if ok {
			delete(supportsInstancesToBeRemovedFromTheStage, supports)
		}
	}

	// remove from stage and back repo's 3 maps all supportss that are not in the checkout
	for supports := range supportsInstancesToBeRemovedFromTheStage {
		supports.Unstage(backRepoSupports.GetStage())

		// remove instance from the back repo 3 maps
		supportsID := backRepoSupports.Map_SupportsPtr_SupportsDBID[supports]
		delete(backRepoSupports.Map_SupportsPtr_SupportsDBID, supports)
		delete(backRepoSupports.Map_SupportsDBID_SupportsDB, supportsID)
		delete(backRepoSupports.Map_SupportsDBID_SupportsPtr, supportsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a supportsDB that has been found in the DB, updates the backRepo and stages the
// models version of the supportsDB
func (backRepoSupports *BackRepoSupportsStruct) CheckoutPhaseOneInstance(supportsDB *SupportsDB) (Error error) {

	supports, ok := backRepoSupports.Map_SupportsDBID_SupportsPtr[supportsDB.ID]
	if !ok {
		supports = new(models.Supports)

		backRepoSupports.Map_SupportsDBID_SupportsPtr[supportsDB.ID] = supports
		backRepoSupports.Map_SupportsPtr_SupportsDBID[supports] = supportsDB.ID

		// append model store with the new element
		supports.Name = supportsDB.Name_Data.String
		supports.Stage(backRepoSupports.GetStage())
	}
	supportsDB.CopyBasicFieldsToSupports(supports)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	supports.Stage(backRepoSupports.GetStage())

	// preserve pointer to supportsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SupportsDBID_SupportsDB)[supportsDB hold variable pointers
	supportsDB_Data := *supportsDB
	preservedPtrToSupports := &supportsDB_Data
	backRepoSupports.Map_SupportsDBID_SupportsDB[supportsDB.ID] = preservedPtrToSupports

	return
}

// BackRepoSupports.CheckoutPhaseTwo Checkouts all staged instances of Supports to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSupports *BackRepoSupportsStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, supportsDB := range backRepoSupports.Map_SupportsDBID_SupportsDB {
		backRepoSupports.CheckoutPhaseTwoInstance(backRepo, supportsDB)
	}
	return
}

// BackRepoSupports.CheckoutPhaseTwoInstance Checkouts staged instances of Supports to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSupports *BackRepoSupportsStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, supportsDB *SupportsDB) (Error error) {

	supports := backRepoSupports.Map_SupportsDBID_SupportsPtr[supportsDB.ID]

	supportsDB.DecodePointers(backRepo, supports)

	return
}

func (supportsDB *SupportsDB) DecodePointers(backRepo *BackRepoStruct, supports *models.Supports) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSupports allows commit of a single supports (if already staged)
func (backRepo *BackRepoStruct) CommitSupports(supports *models.Supports) {
	backRepo.BackRepoSupports.CommitPhaseOneInstance(supports)
	if id, ok := backRepo.BackRepoSupports.Map_SupportsPtr_SupportsDBID[supports]; ok {
		backRepo.BackRepoSupports.CommitPhaseTwoInstance(backRepo, id, supports)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSupports allows checkout of a single supports (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSupports(supports *models.Supports) {
	// check if the supports is staged
	if _, ok := backRepo.BackRepoSupports.Map_SupportsPtr_SupportsDBID[supports]; ok {

		if id, ok := backRepo.BackRepoSupports.Map_SupportsPtr_SupportsDBID[supports]; ok {
			var supportsDB SupportsDB
			supportsDB.ID = id

			if err := backRepo.BackRepoSupports.db.First(&supportsDB, id).Error; err != nil {
				log.Fatalln("CheckoutSupports : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSupports.CheckoutPhaseOneInstance(&supportsDB)
			backRepo.BackRepoSupports.CheckoutPhaseTwoInstance(backRepo, &supportsDB)
		}
	}
}

// CopyBasicFieldsFromSupports
func (supportsDB *SupportsDB) CopyBasicFieldsFromSupports(supports *models.Supports) {
	// insertion point for fields commit

	supportsDB.Name_Data.String = supports.Name
	supportsDB.Name_Data.Valid = true

	supportsDB.Value_Data.String = supports.Value
	supportsDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromSupports_WOP
func (supportsDB *SupportsDB) CopyBasicFieldsFromSupports_WOP(supports *models.Supports_WOP) {
	// insertion point for fields commit

	supportsDB.Name_Data.String = supports.Name
	supportsDB.Name_Data.Valid = true

	supportsDB.Value_Data.String = supports.Value
	supportsDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromSupportsWOP
func (supportsDB *SupportsDB) CopyBasicFieldsFromSupportsWOP(supports *SupportsWOP) {
	// insertion point for fields commit

	supportsDB.Name_Data.String = supports.Name
	supportsDB.Name_Data.Valid = true

	supportsDB.Value_Data.String = supports.Value
	supportsDB.Value_Data.Valid = true
}

// CopyBasicFieldsToSupports
func (supportsDB *SupportsDB) CopyBasicFieldsToSupports(supports *models.Supports) {
	// insertion point for checkout of basic fields (back repo to stage)
	supports.Name = supportsDB.Name_Data.String
	supports.Value = supportsDB.Value_Data.String
}

// CopyBasicFieldsToSupports_WOP
func (supportsDB *SupportsDB) CopyBasicFieldsToSupports_WOP(supports *models.Supports_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	supports.Name = supportsDB.Name_Data.String
	supports.Value = supportsDB.Value_Data.String
}

// CopyBasicFieldsToSupportsWOP
func (supportsDB *SupportsDB) CopyBasicFieldsToSupportsWOP(supports *SupportsWOP) {
	supports.ID = int(supportsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	supports.Name = supportsDB.Name_Data.String
	supports.Value = supportsDB.Value_Data.String
}

// Backup generates a json file from a slice of all SupportsDB instances in the backrepo
func (backRepoSupports *BackRepoSupportsStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SupportsDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SupportsDB, 0)
	for _, supportsDB := range backRepoSupports.Map_SupportsDBID_SupportsDB {
		forBackup = append(forBackup, supportsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Supports ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Supports file", err.Error())
	}
}

// Backup generates a json file from a slice of all SupportsDB instances in the backrepo
func (backRepoSupports *BackRepoSupportsStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SupportsDB, 0)
	for _, supportsDB := range backRepoSupports.Map_SupportsDBID_SupportsDB {
		forBackup = append(forBackup, supportsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Supports")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Supports_Fields, -1)
	for _, supportsDB := range forBackup {

		var supportsWOP SupportsWOP
		supportsDB.CopyBasicFieldsToSupportsWOP(&supportsWOP)

		row := sh.AddRow()
		row.WriteStruct(&supportsWOP, -1)
	}
}

// RestoreXL from the "Supports" sheet all SupportsDB instances
func (backRepoSupports *BackRepoSupportsStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSupportsid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Supports"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSupports.rowVisitorSupports)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSupports *BackRepoSupportsStruct) rowVisitorSupports(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var supportsWOP SupportsWOP
		row.ReadStruct(&supportsWOP)

		// add the unmarshalled struct to the stage
		supportsDB := new(SupportsDB)
		supportsDB.CopyBasicFieldsFromSupportsWOP(&supportsWOP)

		supportsDB_ID_atBackupTime := supportsDB.ID
		supportsDB.ID = 0
		query := backRepoSupports.db.Create(supportsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSupports.Map_SupportsDBID_SupportsDB[supportsDB.ID] = supportsDB
		BackRepoSupportsid_atBckpTime_newID[supportsDB_ID_atBackupTime] = supportsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SupportsDB.json" in dirPath that stores an array
// of SupportsDB and stores it in the database
// the map BackRepoSupportsid_atBckpTime_newID is updated accordingly
func (backRepoSupports *BackRepoSupportsStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSupportsid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SupportsDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Supports file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SupportsDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SupportsDBID_SupportsDB
	for _, supportsDB := range forRestore {

		supportsDB_ID_atBackupTime := supportsDB.ID
		supportsDB.ID = 0
		query := backRepoSupports.db.Create(supportsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSupports.Map_SupportsDBID_SupportsDB[supportsDB.ID] = supportsDB
		BackRepoSupportsid_atBckpTime_newID[supportsDB_ID_atBackupTime] = supportsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Supports file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Supports>id_atBckpTime_newID
// to compute new index
func (backRepoSupports *BackRepoSupportsStruct) RestorePhaseTwo() {

	for _, supportsDB := range backRepoSupports.Map_SupportsDBID_SupportsDB {

		// next line of code is to avert unused variable compilation error
		_ = supportsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSupports.db.Model(supportsDB).Updates(*supportsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSupports.ResetReversePointers commits all staged instances of Supports to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSupports *BackRepoSupportsStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, supports := range backRepoSupports.Map_SupportsDBID_SupportsPtr {
		backRepoSupports.ResetReversePointersInstance(backRepo, idx, supports)
	}

	return
}

func (backRepoSupports *BackRepoSupportsStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, supports *models.Supports) (Error error) {

	// fetch matching supportsDB
	if supportsDB, ok := backRepoSupports.Map_SupportsDBID_SupportsDB[idx]; ok {
		_ = supportsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSupportsid_atBckpTime_newID map[uint]uint
