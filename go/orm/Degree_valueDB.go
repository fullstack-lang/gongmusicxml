// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Degree_value_sql sql.NullBool
var dummy_Degree_value_time time.Duration
var dummy_Degree_value_sort sort.Float64Slice

// Degree_valueAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model degree_valueAPI
type Degree_valueAPI struct {
	gorm.Model

	models.Degree_value_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Degree_valuePointersEncoding Degree_valuePointersEncoding
}

// Degree_valuePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Degree_valuePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Degree_valueDB describes a degree_value in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model degree_valueDB
type Degree_valueDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field degree_valueDB.Name
	Name_Data sql.NullString

	// Declation for basic field degree_valueDB.Text
	Text_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Degree_valuePointersEncoding
}

// Degree_valueDBs arrays degree_valueDBs
// swagger:response degree_valueDBsResponse
type Degree_valueDBs []Degree_valueDB

// Degree_valueDBResponse provides response
// swagger:response degree_valueDBResponse
type Degree_valueDBResponse struct {
	Degree_valueDB
}

// Degree_valueWOP is a Degree_value without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Degree_valueWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Degree_value_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoDegree_valueStruct struct {
	// stores Degree_valueDB according to their gorm ID
	Map_Degree_valueDBID_Degree_valueDB map[uint]*Degree_valueDB

	// stores Degree_valueDB ID according to Degree_value address
	Map_Degree_valuePtr_Degree_valueDBID map[*models.Degree_value]uint

	// stores Degree_value according to their gorm ID
	Map_Degree_valueDBID_Degree_valuePtr map[uint]*models.Degree_value

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDegree_value *BackRepoDegree_valueStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDegree_value.stage
	return
}

func (backRepoDegree_value *BackRepoDegree_valueStruct) GetDB() *gorm.DB {
	return backRepoDegree_value.db
}

// GetDegree_valueDBFromDegree_valuePtr is a handy function to access the back repo instance from the stage instance
func (backRepoDegree_value *BackRepoDegree_valueStruct) GetDegree_valueDBFromDegree_valuePtr(degree_value *models.Degree_value) (degree_valueDB *Degree_valueDB) {
	id := backRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value]
	degree_valueDB = backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[id]
	return
}

// BackRepoDegree_value.CommitPhaseOne commits all staged instances of Degree_value to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree_value *BackRepoDegree_valueStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for degree_value := range stage.Degree_values {
		backRepoDegree_value.CommitPhaseOneInstance(degree_value)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, degree_value := range backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr {
		if _, ok := stage.Degree_values[degree_value]; !ok {
			backRepoDegree_value.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDegree_value.CommitDeleteInstance commits deletion of Degree_value to the BackRepo
func (backRepoDegree_value *BackRepoDegree_valueStruct) CommitDeleteInstance(id uint) (Error error) {

	degree_value := backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr[id]

	// degree_value is not staged anymore, remove degree_valueDB
	degree_valueDB := backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[id]
	query := backRepoDegree_value.db.Unscoped().Delete(&degree_valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID, degree_value)
	delete(backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr, id)
	delete(backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB, id)

	return
}

// BackRepoDegree_value.CommitPhaseOneInstance commits degree_value staged instances of Degree_value to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree_value *BackRepoDegree_valueStruct) CommitPhaseOneInstance(degree_value *models.Degree_value) (Error error) {

	// check if the degree_value is not commited yet
	if _, ok := backRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value]; ok {
		return
	}

	// initiate degree_value
	var degree_valueDB Degree_valueDB
	degree_valueDB.CopyBasicFieldsFromDegree_value(degree_value)

	query := backRepoDegree_value.db.Create(&degree_valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value] = degree_valueDB.ID
	backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr[degree_valueDB.ID] = degree_value
	backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[degree_valueDB.ID] = &degree_valueDB

	return
}

// BackRepoDegree_value.CommitPhaseTwo commits all staged instances of Degree_value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_value *BackRepoDegree_valueStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, degree_value := range backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr {
		backRepoDegree_value.CommitPhaseTwoInstance(backRepo, idx, degree_value)
	}

	return
}

// BackRepoDegree_value.CommitPhaseTwoInstance commits {{structname }} of models.Degree_value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_value *BackRepoDegree_valueStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, degree_value *models.Degree_value) (Error error) {

	// fetch matching degree_valueDB
	if degree_valueDB, ok := backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[idx]; ok {

		degree_valueDB.CopyBasicFieldsFromDegree_value(degree_value)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDegree_value.db.Save(&degree_valueDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Degree_value intance %s", degree_value.Name))
		return err
	}

	return
}

// BackRepoDegree_value.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDegree_value *BackRepoDegree_valueStruct) CheckoutPhaseOne() (Error error) {

	degree_valueDBArray := make([]Degree_valueDB, 0)
	query := backRepoDegree_value.db.Find(&degree_valueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	degree_valueInstancesToBeRemovedFromTheStage := make(map[*models.Degree_value]any)
	for key, value := range backRepoDegree_value.stage.Degree_values {
		degree_valueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, degree_valueDB := range degree_valueDBArray {
		backRepoDegree_value.CheckoutPhaseOneInstance(&degree_valueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		degree_value, ok := backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr[degree_valueDB.ID]
		if ok {
			delete(degree_valueInstancesToBeRemovedFromTheStage, degree_value)
		}
	}

	// remove from stage and back repo's 3 maps all degree_values that are not in the checkout
	for degree_value := range degree_valueInstancesToBeRemovedFromTheStage {
		degree_value.Unstage(backRepoDegree_value.GetStage())

		// remove instance from the back repo 3 maps
		degree_valueID := backRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value]
		delete(backRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID, degree_value)
		delete(backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB, degree_valueID)
		delete(backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr, degree_valueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a degree_valueDB that has been found in the DB, updates the backRepo and stages the
// models version of the degree_valueDB
func (backRepoDegree_value *BackRepoDegree_valueStruct) CheckoutPhaseOneInstance(degree_valueDB *Degree_valueDB) (Error error) {

	degree_value, ok := backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr[degree_valueDB.ID]
	if !ok {
		degree_value = new(models.Degree_value)

		backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr[degree_valueDB.ID] = degree_value
		backRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value] = degree_valueDB.ID

		// append model store with the new element
		degree_value.Name = degree_valueDB.Name_Data.String
		degree_value.Stage(backRepoDegree_value.GetStage())
	}
	degree_valueDB.CopyBasicFieldsToDegree_value(degree_value)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	degree_value.Stage(backRepoDegree_value.GetStage())

	// preserve pointer to degree_valueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Degree_valueDBID_Degree_valueDB)[degree_valueDB hold variable pointers
	degree_valueDB_Data := *degree_valueDB
	preservedPtrToDegree_value := &degree_valueDB_Data
	backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[degree_valueDB.ID] = preservedPtrToDegree_value

	return
}

// BackRepoDegree_value.CheckoutPhaseTwo Checkouts all staged instances of Degree_value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_value *BackRepoDegree_valueStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, degree_valueDB := range backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB {
		backRepoDegree_value.CheckoutPhaseTwoInstance(backRepo, degree_valueDB)
	}
	return
}

// BackRepoDegree_value.CheckoutPhaseTwoInstance Checkouts staged instances of Degree_value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_value *BackRepoDegree_valueStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, degree_valueDB *Degree_valueDB) (Error error) {

	degree_value := backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr[degree_valueDB.ID]

	degree_valueDB.DecodePointers(backRepo, degree_value)

	return
}

func (degree_valueDB *Degree_valueDB) DecodePointers(backRepo *BackRepoStruct, degree_value *models.Degree_value) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDegree_value allows commit of a single degree_value (if already staged)
func (backRepo *BackRepoStruct) CommitDegree_value(degree_value *models.Degree_value) {
	backRepo.BackRepoDegree_value.CommitPhaseOneInstance(degree_value)
	if id, ok := backRepo.BackRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value]; ok {
		backRepo.BackRepoDegree_value.CommitPhaseTwoInstance(backRepo, id, degree_value)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDegree_value allows checkout of a single degree_value (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDegree_value(degree_value *models.Degree_value) {
	// check if the degree_value is staged
	if _, ok := backRepo.BackRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value]; ok {

		if id, ok := backRepo.BackRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree_value]; ok {
			var degree_valueDB Degree_valueDB
			degree_valueDB.ID = id

			if err := backRepo.BackRepoDegree_value.db.First(&degree_valueDB, id).Error; err != nil {
				log.Fatalln("CheckoutDegree_value : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDegree_value.CheckoutPhaseOneInstance(&degree_valueDB)
			backRepo.BackRepoDegree_value.CheckoutPhaseTwoInstance(backRepo, &degree_valueDB)
		}
	}
}

// CopyBasicFieldsFromDegree_value
func (degree_valueDB *Degree_valueDB) CopyBasicFieldsFromDegree_value(degree_value *models.Degree_value) {
	// insertion point for fields commit

	degree_valueDB.Name_Data.String = degree_value.Name
	degree_valueDB.Name_Data.Valid = true

	degree_valueDB.Text_Data.String = degree_value.Text
	degree_valueDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromDegree_value_WOP
func (degree_valueDB *Degree_valueDB) CopyBasicFieldsFromDegree_value_WOP(degree_value *models.Degree_value_WOP) {
	// insertion point for fields commit

	degree_valueDB.Name_Data.String = degree_value.Name
	degree_valueDB.Name_Data.Valid = true

	degree_valueDB.Text_Data.String = degree_value.Text
	degree_valueDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromDegree_valueWOP
func (degree_valueDB *Degree_valueDB) CopyBasicFieldsFromDegree_valueWOP(degree_value *Degree_valueWOP) {
	// insertion point for fields commit

	degree_valueDB.Name_Data.String = degree_value.Name
	degree_valueDB.Name_Data.Valid = true

	degree_valueDB.Text_Data.String = degree_value.Text
	degree_valueDB.Text_Data.Valid = true
}

// CopyBasicFieldsToDegree_value
func (degree_valueDB *Degree_valueDB) CopyBasicFieldsToDegree_value(degree_value *models.Degree_value) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree_value.Name = degree_valueDB.Name_Data.String
	degree_value.Text = degree_valueDB.Text_Data.String
}

// CopyBasicFieldsToDegree_value_WOP
func (degree_valueDB *Degree_valueDB) CopyBasicFieldsToDegree_value_WOP(degree_value *models.Degree_value_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree_value.Name = degree_valueDB.Name_Data.String
	degree_value.Text = degree_valueDB.Text_Data.String
}

// CopyBasicFieldsToDegree_valueWOP
func (degree_valueDB *Degree_valueDB) CopyBasicFieldsToDegree_valueWOP(degree_value *Degree_valueWOP) {
	degree_value.ID = int(degree_valueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	degree_value.Name = degree_valueDB.Name_Data.String
	degree_value.Text = degree_valueDB.Text_Data.String
}

// Backup generates a json file from a slice of all Degree_valueDB instances in the backrepo
func (backRepoDegree_value *BackRepoDegree_valueStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Degree_valueDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Degree_valueDB, 0)
	for _, degree_valueDB := range backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB {
		forBackup = append(forBackup, degree_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Degree_value ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Degree_value file", err.Error())
	}
}

// Backup generates a json file from a slice of all Degree_valueDB instances in the backrepo
func (backRepoDegree_value *BackRepoDegree_valueStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Degree_valueDB, 0)
	for _, degree_valueDB := range backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB {
		forBackup = append(forBackup, degree_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Degree_value")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Degree_value_Fields, -1)
	for _, degree_valueDB := range forBackup {

		var degree_valueWOP Degree_valueWOP
		degree_valueDB.CopyBasicFieldsToDegree_valueWOP(&degree_valueWOP)

		row := sh.AddRow()
		row.WriteStruct(&degree_valueWOP, -1)
	}
}

// RestoreXL from the "Degree_value" sheet all Degree_valueDB instances
func (backRepoDegree_value *BackRepoDegree_valueStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDegree_valueid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Degree_value"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDegree_value.rowVisitorDegree_value)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDegree_value *BackRepoDegree_valueStruct) rowVisitorDegree_value(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var degree_valueWOP Degree_valueWOP
		row.ReadStruct(&degree_valueWOP)

		// add the unmarshalled struct to the stage
		degree_valueDB := new(Degree_valueDB)
		degree_valueDB.CopyBasicFieldsFromDegree_valueWOP(&degree_valueWOP)

		degree_valueDB_ID_atBackupTime := degree_valueDB.ID
		degree_valueDB.ID = 0
		query := backRepoDegree_value.db.Create(degree_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[degree_valueDB.ID] = degree_valueDB
		BackRepoDegree_valueid_atBckpTime_newID[degree_valueDB_ID_atBackupTime] = degree_valueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Degree_valueDB.json" in dirPath that stores an array
// of Degree_valueDB and stores it in the database
// the map BackRepoDegree_valueid_atBckpTime_newID is updated accordingly
func (backRepoDegree_value *BackRepoDegree_valueStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDegree_valueid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Degree_valueDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Degree_value file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Degree_valueDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Degree_valueDBID_Degree_valueDB
	for _, degree_valueDB := range forRestore {

		degree_valueDB_ID_atBackupTime := degree_valueDB.ID
		degree_valueDB.ID = 0
		query := backRepoDegree_value.db.Create(degree_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[degree_valueDB.ID] = degree_valueDB
		BackRepoDegree_valueid_atBckpTime_newID[degree_valueDB_ID_atBackupTime] = degree_valueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Degree_value file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Degree_value>id_atBckpTime_newID
// to compute new index
func (backRepoDegree_value *BackRepoDegree_valueStruct) RestorePhaseTwo() {

	for _, degree_valueDB := range backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB {

		// next line of code is to avert unused variable compilation error
		_ = degree_valueDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDegree_value.db.Model(degree_valueDB).Updates(*degree_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDegree_value.ResetReversePointers commits all staged instances of Degree_value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_value *BackRepoDegree_valueStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, degree_value := range backRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr {
		backRepoDegree_value.ResetReversePointersInstance(backRepo, idx, degree_value)
	}

	return
}

func (backRepoDegree_value *BackRepoDegree_valueStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, degree_value *models.Degree_value) (Error error) {

	// fetch matching degree_valueDB
	if degree_valueDB, ok := backRepoDegree_value.Map_Degree_valueDBID_Degree_valueDB[idx]; ok {
		_ = degree_valueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDegree_valueid_atBckpTime_newID map[uint]uint
