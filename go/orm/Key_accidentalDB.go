// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Key_accidental_sql sql.NullBool
var dummy_Key_accidental_time time.Duration
var dummy_Key_accidental_sort sort.Float64Slice

// Key_accidentalAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model key_accidentalAPI
type Key_accidentalAPI struct {
	gorm.Model

	models.Key_accidental_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Key_accidentalPointersEncoding Key_accidentalPointersEncoding
}

// Key_accidentalPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Key_accidentalPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Key_accidentalDB describes a key_accidental in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model key_accidentalDB
type Key_accidentalDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field key_accidentalDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Key_accidentalPointersEncoding
}

// Key_accidentalDBs arrays key_accidentalDBs
// swagger:response key_accidentalDBsResponse
type Key_accidentalDBs []Key_accidentalDB

// Key_accidentalDBResponse provides response
// swagger:response key_accidentalDBResponse
type Key_accidentalDBResponse struct {
	Key_accidentalDB
}

// Key_accidentalWOP is a Key_accidental without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Key_accidentalWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Key_accidental_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoKey_accidentalStruct struct {
	// stores Key_accidentalDB according to their gorm ID
	Map_Key_accidentalDBID_Key_accidentalDB map[uint]*Key_accidentalDB

	// stores Key_accidentalDB ID according to Key_accidental address
	Map_Key_accidentalPtr_Key_accidentalDBID map[*models.Key_accidental]uint

	// stores Key_accidental according to their gorm ID
	Map_Key_accidentalDBID_Key_accidentalPtr map[uint]*models.Key_accidental

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoKey_accidental *BackRepoKey_accidentalStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoKey_accidental.stage
	return
}

func (backRepoKey_accidental *BackRepoKey_accidentalStruct) GetDB() *gorm.DB {
	return backRepoKey_accidental.db
}

// GetKey_accidentalDBFromKey_accidentalPtr is a handy function to access the back repo instance from the stage instance
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) GetKey_accidentalDBFromKey_accidentalPtr(key_accidental *models.Key_accidental) (key_accidentalDB *Key_accidentalDB) {
	id := backRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental]
	key_accidentalDB = backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[id]
	return
}

// BackRepoKey_accidental.CommitPhaseOne commits all staged instances of Key_accidental to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for key_accidental := range stage.Key_accidentals {
		backRepoKey_accidental.CommitPhaseOneInstance(key_accidental)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, key_accidental := range backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr {
		if _, ok := stage.Key_accidentals[key_accidental]; !ok {
			backRepoKey_accidental.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKey_accidental.CommitDeleteInstance commits deletion of Key_accidental to the BackRepo
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CommitDeleteInstance(id uint) (Error error) {

	key_accidental := backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr[id]

	// key_accidental is not staged anymore, remove key_accidentalDB
	key_accidentalDB := backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[id]
	query := backRepoKey_accidental.db.Unscoped().Delete(&key_accidentalDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID, key_accidental)
	delete(backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr, id)
	delete(backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB, id)

	return
}

// BackRepoKey_accidental.CommitPhaseOneInstance commits key_accidental staged instances of Key_accidental to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CommitPhaseOneInstance(key_accidental *models.Key_accidental) (Error error) {

	// check if the key_accidental is not commited yet
	if _, ok := backRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental]; ok {
		return
	}

	// initiate key_accidental
	var key_accidentalDB Key_accidentalDB
	key_accidentalDB.CopyBasicFieldsFromKey_accidental(key_accidental)

	query := backRepoKey_accidental.db.Create(&key_accidentalDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental] = key_accidentalDB.ID
	backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr[key_accidentalDB.ID] = key_accidental
	backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[key_accidentalDB.ID] = &key_accidentalDB

	return
}

// BackRepoKey_accidental.CommitPhaseTwo commits all staged instances of Key_accidental to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, key_accidental := range backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr {
		backRepoKey_accidental.CommitPhaseTwoInstance(backRepo, idx, key_accidental)
	}

	return
}

// BackRepoKey_accidental.CommitPhaseTwoInstance commits {{structname }} of models.Key_accidental to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, key_accidental *models.Key_accidental) (Error error) {

	// fetch matching key_accidentalDB
	if key_accidentalDB, ok := backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[idx]; ok {

		key_accidentalDB.CopyBasicFieldsFromKey_accidental(key_accidental)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoKey_accidental.db.Save(&key_accidentalDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Key_accidental intance %s", key_accidental.Name))
		return err
	}

	return
}

// BackRepoKey_accidental.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CheckoutPhaseOne() (Error error) {

	key_accidentalDBArray := make([]Key_accidentalDB, 0)
	query := backRepoKey_accidental.db.Find(&key_accidentalDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	key_accidentalInstancesToBeRemovedFromTheStage := make(map[*models.Key_accidental]any)
	for key, value := range backRepoKey_accidental.stage.Key_accidentals {
		key_accidentalInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, key_accidentalDB := range key_accidentalDBArray {
		backRepoKey_accidental.CheckoutPhaseOneInstance(&key_accidentalDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		key_accidental, ok := backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr[key_accidentalDB.ID]
		if ok {
			delete(key_accidentalInstancesToBeRemovedFromTheStage, key_accidental)
		}
	}

	// remove from stage and back repo's 3 maps all key_accidentals that are not in the checkout
	for key_accidental := range key_accidentalInstancesToBeRemovedFromTheStage {
		key_accidental.Unstage(backRepoKey_accidental.GetStage())

		// remove instance from the back repo 3 maps
		key_accidentalID := backRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental]
		delete(backRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID, key_accidental)
		delete(backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB, key_accidentalID)
		delete(backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr, key_accidentalID)
	}

	return
}

// CheckoutPhaseOneInstance takes a key_accidentalDB that has been found in the DB, updates the backRepo and stages the
// models version of the key_accidentalDB
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CheckoutPhaseOneInstance(key_accidentalDB *Key_accidentalDB) (Error error) {

	key_accidental, ok := backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr[key_accidentalDB.ID]
	if !ok {
		key_accidental = new(models.Key_accidental)

		backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr[key_accidentalDB.ID] = key_accidental
		backRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental] = key_accidentalDB.ID

		// append model store with the new element
		key_accidental.Name = key_accidentalDB.Name_Data.String
		key_accidental.Stage(backRepoKey_accidental.GetStage())
	}
	key_accidentalDB.CopyBasicFieldsToKey_accidental(key_accidental)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	key_accidental.Stage(backRepoKey_accidental.GetStage())

	// preserve pointer to key_accidentalDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Key_accidentalDBID_Key_accidentalDB)[key_accidentalDB hold variable pointers
	key_accidentalDB_Data := *key_accidentalDB
	preservedPtrToKey_accidental := &key_accidentalDB_Data
	backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[key_accidentalDB.ID] = preservedPtrToKey_accidental

	return
}

// BackRepoKey_accidental.CheckoutPhaseTwo Checkouts all staged instances of Key_accidental to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, key_accidentalDB := range backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB {
		backRepoKey_accidental.CheckoutPhaseTwoInstance(backRepo, key_accidentalDB)
	}
	return
}

// BackRepoKey_accidental.CheckoutPhaseTwoInstance Checkouts staged instances of Key_accidental to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, key_accidentalDB *Key_accidentalDB) (Error error) {

	key_accidental := backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr[key_accidentalDB.ID]

	key_accidentalDB.DecodePointers(backRepo, key_accidental)

	return
}

func (key_accidentalDB *Key_accidentalDB) DecodePointers(backRepo *BackRepoStruct, key_accidental *models.Key_accidental) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitKey_accidental allows commit of a single key_accidental (if already staged)
func (backRepo *BackRepoStruct) CommitKey_accidental(key_accidental *models.Key_accidental) {
	backRepo.BackRepoKey_accidental.CommitPhaseOneInstance(key_accidental)
	if id, ok := backRepo.BackRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental]; ok {
		backRepo.BackRepoKey_accidental.CommitPhaseTwoInstance(backRepo, id, key_accidental)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKey_accidental allows checkout of a single key_accidental (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKey_accidental(key_accidental *models.Key_accidental) {
	// check if the key_accidental is staged
	if _, ok := backRepo.BackRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental]; ok {

		if id, ok := backRepo.BackRepoKey_accidental.Map_Key_accidentalPtr_Key_accidentalDBID[key_accidental]; ok {
			var key_accidentalDB Key_accidentalDB
			key_accidentalDB.ID = id

			if err := backRepo.BackRepoKey_accidental.db.First(&key_accidentalDB, id).Error; err != nil {
				log.Fatalln("CheckoutKey_accidental : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKey_accidental.CheckoutPhaseOneInstance(&key_accidentalDB)
			backRepo.BackRepoKey_accidental.CheckoutPhaseTwoInstance(backRepo, &key_accidentalDB)
		}
	}
}

// CopyBasicFieldsFromKey_accidental
func (key_accidentalDB *Key_accidentalDB) CopyBasicFieldsFromKey_accidental(key_accidental *models.Key_accidental) {
	// insertion point for fields commit

	key_accidentalDB.Name_Data.String = key_accidental.Name
	key_accidentalDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromKey_accidental_WOP
func (key_accidentalDB *Key_accidentalDB) CopyBasicFieldsFromKey_accidental_WOP(key_accidental *models.Key_accidental_WOP) {
	// insertion point for fields commit

	key_accidentalDB.Name_Data.String = key_accidental.Name
	key_accidentalDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromKey_accidentalWOP
func (key_accidentalDB *Key_accidentalDB) CopyBasicFieldsFromKey_accidentalWOP(key_accidental *Key_accidentalWOP) {
	// insertion point for fields commit

	key_accidentalDB.Name_Data.String = key_accidental.Name
	key_accidentalDB.Name_Data.Valid = true
}

// CopyBasicFieldsToKey_accidental
func (key_accidentalDB *Key_accidentalDB) CopyBasicFieldsToKey_accidental(key_accidental *models.Key_accidental) {
	// insertion point for checkout of basic fields (back repo to stage)
	key_accidental.Name = key_accidentalDB.Name_Data.String
}

// CopyBasicFieldsToKey_accidental_WOP
func (key_accidentalDB *Key_accidentalDB) CopyBasicFieldsToKey_accidental_WOP(key_accidental *models.Key_accidental_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	key_accidental.Name = key_accidentalDB.Name_Data.String
}

// CopyBasicFieldsToKey_accidentalWOP
func (key_accidentalDB *Key_accidentalDB) CopyBasicFieldsToKey_accidentalWOP(key_accidental *Key_accidentalWOP) {
	key_accidental.ID = int(key_accidentalDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	key_accidental.Name = key_accidentalDB.Name_Data.String
}

// Backup generates a json file from a slice of all Key_accidentalDB instances in the backrepo
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Key_accidentalDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Key_accidentalDB, 0)
	for _, key_accidentalDB := range backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB {
		forBackup = append(forBackup, key_accidentalDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Key_accidental ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Key_accidental file", err.Error())
	}
}

// Backup generates a json file from a slice of all Key_accidentalDB instances in the backrepo
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Key_accidentalDB, 0)
	for _, key_accidentalDB := range backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB {
		forBackup = append(forBackup, key_accidentalDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Key_accidental")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Key_accidental_Fields, -1)
	for _, key_accidentalDB := range forBackup {

		var key_accidentalWOP Key_accidentalWOP
		key_accidentalDB.CopyBasicFieldsToKey_accidentalWOP(&key_accidentalWOP)

		row := sh.AddRow()
		row.WriteStruct(&key_accidentalWOP, -1)
	}
}

// RestoreXL from the "Key_accidental" sheet all Key_accidentalDB instances
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKey_accidentalid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Key_accidental"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKey_accidental.rowVisitorKey_accidental)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKey_accidental *BackRepoKey_accidentalStruct) rowVisitorKey_accidental(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var key_accidentalWOP Key_accidentalWOP
		row.ReadStruct(&key_accidentalWOP)

		// add the unmarshalled struct to the stage
		key_accidentalDB := new(Key_accidentalDB)
		key_accidentalDB.CopyBasicFieldsFromKey_accidentalWOP(&key_accidentalWOP)

		key_accidentalDB_ID_atBackupTime := key_accidentalDB.ID
		key_accidentalDB.ID = 0
		query := backRepoKey_accidental.db.Create(key_accidentalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[key_accidentalDB.ID] = key_accidentalDB
		BackRepoKey_accidentalid_atBckpTime_newID[key_accidentalDB_ID_atBackupTime] = key_accidentalDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Key_accidentalDB.json" in dirPath that stores an array
// of Key_accidentalDB and stores it in the database
// the map BackRepoKey_accidentalid_atBckpTime_newID is updated accordingly
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKey_accidentalid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Key_accidentalDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Key_accidental file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Key_accidentalDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Key_accidentalDBID_Key_accidentalDB
	for _, key_accidentalDB := range forRestore {

		key_accidentalDB_ID_atBackupTime := key_accidentalDB.ID
		key_accidentalDB.ID = 0
		query := backRepoKey_accidental.db.Create(key_accidentalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[key_accidentalDB.ID] = key_accidentalDB
		BackRepoKey_accidentalid_atBckpTime_newID[key_accidentalDB_ID_atBackupTime] = key_accidentalDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Key_accidental file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Key_accidental>id_atBckpTime_newID
// to compute new index
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) RestorePhaseTwo() {

	for _, key_accidentalDB := range backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB {

		// next line of code is to avert unused variable compilation error
		_ = key_accidentalDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoKey_accidental.db.Model(key_accidentalDB).Updates(*key_accidentalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoKey_accidental.ResetReversePointers commits all staged instances of Key_accidental to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKey_accidental *BackRepoKey_accidentalStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, key_accidental := range backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalPtr {
		backRepoKey_accidental.ResetReversePointersInstance(backRepo, idx, key_accidental)
	}

	return
}

func (backRepoKey_accidental *BackRepoKey_accidentalStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, key_accidental *models.Key_accidental) (Error error) {

	// fetch matching key_accidentalDB
	if key_accidentalDB, ok := backRepoKey_accidental.Map_Key_accidentalDBID_Key_accidentalDB[idx]; ok {
		_ = key_accidentalDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKey_accidentalid_atBckpTime_newID map[uint]uint
