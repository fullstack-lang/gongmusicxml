// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Segno_sql sql.NullBool
var dummy_Segno_time time.Duration
var dummy_Segno_sort sort.Float64Slice

// SegnoAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model segnoAPI
type SegnoAPI struct {
	gorm.Model

	models.Segno_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SegnoPointersEncoding SegnoPointersEncoding
}

// SegnoPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SegnoPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SegnoDB describes a segno in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model segnoDB
type SegnoDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field segnoDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SegnoPointersEncoding
}

// SegnoDBs arrays segnoDBs
// swagger:response segnoDBsResponse
type SegnoDBs []SegnoDB

// SegnoDBResponse provides response
// swagger:response segnoDBResponse
type SegnoDBResponse struct {
	SegnoDB
}

// SegnoWOP is a Segno without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SegnoWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Segno_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSegnoStruct struct {
	// stores SegnoDB according to their gorm ID
	Map_SegnoDBID_SegnoDB map[uint]*SegnoDB

	// stores SegnoDB ID according to Segno address
	Map_SegnoPtr_SegnoDBID map[*models.Segno]uint

	// stores Segno according to their gorm ID
	Map_SegnoDBID_SegnoPtr map[uint]*models.Segno

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSegno *BackRepoSegnoStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSegno.stage
	return
}

func (backRepoSegno *BackRepoSegnoStruct) GetDB() *gorm.DB {
	return backRepoSegno.db
}

// GetSegnoDBFromSegnoPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSegno *BackRepoSegnoStruct) GetSegnoDBFromSegnoPtr(segno *models.Segno) (segnoDB *SegnoDB) {
	id := backRepoSegno.Map_SegnoPtr_SegnoDBID[segno]
	segnoDB = backRepoSegno.Map_SegnoDBID_SegnoDB[id]
	return
}

// BackRepoSegno.CommitPhaseOne commits all staged instances of Segno to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSegno *BackRepoSegnoStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for segno := range stage.Segnos {
		backRepoSegno.CommitPhaseOneInstance(segno)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, segno := range backRepoSegno.Map_SegnoDBID_SegnoPtr {
		if _, ok := stage.Segnos[segno]; !ok {
			backRepoSegno.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSegno.CommitDeleteInstance commits deletion of Segno to the BackRepo
func (backRepoSegno *BackRepoSegnoStruct) CommitDeleteInstance(id uint) (Error error) {

	segno := backRepoSegno.Map_SegnoDBID_SegnoPtr[id]

	// segno is not staged anymore, remove segnoDB
	segnoDB := backRepoSegno.Map_SegnoDBID_SegnoDB[id]
	query := backRepoSegno.db.Unscoped().Delete(&segnoDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSegno.Map_SegnoPtr_SegnoDBID, segno)
	delete(backRepoSegno.Map_SegnoDBID_SegnoPtr, id)
	delete(backRepoSegno.Map_SegnoDBID_SegnoDB, id)

	return
}

// BackRepoSegno.CommitPhaseOneInstance commits segno staged instances of Segno to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSegno *BackRepoSegnoStruct) CommitPhaseOneInstance(segno *models.Segno) (Error error) {

	// check if the segno is not commited yet
	if _, ok := backRepoSegno.Map_SegnoPtr_SegnoDBID[segno]; ok {
		return
	}

	// initiate segno
	var segnoDB SegnoDB
	segnoDB.CopyBasicFieldsFromSegno(segno)

	query := backRepoSegno.db.Create(&segnoDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSegno.Map_SegnoPtr_SegnoDBID[segno] = segnoDB.ID
	backRepoSegno.Map_SegnoDBID_SegnoPtr[segnoDB.ID] = segno
	backRepoSegno.Map_SegnoDBID_SegnoDB[segnoDB.ID] = &segnoDB

	return
}

// BackRepoSegno.CommitPhaseTwo commits all staged instances of Segno to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSegno *BackRepoSegnoStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, segno := range backRepoSegno.Map_SegnoDBID_SegnoPtr {
		backRepoSegno.CommitPhaseTwoInstance(backRepo, idx, segno)
	}

	return
}

// BackRepoSegno.CommitPhaseTwoInstance commits {{structname }} of models.Segno to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSegno *BackRepoSegnoStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, segno *models.Segno) (Error error) {

	// fetch matching segnoDB
	if segnoDB, ok := backRepoSegno.Map_SegnoDBID_SegnoDB[idx]; ok {

		segnoDB.CopyBasicFieldsFromSegno(segno)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSegno.db.Save(&segnoDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Segno intance %s", segno.Name))
		return err
	}

	return
}

// BackRepoSegno.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSegno *BackRepoSegnoStruct) CheckoutPhaseOne() (Error error) {

	segnoDBArray := make([]SegnoDB, 0)
	query := backRepoSegno.db.Find(&segnoDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	segnoInstancesToBeRemovedFromTheStage := make(map[*models.Segno]any)
	for key, value := range backRepoSegno.stage.Segnos {
		segnoInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, segnoDB := range segnoDBArray {
		backRepoSegno.CheckoutPhaseOneInstance(&segnoDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		segno, ok := backRepoSegno.Map_SegnoDBID_SegnoPtr[segnoDB.ID]
		if ok {
			delete(segnoInstancesToBeRemovedFromTheStage, segno)
		}
	}

	// remove from stage and back repo's 3 maps all segnos that are not in the checkout
	for segno := range segnoInstancesToBeRemovedFromTheStage {
		segno.Unstage(backRepoSegno.GetStage())

		// remove instance from the back repo 3 maps
		segnoID := backRepoSegno.Map_SegnoPtr_SegnoDBID[segno]
		delete(backRepoSegno.Map_SegnoPtr_SegnoDBID, segno)
		delete(backRepoSegno.Map_SegnoDBID_SegnoDB, segnoID)
		delete(backRepoSegno.Map_SegnoDBID_SegnoPtr, segnoID)
	}

	return
}

// CheckoutPhaseOneInstance takes a segnoDB that has been found in the DB, updates the backRepo and stages the
// models version of the segnoDB
func (backRepoSegno *BackRepoSegnoStruct) CheckoutPhaseOneInstance(segnoDB *SegnoDB) (Error error) {

	segno, ok := backRepoSegno.Map_SegnoDBID_SegnoPtr[segnoDB.ID]
	if !ok {
		segno = new(models.Segno)

		backRepoSegno.Map_SegnoDBID_SegnoPtr[segnoDB.ID] = segno
		backRepoSegno.Map_SegnoPtr_SegnoDBID[segno] = segnoDB.ID

		// append model store with the new element
		segno.Name = segnoDB.Name_Data.String
		segno.Stage(backRepoSegno.GetStage())
	}
	segnoDB.CopyBasicFieldsToSegno(segno)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	segno.Stage(backRepoSegno.GetStage())

	// preserve pointer to segnoDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SegnoDBID_SegnoDB)[segnoDB hold variable pointers
	segnoDB_Data := *segnoDB
	preservedPtrToSegno := &segnoDB_Data
	backRepoSegno.Map_SegnoDBID_SegnoDB[segnoDB.ID] = preservedPtrToSegno

	return
}

// BackRepoSegno.CheckoutPhaseTwo Checkouts all staged instances of Segno to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSegno *BackRepoSegnoStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, segnoDB := range backRepoSegno.Map_SegnoDBID_SegnoDB {
		backRepoSegno.CheckoutPhaseTwoInstance(backRepo, segnoDB)
	}
	return
}

// BackRepoSegno.CheckoutPhaseTwoInstance Checkouts staged instances of Segno to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSegno *BackRepoSegnoStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, segnoDB *SegnoDB) (Error error) {

	segno := backRepoSegno.Map_SegnoDBID_SegnoPtr[segnoDB.ID]

	segnoDB.DecodePointers(backRepo, segno)

	return
}

func (segnoDB *SegnoDB) DecodePointers(backRepo *BackRepoStruct, segno *models.Segno) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSegno allows commit of a single segno (if already staged)
func (backRepo *BackRepoStruct) CommitSegno(segno *models.Segno) {
	backRepo.BackRepoSegno.CommitPhaseOneInstance(segno)
	if id, ok := backRepo.BackRepoSegno.Map_SegnoPtr_SegnoDBID[segno]; ok {
		backRepo.BackRepoSegno.CommitPhaseTwoInstance(backRepo, id, segno)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSegno allows checkout of a single segno (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSegno(segno *models.Segno) {
	// check if the segno is staged
	if _, ok := backRepo.BackRepoSegno.Map_SegnoPtr_SegnoDBID[segno]; ok {

		if id, ok := backRepo.BackRepoSegno.Map_SegnoPtr_SegnoDBID[segno]; ok {
			var segnoDB SegnoDB
			segnoDB.ID = id

			if err := backRepo.BackRepoSegno.db.First(&segnoDB, id).Error; err != nil {
				log.Fatalln("CheckoutSegno : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSegno.CheckoutPhaseOneInstance(&segnoDB)
			backRepo.BackRepoSegno.CheckoutPhaseTwoInstance(backRepo, &segnoDB)
		}
	}
}

// CopyBasicFieldsFromSegno
func (segnoDB *SegnoDB) CopyBasicFieldsFromSegno(segno *models.Segno) {
	// insertion point for fields commit

	segnoDB.Name_Data.String = segno.Name
	segnoDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSegno_WOP
func (segnoDB *SegnoDB) CopyBasicFieldsFromSegno_WOP(segno *models.Segno_WOP) {
	// insertion point for fields commit

	segnoDB.Name_Data.String = segno.Name
	segnoDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSegnoWOP
func (segnoDB *SegnoDB) CopyBasicFieldsFromSegnoWOP(segno *SegnoWOP) {
	// insertion point for fields commit

	segnoDB.Name_Data.String = segno.Name
	segnoDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSegno
func (segnoDB *SegnoDB) CopyBasicFieldsToSegno(segno *models.Segno) {
	// insertion point for checkout of basic fields (back repo to stage)
	segno.Name = segnoDB.Name_Data.String
}

// CopyBasicFieldsToSegno_WOP
func (segnoDB *SegnoDB) CopyBasicFieldsToSegno_WOP(segno *models.Segno_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	segno.Name = segnoDB.Name_Data.String
}

// CopyBasicFieldsToSegnoWOP
func (segnoDB *SegnoDB) CopyBasicFieldsToSegnoWOP(segno *SegnoWOP) {
	segno.ID = int(segnoDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	segno.Name = segnoDB.Name_Data.String
}

// Backup generates a json file from a slice of all SegnoDB instances in the backrepo
func (backRepoSegno *BackRepoSegnoStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SegnoDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SegnoDB, 0)
	for _, segnoDB := range backRepoSegno.Map_SegnoDBID_SegnoDB {
		forBackup = append(forBackup, segnoDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Segno ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Segno file", err.Error())
	}
}

// Backup generates a json file from a slice of all SegnoDB instances in the backrepo
func (backRepoSegno *BackRepoSegnoStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SegnoDB, 0)
	for _, segnoDB := range backRepoSegno.Map_SegnoDBID_SegnoDB {
		forBackup = append(forBackup, segnoDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Segno")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Segno_Fields, -1)
	for _, segnoDB := range forBackup {

		var segnoWOP SegnoWOP
		segnoDB.CopyBasicFieldsToSegnoWOP(&segnoWOP)

		row := sh.AddRow()
		row.WriteStruct(&segnoWOP, -1)
	}
}

// RestoreXL from the "Segno" sheet all SegnoDB instances
func (backRepoSegno *BackRepoSegnoStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSegnoid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Segno"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSegno.rowVisitorSegno)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSegno *BackRepoSegnoStruct) rowVisitorSegno(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var segnoWOP SegnoWOP
		row.ReadStruct(&segnoWOP)

		// add the unmarshalled struct to the stage
		segnoDB := new(SegnoDB)
		segnoDB.CopyBasicFieldsFromSegnoWOP(&segnoWOP)

		segnoDB_ID_atBackupTime := segnoDB.ID
		segnoDB.ID = 0
		query := backRepoSegno.db.Create(segnoDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSegno.Map_SegnoDBID_SegnoDB[segnoDB.ID] = segnoDB
		BackRepoSegnoid_atBckpTime_newID[segnoDB_ID_atBackupTime] = segnoDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SegnoDB.json" in dirPath that stores an array
// of SegnoDB and stores it in the database
// the map BackRepoSegnoid_atBckpTime_newID is updated accordingly
func (backRepoSegno *BackRepoSegnoStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSegnoid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SegnoDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Segno file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SegnoDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SegnoDBID_SegnoDB
	for _, segnoDB := range forRestore {

		segnoDB_ID_atBackupTime := segnoDB.ID
		segnoDB.ID = 0
		query := backRepoSegno.db.Create(segnoDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSegno.Map_SegnoDBID_SegnoDB[segnoDB.ID] = segnoDB
		BackRepoSegnoid_atBckpTime_newID[segnoDB_ID_atBackupTime] = segnoDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Segno file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Segno>id_atBckpTime_newID
// to compute new index
func (backRepoSegno *BackRepoSegnoStruct) RestorePhaseTwo() {

	for _, segnoDB := range backRepoSegno.Map_SegnoDBID_SegnoDB {

		// next line of code is to avert unused variable compilation error
		_ = segnoDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSegno.db.Model(segnoDB).Updates(*segnoDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSegno.ResetReversePointers commits all staged instances of Segno to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSegno *BackRepoSegnoStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, segno := range backRepoSegno.Map_SegnoDBID_SegnoPtr {
		backRepoSegno.ResetReversePointersInstance(backRepo, idx, segno)
	}

	return
}

func (backRepoSegno *BackRepoSegnoStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, segno *models.Segno) (Error error) {

	// fetch matching segnoDB
	if segnoDB, ok := backRepoSegno.Map_SegnoDBID_SegnoDB[idx]; ok {
		_ = segnoDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSegnoid_atBckpTime_newID map[uint]uint
