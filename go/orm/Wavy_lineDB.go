// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Wavy_line_sql sql.NullBool
var dummy_Wavy_line_time time.Duration
var dummy_Wavy_line_sort sort.Float64Slice

// Wavy_lineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model wavy_lineAPI
type Wavy_lineAPI struct {
	gorm.Model

	models.Wavy_line_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Wavy_linePointersEncoding Wavy_linePointersEncoding
}

// Wavy_linePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Wavy_linePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Wavy_lineDB describes a wavy_line in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model wavy_lineDB
type Wavy_lineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field wavy_lineDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Wavy_linePointersEncoding
}

// Wavy_lineDBs arrays wavy_lineDBs
// swagger:response wavy_lineDBsResponse
type Wavy_lineDBs []Wavy_lineDB

// Wavy_lineDBResponse provides response
// swagger:response wavy_lineDBResponse
type Wavy_lineDBResponse struct {
	Wavy_lineDB
}

// Wavy_lineWOP is a Wavy_line without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Wavy_lineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Wavy_line_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoWavy_lineStruct struct {
	// stores Wavy_lineDB according to their gorm ID
	Map_Wavy_lineDBID_Wavy_lineDB map[uint]*Wavy_lineDB

	// stores Wavy_lineDB ID according to Wavy_line address
	Map_Wavy_linePtr_Wavy_lineDBID map[*models.Wavy_line]uint

	// stores Wavy_line according to their gorm ID
	Map_Wavy_lineDBID_Wavy_linePtr map[uint]*models.Wavy_line

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoWavy_line *BackRepoWavy_lineStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoWavy_line.stage
	return
}

func (backRepoWavy_line *BackRepoWavy_lineStruct) GetDB() *gorm.DB {
	return backRepoWavy_line.db
}

// GetWavy_lineDBFromWavy_linePtr is a handy function to access the back repo instance from the stage instance
func (backRepoWavy_line *BackRepoWavy_lineStruct) GetWavy_lineDBFromWavy_linePtr(wavy_line *models.Wavy_line) (wavy_lineDB *Wavy_lineDB) {
	id := backRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line]
	wavy_lineDB = backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[id]
	return
}

// BackRepoWavy_line.CommitPhaseOne commits all staged instances of Wavy_line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWavy_line *BackRepoWavy_lineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for wavy_line := range stage.Wavy_lines {
		backRepoWavy_line.CommitPhaseOneInstance(wavy_line)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, wavy_line := range backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr {
		if _, ok := stage.Wavy_lines[wavy_line]; !ok {
			backRepoWavy_line.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWavy_line.CommitDeleteInstance commits deletion of Wavy_line to the BackRepo
func (backRepoWavy_line *BackRepoWavy_lineStruct) CommitDeleteInstance(id uint) (Error error) {

	wavy_line := backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr[id]

	// wavy_line is not staged anymore, remove wavy_lineDB
	wavy_lineDB := backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[id]
	query := backRepoWavy_line.db.Unscoped().Delete(&wavy_lineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID, wavy_line)
	delete(backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr, id)
	delete(backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB, id)

	return
}

// BackRepoWavy_line.CommitPhaseOneInstance commits wavy_line staged instances of Wavy_line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWavy_line *BackRepoWavy_lineStruct) CommitPhaseOneInstance(wavy_line *models.Wavy_line) (Error error) {

	// check if the wavy_line is not commited yet
	if _, ok := backRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line]; ok {
		return
	}

	// initiate wavy_line
	var wavy_lineDB Wavy_lineDB
	wavy_lineDB.CopyBasicFieldsFromWavy_line(wavy_line)

	query := backRepoWavy_line.db.Create(&wavy_lineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line] = wavy_lineDB.ID
	backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr[wavy_lineDB.ID] = wavy_line
	backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[wavy_lineDB.ID] = &wavy_lineDB

	return
}

// BackRepoWavy_line.CommitPhaseTwo commits all staged instances of Wavy_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWavy_line *BackRepoWavy_lineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, wavy_line := range backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr {
		backRepoWavy_line.CommitPhaseTwoInstance(backRepo, idx, wavy_line)
	}

	return
}

// BackRepoWavy_line.CommitPhaseTwoInstance commits {{structname }} of models.Wavy_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWavy_line *BackRepoWavy_lineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, wavy_line *models.Wavy_line) (Error error) {

	// fetch matching wavy_lineDB
	if wavy_lineDB, ok := backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[idx]; ok {

		wavy_lineDB.CopyBasicFieldsFromWavy_line(wavy_line)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoWavy_line.db.Save(&wavy_lineDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Wavy_line intance %s", wavy_line.Name))
		return err
	}

	return
}

// BackRepoWavy_line.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoWavy_line *BackRepoWavy_lineStruct) CheckoutPhaseOne() (Error error) {

	wavy_lineDBArray := make([]Wavy_lineDB, 0)
	query := backRepoWavy_line.db.Find(&wavy_lineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	wavy_lineInstancesToBeRemovedFromTheStage := make(map[*models.Wavy_line]any)
	for key, value := range backRepoWavy_line.stage.Wavy_lines {
		wavy_lineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, wavy_lineDB := range wavy_lineDBArray {
		backRepoWavy_line.CheckoutPhaseOneInstance(&wavy_lineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		wavy_line, ok := backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr[wavy_lineDB.ID]
		if ok {
			delete(wavy_lineInstancesToBeRemovedFromTheStage, wavy_line)
		}
	}

	// remove from stage and back repo's 3 maps all wavy_lines that are not in the checkout
	for wavy_line := range wavy_lineInstancesToBeRemovedFromTheStage {
		wavy_line.Unstage(backRepoWavy_line.GetStage())

		// remove instance from the back repo 3 maps
		wavy_lineID := backRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line]
		delete(backRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID, wavy_line)
		delete(backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB, wavy_lineID)
		delete(backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr, wavy_lineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a wavy_lineDB that has been found in the DB, updates the backRepo and stages the
// models version of the wavy_lineDB
func (backRepoWavy_line *BackRepoWavy_lineStruct) CheckoutPhaseOneInstance(wavy_lineDB *Wavy_lineDB) (Error error) {

	wavy_line, ok := backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr[wavy_lineDB.ID]
	if !ok {
		wavy_line = new(models.Wavy_line)

		backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr[wavy_lineDB.ID] = wavy_line
		backRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line] = wavy_lineDB.ID

		// append model store with the new element
		wavy_line.Name = wavy_lineDB.Name_Data.String
		wavy_line.Stage(backRepoWavy_line.GetStage())
	}
	wavy_lineDB.CopyBasicFieldsToWavy_line(wavy_line)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	wavy_line.Stage(backRepoWavy_line.GetStage())

	// preserve pointer to wavy_lineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Wavy_lineDBID_Wavy_lineDB)[wavy_lineDB hold variable pointers
	wavy_lineDB_Data := *wavy_lineDB
	preservedPtrToWavy_line := &wavy_lineDB_Data
	backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[wavy_lineDB.ID] = preservedPtrToWavy_line

	return
}

// BackRepoWavy_line.CheckoutPhaseTwo Checkouts all staged instances of Wavy_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWavy_line *BackRepoWavy_lineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, wavy_lineDB := range backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB {
		backRepoWavy_line.CheckoutPhaseTwoInstance(backRepo, wavy_lineDB)
	}
	return
}

// BackRepoWavy_line.CheckoutPhaseTwoInstance Checkouts staged instances of Wavy_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWavy_line *BackRepoWavy_lineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, wavy_lineDB *Wavy_lineDB) (Error error) {

	wavy_line := backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr[wavy_lineDB.ID]

	wavy_lineDB.DecodePointers(backRepo, wavy_line)

	return
}

func (wavy_lineDB *Wavy_lineDB) DecodePointers(backRepo *BackRepoStruct, wavy_line *models.Wavy_line) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitWavy_line allows commit of a single wavy_line (if already staged)
func (backRepo *BackRepoStruct) CommitWavy_line(wavy_line *models.Wavy_line) {
	backRepo.BackRepoWavy_line.CommitPhaseOneInstance(wavy_line)
	if id, ok := backRepo.BackRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line]; ok {
		backRepo.BackRepoWavy_line.CommitPhaseTwoInstance(backRepo, id, wavy_line)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitWavy_line allows checkout of a single wavy_line (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWavy_line(wavy_line *models.Wavy_line) {
	// check if the wavy_line is staged
	if _, ok := backRepo.BackRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line]; ok {

		if id, ok := backRepo.BackRepoWavy_line.Map_Wavy_linePtr_Wavy_lineDBID[wavy_line]; ok {
			var wavy_lineDB Wavy_lineDB
			wavy_lineDB.ID = id

			if err := backRepo.BackRepoWavy_line.db.First(&wavy_lineDB, id).Error; err != nil {
				log.Fatalln("CheckoutWavy_line : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWavy_line.CheckoutPhaseOneInstance(&wavy_lineDB)
			backRepo.BackRepoWavy_line.CheckoutPhaseTwoInstance(backRepo, &wavy_lineDB)
		}
	}
}

// CopyBasicFieldsFromWavy_line
func (wavy_lineDB *Wavy_lineDB) CopyBasicFieldsFromWavy_line(wavy_line *models.Wavy_line) {
	// insertion point for fields commit

	wavy_lineDB.Name_Data.String = wavy_line.Name
	wavy_lineDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWavy_line_WOP
func (wavy_lineDB *Wavy_lineDB) CopyBasicFieldsFromWavy_line_WOP(wavy_line *models.Wavy_line_WOP) {
	// insertion point for fields commit

	wavy_lineDB.Name_Data.String = wavy_line.Name
	wavy_lineDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWavy_lineWOP
func (wavy_lineDB *Wavy_lineDB) CopyBasicFieldsFromWavy_lineWOP(wavy_line *Wavy_lineWOP) {
	// insertion point for fields commit

	wavy_lineDB.Name_Data.String = wavy_line.Name
	wavy_lineDB.Name_Data.Valid = true
}

// CopyBasicFieldsToWavy_line
func (wavy_lineDB *Wavy_lineDB) CopyBasicFieldsToWavy_line(wavy_line *models.Wavy_line) {
	// insertion point for checkout of basic fields (back repo to stage)
	wavy_line.Name = wavy_lineDB.Name_Data.String
}

// CopyBasicFieldsToWavy_line_WOP
func (wavy_lineDB *Wavy_lineDB) CopyBasicFieldsToWavy_line_WOP(wavy_line *models.Wavy_line_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	wavy_line.Name = wavy_lineDB.Name_Data.String
}

// CopyBasicFieldsToWavy_lineWOP
func (wavy_lineDB *Wavy_lineDB) CopyBasicFieldsToWavy_lineWOP(wavy_line *Wavy_lineWOP) {
	wavy_line.ID = int(wavy_lineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	wavy_line.Name = wavy_lineDB.Name_Data.String
}

// Backup generates a json file from a slice of all Wavy_lineDB instances in the backrepo
func (backRepoWavy_line *BackRepoWavy_lineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Wavy_lineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Wavy_lineDB, 0)
	for _, wavy_lineDB := range backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB {
		forBackup = append(forBackup, wavy_lineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Wavy_line ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Wavy_line file", err.Error())
	}
}

// Backup generates a json file from a slice of all Wavy_lineDB instances in the backrepo
func (backRepoWavy_line *BackRepoWavy_lineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Wavy_lineDB, 0)
	for _, wavy_lineDB := range backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB {
		forBackup = append(forBackup, wavy_lineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Wavy_line")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Wavy_line_Fields, -1)
	for _, wavy_lineDB := range forBackup {

		var wavy_lineWOP Wavy_lineWOP
		wavy_lineDB.CopyBasicFieldsToWavy_lineWOP(&wavy_lineWOP)

		row := sh.AddRow()
		row.WriteStruct(&wavy_lineWOP, -1)
	}
}

// RestoreXL from the "Wavy_line" sheet all Wavy_lineDB instances
func (backRepoWavy_line *BackRepoWavy_lineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoWavy_lineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Wavy_line"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoWavy_line.rowVisitorWavy_line)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoWavy_line *BackRepoWavy_lineStruct) rowVisitorWavy_line(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var wavy_lineWOP Wavy_lineWOP
		row.ReadStruct(&wavy_lineWOP)

		// add the unmarshalled struct to the stage
		wavy_lineDB := new(Wavy_lineDB)
		wavy_lineDB.CopyBasicFieldsFromWavy_lineWOP(&wavy_lineWOP)

		wavy_lineDB_ID_atBackupTime := wavy_lineDB.ID
		wavy_lineDB.ID = 0
		query := backRepoWavy_line.db.Create(wavy_lineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[wavy_lineDB.ID] = wavy_lineDB
		BackRepoWavy_lineid_atBckpTime_newID[wavy_lineDB_ID_atBackupTime] = wavy_lineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Wavy_lineDB.json" in dirPath that stores an array
// of Wavy_lineDB and stores it in the database
// the map BackRepoWavy_lineid_atBckpTime_newID is updated accordingly
func (backRepoWavy_line *BackRepoWavy_lineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoWavy_lineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Wavy_lineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Wavy_line file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Wavy_lineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Wavy_lineDBID_Wavy_lineDB
	for _, wavy_lineDB := range forRestore {

		wavy_lineDB_ID_atBackupTime := wavy_lineDB.ID
		wavy_lineDB.ID = 0
		query := backRepoWavy_line.db.Create(wavy_lineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[wavy_lineDB.ID] = wavy_lineDB
		BackRepoWavy_lineid_atBckpTime_newID[wavy_lineDB_ID_atBackupTime] = wavy_lineDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Wavy_line file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Wavy_line>id_atBckpTime_newID
// to compute new index
func (backRepoWavy_line *BackRepoWavy_lineStruct) RestorePhaseTwo() {

	for _, wavy_lineDB := range backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB {

		// next line of code is to avert unused variable compilation error
		_ = wavy_lineDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoWavy_line.db.Model(wavy_lineDB).Updates(*wavy_lineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoWavy_line.ResetReversePointers commits all staged instances of Wavy_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWavy_line *BackRepoWavy_lineStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, wavy_line := range backRepoWavy_line.Map_Wavy_lineDBID_Wavy_linePtr {
		backRepoWavy_line.ResetReversePointersInstance(backRepo, idx, wavy_line)
	}

	return
}

func (backRepoWavy_line *BackRepoWavy_lineStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, wavy_line *models.Wavy_line) (Error error) {

	// fetch matching wavy_lineDB
	if wavy_lineDB, ok := backRepoWavy_line.Map_Wavy_lineDBID_Wavy_lineDB[idx]; ok {
		_ = wavy_lineDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoWavy_lineid_atBckpTime_newID map[uint]uint
