// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Stick_sql sql.NullBool
var dummy_Stick_time time.Duration
var dummy_Stick_sort sort.Float64Slice

// StickAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model stickAPI
type StickAPI struct {
	gorm.Model

	models.Stick_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	StickPointersEncoding StickPointersEncoding
}

// StickPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StickPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// StickDB describes a stick in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model stickDB
type StickDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field stickDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	StickPointersEncoding
}

// StickDBs arrays stickDBs
// swagger:response stickDBsResponse
type StickDBs []StickDB

// StickDBResponse provides response
// swagger:response stickDBResponse
type StickDBResponse struct {
	StickDB
}

// StickWOP is a Stick without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type StickWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Stick_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoStickStruct struct {
	// stores StickDB according to their gorm ID
	Map_StickDBID_StickDB map[uint]*StickDB

	// stores StickDB ID according to Stick address
	Map_StickPtr_StickDBID map[*models.Stick]uint

	// stores Stick according to their gorm ID
	Map_StickDBID_StickPtr map[uint]*models.Stick

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoStick *BackRepoStickStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoStick.stage
	return
}

func (backRepoStick *BackRepoStickStruct) GetDB() *gorm.DB {
	return backRepoStick.db
}

// GetStickDBFromStickPtr is a handy function to access the back repo instance from the stage instance
func (backRepoStick *BackRepoStickStruct) GetStickDBFromStickPtr(stick *models.Stick) (stickDB *StickDB) {
	id := backRepoStick.Map_StickPtr_StickDBID[stick]
	stickDB = backRepoStick.Map_StickDBID_StickDB[id]
	return
}

// BackRepoStick.CommitPhaseOne commits all staged instances of Stick to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStick *BackRepoStickStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for stick := range stage.Sticks {
		backRepoStick.CommitPhaseOneInstance(stick)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, stick := range backRepoStick.Map_StickDBID_StickPtr {
		if _, ok := stage.Sticks[stick]; !ok {
			backRepoStick.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStick.CommitDeleteInstance commits deletion of Stick to the BackRepo
func (backRepoStick *BackRepoStickStruct) CommitDeleteInstance(id uint) (Error error) {

	stick := backRepoStick.Map_StickDBID_StickPtr[id]

	// stick is not staged anymore, remove stickDB
	stickDB := backRepoStick.Map_StickDBID_StickDB[id]
	query := backRepoStick.db.Unscoped().Delete(&stickDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoStick.Map_StickPtr_StickDBID, stick)
	delete(backRepoStick.Map_StickDBID_StickPtr, id)
	delete(backRepoStick.Map_StickDBID_StickDB, id)

	return
}

// BackRepoStick.CommitPhaseOneInstance commits stick staged instances of Stick to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStick *BackRepoStickStruct) CommitPhaseOneInstance(stick *models.Stick) (Error error) {

	// check if the stick is not commited yet
	if _, ok := backRepoStick.Map_StickPtr_StickDBID[stick]; ok {
		return
	}

	// initiate stick
	var stickDB StickDB
	stickDB.CopyBasicFieldsFromStick(stick)

	query := backRepoStick.db.Create(&stickDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoStick.Map_StickPtr_StickDBID[stick] = stickDB.ID
	backRepoStick.Map_StickDBID_StickPtr[stickDB.ID] = stick
	backRepoStick.Map_StickDBID_StickDB[stickDB.ID] = &stickDB

	return
}

// BackRepoStick.CommitPhaseTwo commits all staged instances of Stick to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStick *BackRepoStickStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, stick := range backRepoStick.Map_StickDBID_StickPtr {
		backRepoStick.CommitPhaseTwoInstance(backRepo, idx, stick)
	}

	return
}

// BackRepoStick.CommitPhaseTwoInstance commits {{structname }} of models.Stick to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStick *BackRepoStickStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, stick *models.Stick) (Error error) {

	// fetch matching stickDB
	if stickDB, ok := backRepoStick.Map_StickDBID_StickDB[idx]; ok {

		stickDB.CopyBasicFieldsFromStick(stick)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoStick.db.Save(&stickDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Stick intance %s", stick.Name))
		return err
	}

	return
}

// BackRepoStick.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStick *BackRepoStickStruct) CheckoutPhaseOne() (Error error) {

	stickDBArray := make([]StickDB, 0)
	query := backRepoStick.db.Find(&stickDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	stickInstancesToBeRemovedFromTheStage := make(map[*models.Stick]any)
	for key, value := range backRepoStick.stage.Sticks {
		stickInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, stickDB := range stickDBArray {
		backRepoStick.CheckoutPhaseOneInstance(&stickDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		stick, ok := backRepoStick.Map_StickDBID_StickPtr[stickDB.ID]
		if ok {
			delete(stickInstancesToBeRemovedFromTheStage, stick)
		}
	}

	// remove from stage and back repo's 3 maps all sticks that are not in the checkout
	for stick := range stickInstancesToBeRemovedFromTheStage {
		stick.Unstage(backRepoStick.GetStage())

		// remove instance from the back repo 3 maps
		stickID := backRepoStick.Map_StickPtr_StickDBID[stick]
		delete(backRepoStick.Map_StickPtr_StickDBID, stick)
		delete(backRepoStick.Map_StickDBID_StickDB, stickID)
		delete(backRepoStick.Map_StickDBID_StickPtr, stickID)
	}

	return
}

// CheckoutPhaseOneInstance takes a stickDB that has been found in the DB, updates the backRepo and stages the
// models version of the stickDB
func (backRepoStick *BackRepoStickStruct) CheckoutPhaseOneInstance(stickDB *StickDB) (Error error) {

	stick, ok := backRepoStick.Map_StickDBID_StickPtr[stickDB.ID]
	if !ok {
		stick = new(models.Stick)

		backRepoStick.Map_StickDBID_StickPtr[stickDB.ID] = stick
		backRepoStick.Map_StickPtr_StickDBID[stick] = stickDB.ID

		// append model store with the new element
		stick.Name = stickDB.Name_Data.String
		stick.Stage(backRepoStick.GetStage())
	}
	stickDB.CopyBasicFieldsToStick(stick)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	stick.Stage(backRepoStick.GetStage())

	// preserve pointer to stickDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StickDBID_StickDB)[stickDB hold variable pointers
	stickDB_Data := *stickDB
	preservedPtrToStick := &stickDB_Data
	backRepoStick.Map_StickDBID_StickDB[stickDB.ID] = preservedPtrToStick

	return
}

// BackRepoStick.CheckoutPhaseTwo Checkouts all staged instances of Stick to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStick *BackRepoStickStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, stickDB := range backRepoStick.Map_StickDBID_StickDB {
		backRepoStick.CheckoutPhaseTwoInstance(backRepo, stickDB)
	}
	return
}

// BackRepoStick.CheckoutPhaseTwoInstance Checkouts staged instances of Stick to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStick *BackRepoStickStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, stickDB *StickDB) (Error error) {

	stick := backRepoStick.Map_StickDBID_StickPtr[stickDB.ID]

	stickDB.DecodePointers(backRepo, stick)

	return
}

func (stickDB *StickDB) DecodePointers(backRepo *BackRepoStruct, stick *models.Stick) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStick allows commit of a single stick (if already staged)
func (backRepo *BackRepoStruct) CommitStick(stick *models.Stick) {
	backRepo.BackRepoStick.CommitPhaseOneInstance(stick)
	if id, ok := backRepo.BackRepoStick.Map_StickPtr_StickDBID[stick]; ok {
		backRepo.BackRepoStick.CommitPhaseTwoInstance(backRepo, id, stick)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStick allows checkout of a single stick (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStick(stick *models.Stick) {
	// check if the stick is staged
	if _, ok := backRepo.BackRepoStick.Map_StickPtr_StickDBID[stick]; ok {

		if id, ok := backRepo.BackRepoStick.Map_StickPtr_StickDBID[stick]; ok {
			var stickDB StickDB
			stickDB.ID = id

			if err := backRepo.BackRepoStick.db.First(&stickDB, id).Error; err != nil {
				log.Fatalln("CheckoutStick : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStick.CheckoutPhaseOneInstance(&stickDB)
			backRepo.BackRepoStick.CheckoutPhaseTwoInstance(backRepo, &stickDB)
		}
	}
}

// CopyBasicFieldsFromStick
func (stickDB *StickDB) CopyBasicFieldsFromStick(stick *models.Stick) {
	// insertion point for fields commit

	stickDB.Name_Data.String = stick.Name
	stickDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStick_WOP
func (stickDB *StickDB) CopyBasicFieldsFromStick_WOP(stick *models.Stick_WOP) {
	// insertion point for fields commit

	stickDB.Name_Data.String = stick.Name
	stickDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStickWOP
func (stickDB *StickDB) CopyBasicFieldsFromStickWOP(stick *StickWOP) {
	// insertion point for fields commit

	stickDB.Name_Data.String = stick.Name
	stickDB.Name_Data.Valid = true
}

// CopyBasicFieldsToStick
func (stickDB *StickDB) CopyBasicFieldsToStick(stick *models.Stick) {
	// insertion point for checkout of basic fields (back repo to stage)
	stick.Name = stickDB.Name_Data.String
}

// CopyBasicFieldsToStick_WOP
func (stickDB *StickDB) CopyBasicFieldsToStick_WOP(stick *models.Stick_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	stick.Name = stickDB.Name_Data.String
}

// CopyBasicFieldsToStickWOP
func (stickDB *StickDB) CopyBasicFieldsToStickWOP(stick *StickWOP) {
	stick.ID = int(stickDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	stick.Name = stickDB.Name_Data.String
}

// Backup generates a json file from a slice of all StickDB instances in the backrepo
func (backRepoStick *BackRepoStickStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StickDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StickDB, 0)
	for _, stickDB := range backRepoStick.Map_StickDBID_StickDB {
		forBackup = append(forBackup, stickDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Stick ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Stick file", err.Error())
	}
}

// Backup generates a json file from a slice of all StickDB instances in the backrepo
func (backRepoStick *BackRepoStickStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StickDB, 0)
	for _, stickDB := range backRepoStick.Map_StickDBID_StickDB {
		forBackup = append(forBackup, stickDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Stick")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Stick_Fields, -1)
	for _, stickDB := range forBackup {

		var stickWOP StickWOP
		stickDB.CopyBasicFieldsToStickWOP(&stickWOP)

		row := sh.AddRow()
		row.WriteStruct(&stickWOP, -1)
	}
}

// RestoreXL from the "Stick" sheet all StickDB instances
func (backRepoStick *BackRepoStickStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStickid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Stick"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStick.rowVisitorStick)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStick *BackRepoStickStruct) rowVisitorStick(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var stickWOP StickWOP
		row.ReadStruct(&stickWOP)

		// add the unmarshalled struct to the stage
		stickDB := new(StickDB)
		stickDB.CopyBasicFieldsFromStickWOP(&stickWOP)

		stickDB_ID_atBackupTime := stickDB.ID
		stickDB.ID = 0
		query := backRepoStick.db.Create(stickDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStick.Map_StickDBID_StickDB[stickDB.ID] = stickDB
		BackRepoStickid_atBckpTime_newID[stickDB_ID_atBackupTime] = stickDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "StickDB.json" in dirPath that stores an array
// of StickDB and stores it in the database
// the map BackRepoStickid_atBckpTime_newID is updated accordingly
func (backRepoStick *BackRepoStickStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStickid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StickDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Stick file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StickDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StickDBID_StickDB
	for _, stickDB := range forRestore {

		stickDB_ID_atBackupTime := stickDB.ID
		stickDB.ID = 0
		query := backRepoStick.db.Create(stickDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStick.Map_StickDBID_StickDB[stickDB.ID] = stickDB
		BackRepoStickid_atBckpTime_newID[stickDB_ID_atBackupTime] = stickDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Stick file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Stick>id_atBckpTime_newID
// to compute new index
func (backRepoStick *BackRepoStickStruct) RestorePhaseTwo() {

	for _, stickDB := range backRepoStick.Map_StickDBID_StickDB {

		// next line of code is to avert unused variable compilation error
		_ = stickDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoStick.db.Model(stickDB).Updates(*stickDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoStick.ResetReversePointers commits all staged instances of Stick to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStick *BackRepoStickStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, stick := range backRepoStick.Map_StickDBID_StickPtr {
		backRepoStick.ResetReversePointersInstance(backRepo, idx, stick)
	}

	return
}

func (backRepoStick *BackRepoStickStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, stick *models.Stick) (Error error) {

	// fetch matching stickDB
	if stickDB, ok := backRepoStick.Map_StickDBID_StickDB[idx]; ok {
		_ = stickDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStickid_atBckpTime_newID map[uint]uint
