// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Membrane_sql sql.NullBool
var dummy_Membrane_time time.Duration
var dummy_Membrane_sort sort.Float64Slice

// MembraneAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model membraneAPI
type MembraneAPI struct {
	gorm.Model

	models.Membrane_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MembranePointersEncoding MembranePointersEncoding
}

// MembranePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MembranePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// MembraneDB describes a membrane in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model membraneDB
type MembraneDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field membraneDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MembranePointersEncoding
}

// MembraneDBs arrays membraneDBs
// swagger:response membraneDBsResponse
type MembraneDBs []MembraneDB

// MembraneDBResponse provides response
// swagger:response membraneDBResponse
type MembraneDBResponse struct {
	MembraneDB
}

// MembraneWOP is a Membrane without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MembraneWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Membrane_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMembraneStruct struct {
	// stores MembraneDB according to their gorm ID
	Map_MembraneDBID_MembraneDB map[uint]*MembraneDB

	// stores MembraneDB ID according to Membrane address
	Map_MembranePtr_MembraneDBID map[*models.Membrane]uint

	// stores Membrane according to their gorm ID
	Map_MembraneDBID_MembranePtr map[uint]*models.Membrane

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMembrane *BackRepoMembraneStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMembrane.stage
	return
}

func (backRepoMembrane *BackRepoMembraneStruct) GetDB() *gorm.DB {
	return backRepoMembrane.db
}

// GetMembraneDBFromMembranePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMembrane *BackRepoMembraneStruct) GetMembraneDBFromMembranePtr(membrane *models.Membrane) (membraneDB *MembraneDB) {
	id := backRepoMembrane.Map_MembranePtr_MembraneDBID[membrane]
	membraneDB = backRepoMembrane.Map_MembraneDBID_MembraneDB[id]
	return
}

// BackRepoMembrane.CommitPhaseOne commits all staged instances of Membrane to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMembrane *BackRepoMembraneStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for membrane := range stage.Membranes {
		backRepoMembrane.CommitPhaseOneInstance(membrane)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, membrane := range backRepoMembrane.Map_MembraneDBID_MembranePtr {
		if _, ok := stage.Membranes[membrane]; !ok {
			backRepoMembrane.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMembrane.CommitDeleteInstance commits deletion of Membrane to the BackRepo
func (backRepoMembrane *BackRepoMembraneStruct) CommitDeleteInstance(id uint) (Error error) {

	membrane := backRepoMembrane.Map_MembraneDBID_MembranePtr[id]

	// membrane is not staged anymore, remove membraneDB
	membraneDB := backRepoMembrane.Map_MembraneDBID_MembraneDB[id]
	query := backRepoMembrane.db.Unscoped().Delete(&membraneDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMembrane.Map_MembranePtr_MembraneDBID, membrane)
	delete(backRepoMembrane.Map_MembraneDBID_MembranePtr, id)
	delete(backRepoMembrane.Map_MembraneDBID_MembraneDB, id)

	return
}

// BackRepoMembrane.CommitPhaseOneInstance commits membrane staged instances of Membrane to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMembrane *BackRepoMembraneStruct) CommitPhaseOneInstance(membrane *models.Membrane) (Error error) {

	// check if the membrane is not commited yet
	if _, ok := backRepoMembrane.Map_MembranePtr_MembraneDBID[membrane]; ok {
		return
	}

	// initiate membrane
	var membraneDB MembraneDB
	membraneDB.CopyBasicFieldsFromMembrane(membrane)

	query := backRepoMembrane.db.Create(&membraneDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMembrane.Map_MembranePtr_MembraneDBID[membrane] = membraneDB.ID
	backRepoMembrane.Map_MembraneDBID_MembranePtr[membraneDB.ID] = membrane
	backRepoMembrane.Map_MembraneDBID_MembraneDB[membraneDB.ID] = &membraneDB

	return
}

// BackRepoMembrane.CommitPhaseTwo commits all staged instances of Membrane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMembrane *BackRepoMembraneStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, membrane := range backRepoMembrane.Map_MembraneDBID_MembranePtr {
		backRepoMembrane.CommitPhaseTwoInstance(backRepo, idx, membrane)
	}

	return
}

// BackRepoMembrane.CommitPhaseTwoInstance commits {{structname }} of models.Membrane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMembrane *BackRepoMembraneStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, membrane *models.Membrane) (Error error) {

	// fetch matching membraneDB
	if membraneDB, ok := backRepoMembrane.Map_MembraneDBID_MembraneDB[idx]; ok {

		membraneDB.CopyBasicFieldsFromMembrane(membrane)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMembrane.db.Save(&membraneDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Membrane intance %s", membrane.Name))
		return err
	}

	return
}

// BackRepoMembrane.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMembrane *BackRepoMembraneStruct) CheckoutPhaseOne() (Error error) {

	membraneDBArray := make([]MembraneDB, 0)
	query := backRepoMembrane.db.Find(&membraneDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	membraneInstancesToBeRemovedFromTheStage := make(map[*models.Membrane]any)
	for key, value := range backRepoMembrane.stage.Membranes {
		membraneInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, membraneDB := range membraneDBArray {
		backRepoMembrane.CheckoutPhaseOneInstance(&membraneDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		membrane, ok := backRepoMembrane.Map_MembraneDBID_MembranePtr[membraneDB.ID]
		if ok {
			delete(membraneInstancesToBeRemovedFromTheStage, membrane)
		}
	}

	// remove from stage and back repo's 3 maps all membranes that are not in the checkout
	for membrane := range membraneInstancesToBeRemovedFromTheStage {
		membrane.Unstage(backRepoMembrane.GetStage())

		// remove instance from the back repo 3 maps
		membraneID := backRepoMembrane.Map_MembranePtr_MembraneDBID[membrane]
		delete(backRepoMembrane.Map_MembranePtr_MembraneDBID, membrane)
		delete(backRepoMembrane.Map_MembraneDBID_MembraneDB, membraneID)
		delete(backRepoMembrane.Map_MembraneDBID_MembranePtr, membraneID)
	}

	return
}

// CheckoutPhaseOneInstance takes a membraneDB that has been found in the DB, updates the backRepo and stages the
// models version of the membraneDB
func (backRepoMembrane *BackRepoMembraneStruct) CheckoutPhaseOneInstance(membraneDB *MembraneDB) (Error error) {

	membrane, ok := backRepoMembrane.Map_MembraneDBID_MembranePtr[membraneDB.ID]
	if !ok {
		membrane = new(models.Membrane)

		backRepoMembrane.Map_MembraneDBID_MembranePtr[membraneDB.ID] = membrane
		backRepoMembrane.Map_MembranePtr_MembraneDBID[membrane] = membraneDB.ID

		// append model store with the new element
		membrane.Name = membraneDB.Name_Data.String
		membrane.Stage(backRepoMembrane.GetStage())
	}
	membraneDB.CopyBasicFieldsToMembrane(membrane)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	membrane.Stage(backRepoMembrane.GetStage())

	// preserve pointer to membraneDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MembraneDBID_MembraneDB)[membraneDB hold variable pointers
	membraneDB_Data := *membraneDB
	preservedPtrToMembrane := &membraneDB_Data
	backRepoMembrane.Map_MembraneDBID_MembraneDB[membraneDB.ID] = preservedPtrToMembrane

	return
}

// BackRepoMembrane.CheckoutPhaseTwo Checkouts all staged instances of Membrane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMembrane *BackRepoMembraneStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, membraneDB := range backRepoMembrane.Map_MembraneDBID_MembraneDB {
		backRepoMembrane.CheckoutPhaseTwoInstance(backRepo, membraneDB)
	}
	return
}

// BackRepoMembrane.CheckoutPhaseTwoInstance Checkouts staged instances of Membrane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMembrane *BackRepoMembraneStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, membraneDB *MembraneDB) (Error error) {

	membrane := backRepoMembrane.Map_MembraneDBID_MembranePtr[membraneDB.ID]

	membraneDB.DecodePointers(backRepo, membrane)

	return
}

func (membraneDB *MembraneDB) DecodePointers(backRepo *BackRepoStruct, membrane *models.Membrane) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMembrane allows commit of a single membrane (if already staged)
func (backRepo *BackRepoStruct) CommitMembrane(membrane *models.Membrane) {
	backRepo.BackRepoMembrane.CommitPhaseOneInstance(membrane)
	if id, ok := backRepo.BackRepoMembrane.Map_MembranePtr_MembraneDBID[membrane]; ok {
		backRepo.BackRepoMembrane.CommitPhaseTwoInstance(backRepo, id, membrane)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMembrane allows checkout of a single membrane (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMembrane(membrane *models.Membrane) {
	// check if the membrane is staged
	if _, ok := backRepo.BackRepoMembrane.Map_MembranePtr_MembraneDBID[membrane]; ok {

		if id, ok := backRepo.BackRepoMembrane.Map_MembranePtr_MembraneDBID[membrane]; ok {
			var membraneDB MembraneDB
			membraneDB.ID = id

			if err := backRepo.BackRepoMembrane.db.First(&membraneDB, id).Error; err != nil {
				log.Fatalln("CheckoutMembrane : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMembrane.CheckoutPhaseOneInstance(&membraneDB)
			backRepo.BackRepoMembrane.CheckoutPhaseTwoInstance(backRepo, &membraneDB)
		}
	}
}

// CopyBasicFieldsFromMembrane
func (membraneDB *MembraneDB) CopyBasicFieldsFromMembrane(membrane *models.Membrane) {
	// insertion point for fields commit

	membraneDB.Name_Data.String = membrane.Name
	membraneDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMembrane_WOP
func (membraneDB *MembraneDB) CopyBasicFieldsFromMembrane_WOP(membrane *models.Membrane_WOP) {
	// insertion point for fields commit

	membraneDB.Name_Data.String = membrane.Name
	membraneDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMembraneWOP
func (membraneDB *MembraneDB) CopyBasicFieldsFromMembraneWOP(membrane *MembraneWOP) {
	// insertion point for fields commit

	membraneDB.Name_Data.String = membrane.Name
	membraneDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMembrane
func (membraneDB *MembraneDB) CopyBasicFieldsToMembrane(membrane *models.Membrane) {
	// insertion point for checkout of basic fields (back repo to stage)
	membrane.Name = membraneDB.Name_Data.String
}

// CopyBasicFieldsToMembrane_WOP
func (membraneDB *MembraneDB) CopyBasicFieldsToMembrane_WOP(membrane *models.Membrane_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	membrane.Name = membraneDB.Name_Data.String
}

// CopyBasicFieldsToMembraneWOP
func (membraneDB *MembraneDB) CopyBasicFieldsToMembraneWOP(membrane *MembraneWOP) {
	membrane.ID = int(membraneDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	membrane.Name = membraneDB.Name_Data.String
}

// Backup generates a json file from a slice of all MembraneDB instances in the backrepo
func (backRepoMembrane *BackRepoMembraneStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MembraneDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MembraneDB, 0)
	for _, membraneDB := range backRepoMembrane.Map_MembraneDBID_MembraneDB {
		forBackup = append(forBackup, membraneDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Membrane ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Membrane file", err.Error())
	}
}

// Backup generates a json file from a slice of all MembraneDB instances in the backrepo
func (backRepoMembrane *BackRepoMembraneStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MembraneDB, 0)
	for _, membraneDB := range backRepoMembrane.Map_MembraneDBID_MembraneDB {
		forBackup = append(forBackup, membraneDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Membrane")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Membrane_Fields, -1)
	for _, membraneDB := range forBackup {

		var membraneWOP MembraneWOP
		membraneDB.CopyBasicFieldsToMembraneWOP(&membraneWOP)

		row := sh.AddRow()
		row.WriteStruct(&membraneWOP, -1)
	}
}

// RestoreXL from the "Membrane" sheet all MembraneDB instances
func (backRepoMembrane *BackRepoMembraneStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMembraneid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Membrane"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMembrane.rowVisitorMembrane)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMembrane *BackRepoMembraneStruct) rowVisitorMembrane(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var membraneWOP MembraneWOP
		row.ReadStruct(&membraneWOP)

		// add the unmarshalled struct to the stage
		membraneDB := new(MembraneDB)
		membraneDB.CopyBasicFieldsFromMembraneWOP(&membraneWOP)

		membraneDB_ID_atBackupTime := membraneDB.ID
		membraneDB.ID = 0
		query := backRepoMembrane.db.Create(membraneDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMembrane.Map_MembraneDBID_MembraneDB[membraneDB.ID] = membraneDB
		BackRepoMembraneid_atBckpTime_newID[membraneDB_ID_atBackupTime] = membraneDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MembraneDB.json" in dirPath that stores an array
// of MembraneDB and stores it in the database
// the map BackRepoMembraneid_atBckpTime_newID is updated accordingly
func (backRepoMembrane *BackRepoMembraneStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMembraneid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MembraneDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Membrane file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MembraneDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MembraneDBID_MembraneDB
	for _, membraneDB := range forRestore {

		membraneDB_ID_atBackupTime := membraneDB.ID
		membraneDB.ID = 0
		query := backRepoMembrane.db.Create(membraneDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMembrane.Map_MembraneDBID_MembraneDB[membraneDB.ID] = membraneDB
		BackRepoMembraneid_atBckpTime_newID[membraneDB_ID_atBackupTime] = membraneDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Membrane file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Membrane>id_atBckpTime_newID
// to compute new index
func (backRepoMembrane *BackRepoMembraneStruct) RestorePhaseTwo() {

	for _, membraneDB := range backRepoMembrane.Map_MembraneDBID_MembraneDB {

		// next line of code is to avert unused variable compilation error
		_ = membraneDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMembrane.db.Model(membraneDB).Updates(*membraneDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMembrane.ResetReversePointers commits all staged instances of Membrane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMembrane *BackRepoMembraneStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, membrane := range backRepoMembrane.Map_MembraneDBID_MembranePtr {
		backRepoMembrane.ResetReversePointersInstance(backRepo, idx, membrane)
	}

	return
}

func (backRepoMembrane *BackRepoMembraneStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, membrane *models.Membrane) (Error error) {

	// fetch matching membraneDB
	if membraneDB, ok := backRepoMembrane.Map_MembraneDBID_MembraneDB[idx]; ok {
		_ = membraneDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMembraneid_atBckpTime_newID map[uint]uint
