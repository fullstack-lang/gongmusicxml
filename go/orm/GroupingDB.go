// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Grouping_sql sql.NullBool
var dummy_Grouping_time time.Duration
var dummy_Grouping_sort sort.Float64Slice

// GroupingAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model groupingAPI
type GroupingAPI struct {
	gorm.Model

	models.Grouping_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GroupingPointersEncoding GroupingPointersEncoding
}

// GroupingPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GroupingPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Feature is a slice of pointers to another Struct (optional or 0..1)
	Feature IntSlice `gorm:"type:TEXT"`
}

// GroupingDB describes a grouping in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model groupingDB
type GroupingDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field groupingDB.Name
	Name_Data sql.NullString

	// Declation for basic field groupingDB.Number
	Number_Data sql.NullString

	// Declation for basic field groupingDB.Member_of
	Member_of_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GroupingPointersEncoding
}

// GroupingDBs arrays groupingDBs
// swagger:response groupingDBsResponse
type GroupingDBs []GroupingDB

// GroupingDBResponse provides response
// swagger:response groupingDBResponse
type GroupingDBResponse struct {
	GroupingDB
}

// GroupingWOP is a Grouping without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GroupingWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Number string `xlsx:"2"`

	Member_of string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Grouping_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Number",
	"Member_of",
}

type BackRepoGroupingStruct struct {
	// stores GroupingDB according to their gorm ID
	Map_GroupingDBID_GroupingDB map[uint]*GroupingDB

	// stores GroupingDB ID according to Grouping address
	Map_GroupingPtr_GroupingDBID map[*models.Grouping]uint

	// stores Grouping according to their gorm ID
	Map_GroupingDBID_GroupingPtr map[uint]*models.Grouping

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGrouping *BackRepoGroupingStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGrouping.stage
	return
}

func (backRepoGrouping *BackRepoGroupingStruct) GetDB() *gorm.DB {
	return backRepoGrouping.db
}

// GetGroupingDBFromGroupingPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGrouping *BackRepoGroupingStruct) GetGroupingDBFromGroupingPtr(grouping *models.Grouping) (groupingDB *GroupingDB) {
	id := backRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping]
	groupingDB = backRepoGrouping.Map_GroupingDBID_GroupingDB[id]
	return
}

// BackRepoGrouping.CommitPhaseOne commits all staged instances of Grouping to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGrouping *BackRepoGroupingStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for grouping := range stage.Groupings {
		backRepoGrouping.CommitPhaseOneInstance(grouping)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, grouping := range backRepoGrouping.Map_GroupingDBID_GroupingPtr {
		if _, ok := stage.Groupings[grouping]; !ok {
			backRepoGrouping.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGrouping.CommitDeleteInstance commits deletion of Grouping to the BackRepo
func (backRepoGrouping *BackRepoGroupingStruct) CommitDeleteInstance(id uint) (Error error) {

	grouping := backRepoGrouping.Map_GroupingDBID_GroupingPtr[id]

	// grouping is not staged anymore, remove groupingDB
	groupingDB := backRepoGrouping.Map_GroupingDBID_GroupingDB[id]
	query := backRepoGrouping.db.Unscoped().Delete(&groupingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGrouping.Map_GroupingPtr_GroupingDBID, grouping)
	delete(backRepoGrouping.Map_GroupingDBID_GroupingPtr, id)
	delete(backRepoGrouping.Map_GroupingDBID_GroupingDB, id)

	return
}

// BackRepoGrouping.CommitPhaseOneInstance commits grouping staged instances of Grouping to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGrouping *BackRepoGroupingStruct) CommitPhaseOneInstance(grouping *models.Grouping) (Error error) {

	// check if the grouping is not commited yet
	if _, ok := backRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping]; ok {
		return
	}

	// initiate grouping
	var groupingDB GroupingDB
	groupingDB.CopyBasicFieldsFromGrouping(grouping)

	query := backRepoGrouping.db.Create(&groupingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping] = groupingDB.ID
	backRepoGrouping.Map_GroupingDBID_GroupingPtr[groupingDB.ID] = grouping
	backRepoGrouping.Map_GroupingDBID_GroupingDB[groupingDB.ID] = &groupingDB

	return
}

// BackRepoGrouping.CommitPhaseTwo commits all staged instances of Grouping to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrouping *BackRepoGroupingStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, grouping := range backRepoGrouping.Map_GroupingDBID_GroupingPtr {
		backRepoGrouping.CommitPhaseTwoInstance(backRepo, idx, grouping)
	}

	return
}

// BackRepoGrouping.CommitPhaseTwoInstance commits {{structname }} of models.Grouping to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrouping *BackRepoGroupingStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, grouping *models.Grouping) (Error error) {

	// fetch matching groupingDB
	if groupingDB, ok := backRepoGrouping.Map_GroupingDBID_GroupingDB[idx]; ok {

		groupingDB.CopyBasicFieldsFromGrouping(grouping)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		groupingDB.GroupingPointersEncoding.Feature = make([]int, 0)
		// 2. encode
		for _, featureAssocEnd := range grouping.Feature {
			featureAssocEnd_DB :=
				backRepo.BackRepoFeature.GetFeatureDBFromFeaturePtr(featureAssocEnd)
			
			// the stage might be inconsistant, meaning that the featureAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if featureAssocEnd_DB == nil {
				continue
			}
			
			groupingDB.GroupingPointersEncoding.Feature =
				append(groupingDB.GroupingPointersEncoding.Feature, int(featureAssocEnd_DB.ID))
		}

		query := backRepoGrouping.db.Save(&groupingDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Grouping intance %s", grouping.Name))
		return err
	}

	return
}

// BackRepoGrouping.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGrouping *BackRepoGroupingStruct) CheckoutPhaseOne() (Error error) {

	groupingDBArray := make([]GroupingDB, 0)
	query := backRepoGrouping.db.Find(&groupingDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	groupingInstancesToBeRemovedFromTheStage := make(map[*models.Grouping]any)
	for key, value := range backRepoGrouping.stage.Groupings {
		groupingInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, groupingDB := range groupingDBArray {
		backRepoGrouping.CheckoutPhaseOneInstance(&groupingDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		grouping, ok := backRepoGrouping.Map_GroupingDBID_GroupingPtr[groupingDB.ID]
		if ok {
			delete(groupingInstancesToBeRemovedFromTheStage, grouping)
		}
	}

	// remove from stage and back repo's 3 maps all groupings that are not in the checkout
	for grouping := range groupingInstancesToBeRemovedFromTheStage {
		grouping.Unstage(backRepoGrouping.GetStage())

		// remove instance from the back repo 3 maps
		groupingID := backRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping]
		delete(backRepoGrouping.Map_GroupingPtr_GroupingDBID, grouping)
		delete(backRepoGrouping.Map_GroupingDBID_GroupingDB, groupingID)
		delete(backRepoGrouping.Map_GroupingDBID_GroupingPtr, groupingID)
	}

	return
}

// CheckoutPhaseOneInstance takes a groupingDB that has been found in the DB, updates the backRepo and stages the
// models version of the groupingDB
func (backRepoGrouping *BackRepoGroupingStruct) CheckoutPhaseOneInstance(groupingDB *GroupingDB) (Error error) {

	grouping, ok := backRepoGrouping.Map_GroupingDBID_GroupingPtr[groupingDB.ID]
	if !ok {
		grouping = new(models.Grouping)

		backRepoGrouping.Map_GroupingDBID_GroupingPtr[groupingDB.ID] = grouping
		backRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping] = groupingDB.ID

		// append model store with the new element
		grouping.Name = groupingDB.Name_Data.String
		grouping.Stage(backRepoGrouping.GetStage())
	}
	groupingDB.CopyBasicFieldsToGrouping(grouping)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	grouping.Stage(backRepoGrouping.GetStage())

	// preserve pointer to groupingDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GroupingDBID_GroupingDB)[groupingDB hold variable pointers
	groupingDB_Data := *groupingDB
	preservedPtrToGrouping := &groupingDB_Data
	backRepoGrouping.Map_GroupingDBID_GroupingDB[groupingDB.ID] = preservedPtrToGrouping

	return
}

// BackRepoGrouping.CheckoutPhaseTwo Checkouts all staged instances of Grouping to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrouping *BackRepoGroupingStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, groupingDB := range backRepoGrouping.Map_GroupingDBID_GroupingDB {
		backRepoGrouping.CheckoutPhaseTwoInstance(backRepo, groupingDB)
	}
	return
}

// BackRepoGrouping.CheckoutPhaseTwoInstance Checkouts staged instances of Grouping to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrouping *BackRepoGroupingStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, groupingDB *GroupingDB) (Error error) {

	grouping := backRepoGrouping.Map_GroupingDBID_GroupingPtr[groupingDB.ID]

	groupingDB.DecodePointers(backRepo, grouping)

	return
}

func (groupingDB *GroupingDB) DecodePointers(backRepo *BackRepoStruct, grouping *models.Grouping) {

	// insertion point for checkout of pointer encoding
	// This loop redeem grouping.Feature in the stage from the encode in the back repo
	// It parses all FeatureDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	grouping.Feature = grouping.Feature[:0]
	for _, _Featureid := range groupingDB.GroupingPointersEncoding.Feature {
		grouping.Feature = append(grouping.Feature, backRepo.BackRepoFeature.Map_FeatureDBID_FeaturePtr[uint(_Featureid)])
	}

	return
}

// CommitGrouping allows commit of a single grouping (if already staged)
func (backRepo *BackRepoStruct) CommitGrouping(grouping *models.Grouping) {
	backRepo.BackRepoGrouping.CommitPhaseOneInstance(grouping)
	if id, ok := backRepo.BackRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping]; ok {
		backRepo.BackRepoGrouping.CommitPhaseTwoInstance(backRepo, id, grouping)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGrouping allows checkout of a single grouping (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGrouping(grouping *models.Grouping) {
	// check if the grouping is staged
	if _, ok := backRepo.BackRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping]; ok {

		if id, ok := backRepo.BackRepoGrouping.Map_GroupingPtr_GroupingDBID[grouping]; ok {
			var groupingDB GroupingDB
			groupingDB.ID = id

			if err := backRepo.BackRepoGrouping.db.First(&groupingDB, id).Error; err != nil {
				log.Fatalln("CheckoutGrouping : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGrouping.CheckoutPhaseOneInstance(&groupingDB)
			backRepo.BackRepoGrouping.CheckoutPhaseTwoInstance(backRepo, &groupingDB)
		}
	}
}

// CopyBasicFieldsFromGrouping
func (groupingDB *GroupingDB) CopyBasicFieldsFromGrouping(grouping *models.Grouping) {
	// insertion point for fields commit

	groupingDB.Name_Data.String = grouping.Name
	groupingDB.Name_Data.Valid = true

	groupingDB.Number_Data.String = grouping.Number
	groupingDB.Number_Data.Valid = true

	groupingDB.Member_of_Data.String = grouping.Member_of
	groupingDB.Member_of_Data.Valid = true
}

// CopyBasicFieldsFromGrouping_WOP
func (groupingDB *GroupingDB) CopyBasicFieldsFromGrouping_WOP(grouping *models.Grouping_WOP) {
	// insertion point for fields commit

	groupingDB.Name_Data.String = grouping.Name
	groupingDB.Name_Data.Valid = true

	groupingDB.Number_Data.String = grouping.Number
	groupingDB.Number_Data.Valid = true

	groupingDB.Member_of_Data.String = grouping.Member_of
	groupingDB.Member_of_Data.Valid = true
}

// CopyBasicFieldsFromGroupingWOP
func (groupingDB *GroupingDB) CopyBasicFieldsFromGroupingWOP(grouping *GroupingWOP) {
	// insertion point for fields commit

	groupingDB.Name_Data.String = grouping.Name
	groupingDB.Name_Data.Valid = true

	groupingDB.Number_Data.String = grouping.Number
	groupingDB.Number_Data.Valid = true

	groupingDB.Member_of_Data.String = grouping.Member_of
	groupingDB.Member_of_Data.Valid = true
}

// CopyBasicFieldsToGrouping
func (groupingDB *GroupingDB) CopyBasicFieldsToGrouping(grouping *models.Grouping) {
	// insertion point for checkout of basic fields (back repo to stage)
	grouping.Name = groupingDB.Name_Data.String
	grouping.Number = groupingDB.Number_Data.String
	grouping.Member_of = groupingDB.Member_of_Data.String
}

// CopyBasicFieldsToGrouping_WOP
func (groupingDB *GroupingDB) CopyBasicFieldsToGrouping_WOP(grouping *models.Grouping_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	grouping.Name = groupingDB.Name_Data.String
	grouping.Number = groupingDB.Number_Data.String
	grouping.Member_of = groupingDB.Member_of_Data.String
}

// CopyBasicFieldsToGroupingWOP
func (groupingDB *GroupingDB) CopyBasicFieldsToGroupingWOP(grouping *GroupingWOP) {
	grouping.ID = int(groupingDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	grouping.Name = groupingDB.Name_Data.String
	grouping.Number = groupingDB.Number_Data.String
	grouping.Member_of = groupingDB.Member_of_Data.String
}

// Backup generates a json file from a slice of all GroupingDB instances in the backrepo
func (backRepoGrouping *BackRepoGroupingStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GroupingDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GroupingDB, 0)
	for _, groupingDB := range backRepoGrouping.Map_GroupingDBID_GroupingDB {
		forBackup = append(forBackup, groupingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Grouping ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Grouping file", err.Error())
	}
}

// Backup generates a json file from a slice of all GroupingDB instances in the backrepo
func (backRepoGrouping *BackRepoGroupingStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GroupingDB, 0)
	for _, groupingDB := range backRepoGrouping.Map_GroupingDBID_GroupingDB {
		forBackup = append(forBackup, groupingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Grouping")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Grouping_Fields, -1)
	for _, groupingDB := range forBackup {

		var groupingWOP GroupingWOP
		groupingDB.CopyBasicFieldsToGroupingWOP(&groupingWOP)

		row := sh.AddRow()
		row.WriteStruct(&groupingWOP, -1)
	}
}

// RestoreXL from the "Grouping" sheet all GroupingDB instances
func (backRepoGrouping *BackRepoGroupingStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGroupingid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Grouping"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGrouping.rowVisitorGrouping)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGrouping *BackRepoGroupingStruct) rowVisitorGrouping(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var groupingWOP GroupingWOP
		row.ReadStruct(&groupingWOP)

		// add the unmarshalled struct to the stage
		groupingDB := new(GroupingDB)
		groupingDB.CopyBasicFieldsFromGroupingWOP(&groupingWOP)

		groupingDB_ID_atBackupTime := groupingDB.ID
		groupingDB.ID = 0
		query := backRepoGrouping.db.Create(groupingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGrouping.Map_GroupingDBID_GroupingDB[groupingDB.ID] = groupingDB
		BackRepoGroupingid_atBckpTime_newID[groupingDB_ID_atBackupTime] = groupingDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GroupingDB.json" in dirPath that stores an array
// of GroupingDB and stores it in the database
// the map BackRepoGroupingid_atBckpTime_newID is updated accordingly
func (backRepoGrouping *BackRepoGroupingStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGroupingid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GroupingDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Grouping file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GroupingDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GroupingDBID_GroupingDB
	for _, groupingDB := range forRestore {

		groupingDB_ID_atBackupTime := groupingDB.ID
		groupingDB.ID = 0
		query := backRepoGrouping.db.Create(groupingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGrouping.Map_GroupingDBID_GroupingDB[groupingDB.ID] = groupingDB
		BackRepoGroupingid_atBckpTime_newID[groupingDB_ID_atBackupTime] = groupingDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Grouping file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Grouping>id_atBckpTime_newID
// to compute new index
func (backRepoGrouping *BackRepoGroupingStruct) RestorePhaseTwo() {

	for _, groupingDB := range backRepoGrouping.Map_GroupingDBID_GroupingDB {

		// next line of code is to avert unused variable compilation error
		_ = groupingDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGrouping.db.Model(groupingDB).Updates(*groupingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGrouping.ResetReversePointers commits all staged instances of Grouping to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrouping *BackRepoGroupingStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, grouping := range backRepoGrouping.Map_GroupingDBID_GroupingPtr {
		backRepoGrouping.ResetReversePointersInstance(backRepo, idx, grouping)
	}

	return
}

func (backRepoGrouping *BackRepoGroupingStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, grouping *models.Grouping) (Error error) {

	// fetch matching groupingDB
	if groupingDB, ok := backRepoGrouping.Map_GroupingDBID_GroupingDB[idx]; ok {
		_ = groupingDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGroupingid_atBckpTime_newID map[uint]uint
