// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Opus_sql sql.NullBool
var dummy_Opus_time time.Duration
var dummy_Opus_sort sort.Float64Slice

// OpusAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model opusAPI
type OpusAPI struct {
	gorm.Model

	models.Opus_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	OpusPointersEncoding OpusPointersEncoding
}

// OpusPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type OpusPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// OpusDB describes a opus in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model opusDB
type OpusDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field opusDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	OpusPointersEncoding
}

// OpusDBs arrays opusDBs
// swagger:response opusDBsResponse
type OpusDBs []OpusDB

// OpusDBResponse provides response
// swagger:response opusDBResponse
type OpusDBResponse struct {
	OpusDB
}

// OpusWOP is a Opus without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type OpusWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Opus_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoOpusStruct struct {
	// stores OpusDB according to their gorm ID
	Map_OpusDBID_OpusDB map[uint]*OpusDB

	// stores OpusDB ID according to Opus address
	Map_OpusPtr_OpusDBID map[*models.Opus]uint

	// stores Opus according to their gorm ID
	Map_OpusDBID_OpusPtr map[uint]*models.Opus

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOpus *BackRepoOpusStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOpus.stage
	return
}

func (backRepoOpus *BackRepoOpusStruct) GetDB() *gorm.DB {
	return backRepoOpus.db
}

// GetOpusDBFromOpusPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOpus *BackRepoOpusStruct) GetOpusDBFromOpusPtr(opus *models.Opus) (opusDB *OpusDB) {
	id := backRepoOpus.Map_OpusPtr_OpusDBID[opus]
	opusDB = backRepoOpus.Map_OpusDBID_OpusDB[id]
	return
}

// BackRepoOpus.CommitPhaseOne commits all staged instances of Opus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOpus *BackRepoOpusStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for opus := range stage.Opuss {
		backRepoOpus.CommitPhaseOneInstance(opus)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, opus := range backRepoOpus.Map_OpusDBID_OpusPtr {
		if _, ok := stage.Opuss[opus]; !ok {
			backRepoOpus.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOpus.CommitDeleteInstance commits deletion of Opus to the BackRepo
func (backRepoOpus *BackRepoOpusStruct) CommitDeleteInstance(id uint) (Error error) {

	opus := backRepoOpus.Map_OpusDBID_OpusPtr[id]

	// opus is not staged anymore, remove opusDB
	opusDB := backRepoOpus.Map_OpusDBID_OpusDB[id]
	query := backRepoOpus.db.Unscoped().Delete(&opusDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOpus.Map_OpusPtr_OpusDBID, opus)
	delete(backRepoOpus.Map_OpusDBID_OpusPtr, id)
	delete(backRepoOpus.Map_OpusDBID_OpusDB, id)

	return
}

// BackRepoOpus.CommitPhaseOneInstance commits opus staged instances of Opus to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOpus *BackRepoOpusStruct) CommitPhaseOneInstance(opus *models.Opus) (Error error) {

	// check if the opus is not commited yet
	if _, ok := backRepoOpus.Map_OpusPtr_OpusDBID[opus]; ok {
		return
	}

	// initiate opus
	var opusDB OpusDB
	opusDB.CopyBasicFieldsFromOpus(opus)

	query := backRepoOpus.db.Create(&opusDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOpus.Map_OpusPtr_OpusDBID[opus] = opusDB.ID
	backRepoOpus.Map_OpusDBID_OpusPtr[opusDB.ID] = opus
	backRepoOpus.Map_OpusDBID_OpusDB[opusDB.ID] = &opusDB

	return
}

// BackRepoOpus.CommitPhaseTwo commits all staged instances of Opus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpus *BackRepoOpusStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, opus := range backRepoOpus.Map_OpusDBID_OpusPtr {
		backRepoOpus.CommitPhaseTwoInstance(backRepo, idx, opus)
	}

	return
}

// BackRepoOpus.CommitPhaseTwoInstance commits {{structname }} of models.Opus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpus *BackRepoOpusStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, opus *models.Opus) (Error error) {

	// fetch matching opusDB
	if opusDB, ok := backRepoOpus.Map_OpusDBID_OpusDB[idx]; ok {

		opusDB.CopyBasicFieldsFromOpus(opus)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOpus.db.Save(&opusDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Opus intance %s", opus.Name))
		return err
	}

	return
}

// BackRepoOpus.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOpus *BackRepoOpusStruct) CheckoutPhaseOne() (Error error) {

	opusDBArray := make([]OpusDB, 0)
	query := backRepoOpus.db.Find(&opusDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	opusInstancesToBeRemovedFromTheStage := make(map[*models.Opus]any)
	for key, value := range backRepoOpus.stage.Opuss {
		opusInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, opusDB := range opusDBArray {
		backRepoOpus.CheckoutPhaseOneInstance(&opusDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		opus, ok := backRepoOpus.Map_OpusDBID_OpusPtr[opusDB.ID]
		if ok {
			delete(opusInstancesToBeRemovedFromTheStage, opus)
		}
	}

	// remove from stage and back repo's 3 maps all opuss that are not in the checkout
	for opus := range opusInstancesToBeRemovedFromTheStage {
		opus.Unstage(backRepoOpus.GetStage())

		// remove instance from the back repo 3 maps
		opusID := backRepoOpus.Map_OpusPtr_OpusDBID[opus]
		delete(backRepoOpus.Map_OpusPtr_OpusDBID, opus)
		delete(backRepoOpus.Map_OpusDBID_OpusDB, opusID)
		delete(backRepoOpus.Map_OpusDBID_OpusPtr, opusID)
	}

	return
}

// CheckoutPhaseOneInstance takes a opusDB that has been found in the DB, updates the backRepo and stages the
// models version of the opusDB
func (backRepoOpus *BackRepoOpusStruct) CheckoutPhaseOneInstance(opusDB *OpusDB) (Error error) {

	opus, ok := backRepoOpus.Map_OpusDBID_OpusPtr[opusDB.ID]
	if !ok {
		opus = new(models.Opus)

		backRepoOpus.Map_OpusDBID_OpusPtr[opusDB.ID] = opus
		backRepoOpus.Map_OpusPtr_OpusDBID[opus] = opusDB.ID

		// append model store with the new element
		opus.Name = opusDB.Name_Data.String
		opus.Stage(backRepoOpus.GetStage())
	}
	opusDB.CopyBasicFieldsToOpus(opus)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	opus.Stage(backRepoOpus.GetStage())

	// preserve pointer to opusDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_OpusDBID_OpusDB)[opusDB hold variable pointers
	opusDB_Data := *opusDB
	preservedPtrToOpus := &opusDB_Data
	backRepoOpus.Map_OpusDBID_OpusDB[opusDB.ID] = preservedPtrToOpus

	return
}

// BackRepoOpus.CheckoutPhaseTwo Checkouts all staged instances of Opus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpus *BackRepoOpusStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, opusDB := range backRepoOpus.Map_OpusDBID_OpusDB {
		backRepoOpus.CheckoutPhaseTwoInstance(backRepo, opusDB)
	}
	return
}

// BackRepoOpus.CheckoutPhaseTwoInstance Checkouts staged instances of Opus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpus *BackRepoOpusStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, opusDB *OpusDB) (Error error) {

	opus := backRepoOpus.Map_OpusDBID_OpusPtr[opusDB.ID]

	opusDB.DecodePointers(backRepo, opus)

	return
}

func (opusDB *OpusDB) DecodePointers(backRepo *BackRepoStruct, opus *models.Opus) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOpus allows commit of a single opus (if already staged)
func (backRepo *BackRepoStruct) CommitOpus(opus *models.Opus) {
	backRepo.BackRepoOpus.CommitPhaseOneInstance(opus)
	if id, ok := backRepo.BackRepoOpus.Map_OpusPtr_OpusDBID[opus]; ok {
		backRepo.BackRepoOpus.CommitPhaseTwoInstance(backRepo, id, opus)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOpus allows checkout of a single opus (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOpus(opus *models.Opus) {
	// check if the opus is staged
	if _, ok := backRepo.BackRepoOpus.Map_OpusPtr_OpusDBID[opus]; ok {

		if id, ok := backRepo.BackRepoOpus.Map_OpusPtr_OpusDBID[opus]; ok {
			var opusDB OpusDB
			opusDB.ID = id

			if err := backRepo.BackRepoOpus.db.First(&opusDB, id).Error; err != nil {
				log.Fatalln("CheckoutOpus : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOpus.CheckoutPhaseOneInstance(&opusDB)
			backRepo.BackRepoOpus.CheckoutPhaseTwoInstance(backRepo, &opusDB)
		}
	}
}

// CopyBasicFieldsFromOpus
func (opusDB *OpusDB) CopyBasicFieldsFromOpus(opus *models.Opus) {
	// insertion point for fields commit

	opusDB.Name_Data.String = opus.Name
	opusDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOpus_WOP
func (opusDB *OpusDB) CopyBasicFieldsFromOpus_WOP(opus *models.Opus_WOP) {
	// insertion point for fields commit

	opusDB.Name_Data.String = opus.Name
	opusDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOpusWOP
func (opusDB *OpusDB) CopyBasicFieldsFromOpusWOP(opus *OpusWOP) {
	// insertion point for fields commit

	opusDB.Name_Data.String = opus.Name
	opusDB.Name_Data.Valid = true
}

// CopyBasicFieldsToOpus
func (opusDB *OpusDB) CopyBasicFieldsToOpus(opus *models.Opus) {
	// insertion point for checkout of basic fields (back repo to stage)
	opus.Name = opusDB.Name_Data.String
}

// CopyBasicFieldsToOpus_WOP
func (opusDB *OpusDB) CopyBasicFieldsToOpus_WOP(opus *models.Opus_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	opus.Name = opusDB.Name_Data.String
}

// CopyBasicFieldsToOpusWOP
func (opusDB *OpusDB) CopyBasicFieldsToOpusWOP(opus *OpusWOP) {
	opus.ID = int(opusDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	opus.Name = opusDB.Name_Data.String
}

// Backup generates a json file from a slice of all OpusDB instances in the backrepo
func (backRepoOpus *BackRepoOpusStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "OpusDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OpusDB, 0)
	for _, opusDB := range backRepoOpus.Map_OpusDBID_OpusDB {
		forBackup = append(forBackup, opusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Opus ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Opus file", err.Error())
	}
}

// Backup generates a json file from a slice of all OpusDB instances in the backrepo
func (backRepoOpus *BackRepoOpusStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OpusDB, 0)
	for _, opusDB := range backRepoOpus.Map_OpusDBID_OpusDB {
		forBackup = append(forBackup, opusDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Opus")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Opus_Fields, -1)
	for _, opusDB := range forBackup {

		var opusWOP OpusWOP
		opusDB.CopyBasicFieldsToOpusWOP(&opusWOP)

		row := sh.AddRow()
		row.WriteStruct(&opusWOP, -1)
	}
}

// RestoreXL from the "Opus" sheet all OpusDB instances
func (backRepoOpus *BackRepoOpusStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOpusid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Opus"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOpus.rowVisitorOpus)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOpus *BackRepoOpusStruct) rowVisitorOpus(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var opusWOP OpusWOP
		row.ReadStruct(&opusWOP)

		// add the unmarshalled struct to the stage
		opusDB := new(OpusDB)
		opusDB.CopyBasicFieldsFromOpusWOP(&opusWOP)

		opusDB_ID_atBackupTime := opusDB.ID
		opusDB.ID = 0
		query := backRepoOpus.db.Create(opusDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOpus.Map_OpusDBID_OpusDB[opusDB.ID] = opusDB
		BackRepoOpusid_atBckpTime_newID[opusDB_ID_atBackupTime] = opusDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "OpusDB.json" in dirPath that stores an array
// of OpusDB and stores it in the database
// the map BackRepoOpusid_atBckpTime_newID is updated accordingly
func (backRepoOpus *BackRepoOpusStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOpusid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "OpusDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Opus file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*OpusDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_OpusDBID_OpusDB
	for _, opusDB := range forRestore {

		opusDB_ID_atBackupTime := opusDB.ID
		opusDB.ID = 0
		query := backRepoOpus.db.Create(opusDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOpus.Map_OpusDBID_OpusDB[opusDB.ID] = opusDB
		BackRepoOpusid_atBckpTime_newID[opusDB_ID_atBackupTime] = opusDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Opus file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Opus>id_atBckpTime_newID
// to compute new index
func (backRepoOpus *BackRepoOpusStruct) RestorePhaseTwo() {

	for _, opusDB := range backRepoOpus.Map_OpusDBID_OpusDB {

		// next line of code is to avert unused variable compilation error
		_ = opusDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOpus.db.Model(opusDB).Updates(*opusDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOpus.ResetReversePointers commits all staged instances of Opus to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOpus *BackRepoOpusStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, opus := range backRepoOpus.Map_OpusDBID_OpusPtr {
		backRepoOpus.ResetReversePointersInstance(backRepo, idx, opus)
	}

	return
}

func (backRepoOpus *BackRepoOpusStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, opus *models.Opus) (Error error) {

	// fetch matching opusDB
	if opusDB, ok := backRepoOpus.Map_OpusDBID_OpusDB[idx]; ok {
		_ = opusDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOpusid_atBckpTime_newID map[uint]uint
