// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Degree_alter_sql sql.NullBool
var dummy_Degree_alter_time time.Duration
var dummy_Degree_alter_sort sort.Float64Slice

// Degree_alterAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model degree_alterAPI
type Degree_alterAPI struct {
	gorm.Model

	models.Degree_alter_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Degree_alterPointersEncoding Degree_alterPointersEncoding
}

// Degree_alterPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Degree_alterPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Degree_alterDB describes a degree_alter in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model degree_alterDB
type Degree_alterDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field degree_alterDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Degree_alterPointersEncoding
}

// Degree_alterDBs arrays degree_alterDBs
// swagger:response degree_alterDBsResponse
type Degree_alterDBs []Degree_alterDB

// Degree_alterDBResponse provides response
// swagger:response degree_alterDBResponse
type Degree_alterDBResponse struct {
	Degree_alterDB
}

// Degree_alterWOP is a Degree_alter without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Degree_alterWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Degree_alter_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDegree_alterStruct struct {
	// stores Degree_alterDB according to their gorm ID
	Map_Degree_alterDBID_Degree_alterDB map[uint]*Degree_alterDB

	// stores Degree_alterDB ID according to Degree_alter address
	Map_Degree_alterPtr_Degree_alterDBID map[*models.Degree_alter]uint

	// stores Degree_alter according to their gorm ID
	Map_Degree_alterDBID_Degree_alterPtr map[uint]*models.Degree_alter

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDegree_alter *BackRepoDegree_alterStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDegree_alter.stage
	return
}

func (backRepoDegree_alter *BackRepoDegree_alterStruct) GetDB() *gorm.DB {
	return backRepoDegree_alter.db
}

// GetDegree_alterDBFromDegree_alterPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDegree_alter *BackRepoDegree_alterStruct) GetDegree_alterDBFromDegree_alterPtr(degree_alter *models.Degree_alter) (degree_alterDB *Degree_alterDB) {
	id := backRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter]
	degree_alterDB = backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[id]
	return
}

// BackRepoDegree_alter.CommitPhaseOne commits all staged instances of Degree_alter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for degree_alter := range stage.Degree_alters {
		backRepoDegree_alter.CommitPhaseOneInstance(degree_alter)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, degree_alter := range backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr {
		if _, ok := stage.Degree_alters[degree_alter]; !ok {
			backRepoDegree_alter.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDegree_alter.CommitDeleteInstance commits deletion of Degree_alter to the BackRepo
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CommitDeleteInstance(id uint) (Error error) {

	degree_alter := backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr[id]

	// degree_alter is not staged anymore, remove degree_alterDB
	degree_alterDB := backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[id]
	query := backRepoDegree_alter.db.Unscoped().Delete(&degree_alterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID, degree_alter)
	delete(backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr, id)
	delete(backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB, id)

	return
}

// BackRepoDegree_alter.CommitPhaseOneInstance commits degree_alter staged instances of Degree_alter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CommitPhaseOneInstance(degree_alter *models.Degree_alter) (Error error) {

	// check if the degree_alter is not commited yet
	if _, ok := backRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter]; ok {
		return
	}

	// initiate degree_alter
	var degree_alterDB Degree_alterDB
	degree_alterDB.CopyBasicFieldsFromDegree_alter(degree_alter)

	query := backRepoDegree_alter.db.Create(&degree_alterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter] = degree_alterDB.ID
	backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr[degree_alterDB.ID] = degree_alter
	backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[degree_alterDB.ID] = &degree_alterDB

	return
}

// BackRepoDegree_alter.CommitPhaseTwo commits all staged instances of Degree_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, degree_alter := range backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr {
		backRepoDegree_alter.CommitPhaseTwoInstance(backRepo, idx, degree_alter)
	}

	return
}

// BackRepoDegree_alter.CommitPhaseTwoInstance commits {{structname }} of models.Degree_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, degree_alter *models.Degree_alter) (Error error) {

	// fetch matching degree_alterDB
	if degree_alterDB, ok := backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[idx]; ok {

		degree_alterDB.CopyBasicFieldsFromDegree_alter(degree_alter)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDegree_alter.db.Save(&degree_alterDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Degree_alter intance %s", degree_alter.Name))
		return err
	}

	return
}

// BackRepoDegree_alter.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CheckoutPhaseOne() (Error error) {

	degree_alterDBArray := make([]Degree_alterDB, 0)
	query := backRepoDegree_alter.db.Find(&degree_alterDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	degree_alterInstancesToBeRemovedFromTheStage := make(map[*models.Degree_alter]any)
	for key, value := range backRepoDegree_alter.stage.Degree_alters {
		degree_alterInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, degree_alterDB := range degree_alterDBArray {
		backRepoDegree_alter.CheckoutPhaseOneInstance(&degree_alterDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		degree_alter, ok := backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr[degree_alterDB.ID]
		if ok {
			delete(degree_alterInstancesToBeRemovedFromTheStage, degree_alter)
		}
	}

	// remove from stage and back repo's 3 maps all degree_alters that are not in the checkout
	for degree_alter := range degree_alterInstancesToBeRemovedFromTheStage {
		degree_alter.Unstage(backRepoDegree_alter.GetStage())

		// remove instance from the back repo 3 maps
		degree_alterID := backRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter]
		delete(backRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID, degree_alter)
		delete(backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB, degree_alterID)
		delete(backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr, degree_alterID)
	}

	return
}

// CheckoutPhaseOneInstance takes a degree_alterDB that has been found in the DB, updates the backRepo and stages the
// models version of the degree_alterDB
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CheckoutPhaseOneInstance(degree_alterDB *Degree_alterDB) (Error error) {

	degree_alter, ok := backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr[degree_alterDB.ID]
	if !ok {
		degree_alter = new(models.Degree_alter)

		backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr[degree_alterDB.ID] = degree_alter
		backRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter] = degree_alterDB.ID

		// append model store with the new element
		degree_alter.Name = degree_alterDB.Name_Data.String
		degree_alter.Stage(backRepoDegree_alter.GetStage())
	}
	degree_alterDB.CopyBasicFieldsToDegree_alter(degree_alter)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	degree_alter.Stage(backRepoDegree_alter.GetStage())

	// preserve pointer to degree_alterDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Degree_alterDBID_Degree_alterDB)[degree_alterDB hold variable pointers
	degree_alterDB_Data := *degree_alterDB
	preservedPtrToDegree_alter := &degree_alterDB_Data
	backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[degree_alterDB.ID] = preservedPtrToDegree_alter

	return
}

// BackRepoDegree_alter.CheckoutPhaseTwo Checkouts all staged instances of Degree_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, degree_alterDB := range backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB {
		backRepoDegree_alter.CheckoutPhaseTwoInstance(backRepo, degree_alterDB)
	}
	return
}

// BackRepoDegree_alter.CheckoutPhaseTwoInstance Checkouts staged instances of Degree_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_alter *BackRepoDegree_alterStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, degree_alterDB *Degree_alterDB) (Error error) {

	degree_alter := backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr[degree_alterDB.ID]

	degree_alterDB.DecodePointers(backRepo, degree_alter)

	return
}

func (degree_alterDB *Degree_alterDB) DecodePointers(backRepo *BackRepoStruct, degree_alter *models.Degree_alter) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDegree_alter allows commit of a single degree_alter (if already staged)
func (backRepo *BackRepoStruct) CommitDegree_alter(degree_alter *models.Degree_alter) {
	backRepo.BackRepoDegree_alter.CommitPhaseOneInstance(degree_alter)
	if id, ok := backRepo.BackRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter]; ok {
		backRepo.BackRepoDegree_alter.CommitPhaseTwoInstance(backRepo, id, degree_alter)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDegree_alter allows checkout of a single degree_alter (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDegree_alter(degree_alter *models.Degree_alter) {
	// check if the degree_alter is staged
	if _, ok := backRepo.BackRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter]; ok {

		if id, ok := backRepo.BackRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree_alter]; ok {
			var degree_alterDB Degree_alterDB
			degree_alterDB.ID = id

			if err := backRepo.BackRepoDegree_alter.db.First(&degree_alterDB, id).Error; err != nil {
				log.Fatalln("CheckoutDegree_alter : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDegree_alter.CheckoutPhaseOneInstance(&degree_alterDB)
			backRepo.BackRepoDegree_alter.CheckoutPhaseTwoInstance(backRepo, &degree_alterDB)
		}
	}
}

// CopyBasicFieldsFromDegree_alter
func (degree_alterDB *Degree_alterDB) CopyBasicFieldsFromDegree_alter(degree_alter *models.Degree_alter) {
	// insertion point for fields commit

	degree_alterDB.Name_Data.String = degree_alter.Name
	degree_alterDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDegree_alter_WOP
func (degree_alterDB *Degree_alterDB) CopyBasicFieldsFromDegree_alter_WOP(degree_alter *models.Degree_alter_WOP) {
	// insertion point for fields commit

	degree_alterDB.Name_Data.String = degree_alter.Name
	degree_alterDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDegree_alterWOP
func (degree_alterDB *Degree_alterDB) CopyBasicFieldsFromDegree_alterWOP(degree_alter *Degree_alterWOP) {
	// insertion point for fields commit

	degree_alterDB.Name_Data.String = degree_alter.Name
	degree_alterDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDegree_alter
func (degree_alterDB *Degree_alterDB) CopyBasicFieldsToDegree_alter(degree_alter *models.Degree_alter) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree_alter.Name = degree_alterDB.Name_Data.String
}

// CopyBasicFieldsToDegree_alter_WOP
func (degree_alterDB *Degree_alterDB) CopyBasicFieldsToDegree_alter_WOP(degree_alter *models.Degree_alter_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree_alter.Name = degree_alterDB.Name_Data.String
}

// CopyBasicFieldsToDegree_alterWOP
func (degree_alterDB *Degree_alterDB) CopyBasicFieldsToDegree_alterWOP(degree_alter *Degree_alterWOP) {
	degree_alter.ID = int(degree_alterDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	degree_alter.Name = degree_alterDB.Name_Data.String
}

// Backup generates a json file from a slice of all Degree_alterDB instances in the backrepo
func (backRepoDegree_alter *BackRepoDegree_alterStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Degree_alterDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Degree_alterDB, 0)
	for _, degree_alterDB := range backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB {
		forBackup = append(forBackup, degree_alterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Degree_alter ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Degree_alter file", err.Error())
	}
}

// Backup generates a json file from a slice of all Degree_alterDB instances in the backrepo
func (backRepoDegree_alter *BackRepoDegree_alterStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Degree_alterDB, 0)
	for _, degree_alterDB := range backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB {
		forBackup = append(forBackup, degree_alterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Degree_alter")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Degree_alter_Fields, -1)
	for _, degree_alterDB := range forBackup {

		var degree_alterWOP Degree_alterWOP
		degree_alterDB.CopyBasicFieldsToDegree_alterWOP(&degree_alterWOP)

		row := sh.AddRow()
		row.WriteStruct(&degree_alterWOP, -1)
	}
}

// RestoreXL from the "Degree_alter" sheet all Degree_alterDB instances
func (backRepoDegree_alter *BackRepoDegree_alterStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDegree_alterid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Degree_alter"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDegree_alter.rowVisitorDegree_alter)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDegree_alter *BackRepoDegree_alterStruct) rowVisitorDegree_alter(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var degree_alterWOP Degree_alterWOP
		row.ReadStruct(&degree_alterWOP)

		// add the unmarshalled struct to the stage
		degree_alterDB := new(Degree_alterDB)
		degree_alterDB.CopyBasicFieldsFromDegree_alterWOP(&degree_alterWOP)

		degree_alterDB_ID_atBackupTime := degree_alterDB.ID
		degree_alterDB.ID = 0
		query := backRepoDegree_alter.db.Create(degree_alterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[degree_alterDB.ID] = degree_alterDB
		BackRepoDegree_alterid_atBckpTime_newID[degree_alterDB_ID_atBackupTime] = degree_alterDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Degree_alterDB.json" in dirPath that stores an array
// of Degree_alterDB and stores it in the database
// the map BackRepoDegree_alterid_atBckpTime_newID is updated accordingly
func (backRepoDegree_alter *BackRepoDegree_alterStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDegree_alterid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Degree_alterDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Degree_alter file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Degree_alterDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Degree_alterDBID_Degree_alterDB
	for _, degree_alterDB := range forRestore {

		degree_alterDB_ID_atBackupTime := degree_alterDB.ID
		degree_alterDB.ID = 0
		query := backRepoDegree_alter.db.Create(degree_alterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[degree_alterDB.ID] = degree_alterDB
		BackRepoDegree_alterid_atBckpTime_newID[degree_alterDB_ID_atBackupTime] = degree_alterDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Degree_alter file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Degree_alter>id_atBckpTime_newID
// to compute new index
func (backRepoDegree_alter *BackRepoDegree_alterStruct) RestorePhaseTwo() {

	for _, degree_alterDB := range backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB {

		// next line of code is to avert unused variable compilation error
		_ = degree_alterDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDegree_alter.db.Model(degree_alterDB).Updates(*degree_alterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDegree_alter.ResetReversePointers commits all staged instances of Degree_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_alter *BackRepoDegree_alterStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, degree_alter := range backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr {
		backRepoDegree_alter.ResetReversePointersInstance(backRepo, idx, degree_alter)
	}

	return
}

func (backRepoDegree_alter *BackRepoDegree_alterStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, degree_alter *models.Degree_alter) (Error error) {

	// fetch matching degree_alterDB
	if degree_alterDB, ok := backRepoDegree_alter.Map_Degree_alterDBID_Degree_alterDB[idx]; ok {
		_ = degree_alterDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDegree_alterid_atBckpTime_newID map[uint]uint
