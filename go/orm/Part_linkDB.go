// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Part_link_sql sql.NullBool
var dummy_Part_link_time time.Duration
var dummy_Part_link_sort sort.Float64Slice

// Part_linkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model part_linkAPI
type Part_linkAPI struct {
	gorm.Model

	models.Part_link_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Part_linkPointersEncoding Part_linkPointersEncoding
}

// Part_linkPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Part_linkPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Instrument_link is a slice of pointers to another Struct (optional or 0..1)
	Instrument_link IntSlice `gorm:"type:TEXT"`
}

// Part_linkDB describes a part_link in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model part_linkDB
type Part_linkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field part_linkDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Part_linkPointersEncoding
}

// Part_linkDBs arrays part_linkDBs
// swagger:response part_linkDBsResponse
type Part_linkDBs []Part_linkDB

// Part_linkDBResponse provides response
// swagger:response part_linkDBResponse
type Part_linkDBResponse struct {
	Part_linkDB
}

// Part_linkWOP is a Part_link without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Part_linkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Part_link_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPart_linkStruct struct {
	// stores Part_linkDB according to their gorm ID
	Map_Part_linkDBID_Part_linkDB map[uint]*Part_linkDB

	// stores Part_linkDB ID according to Part_link address
	Map_Part_linkPtr_Part_linkDBID map[*models.Part_link]uint

	// stores Part_link according to their gorm ID
	Map_Part_linkDBID_Part_linkPtr map[uint]*models.Part_link

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPart_link *BackRepoPart_linkStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPart_link.stage
	return
}

func (backRepoPart_link *BackRepoPart_linkStruct) GetDB() *gorm.DB {
	return backRepoPart_link.db
}

// GetPart_linkDBFromPart_linkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPart_link *BackRepoPart_linkStruct) GetPart_linkDBFromPart_linkPtr(part_link *models.Part_link) (part_linkDB *Part_linkDB) {
	id := backRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link]
	part_linkDB = backRepoPart_link.Map_Part_linkDBID_Part_linkDB[id]
	return
}

// BackRepoPart_link.CommitPhaseOne commits all staged instances of Part_link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_link *BackRepoPart_linkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for part_link := range stage.Part_links {
		backRepoPart_link.CommitPhaseOneInstance(part_link)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, part_link := range backRepoPart_link.Map_Part_linkDBID_Part_linkPtr {
		if _, ok := stage.Part_links[part_link]; !ok {
			backRepoPart_link.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPart_link.CommitDeleteInstance commits deletion of Part_link to the BackRepo
func (backRepoPart_link *BackRepoPart_linkStruct) CommitDeleteInstance(id uint) (Error error) {

	part_link := backRepoPart_link.Map_Part_linkDBID_Part_linkPtr[id]

	// part_link is not staged anymore, remove part_linkDB
	part_linkDB := backRepoPart_link.Map_Part_linkDBID_Part_linkDB[id]
	query := backRepoPart_link.db.Unscoped().Delete(&part_linkDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPart_link.Map_Part_linkPtr_Part_linkDBID, part_link)
	delete(backRepoPart_link.Map_Part_linkDBID_Part_linkPtr, id)
	delete(backRepoPart_link.Map_Part_linkDBID_Part_linkDB, id)

	return
}

// BackRepoPart_link.CommitPhaseOneInstance commits part_link staged instances of Part_link to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_link *BackRepoPart_linkStruct) CommitPhaseOneInstance(part_link *models.Part_link) (Error error) {

	// check if the part_link is not commited yet
	if _, ok := backRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link]; ok {
		return
	}

	// initiate part_link
	var part_linkDB Part_linkDB
	part_linkDB.CopyBasicFieldsFromPart_link(part_link)

	query := backRepoPart_link.db.Create(&part_linkDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link] = part_linkDB.ID
	backRepoPart_link.Map_Part_linkDBID_Part_linkPtr[part_linkDB.ID] = part_link
	backRepoPart_link.Map_Part_linkDBID_Part_linkDB[part_linkDB.ID] = &part_linkDB

	return
}

// BackRepoPart_link.CommitPhaseTwo commits all staged instances of Part_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_link *BackRepoPart_linkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, part_link := range backRepoPart_link.Map_Part_linkDBID_Part_linkPtr {
		backRepoPart_link.CommitPhaseTwoInstance(backRepo, idx, part_link)
	}

	return
}

// BackRepoPart_link.CommitPhaseTwoInstance commits {{structname }} of models.Part_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_link *BackRepoPart_linkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, part_link *models.Part_link) (Error error) {

	// fetch matching part_linkDB
	if part_linkDB, ok := backRepoPart_link.Map_Part_linkDBID_Part_linkDB[idx]; ok {

		part_linkDB.CopyBasicFieldsFromPart_link(part_link)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		part_linkDB.Part_linkPointersEncoding.Instrument_link = make([]int, 0)
		// 2. encode
		for _, instrument_linkAssocEnd := range part_link.Instrument_link {
			instrument_linkAssocEnd_DB :=
				backRepo.BackRepoInstrument_link.GetInstrument_linkDBFromInstrument_linkPtr(instrument_linkAssocEnd)
			
			// the stage might be inconsistant, meaning that the instrument_linkAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if instrument_linkAssocEnd_DB == nil {
				continue
			}
			
			part_linkDB.Part_linkPointersEncoding.Instrument_link =
				append(part_linkDB.Part_linkPointersEncoding.Instrument_link, int(instrument_linkAssocEnd_DB.ID))
		}

		query := backRepoPart_link.db.Save(&part_linkDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Part_link intance %s", part_link.Name))
		return err
	}

	return
}

// BackRepoPart_link.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPart_link *BackRepoPart_linkStruct) CheckoutPhaseOne() (Error error) {

	part_linkDBArray := make([]Part_linkDB, 0)
	query := backRepoPart_link.db.Find(&part_linkDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	part_linkInstancesToBeRemovedFromTheStage := make(map[*models.Part_link]any)
	for key, value := range backRepoPart_link.stage.Part_links {
		part_linkInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, part_linkDB := range part_linkDBArray {
		backRepoPart_link.CheckoutPhaseOneInstance(&part_linkDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		part_link, ok := backRepoPart_link.Map_Part_linkDBID_Part_linkPtr[part_linkDB.ID]
		if ok {
			delete(part_linkInstancesToBeRemovedFromTheStage, part_link)
		}
	}

	// remove from stage and back repo's 3 maps all part_links that are not in the checkout
	for part_link := range part_linkInstancesToBeRemovedFromTheStage {
		part_link.Unstage(backRepoPart_link.GetStage())

		// remove instance from the back repo 3 maps
		part_linkID := backRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link]
		delete(backRepoPart_link.Map_Part_linkPtr_Part_linkDBID, part_link)
		delete(backRepoPart_link.Map_Part_linkDBID_Part_linkDB, part_linkID)
		delete(backRepoPart_link.Map_Part_linkDBID_Part_linkPtr, part_linkID)
	}

	return
}

// CheckoutPhaseOneInstance takes a part_linkDB that has been found in the DB, updates the backRepo and stages the
// models version of the part_linkDB
func (backRepoPart_link *BackRepoPart_linkStruct) CheckoutPhaseOneInstance(part_linkDB *Part_linkDB) (Error error) {

	part_link, ok := backRepoPart_link.Map_Part_linkDBID_Part_linkPtr[part_linkDB.ID]
	if !ok {
		part_link = new(models.Part_link)

		backRepoPart_link.Map_Part_linkDBID_Part_linkPtr[part_linkDB.ID] = part_link
		backRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link] = part_linkDB.ID

		// append model store with the new element
		part_link.Name = part_linkDB.Name_Data.String
		part_link.Stage(backRepoPart_link.GetStage())
	}
	part_linkDB.CopyBasicFieldsToPart_link(part_link)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	part_link.Stage(backRepoPart_link.GetStage())

	// preserve pointer to part_linkDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Part_linkDBID_Part_linkDB)[part_linkDB hold variable pointers
	part_linkDB_Data := *part_linkDB
	preservedPtrToPart_link := &part_linkDB_Data
	backRepoPart_link.Map_Part_linkDBID_Part_linkDB[part_linkDB.ID] = preservedPtrToPart_link

	return
}

// BackRepoPart_link.CheckoutPhaseTwo Checkouts all staged instances of Part_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_link *BackRepoPart_linkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, part_linkDB := range backRepoPart_link.Map_Part_linkDBID_Part_linkDB {
		backRepoPart_link.CheckoutPhaseTwoInstance(backRepo, part_linkDB)
	}
	return
}

// BackRepoPart_link.CheckoutPhaseTwoInstance Checkouts staged instances of Part_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_link *BackRepoPart_linkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, part_linkDB *Part_linkDB) (Error error) {

	part_link := backRepoPart_link.Map_Part_linkDBID_Part_linkPtr[part_linkDB.ID]

	part_linkDB.DecodePointers(backRepo, part_link)

	return
}

func (part_linkDB *Part_linkDB) DecodePointers(backRepo *BackRepoStruct, part_link *models.Part_link) {

	// insertion point for checkout of pointer encoding
	// This loop redeem part_link.Instrument_link in the stage from the encode in the back repo
	// It parses all Instrument_linkDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	part_link.Instrument_link = part_link.Instrument_link[:0]
	for _, _Instrument_linkid := range part_linkDB.Part_linkPointersEncoding.Instrument_link {
		part_link.Instrument_link = append(part_link.Instrument_link, backRepo.BackRepoInstrument_link.Map_Instrument_linkDBID_Instrument_linkPtr[uint(_Instrument_linkid)])
	}

	return
}

// CommitPart_link allows commit of a single part_link (if already staged)
func (backRepo *BackRepoStruct) CommitPart_link(part_link *models.Part_link) {
	backRepo.BackRepoPart_link.CommitPhaseOneInstance(part_link)
	if id, ok := backRepo.BackRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link]; ok {
		backRepo.BackRepoPart_link.CommitPhaseTwoInstance(backRepo, id, part_link)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPart_link allows checkout of a single part_link (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPart_link(part_link *models.Part_link) {
	// check if the part_link is staged
	if _, ok := backRepo.BackRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link]; ok {

		if id, ok := backRepo.BackRepoPart_link.Map_Part_linkPtr_Part_linkDBID[part_link]; ok {
			var part_linkDB Part_linkDB
			part_linkDB.ID = id

			if err := backRepo.BackRepoPart_link.db.First(&part_linkDB, id).Error; err != nil {
				log.Fatalln("CheckoutPart_link : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPart_link.CheckoutPhaseOneInstance(&part_linkDB)
			backRepo.BackRepoPart_link.CheckoutPhaseTwoInstance(backRepo, &part_linkDB)
		}
	}
}

// CopyBasicFieldsFromPart_link
func (part_linkDB *Part_linkDB) CopyBasicFieldsFromPart_link(part_link *models.Part_link) {
	// insertion point for fields commit

	part_linkDB.Name_Data.String = part_link.Name
	part_linkDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_link_WOP
func (part_linkDB *Part_linkDB) CopyBasicFieldsFromPart_link_WOP(part_link *models.Part_link_WOP) {
	// insertion point for fields commit

	part_linkDB.Name_Data.String = part_link.Name
	part_linkDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_linkWOP
func (part_linkDB *Part_linkDB) CopyBasicFieldsFromPart_linkWOP(part_link *Part_linkWOP) {
	// insertion point for fields commit

	part_linkDB.Name_Data.String = part_link.Name
	part_linkDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPart_link
func (part_linkDB *Part_linkDB) CopyBasicFieldsToPart_link(part_link *models.Part_link) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_link.Name = part_linkDB.Name_Data.String
}

// CopyBasicFieldsToPart_link_WOP
func (part_linkDB *Part_linkDB) CopyBasicFieldsToPart_link_WOP(part_link *models.Part_link_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_link.Name = part_linkDB.Name_Data.String
}

// CopyBasicFieldsToPart_linkWOP
func (part_linkDB *Part_linkDB) CopyBasicFieldsToPart_linkWOP(part_link *Part_linkWOP) {
	part_link.ID = int(part_linkDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	part_link.Name = part_linkDB.Name_Data.String
}

// Backup generates a json file from a slice of all Part_linkDB instances in the backrepo
func (backRepoPart_link *BackRepoPart_linkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Part_linkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_linkDB, 0)
	for _, part_linkDB := range backRepoPart_link.Map_Part_linkDBID_Part_linkDB {
		forBackup = append(forBackup, part_linkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Part_link ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Part_link file", err.Error())
	}
}

// Backup generates a json file from a slice of all Part_linkDB instances in the backrepo
func (backRepoPart_link *BackRepoPart_linkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_linkDB, 0)
	for _, part_linkDB := range backRepoPart_link.Map_Part_linkDBID_Part_linkDB {
		forBackup = append(forBackup, part_linkDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Part_link")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Part_link_Fields, -1)
	for _, part_linkDB := range forBackup {

		var part_linkWOP Part_linkWOP
		part_linkDB.CopyBasicFieldsToPart_linkWOP(&part_linkWOP)

		row := sh.AddRow()
		row.WriteStruct(&part_linkWOP, -1)
	}
}

// RestoreXL from the "Part_link" sheet all Part_linkDB instances
func (backRepoPart_link *BackRepoPart_linkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPart_linkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Part_link"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPart_link.rowVisitorPart_link)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPart_link *BackRepoPart_linkStruct) rowVisitorPart_link(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var part_linkWOP Part_linkWOP
		row.ReadStruct(&part_linkWOP)

		// add the unmarshalled struct to the stage
		part_linkDB := new(Part_linkDB)
		part_linkDB.CopyBasicFieldsFromPart_linkWOP(&part_linkWOP)

		part_linkDB_ID_atBackupTime := part_linkDB.ID
		part_linkDB.ID = 0
		query := backRepoPart_link.db.Create(part_linkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_link.Map_Part_linkDBID_Part_linkDB[part_linkDB.ID] = part_linkDB
		BackRepoPart_linkid_atBckpTime_newID[part_linkDB_ID_atBackupTime] = part_linkDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Part_linkDB.json" in dirPath that stores an array
// of Part_linkDB and stores it in the database
// the map BackRepoPart_linkid_atBckpTime_newID is updated accordingly
func (backRepoPart_link *BackRepoPart_linkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPart_linkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Part_linkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Part_link file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Part_linkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Part_linkDBID_Part_linkDB
	for _, part_linkDB := range forRestore {

		part_linkDB_ID_atBackupTime := part_linkDB.ID
		part_linkDB.ID = 0
		query := backRepoPart_link.db.Create(part_linkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_link.Map_Part_linkDBID_Part_linkDB[part_linkDB.ID] = part_linkDB
		BackRepoPart_linkid_atBckpTime_newID[part_linkDB_ID_atBackupTime] = part_linkDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Part_link file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Part_link>id_atBckpTime_newID
// to compute new index
func (backRepoPart_link *BackRepoPart_linkStruct) RestorePhaseTwo() {

	for _, part_linkDB := range backRepoPart_link.Map_Part_linkDBID_Part_linkDB {

		// next line of code is to avert unused variable compilation error
		_ = part_linkDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPart_link.db.Model(part_linkDB).Updates(*part_linkDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPart_link.ResetReversePointers commits all staged instances of Part_link to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_link *BackRepoPart_linkStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, part_link := range backRepoPart_link.Map_Part_linkDBID_Part_linkPtr {
		backRepoPart_link.ResetReversePointersInstance(backRepo, idx, part_link)
	}

	return
}

func (backRepoPart_link *BackRepoPart_linkStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, part_link *models.Part_link) (Error error) {

	// fetch matching part_linkDB
	if part_linkDB, ok := backRepoPart_link.Map_Part_linkDBID_Part_linkDB[idx]; ok {
		_ = part_linkDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPart_linkid_atBckpTime_newID map[uint]uint
