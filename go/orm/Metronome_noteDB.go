// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Metronome_note_sql sql.NullBool
var dummy_Metronome_note_time time.Duration
var dummy_Metronome_note_sort sort.Float64Slice

// Metronome_noteAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model metronome_noteAPI
type Metronome_noteAPI struct {
	gorm.Model

	models.Metronome_note_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Metronome_notePointersEncoding Metronome_notePointersEncoding
}

// Metronome_notePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Metronome_notePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Metronome_dot is a slice of pointers to another Struct (optional or 0..1)
	Metronome_dot IntSlice `gorm:"type:TEXT"`

	// field Metronome_beam is a slice of pointers to another Struct (optional or 0..1)
	Metronome_beam IntSlice `gorm:"type:TEXT"`

	// field Metronome_tied is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Metronome_tiedID sql.NullInt64

	// field Metronome_tuplet is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Metronome_tupletID sql.NullInt64
}

// Metronome_noteDB describes a metronome_note in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model metronome_noteDB
type Metronome_noteDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field metronome_noteDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Metronome_notePointersEncoding
}

// Metronome_noteDBs arrays metronome_noteDBs
// swagger:response metronome_noteDBsResponse
type Metronome_noteDBs []Metronome_noteDB

// Metronome_noteDBResponse provides response
// swagger:response metronome_noteDBResponse
type Metronome_noteDBResponse struct {
	Metronome_noteDB
}

// Metronome_noteWOP is a Metronome_note without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Metronome_noteWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Metronome_note_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMetronome_noteStruct struct {
	// stores Metronome_noteDB according to their gorm ID
	Map_Metronome_noteDBID_Metronome_noteDB map[uint]*Metronome_noteDB

	// stores Metronome_noteDB ID according to Metronome_note address
	Map_Metronome_notePtr_Metronome_noteDBID map[*models.Metronome_note]uint

	// stores Metronome_note according to their gorm ID
	Map_Metronome_noteDBID_Metronome_notePtr map[uint]*models.Metronome_note

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMetronome_note *BackRepoMetronome_noteStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMetronome_note.stage
	return
}

func (backRepoMetronome_note *BackRepoMetronome_noteStruct) GetDB() *gorm.DB {
	return backRepoMetronome_note.db
}

// GetMetronome_noteDBFromMetronome_notePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) GetMetronome_noteDBFromMetronome_notePtr(metronome_note *models.Metronome_note) (metronome_noteDB *Metronome_noteDB) {
	id := backRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note]
	metronome_noteDB = backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[id]
	return
}

// BackRepoMetronome_note.CommitPhaseOne commits all staged instances of Metronome_note to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for metronome_note := range stage.Metronome_notes {
		backRepoMetronome_note.CommitPhaseOneInstance(metronome_note)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, metronome_note := range backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr {
		if _, ok := stage.Metronome_notes[metronome_note]; !ok {
			backRepoMetronome_note.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMetronome_note.CommitDeleteInstance commits deletion of Metronome_note to the BackRepo
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CommitDeleteInstance(id uint) (Error error) {

	metronome_note := backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr[id]

	// metronome_note is not staged anymore, remove metronome_noteDB
	metronome_noteDB := backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[id]
	query := backRepoMetronome_note.db.Unscoped().Delete(&metronome_noteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID, metronome_note)
	delete(backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr, id)
	delete(backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB, id)

	return
}

// BackRepoMetronome_note.CommitPhaseOneInstance commits metronome_note staged instances of Metronome_note to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CommitPhaseOneInstance(metronome_note *models.Metronome_note) (Error error) {

	// check if the metronome_note is not commited yet
	if _, ok := backRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note]; ok {
		return
	}

	// initiate metronome_note
	var metronome_noteDB Metronome_noteDB
	metronome_noteDB.CopyBasicFieldsFromMetronome_note(metronome_note)

	query := backRepoMetronome_note.db.Create(&metronome_noteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note] = metronome_noteDB.ID
	backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr[metronome_noteDB.ID] = metronome_note
	backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[metronome_noteDB.ID] = &metronome_noteDB

	return
}

// BackRepoMetronome_note.CommitPhaseTwo commits all staged instances of Metronome_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_note := range backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr {
		backRepoMetronome_note.CommitPhaseTwoInstance(backRepo, idx, metronome_note)
	}

	return
}

// BackRepoMetronome_note.CommitPhaseTwoInstance commits {{structname }} of models.Metronome_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, metronome_note *models.Metronome_note) (Error error) {

	// fetch matching metronome_noteDB
	if metronome_noteDB, ok := backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[idx]; ok {

		metronome_noteDB.CopyBasicFieldsFromMetronome_note(metronome_note)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		metronome_noteDB.Metronome_notePointersEncoding.Metronome_dot = make([]int, 0)
		// 2. encode
		for _, emptyAssocEnd := range metronome_note.Metronome_dot {
			emptyAssocEnd_DB :=
				backRepo.BackRepoEmpty.GetEmptyDBFromEmptyPtr(emptyAssocEnd)
			
			// the stage might be inconsistant, meaning that the emptyAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if emptyAssocEnd_DB == nil {
				continue
			}
			
			metronome_noteDB.Metronome_notePointersEncoding.Metronome_dot =
				append(metronome_noteDB.Metronome_notePointersEncoding.Metronome_dot, int(emptyAssocEnd_DB.ID))
		}

		// 1. reset
		metronome_noteDB.Metronome_notePointersEncoding.Metronome_beam = make([]int, 0)
		// 2. encode
		for _, metronome_beamAssocEnd := range metronome_note.Metronome_beam {
			metronome_beamAssocEnd_DB :=
				backRepo.BackRepoMetronome_beam.GetMetronome_beamDBFromMetronome_beamPtr(metronome_beamAssocEnd)
			
			// the stage might be inconsistant, meaning that the metronome_beamAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if metronome_beamAssocEnd_DB == nil {
				continue
			}
			
			metronome_noteDB.Metronome_notePointersEncoding.Metronome_beam =
				append(metronome_noteDB.Metronome_notePointersEncoding.Metronome_beam, int(metronome_beamAssocEnd_DB.ID))
		}

		// commit pointer value metronome_note.Metronome_tied translates to updating the metronome_note.Metronome_tiedID
		metronome_noteDB.Metronome_tiedID.Valid = true // allow for a 0 value (nil association)
		if metronome_note.Metronome_tied != nil {
			if Metronome_tiedId, ok := backRepo.BackRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_note.Metronome_tied]; ok {
				metronome_noteDB.Metronome_tiedID.Int64 = int64(Metronome_tiedId)
				metronome_noteDB.Metronome_tiedID.Valid = true
			}
		} else {
			metronome_noteDB.Metronome_tiedID.Int64 = 0
			metronome_noteDB.Metronome_tiedID.Valid = true
		}

		// commit pointer value metronome_note.Metronome_tuplet translates to updating the metronome_note.Metronome_tupletID
		metronome_noteDB.Metronome_tupletID.Valid = true // allow for a 0 value (nil association)
		if metronome_note.Metronome_tuplet != nil {
			if Metronome_tupletId, ok := backRepo.BackRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_note.Metronome_tuplet]; ok {
				metronome_noteDB.Metronome_tupletID.Int64 = int64(Metronome_tupletId)
				metronome_noteDB.Metronome_tupletID.Valid = true
			}
		} else {
			metronome_noteDB.Metronome_tupletID.Int64 = 0
			metronome_noteDB.Metronome_tupletID.Valid = true
		}

		query := backRepoMetronome_note.db.Save(&metronome_noteDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Metronome_note intance %s", metronome_note.Name))
		return err
	}

	return
}

// BackRepoMetronome_note.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CheckoutPhaseOne() (Error error) {

	metronome_noteDBArray := make([]Metronome_noteDB, 0)
	query := backRepoMetronome_note.db.Find(&metronome_noteDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	metronome_noteInstancesToBeRemovedFromTheStage := make(map[*models.Metronome_note]any)
	for key, value := range backRepoMetronome_note.stage.Metronome_notes {
		metronome_noteInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, metronome_noteDB := range metronome_noteDBArray {
		backRepoMetronome_note.CheckoutPhaseOneInstance(&metronome_noteDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		metronome_note, ok := backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr[metronome_noteDB.ID]
		if ok {
			delete(metronome_noteInstancesToBeRemovedFromTheStage, metronome_note)
		}
	}

	// remove from stage and back repo's 3 maps all metronome_notes that are not in the checkout
	for metronome_note := range metronome_noteInstancesToBeRemovedFromTheStage {
		metronome_note.Unstage(backRepoMetronome_note.GetStage())

		// remove instance from the back repo 3 maps
		metronome_noteID := backRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note]
		delete(backRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID, metronome_note)
		delete(backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB, metronome_noteID)
		delete(backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr, metronome_noteID)
	}

	return
}

// CheckoutPhaseOneInstance takes a metronome_noteDB that has been found in the DB, updates the backRepo and stages the
// models version of the metronome_noteDB
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CheckoutPhaseOneInstance(metronome_noteDB *Metronome_noteDB) (Error error) {

	metronome_note, ok := backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr[metronome_noteDB.ID]
	if !ok {
		metronome_note = new(models.Metronome_note)

		backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr[metronome_noteDB.ID] = metronome_note
		backRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note] = metronome_noteDB.ID

		// append model store with the new element
		metronome_note.Name = metronome_noteDB.Name_Data.String
		metronome_note.Stage(backRepoMetronome_note.GetStage())
	}
	metronome_noteDB.CopyBasicFieldsToMetronome_note(metronome_note)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	metronome_note.Stage(backRepoMetronome_note.GetStage())

	// preserve pointer to metronome_noteDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Metronome_noteDBID_Metronome_noteDB)[metronome_noteDB hold variable pointers
	metronome_noteDB_Data := *metronome_noteDB
	preservedPtrToMetronome_note := &metronome_noteDB_Data
	backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[metronome_noteDB.ID] = preservedPtrToMetronome_note

	return
}

// BackRepoMetronome_note.CheckoutPhaseTwo Checkouts all staged instances of Metronome_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, metronome_noteDB := range backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB {
		backRepoMetronome_note.CheckoutPhaseTwoInstance(backRepo, metronome_noteDB)
	}
	return
}

// BackRepoMetronome_note.CheckoutPhaseTwoInstance Checkouts staged instances of Metronome_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, metronome_noteDB *Metronome_noteDB) (Error error) {

	metronome_note := backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr[metronome_noteDB.ID]

	metronome_noteDB.DecodePointers(backRepo, metronome_note)

	return
}

func (metronome_noteDB *Metronome_noteDB) DecodePointers(backRepo *BackRepoStruct, metronome_note *models.Metronome_note) {

	// insertion point for checkout of pointer encoding
	// This loop redeem metronome_note.Metronome_dot in the stage from the encode in the back repo
	// It parses all EmptyDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	metronome_note.Metronome_dot = metronome_note.Metronome_dot[:0]
	for _, _Emptyid := range metronome_noteDB.Metronome_notePointersEncoding.Metronome_dot {
		metronome_note.Metronome_dot = append(metronome_note.Metronome_dot, backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(_Emptyid)])
	}

	// This loop redeem metronome_note.Metronome_beam in the stage from the encode in the back repo
	// It parses all Metronome_beamDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	metronome_note.Metronome_beam = metronome_note.Metronome_beam[:0]
	for _, _Metronome_beamid := range metronome_noteDB.Metronome_notePointersEncoding.Metronome_beam {
		metronome_note.Metronome_beam = append(metronome_note.Metronome_beam, backRepo.BackRepoMetronome_beam.Map_Metronome_beamDBID_Metronome_beamPtr[uint(_Metronome_beamid)])
	}

	// Metronome_tied field
	metronome_note.Metronome_tied = nil
	if metronome_noteDB.Metronome_tiedID.Int64 != 0 {
		metronome_note.Metronome_tied = backRepo.BackRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr[uint(metronome_noteDB.Metronome_tiedID.Int64)]
	}
	// Metronome_tuplet field
	metronome_note.Metronome_tuplet = nil
	if metronome_noteDB.Metronome_tupletID.Int64 != 0 {
		metronome_note.Metronome_tuplet = backRepo.BackRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr[uint(metronome_noteDB.Metronome_tupletID.Int64)]
	}
	return
}

// CommitMetronome_note allows commit of a single metronome_note (if already staged)
func (backRepo *BackRepoStruct) CommitMetronome_note(metronome_note *models.Metronome_note) {
	backRepo.BackRepoMetronome_note.CommitPhaseOneInstance(metronome_note)
	if id, ok := backRepo.BackRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note]; ok {
		backRepo.BackRepoMetronome_note.CommitPhaseTwoInstance(backRepo, id, metronome_note)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMetronome_note allows checkout of a single metronome_note (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMetronome_note(metronome_note *models.Metronome_note) {
	// check if the metronome_note is staged
	if _, ok := backRepo.BackRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note]; ok {

		if id, ok := backRepo.BackRepoMetronome_note.Map_Metronome_notePtr_Metronome_noteDBID[metronome_note]; ok {
			var metronome_noteDB Metronome_noteDB
			metronome_noteDB.ID = id

			if err := backRepo.BackRepoMetronome_note.db.First(&metronome_noteDB, id).Error; err != nil {
				log.Fatalln("CheckoutMetronome_note : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMetronome_note.CheckoutPhaseOneInstance(&metronome_noteDB)
			backRepo.BackRepoMetronome_note.CheckoutPhaseTwoInstance(backRepo, &metronome_noteDB)
		}
	}
}

// CopyBasicFieldsFromMetronome_note
func (metronome_noteDB *Metronome_noteDB) CopyBasicFieldsFromMetronome_note(metronome_note *models.Metronome_note) {
	// insertion point for fields commit

	metronome_noteDB.Name_Data.String = metronome_note.Name
	metronome_noteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_note_WOP
func (metronome_noteDB *Metronome_noteDB) CopyBasicFieldsFromMetronome_note_WOP(metronome_note *models.Metronome_note_WOP) {
	// insertion point for fields commit

	metronome_noteDB.Name_Data.String = metronome_note.Name
	metronome_noteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_noteWOP
func (metronome_noteDB *Metronome_noteDB) CopyBasicFieldsFromMetronome_noteWOP(metronome_note *Metronome_noteWOP) {
	// insertion point for fields commit

	metronome_noteDB.Name_Data.String = metronome_note.Name
	metronome_noteDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMetronome_note
func (metronome_noteDB *Metronome_noteDB) CopyBasicFieldsToMetronome_note(metronome_note *models.Metronome_note) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_note.Name = metronome_noteDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_note_WOP
func (metronome_noteDB *Metronome_noteDB) CopyBasicFieldsToMetronome_note_WOP(metronome_note *models.Metronome_note_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_note.Name = metronome_noteDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_noteWOP
func (metronome_noteDB *Metronome_noteDB) CopyBasicFieldsToMetronome_noteWOP(metronome_note *Metronome_noteWOP) {
	metronome_note.ID = int(metronome_noteDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_note.Name = metronome_noteDB.Name_Data.String
}

// Backup generates a json file from a slice of all Metronome_noteDB instances in the backrepo
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Metronome_noteDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_noteDB, 0)
	for _, metronome_noteDB := range backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB {
		forBackup = append(forBackup, metronome_noteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Metronome_note ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Metronome_note file", err.Error())
	}
}

// Backup generates a json file from a slice of all Metronome_noteDB instances in the backrepo
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_noteDB, 0)
	for _, metronome_noteDB := range backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB {
		forBackup = append(forBackup, metronome_noteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Metronome_note")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Metronome_note_Fields, -1)
	for _, metronome_noteDB := range forBackup {

		var metronome_noteWOP Metronome_noteWOP
		metronome_noteDB.CopyBasicFieldsToMetronome_noteWOP(&metronome_noteWOP)

		row := sh.AddRow()
		row.WriteStruct(&metronome_noteWOP, -1)
	}
}

// RestoreXL from the "Metronome_note" sheet all Metronome_noteDB instances
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMetronome_noteid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Metronome_note"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMetronome_note.rowVisitorMetronome_note)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMetronome_note *BackRepoMetronome_noteStruct) rowVisitorMetronome_note(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var metronome_noteWOP Metronome_noteWOP
		row.ReadStruct(&metronome_noteWOP)

		// add the unmarshalled struct to the stage
		metronome_noteDB := new(Metronome_noteDB)
		metronome_noteDB.CopyBasicFieldsFromMetronome_noteWOP(&metronome_noteWOP)

		metronome_noteDB_ID_atBackupTime := metronome_noteDB.ID
		metronome_noteDB.ID = 0
		query := backRepoMetronome_note.db.Create(metronome_noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[metronome_noteDB.ID] = metronome_noteDB
		BackRepoMetronome_noteid_atBckpTime_newID[metronome_noteDB_ID_atBackupTime] = metronome_noteDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Metronome_noteDB.json" in dirPath that stores an array
// of Metronome_noteDB and stores it in the database
// the map BackRepoMetronome_noteid_atBckpTime_newID is updated accordingly
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMetronome_noteid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Metronome_noteDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Metronome_note file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Metronome_noteDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Metronome_noteDBID_Metronome_noteDB
	for _, metronome_noteDB := range forRestore {

		metronome_noteDB_ID_atBackupTime := metronome_noteDB.ID
		metronome_noteDB.ID = 0
		query := backRepoMetronome_note.db.Create(metronome_noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[metronome_noteDB.ID] = metronome_noteDB
		BackRepoMetronome_noteid_atBckpTime_newID[metronome_noteDB_ID_atBackupTime] = metronome_noteDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Metronome_note file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Metronome_note>id_atBckpTime_newID
// to compute new index
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) RestorePhaseTwo() {

	for _, metronome_noteDB := range backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB {

		// next line of code is to avert unused variable compilation error
		_ = metronome_noteDB

		// insertion point for reindexing pointers encoding
		// reindexing Metronome_tied field
		if metronome_noteDB.Metronome_tiedID.Int64 != 0 {
			metronome_noteDB.Metronome_tiedID.Int64 = int64(BackRepoMetronome_tiedid_atBckpTime_newID[uint(metronome_noteDB.Metronome_tiedID.Int64)])
			metronome_noteDB.Metronome_tiedID.Valid = true
		}

		// reindexing Metronome_tuplet field
		if metronome_noteDB.Metronome_tupletID.Int64 != 0 {
			metronome_noteDB.Metronome_tupletID.Int64 = int64(BackRepoMetronome_tupletid_atBckpTime_newID[uint(metronome_noteDB.Metronome_tupletID.Int64)])
			metronome_noteDB.Metronome_tupletID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoMetronome_note.db.Model(metronome_noteDB).Updates(*metronome_noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMetronome_note.ResetReversePointers commits all staged instances of Metronome_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_note *BackRepoMetronome_noteStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_note := range backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_notePtr {
		backRepoMetronome_note.ResetReversePointersInstance(backRepo, idx, metronome_note)
	}

	return
}

func (backRepoMetronome_note *BackRepoMetronome_noteStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, metronome_note *models.Metronome_note) (Error error) {

	// fetch matching metronome_noteDB
	if metronome_noteDB, ok := backRepoMetronome_note.Map_Metronome_noteDBID_Metronome_noteDB[idx]; ok {
		_ = metronome_noteDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMetronome_noteid_atBckpTime_newID map[uint]uint
