// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Fo_sql sql.NullBool
var dummy_Fo_time time.Duration
var dummy_Fo_sort sort.Float64Slice

// FoAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model foAPI
type FoAPI struct {
	gorm.Model

	models.Fo_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FoPointersEncoding FoPointersEncoding
}

// FoPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FoPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FoDB describes a fo in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model foDB
type FoDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field foDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FoPointersEncoding
}

// FoDBs arrays foDBs
// swagger:response foDBsResponse
type FoDBs []FoDB

// FoDBResponse provides response
// swagger:response foDBResponse
type FoDBResponse struct {
	FoDB
}

// FoWOP is a Fo without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FoWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Fo_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFoStruct struct {
	// stores FoDB according to their gorm ID
	Map_FoDBID_FoDB map[uint]*FoDB

	// stores FoDB ID according to Fo address
	Map_FoPtr_FoDBID map[*models.Fo]uint

	// stores Fo according to their gorm ID
	Map_FoDBID_FoPtr map[uint]*models.Fo

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFo *BackRepoFoStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFo.stage
	return
}

func (backRepoFo *BackRepoFoStruct) GetDB() *gorm.DB {
	return backRepoFo.db
}

// GetFoDBFromFoPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFo *BackRepoFoStruct) GetFoDBFromFoPtr(fo *models.Fo) (foDB *FoDB) {
	id := backRepoFo.Map_FoPtr_FoDBID[fo]
	foDB = backRepoFo.Map_FoDBID_FoDB[id]
	return
}

// BackRepoFo.CommitPhaseOne commits all staged instances of Fo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFo *BackRepoFoStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for fo := range stage.Fos {
		backRepoFo.CommitPhaseOneInstance(fo)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, fo := range backRepoFo.Map_FoDBID_FoPtr {
		if _, ok := stage.Fos[fo]; !ok {
			backRepoFo.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFo.CommitDeleteInstance commits deletion of Fo to the BackRepo
func (backRepoFo *BackRepoFoStruct) CommitDeleteInstance(id uint) (Error error) {

	fo := backRepoFo.Map_FoDBID_FoPtr[id]

	// fo is not staged anymore, remove foDB
	foDB := backRepoFo.Map_FoDBID_FoDB[id]
	query := backRepoFo.db.Unscoped().Delete(&foDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFo.Map_FoPtr_FoDBID, fo)
	delete(backRepoFo.Map_FoDBID_FoPtr, id)
	delete(backRepoFo.Map_FoDBID_FoDB, id)

	return
}

// BackRepoFo.CommitPhaseOneInstance commits fo staged instances of Fo to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFo *BackRepoFoStruct) CommitPhaseOneInstance(fo *models.Fo) (Error error) {

	// check if the fo is not commited yet
	if _, ok := backRepoFo.Map_FoPtr_FoDBID[fo]; ok {
		return
	}

	// initiate fo
	var foDB FoDB
	foDB.CopyBasicFieldsFromFo(fo)

	query := backRepoFo.db.Create(&foDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFo.Map_FoPtr_FoDBID[fo] = foDB.ID
	backRepoFo.Map_FoDBID_FoPtr[foDB.ID] = fo
	backRepoFo.Map_FoDBID_FoDB[foDB.ID] = &foDB

	return
}

// BackRepoFo.CommitPhaseTwo commits all staged instances of Fo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFo *BackRepoFoStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, fo := range backRepoFo.Map_FoDBID_FoPtr {
		backRepoFo.CommitPhaseTwoInstance(backRepo, idx, fo)
	}

	return
}

// BackRepoFo.CommitPhaseTwoInstance commits {{structname }} of models.Fo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFo *BackRepoFoStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, fo *models.Fo) (Error error) {

	// fetch matching foDB
	if foDB, ok := backRepoFo.Map_FoDBID_FoDB[idx]; ok {

		foDB.CopyBasicFieldsFromFo(fo)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFo.db.Save(&foDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Fo intance %s", fo.Name))
		return err
	}

	return
}

// BackRepoFo.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFo *BackRepoFoStruct) CheckoutPhaseOne() (Error error) {

	foDBArray := make([]FoDB, 0)
	query := backRepoFo.db.Find(&foDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	foInstancesToBeRemovedFromTheStage := make(map[*models.Fo]any)
	for key, value := range backRepoFo.stage.Fos {
		foInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, foDB := range foDBArray {
		backRepoFo.CheckoutPhaseOneInstance(&foDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		fo, ok := backRepoFo.Map_FoDBID_FoPtr[foDB.ID]
		if ok {
			delete(foInstancesToBeRemovedFromTheStage, fo)
		}
	}

	// remove from stage and back repo's 3 maps all fos that are not in the checkout
	for fo := range foInstancesToBeRemovedFromTheStage {
		fo.Unstage(backRepoFo.GetStage())

		// remove instance from the back repo 3 maps
		foID := backRepoFo.Map_FoPtr_FoDBID[fo]
		delete(backRepoFo.Map_FoPtr_FoDBID, fo)
		delete(backRepoFo.Map_FoDBID_FoDB, foID)
		delete(backRepoFo.Map_FoDBID_FoPtr, foID)
	}

	return
}

// CheckoutPhaseOneInstance takes a foDB that has been found in the DB, updates the backRepo and stages the
// models version of the foDB
func (backRepoFo *BackRepoFoStruct) CheckoutPhaseOneInstance(foDB *FoDB) (Error error) {

	fo, ok := backRepoFo.Map_FoDBID_FoPtr[foDB.ID]
	if !ok {
		fo = new(models.Fo)

		backRepoFo.Map_FoDBID_FoPtr[foDB.ID] = fo
		backRepoFo.Map_FoPtr_FoDBID[fo] = foDB.ID

		// append model store with the new element
		fo.Name = foDB.Name_Data.String
		fo.Stage(backRepoFo.GetStage())
	}
	foDB.CopyBasicFieldsToFo(fo)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	fo.Stage(backRepoFo.GetStage())

	// preserve pointer to foDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FoDBID_FoDB)[foDB hold variable pointers
	foDB_Data := *foDB
	preservedPtrToFo := &foDB_Data
	backRepoFo.Map_FoDBID_FoDB[foDB.ID] = preservedPtrToFo

	return
}

// BackRepoFo.CheckoutPhaseTwo Checkouts all staged instances of Fo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFo *BackRepoFoStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, foDB := range backRepoFo.Map_FoDBID_FoDB {
		backRepoFo.CheckoutPhaseTwoInstance(backRepo, foDB)
	}
	return
}

// BackRepoFo.CheckoutPhaseTwoInstance Checkouts staged instances of Fo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFo *BackRepoFoStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, foDB *FoDB) (Error error) {

	fo := backRepoFo.Map_FoDBID_FoPtr[foDB.ID]

	foDB.DecodePointers(backRepo, fo)

	return
}

func (foDB *FoDB) DecodePointers(backRepo *BackRepoStruct, fo *models.Fo) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFo allows commit of a single fo (if already staged)
func (backRepo *BackRepoStruct) CommitFo(fo *models.Fo) {
	backRepo.BackRepoFo.CommitPhaseOneInstance(fo)
	if id, ok := backRepo.BackRepoFo.Map_FoPtr_FoDBID[fo]; ok {
		backRepo.BackRepoFo.CommitPhaseTwoInstance(backRepo, id, fo)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFo allows checkout of a single fo (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFo(fo *models.Fo) {
	// check if the fo is staged
	if _, ok := backRepo.BackRepoFo.Map_FoPtr_FoDBID[fo]; ok {

		if id, ok := backRepo.BackRepoFo.Map_FoPtr_FoDBID[fo]; ok {
			var foDB FoDB
			foDB.ID = id

			if err := backRepo.BackRepoFo.db.First(&foDB, id).Error; err != nil {
				log.Fatalln("CheckoutFo : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFo.CheckoutPhaseOneInstance(&foDB)
			backRepo.BackRepoFo.CheckoutPhaseTwoInstance(backRepo, &foDB)
		}
	}
}

// CopyBasicFieldsFromFo
func (foDB *FoDB) CopyBasicFieldsFromFo(fo *models.Fo) {
	// insertion point for fields commit

	foDB.Name_Data.String = fo.Name
	foDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFo_WOP
func (foDB *FoDB) CopyBasicFieldsFromFo_WOP(fo *models.Fo_WOP) {
	// insertion point for fields commit

	foDB.Name_Data.String = fo.Name
	foDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFoWOP
func (foDB *FoDB) CopyBasicFieldsFromFoWOP(fo *FoWOP) {
	// insertion point for fields commit

	foDB.Name_Data.String = fo.Name
	foDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFo
func (foDB *FoDB) CopyBasicFieldsToFo(fo *models.Fo) {
	// insertion point for checkout of basic fields (back repo to stage)
	fo.Name = foDB.Name_Data.String
}

// CopyBasicFieldsToFo_WOP
func (foDB *FoDB) CopyBasicFieldsToFo_WOP(fo *models.Fo_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	fo.Name = foDB.Name_Data.String
}

// CopyBasicFieldsToFoWOP
func (foDB *FoDB) CopyBasicFieldsToFoWOP(fo *FoWOP) {
	fo.ID = int(foDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	fo.Name = foDB.Name_Data.String
}

// Backup generates a json file from a slice of all FoDB instances in the backrepo
func (backRepoFo *BackRepoFoStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FoDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FoDB, 0)
	for _, foDB := range backRepoFo.Map_FoDBID_FoDB {
		forBackup = append(forBackup, foDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Fo ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Fo file", err.Error())
	}
}

// Backup generates a json file from a slice of all FoDB instances in the backrepo
func (backRepoFo *BackRepoFoStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FoDB, 0)
	for _, foDB := range backRepoFo.Map_FoDBID_FoDB {
		forBackup = append(forBackup, foDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Fo")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Fo_Fields, -1)
	for _, foDB := range forBackup {

		var foWOP FoWOP
		foDB.CopyBasicFieldsToFoWOP(&foWOP)

		row := sh.AddRow()
		row.WriteStruct(&foWOP, -1)
	}
}

// RestoreXL from the "Fo" sheet all FoDB instances
func (backRepoFo *BackRepoFoStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFoid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Fo"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFo.rowVisitorFo)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFo *BackRepoFoStruct) rowVisitorFo(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var foWOP FoWOP
		row.ReadStruct(&foWOP)

		// add the unmarshalled struct to the stage
		foDB := new(FoDB)
		foDB.CopyBasicFieldsFromFoWOP(&foWOP)

		foDB_ID_atBackupTime := foDB.ID
		foDB.ID = 0
		query := backRepoFo.db.Create(foDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFo.Map_FoDBID_FoDB[foDB.ID] = foDB
		BackRepoFoid_atBckpTime_newID[foDB_ID_atBackupTime] = foDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FoDB.json" in dirPath that stores an array
// of FoDB and stores it in the database
// the map BackRepoFoid_atBckpTime_newID is updated accordingly
func (backRepoFo *BackRepoFoStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFoid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FoDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Fo file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FoDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FoDBID_FoDB
	for _, foDB := range forRestore {

		foDB_ID_atBackupTime := foDB.ID
		foDB.ID = 0
		query := backRepoFo.db.Create(foDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFo.Map_FoDBID_FoDB[foDB.ID] = foDB
		BackRepoFoid_atBckpTime_newID[foDB_ID_atBackupTime] = foDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Fo file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Fo>id_atBckpTime_newID
// to compute new index
func (backRepoFo *BackRepoFoStruct) RestorePhaseTwo() {

	for _, foDB := range backRepoFo.Map_FoDBID_FoDB {

		// next line of code is to avert unused variable compilation error
		_ = foDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFo.db.Model(foDB).Updates(*foDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFo.ResetReversePointers commits all staged instances of Fo to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFo *BackRepoFoStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, fo := range backRepoFo.Map_FoDBID_FoPtr {
		backRepoFo.ResetReversePointersInstance(backRepo, idx, fo)
	}

	return
}

func (backRepoFo *BackRepoFoStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, fo *models.Fo) (Error error) {

	// fetch matching foDB
	if foDB, ok := backRepoFo.Map_FoDBID_FoDB[idx]; ok {
		_ = foDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFoid_atBckpTime_newID map[uint]uint
