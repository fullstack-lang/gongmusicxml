// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Note_size_sql sql.NullBool
var dummy_Note_size_time time.Duration
var dummy_Note_size_sort sort.Float64Slice

// Note_sizeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model note_sizeAPI
type Note_sizeAPI struct {
	gorm.Model

	models.Note_size_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Note_sizePointersEncoding Note_sizePointersEncoding
}

// Note_sizePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Note_sizePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Note_sizeDB describes a note_size in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model note_sizeDB
type Note_sizeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field note_sizeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Note_sizePointersEncoding
}

// Note_sizeDBs arrays note_sizeDBs
// swagger:response note_sizeDBsResponse
type Note_sizeDBs []Note_sizeDB

// Note_sizeDBResponse provides response
// swagger:response note_sizeDBResponse
type Note_sizeDBResponse struct {
	Note_sizeDB
}

// Note_sizeWOP is a Note_size without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Note_sizeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Note_size_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoNote_sizeStruct struct {
	// stores Note_sizeDB according to their gorm ID
	Map_Note_sizeDBID_Note_sizeDB map[uint]*Note_sizeDB

	// stores Note_sizeDB ID according to Note_size address
	Map_Note_sizePtr_Note_sizeDBID map[*models.Note_size]uint

	// stores Note_size according to their gorm ID
	Map_Note_sizeDBID_Note_sizePtr map[uint]*models.Note_size

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNote_size *BackRepoNote_sizeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNote_size.stage
	return
}

func (backRepoNote_size *BackRepoNote_sizeStruct) GetDB() *gorm.DB {
	return backRepoNote_size.db
}

// GetNote_sizeDBFromNote_sizePtr is a handy function to access the back repo instance from the stage instance
func (backRepoNote_size *BackRepoNote_sizeStruct) GetNote_sizeDBFromNote_sizePtr(note_size *models.Note_size) (note_sizeDB *Note_sizeDB) {
	id := backRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size]
	note_sizeDB = backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[id]
	return
}

// BackRepoNote_size.CommitPhaseOne commits all staged instances of Note_size to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNote_size *BackRepoNote_sizeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for note_size := range stage.Note_sizes {
		backRepoNote_size.CommitPhaseOneInstance(note_size)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, note_size := range backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr {
		if _, ok := stage.Note_sizes[note_size]; !ok {
			backRepoNote_size.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNote_size.CommitDeleteInstance commits deletion of Note_size to the BackRepo
func (backRepoNote_size *BackRepoNote_sizeStruct) CommitDeleteInstance(id uint) (Error error) {

	note_size := backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr[id]

	// note_size is not staged anymore, remove note_sizeDB
	note_sizeDB := backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[id]
	query := backRepoNote_size.db.Unscoped().Delete(&note_sizeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNote_size.Map_Note_sizePtr_Note_sizeDBID, note_size)
	delete(backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr, id)
	delete(backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB, id)

	return
}

// BackRepoNote_size.CommitPhaseOneInstance commits note_size staged instances of Note_size to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNote_size *BackRepoNote_sizeStruct) CommitPhaseOneInstance(note_size *models.Note_size) (Error error) {

	// check if the note_size is not commited yet
	if _, ok := backRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size]; ok {
		return
	}

	// initiate note_size
	var note_sizeDB Note_sizeDB
	note_sizeDB.CopyBasicFieldsFromNote_size(note_size)

	query := backRepoNote_size.db.Create(&note_sizeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size] = note_sizeDB.ID
	backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr[note_sizeDB.ID] = note_size
	backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[note_sizeDB.ID] = &note_sizeDB

	return
}

// BackRepoNote_size.CommitPhaseTwo commits all staged instances of Note_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_size *BackRepoNote_sizeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, note_size := range backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr {
		backRepoNote_size.CommitPhaseTwoInstance(backRepo, idx, note_size)
	}

	return
}

// BackRepoNote_size.CommitPhaseTwoInstance commits {{structname }} of models.Note_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_size *BackRepoNote_sizeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, note_size *models.Note_size) (Error error) {

	// fetch matching note_sizeDB
	if note_sizeDB, ok := backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[idx]; ok {

		note_sizeDB.CopyBasicFieldsFromNote_size(note_size)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoNote_size.db.Save(&note_sizeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Note_size intance %s", note_size.Name))
		return err
	}

	return
}

// BackRepoNote_size.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNote_size *BackRepoNote_sizeStruct) CheckoutPhaseOne() (Error error) {

	note_sizeDBArray := make([]Note_sizeDB, 0)
	query := backRepoNote_size.db.Find(&note_sizeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	note_sizeInstancesToBeRemovedFromTheStage := make(map[*models.Note_size]any)
	for key, value := range backRepoNote_size.stage.Note_sizes {
		note_sizeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, note_sizeDB := range note_sizeDBArray {
		backRepoNote_size.CheckoutPhaseOneInstance(&note_sizeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		note_size, ok := backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr[note_sizeDB.ID]
		if ok {
			delete(note_sizeInstancesToBeRemovedFromTheStage, note_size)
		}
	}

	// remove from stage and back repo's 3 maps all note_sizes that are not in the checkout
	for note_size := range note_sizeInstancesToBeRemovedFromTheStage {
		note_size.Unstage(backRepoNote_size.GetStage())

		// remove instance from the back repo 3 maps
		note_sizeID := backRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size]
		delete(backRepoNote_size.Map_Note_sizePtr_Note_sizeDBID, note_size)
		delete(backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB, note_sizeID)
		delete(backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr, note_sizeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a note_sizeDB that has been found in the DB, updates the backRepo and stages the
// models version of the note_sizeDB
func (backRepoNote_size *BackRepoNote_sizeStruct) CheckoutPhaseOneInstance(note_sizeDB *Note_sizeDB) (Error error) {

	note_size, ok := backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr[note_sizeDB.ID]
	if !ok {
		note_size = new(models.Note_size)

		backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr[note_sizeDB.ID] = note_size
		backRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size] = note_sizeDB.ID

		// append model store with the new element
		note_size.Name = note_sizeDB.Name_Data.String
		note_size.Stage(backRepoNote_size.GetStage())
	}
	note_sizeDB.CopyBasicFieldsToNote_size(note_size)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	note_size.Stage(backRepoNote_size.GetStage())

	// preserve pointer to note_sizeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Note_sizeDBID_Note_sizeDB)[note_sizeDB hold variable pointers
	note_sizeDB_Data := *note_sizeDB
	preservedPtrToNote_size := &note_sizeDB_Data
	backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[note_sizeDB.ID] = preservedPtrToNote_size

	return
}

// BackRepoNote_size.CheckoutPhaseTwo Checkouts all staged instances of Note_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_size *BackRepoNote_sizeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, note_sizeDB := range backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB {
		backRepoNote_size.CheckoutPhaseTwoInstance(backRepo, note_sizeDB)
	}
	return
}

// BackRepoNote_size.CheckoutPhaseTwoInstance Checkouts staged instances of Note_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_size *BackRepoNote_sizeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, note_sizeDB *Note_sizeDB) (Error error) {

	note_size := backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr[note_sizeDB.ID]

	note_sizeDB.DecodePointers(backRepo, note_size)

	return
}

func (note_sizeDB *Note_sizeDB) DecodePointers(backRepo *BackRepoStruct, note_size *models.Note_size) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitNote_size allows commit of a single note_size (if already staged)
func (backRepo *BackRepoStruct) CommitNote_size(note_size *models.Note_size) {
	backRepo.BackRepoNote_size.CommitPhaseOneInstance(note_size)
	if id, ok := backRepo.BackRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size]; ok {
		backRepo.BackRepoNote_size.CommitPhaseTwoInstance(backRepo, id, note_size)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNote_size allows checkout of a single note_size (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNote_size(note_size *models.Note_size) {
	// check if the note_size is staged
	if _, ok := backRepo.BackRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size]; ok {

		if id, ok := backRepo.BackRepoNote_size.Map_Note_sizePtr_Note_sizeDBID[note_size]; ok {
			var note_sizeDB Note_sizeDB
			note_sizeDB.ID = id

			if err := backRepo.BackRepoNote_size.db.First(&note_sizeDB, id).Error; err != nil {
				log.Fatalln("CheckoutNote_size : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNote_size.CheckoutPhaseOneInstance(&note_sizeDB)
			backRepo.BackRepoNote_size.CheckoutPhaseTwoInstance(backRepo, &note_sizeDB)
		}
	}
}

// CopyBasicFieldsFromNote_size
func (note_sizeDB *Note_sizeDB) CopyBasicFieldsFromNote_size(note_size *models.Note_size) {
	// insertion point for fields commit

	note_sizeDB.Name_Data.String = note_size.Name
	note_sizeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNote_size_WOP
func (note_sizeDB *Note_sizeDB) CopyBasicFieldsFromNote_size_WOP(note_size *models.Note_size_WOP) {
	// insertion point for fields commit

	note_sizeDB.Name_Data.String = note_size.Name
	note_sizeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNote_sizeWOP
func (note_sizeDB *Note_sizeDB) CopyBasicFieldsFromNote_sizeWOP(note_size *Note_sizeWOP) {
	// insertion point for fields commit

	note_sizeDB.Name_Data.String = note_size.Name
	note_sizeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToNote_size
func (note_sizeDB *Note_sizeDB) CopyBasicFieldsToNote_size(note_size *models.Note_size) {
	// insertion point for checkout of basic fields (back repo to stage)
	note_size.Name = note_sizeDB.Name_Data.String
}

// CopyBasicFieldsToNote_size_WOP
func (note_sizeDB *Note_sizeDB) CopyBasicFieldsToNote_size_WOP(note_size *models.Note_size_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	note_size.Name = note_sizeDB.Name_Data.String
}

// CopyBasicFieldsToNote_sizeWOP
func (note_sizeDB *Note_sizeDB) CopyBasicFieldsToNote_sizeWOP(note_size *Note_sizeWOP) {
	note_size.ID = int(note_sizeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	note_size.Name = note_sizeDB.Name_Data.String
}

// Backup generates a json file from a slice of all Note_sizeDB instances in the backrepo
func (backRepoNote_size *BackRepoNote_sizeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Note_sizeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Note_sizeDB, 0)
	for _, note_sizeDB := range backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB {
		forBackup = append(forBackup, note_sizeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Note_size ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Note_size file", err.Error())
	}
}

// Backup generates a json file from a slice of all Note_sizeDB instances in the backrepo
func (backRepoNote_size *BackRepoNote_sizeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Note_sizeDB, 0)
	for _, note_sizeDB := range backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB {
		forBackup = append(forBackup, note_sizeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Note_size")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Note_size_Fields, -1)
	for _, note_sizeDB := range forBackup {

		var note_sizeWOP Note_sizeWOP
		note_sizeDB.CopyBasicFieldsToNote_sizeWOP(&note_sizeWOP)

		row := sh.AddRow()
		row.WriteStruct(&note_sizeWOP, -1)
	}
}

// RestoreXL from the "Note_size" sheet all Note_sizeDB instances
func (backRepoNote_size *BackRepoNote_sizeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNote_sizeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Note_size"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNote_size.rowVisitorNote_size)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNote_size *BackRepoNote_sizeStruct) rowVisitorNote_size(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var note_sizeWOP Note_sizeWOP
		row.ReadStruct(&note_sizeWOP)

		// add the unmarshalled struct to the stage
		note_sizeDB := new(Note_sizeDB)
		note_sizeDB.CopyBasicFieldsFromNote_sizeWOP(&note_sizeWOP)

		note_sizeDB_ID_atBackupTime := note_sizeDB.ID
		note_sizeDB.ID = 0
		query := backRepoNote_size.db.Create(note_sizeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[note_sizeDB.ID] = note_sizeDB
		BackRepoNote_sizeid_atBckpTime_newID[note_sizeDB_ID_atBackupTime] = note_sizeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Note_sizeDB.json" in dirPath that stores an array
// of Note_sizeDB and stores it in the database
// the map BackRepoNote_sizeid_atBckpTime_newID is updated accordingly
func (backRepoNote_size *BackRepoNote_sizeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNote_sizeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Note_sizeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Note_size file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Note_sizeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Note_sizeDBID_Note_sizeDB
	for _, note_sizeDB := range forRestore {

		note_sizeDB_ID_atBackupTime := note_sizeDB.ID
		note_sizeDB.ID = 0
		query := backRepoNote_size.db.Create(note_sizeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[note_sizeDB.ID] = note_sizeDB
		BackRepoNote_sizeid_atBckpTime_newID[note_sizeDB_ID_atBackupTime] = note_sizeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Note_size file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Note_size>id_atBckpTime_newID
// to compute new index
func (backRepoNote_size *BackRepoNote_sizeStruct) RestorePhaseTwo() {

	for _, note_sizeDB := range backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB {

		// next line of code is to avert unused variable compilation error
		_ = note_sizeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoNote_size.db.Model(note_sizeDB).Updates(*note_sizeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNote_size.ResetReversePointers commits all staged instances of Note_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote_size *BackRepoNote_sizeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, note_size := range backRepoNote_size.Map_Note_sizeDBID_Note_sizePtr {
		backRepoNote_size.ResetReversePointersInstance(backRepo, idx, note_size)
	}

	return
}

func (backRepoNote_size *BackRepoNote_sizeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, note_size *models.Note_size) (Error error) {

	// fetch matching note_sizeDB
	if note_sizeDB, ok := backRepoNote_size.Map_Note_sizeDBID_Note_sizeDB[idx]; ok {
		_ = note_sizeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNote_sizeid_atBckpTime_newID map[uint]uint
