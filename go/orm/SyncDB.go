// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Sync_sql sql.NullBool
var dummy_Sync_time time.Duration
var dummy_Sync_sort sort.Float64Slice

// SyncAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model syncAPI
type SyncAPI struct {
	gorm.Model

	models.Sync_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SyncPointersEncoding SyncPointersEncoding
}

// SyncPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SyncPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SyncDB describes a sync in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model syncDB
type SyncDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field syncDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SyncPointersEncoding
}

// SyncDBs arrays syncDBs
// swagger:response syncDBsResponse
type SyncDBs []SyncDB

// SyncDBResponse provides response
// swagger:response syncDBResponse
type SyncDBResponse struct {
	SyncDB
}

// SyncWOP is a Sync without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SyncWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Sync_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSyncStruct struct {
	// stores SyncDB according to their gorm ID
	Map_SyncDBID_SyncDB map[uint]*SyncDB

	// stores SyncDB ID according to Sync address
	Map_SyncPtr_SyncDBID map[*models.Sync]uint

	// stores Sync according to their gorm ID
	Map_SyncDBID_SyncPtr map[uint]*models.Sync

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSync *BackRepoSyncStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSync.stage
	return
}

func (backRepoSync *BackRepoSyncStruct) GetDB() *gorm.DB {
	return backRepoSync.db
}

// GetSyncDBFromSyncPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSync *BackRepoSyncStruct) GetSyncDBFromSyncPtr(sync *models.Sync) (syncDB *SyncDB) {
	id := backRepoSync.Map_SyncPtr_SyncDBID[sync]
	syncDB = backRepoSync.Map_SyncDBID_SyncDB[id]
	return
}

// BackRepoSync.CommitPhaseOne commits all staged instances of Sync to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSync *BackRepoSyncStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for sync := range stage.Syncs {
		backRepoSync.CommitPhaseOneInstance(sync)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, sync := range backRepoSync.Map_SyncDBID_SyncPtr {
		if _, ok := stage.Syncs[sync]; !ok {
			backRepoSync.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSync.CommitDeleteInstance commits deletion of Sync to the BackRepo
func (backRepoSync *BackRepoSyncStruct) CommitDeleteInstance(id uint) (Error error) {

	sync := backRepoSync.Map_SyncDBID_SyncPtr[id]

	// sync is not staged anymore, remove syncDB
	syncDB := backRepoSync.Map_SyncDBID_SyncDB[id]
	query := backRepoSync.db.Unscoped().Delete(&syncDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSync.Map_SyncPtr_SyncDBID, sync)
	delete(backRepoSync.Map_SyncDBID_SyncPtr, id)
	delete(backRepoSync.Map_SyncDBID_SyncDB, id)

	return
}

// BackRepoSync.CommitPhaseOneInstance commits sync staged instances of Sync to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSync *BackRepoSyncStruct) CommitPhaseOneInstance(sync *models.Sync) (Error error) {

	// check if the sync is not commited yet
	if _, ok := backRepoSync.Map_SyncPtr_SyncDBID[sync]; ok {
		return
	}

	// initiate sync
	var syncDB SyncDB
	syncDB.CopyBasicFieldsFromSync(sync)

	query := backRepoSync.db.Create(&syncDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSync.Map_SyncPtr_SyncDBID[sync] = syncDB.ID
	backRepoSync.Map_SyncDBID_SyncPtr[syncDB.ID] = sync
	backRepoSync.Map_SyncDBID_SyncDB[syncDB.ID] = &syncDB

	return
}

// BackRepoSync.CommitPhaseTwo commits all staged instances of Sync to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSync *BackRepoSyncStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, sync := range backRepoSync.Map_SyncDBID_SyncPtr {
		backRepoSync.CommitPhaseTwoInstance(backRepo, idx, sync)
	}

	return
}

// BackRepoSync.CommitPhaseTwoInstance commits {{structname }} of models.Sync to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSync *BackRepoSyncStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, sync *models.Sync) (Error error) {

	// fetch matching syncDB
	if syncDB, ok := backRepoSync.Map_SyncDBID_SyncDB[idx]; ok {

		syncDB.CopyBasicFieldsFromSync(sync)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSync.db.Save(&syncDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Sync intance %s", sync.Name))
		return err
	}

	return
}

// BackRepoSync.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSync *BackRepoSyncStruct) CheckoutPhaseOne() (Error error) {

	syncDBArray := make([]SyncDB, 0)
	query := backRepoSync.db.Find(&syncDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	syncInstancesToBeRemovedFromTheStage := make(map[*models.Sync]any)
	for key, value := range backRepoSync.stage.Syncs {
		syncInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, syncDB := range syncDBArray {
		backRepoSync.CheckoutPhaseOneInstance(&syncDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		sync, ok := backRepoSync.Map_SyncDBID_SyncPtr[syncDB.ID]
		if ok {
			delete(syncInstancesToBeRemovedFromTheStage, sync)
		}
	}

	// remove from stage and back repo's 3 maps all syncs that are not in the checkout
	for sync := range syncInstancesToBeRemovedFromTheStage {
		sync.Unstage(backRepoSync.GetStage())

		// remove instance from the back repo 3 maps
		syncID := backRepoSync.Map_SyncPtr_SyncDBID[sync]
		delete(backRepoSync.Map_SyncPtr_SyncDBID, sync)
		delete(backRepoSync.Map_SyncDBID_SyncDB, syncID)
		delete(backRepoSync.Map_SyncDBID_SyncPtr, syncID)
	}

	return
}

// CheckoutPhaseOneInstance takes a syncDB that has been found in the DB, updates the backRepo and stages the
// models version of the syncDB
func (backRepoSync *BackRepoSyncStruct) CheckoutPhaseOneInstance(syncDB *SyncDB) (Error error) {

	sync, ok := backRepoSync.Map_SyncDBID_SyncPtr[syncDB.ID]
	if !ok {
		sync = new(models.Sync)

		backRepoSync.Map_SyncDBID_SyncPtr[syncDB.ID] = sync
		backRepoSync.Map_SyncPtr_SyncDBID[sync] = syncDB.ID

		// append model store with the new element
		sync.Name = syncDB.Name_Data.String
		sync.Stage(backRepoSync.GetStage())
	}
	syncDB.CopyBasicFieldsToSync(sync)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	sync.Stage(backRepoSync.GetStage())

	// preserve pointer to syncDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SyncDBID_SyncDB)[syncDB hold variable pointers
	syncDB_Data := *syncDB
	preservedPtrToSync := &syncDB_Data
	backRepoSync.Map_SyncDBID_SyncDB[syncDB.ID] = preservedPtrToSync

	return
}

// BackRepoSync.CheckoutPhaseTwo Checkouts all staged instances of Sync to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSync *BackRepoSyncStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, syncDB := range backRepoSync.Map_SyncDBID_SyncDB {
		backRepoSync.CheckoutPhaseTwoInstance(backRepo, syncDB)
	}
	return
}

// BackRepoSync.CheckoutPhaseTwoInstance Checkouts staged instances of Sync to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSync *BackRepoSyncStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, syncDB *SyncDB) (Error error) {

	sync := backRepoSync.Map_SyncDBID_SyncPtr[syncDB.ID]

	syncDB.DecodePointers(backRepo, sync)

	return
}

func (syncDB *SyncDB) DecodePointers(backRepo *BackRepoStruct, sync *models.Sync) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSync allows commit of a single sync (if already staged)
func (backRepo *BackRepoStruct) CommitSync(sync *models.Sync) {
	backRepo.BackRepoSync.CommitPhaseOneInstance(sync)
	if id, ok := backRepo.BackRepoSync.Map_SyncPtr_SyncDBID[sync]; ok {
		backRepo.BackRepoSync.CommitPhaseTwoInstance(backRepo, id, sync)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSync allows checkout of a single sync (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSync(sync *models.Sync) {
	// check if the sync is staged
	if _, ok := backRepo.BackRepoSync.Map_SyncPtr_SyncDBID[sync]; ok {

		if id, ok := backRepo.BackRepoSync.Map_SyncPtr_SyncDBID[sync]; ok {
			var syncDB SyncDB
			syncDB.ID = id

			if err := backRepo.BackRepoSync.db.First(&syncDB, id).Error; err != nil {
				log.Fatalln("CheckoutSync : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSync.CheckoutPhaseOneInstance(&syncDB)
			backRepo.BackRepoSync.CheckoutPhaseTwoInstance(backRepo, &syncDB)
		}
	}
}

// CopyBasicFieldsFromSync
func (syncDB *SyncDB) CopyBasicFieldsFromSync(sync *models.Sync) {
	// insertion point for fields commit

	syncDB.Name_Data.String = sync.Name
	syncDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSync_WOP
func (syncDB *SyncDB) CopyBasicFieldsFromSync_WOP(sync *models.Sync_WOP) {
	// insertion point for fields commit

	syncDB.Name_Data.String = sync.Name
	syncDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSyncWOP
func (syncDB *SyncDB) CopyBasicFieldsFromSyncWOP(sync *SyncWOP) {
	// insertion point for fields commit

	syncDB.Name_Data.String = sync.Name
	syncDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSync
func (syncDB *SyncDB) CopyBasicFieldsToSync(sync *models.Sync) {
	// insertion point for checkout of basic fields (back repo to stage)
	sync.Name = syncDB.Name_Data.String
}

// CopyBasicFieldsToSync_WOP
func (syncDB *SyncDB) CopyBasicFieldsToSync_WOP(sync *models.Sync_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	sync.Name = syncDB.Name_Data.String
}

// CopyBasicFieldsToSyncWOP
func (syncDB *SyncDB) CopyBasicFieldsToSyncWOP(sync *SyncWOP) {
	sync.ID = int(syncDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	sync.Name = syncDB.Name_Data.String
}

// Backup generates a json file from a slice of all SyncDB instances in the backrepo
func (backRepoSync *BackRepoSyncStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SyncDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SyncDB, 0)
	for _, syncDB := range backRepoSync.Map_SyncDBID_SyncDB {
		forBackup = append(forBackup, syncDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Sync ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Sync file", err.Error())
	}
}

// Backup generates a json file from a slice of all SyncDB instances in the backrepo
func (backRepoSync *BackRepoSyncStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SyncDB, 0)
	for _, syncDB := range backRepoSync.Map_SyncDBID_SyncDB {
		forBackup = append(forBackup, syncDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Sync")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Sync_Fields, -1)
	for _, syncDB := range forBackup {

		var syncWOP SyncWOP
		syncDB.CopyBasicFieldsToSyncWOP(&syncWOP)

		row := sh.AddRow()
		row.WriteStruct(&syncWOP, -1)
	}
}

// RestoreXL from the "Sync" sheet all SyncDB instances
func (backRepoSync *BackRepoSyncStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSyncid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Sync"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSync.rowVisitorSync)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSync *BackRepoSyncStruct) rowVisitorSync(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var syncWOP SyncWOP
		row.ReadStruct(&syncWOP)

		// add the unmarshalled struct to the stage
		syncDB := new(SyncDB)
		syncDB.CopyBasicFieldsFromSyncWOP(&syncWOP)

		syncDB_ID_atBackupTime := syncDB.ID
		syncDB.ID = 0
		query := backRepoSync.db.Create(syncDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSync.Map_SyncDBID_SyncDB[syncDB.ID] = syncDB
		BackRepoSyncid_atBckpTime_newID[syncDB_ID_atBackupTime] = syncDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SyncDB.json" in dirPath that stores an array
// of SyncDB and stores it in the database
// the map BackRepoSyncid_atBckpTime_newID is updated accordingly
func (backRepoSync *BackRepoSyncStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSyncid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SyncDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Sync file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SyncDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SyncDBID_SyncDB
	for _, syncDB := range forRestore {

		syncDB_ID_atBackupTime := syncDB.ID
		syncDB.ID = 0
		query := backRepoSync.db.Create(syncDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSync.Map_SyncDBID_SyncDB[syncDB.ID] = syncDB
		BackRepoSyncid_atBckpTime_newID[syncDB_ID_atBackupTime] = syncDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Sync file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Sync>id_atBckpTime_newID
// to compute new index
func (backRepoSync *BackRepoSyncStruct) RestorePhaseTwo() {

	for _, syncDB := range backRepoSync.Map_SyncDBID_SyncDB {

		// next line of code is to avert unused variable compilation error
		_ = syncDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSync.db.Model(syncDB).Updates(*syncDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSync.ResetReversePointers commits all staged instances of Sync to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSync *BackRepoSyncStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, sync := range backRepoSync.Map_SyncDBID_SyncPtr {
		backRepoSync.ResetReversePointersInstance(backRepo, idx, sync)
	}

	return
}

func (backRepoSync *BackRepoSyncStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, sync *models.Sync) (Error error) {

	// fetch matching syncDB
	if syncDB, ok := backRepoSync.Map_SyncDBID_SyncDB[idx]; ok {
		_ = syncDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSyncid_atBckpTime_newID map[uint]uint
