// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Part_list_sql sql.NullBool
var dummy_Part_list_time time.Duration
var dummy_Part_list_sort sort.Float64Slice

// Part_listAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model part_listAPI
type Part_listAPI struct {
	gorm.Model

	models.Part_list_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Part_listPointersEncoding Part_listPointersEncoding
}

// Part_listPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Part_listPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Part_listDB describes a part_list in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model part_listDB
type Part_listDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field part_listDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Part_listPointersEncoding
}

// Part_listDBs arrays part_listDBs
// swagger:response part_listDBsResponse
type Part_listDBs []Part_listDB

// Part_listDBResponse provides response
// swagger:response part_listDBResponse
type Part_listDBResponse struct {
	Part_listDB
}

// Part_listWOP is a Part_list without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Part_listWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Part_list_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPart_listStruct struct {
	// stores Part_listDB according to their gorm ID
	Map_Part_listDBID_Part_listDB map[uint]*Part_listDB

	// stores Part_listDB ID according to Part_list address
	Map_Part_listPtr_Part_listDBID map[*models.Part_list]uint

	// stores Part_list according to their gorm ID
	Map_Part_listDBID_Part_listPtr map[uint]*models.Part_list

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPart_list *BackRepoPart_listStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPart_list.stage
	return
}

func (backRepoPart_list *BackRepoPart_listStruct) GetDB() *gorm.DB {
	return backRepoPart_list.db
}

// GetPart_listDBFromPart_listPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPart_list *BackRepoPart_listStruct) GetPart_listDBFromPart_listPtr(part_list *models.Part_list) (part_listDB *Part_listDB) {
	id := backRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list]
	part_listDB = backRepoPart_list.Map_Part_listDBID_Part_listDB[id]
	return
}

// BackRepoPart_list.CommitPhaseOne commits all staged instances of Part_list to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_list *BackRepoPart_listStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for part_list := range stage.Part_lists {
		backRepoPart_list.CommitPhaseOneInstance(part_list)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, part_list := range backRepoPart_list.Map_Part_listDBID_Part_listPtr {
		if _, ok := stage.Part_lists[part_list]; !ok {
			backRepoPart_list.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPart_list.CommitDeleteInstance commits deletion of Part_list to the BackRepo
func (backRepoPart_list *BackRepoPart_listStruct) CommitDeleteInstance(id uint) (Error error) {

	part_list := backRepoPart_list.Map_Part_listDBID_Part_listPtr[id]

	// part_list is not staged anymore, remove part_listDB
	part_listDB := backRepoPart_list.Map_Part_listDBID_Part_listDB[id]
	query := backRepoPart_list.db.Unscoped().Delete(&part_listDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPart_list.Map_Part_listPtr_Part_listDBID, part_list)
	delete(backRepoPart_list.Map_Part_listDBID_Part_listPtr, id)
	delete(backRepoPart_list.Map_Part_listDBID_Part_listDB, id)

	return
}

// BackRepoPart_list.CommitPhaseOneInstance commits part_list staged instances of Part_list to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_list *BackRepoPart_listStruct) CommitPhaseOneInstance(part_list *models.Part_list) (Error error) {

	// check if the part_list is not commited yet
	if _, ok := backRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list]; ok {
		return
	}

	// initiate part_list
	var part_listDB Part_listDB
	part_listDB.CopyBasicFieldsFromPart_list(part_list)

	query := backRepoPart_list.db.Create(&part_listDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list] = part_listDB.ID
	backRepoPart_list.Map_Part_listDBID_Part_listPtr[part_listDB.ID] = part_list
	backRepoPart_list.Map_Part_listDBID_Part_listDB[part_listDB.ID] = &part_listDB

	return
}

// BackRepoPart_list.CommitPhaseTwo commits all staged instances of Part_list to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_list *BackRepoPart_listStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, part_list := range backRepoPart_list.Map_Part_listDBID_Part_listPtr {
		backRepoPart_list.CommitPhaseTwoInstance(backRepo, idx, part_list)
	}

	return
}

// BackRepoPart_list.CommitPhaseTwoInstance commits {{structname }} of models.Part_list to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_list *BackRepoPart_listStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, part_list *models.Part_list) (Error error) {

	// fetch matching part_listDB
	if part_listDB, ok := backRepoPart_list.Map_Part_listDBID_Part_listDB[idx]; ok {

		part_listDB.CopyBasicFieldsFromPart_list(part_list)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPart_list.db.Save(&part_listDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Part_list intance %s", part_list.Name))
		return err
	}

	return
}

// BackRepoPart_list.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPart_list *BackRepoPart_listStruct) CheckoutPhaseOne() (Error error) {

	part_listDBArray := make([]Part_listDB, 0)
	query := backRepoPart_list.db.Find(&part_listDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	part_listInstancesToBeRemovedFromTheStage := make(map[*models.Part_list]any)
	for key, value := range backRepoPart_list.stage.Part_lists {
		part_listInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, part_listDB := range part_listDBArray {
		backRepoPart_list.CheckoutPhaseOneInstance(&part_listDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		part_list, ok := backRepoPart_list.Map_Part_listDBID_Part_listPtr[part_listDB.ID]
		if ok {
			delete(part_listInstancesToBeRemovedFromTheStage, part_list)
		}
	}

	// remove from stage and back repo's 3 maps all part_lists that are not in the checkout
	for part_list := range part_listInstancesToBeRemovedFromTheStage {
		part_list.Unstage(backRepoPart_list.GetStage())

		// remove instance from the back repo 3 maps
		part_listID := backRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list]
		delete(backRepoPart_list.Map_Part_listPtr_Part_listDBID, part_list)
		delete(backRepoPart_list.Map_Part_listDBID_Part_listDB, part_listID)
		delete(backRepoPart_list.Map_Part_listDBID_Part_listPtr, part_listID)
	}

	return
}

// CheckoutPhaseOneInstance takes a part_listDB that has been found in the DB, updates the backRepo and stages the
// models version of the part_listDB
func (backRepoPart_list *BackRepoPart_listStruct) CheckoutPhaseOneInstance(part_listDB *Part_listDB) (Error error) {

	part_list, ok := backRepoPart_list.Map_Part_listDBID_Part_listPtr[part_listDB.ID]
	if !ok {
		part_list = new(models.Part_list)

		backRepoPart_list.Map_Part_listDBID_Part_listPtr[part_listDB.ID] = part_list
		backRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list] = part_listDB.ID

		// append model store with the new element
		part_list.Name = part_listDB.Name_Data.String
		part_list.Stage(backRepoPart_list.GetStage())
	}
	part_listDB.CopyBasicFieldsToPart_list(part_list)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	part_list.Stage(backRepoPart_list.GetStage())

	// preserve pointer to part_listDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Part_listDBID_Part_listDB)[part_listDB hold variable pointers
	part_listDB_Data := *part_listDB
	preservedPtrToPart_list := &part_listDB_Data
	backRepoPart_list.Map_Part_listDBID_Part_listDB[part_listDB.ID] = preservedPtrToPart_list

	return
}

// BackRepoPart_list.CheckoutPhaseTwo Checkouts all staged instances of Part_list to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_list *BackRepoPart_listStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, part_listDB := range backRepoPart_list.Map_Part_listDBID_Part_listDB {
		backRepoPart_list.CheckoutPhaseTwoInstance(backRepo, part_listDB)
	}
	return
}

// BackRepoPart_list.CheckoutPhaseTwoInstance Checkouts staged instances of Part_list to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_list *BackRepoPart_listStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, part_listDB *Part_listDB) (Error error) {

	part_list := backRepoPart_list.Map_Part_listDBID_Part_listPtr[part_listDB.ID]

	part_listDB.DecodePointers(backRepo, part_list)

	return
}

func (part_listDB *Part_listDB) DecodePointers(backRepo *BackRepoStruct, part_list *models.Part_list) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPart_list allows commit of a single part_list (if already staged)
func (backRepo *BackRepoStruct) CommitPart_list(part_list *models.Part_list) {
	backRepo.BackRepoPart_list.CommitPhaseOneInstance(part_list)
	if id, ok := backRepo.BackRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list]; ok {
		backRepo.BackRepoPart_list.CommitPhaseTwoInstance(backRepo, id, part_list)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPart_list allows checkout of a single part_list (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPart_list(part_list *models.Part_list) {
	// check if the part_list is staged
	if _, ok := backRepo.BackRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list]; ok {

		if id, ok := backRepo.BackRepoPart_list.Map_Part_listPtr_Part_listDBID[part_list]; ok {
			var part_listDB Part_listDB
			part_listDB.ID = id

			if err := backRepo.BackRepoPart_list.db.First(&part_listDB, id).Error; err != nil {
				log.Fatalln("CheckoutPart_list : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPart_list.CheckoutPhaseOneInstance(&part_listDB)
			backRepo.BackRepoPart_list.CheckoutPhaseTwoInstance(backRepo, &part_listDB)
		}
	}
}

// CopyBasicFieldsFromPart_list
func (part_listDB *Part_listDB) CopyBasicFieldsFromPart_list(part_list *models.Part_list) {
	// insertion point for fields commit

	part_listDB.Name_Data.String = part_list.Name
	part_listDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_list_WOP
func (part_listDB *Part_listDB) CopyBasicFieldsFromPart_list_WOP(part_list *models.Part_list_WOP) {
	// insertion point for fields commit

	part_listDB.Name_Data.String = part_list.Name
	part_listDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_listWOP
func (part_listDB *Part_listDB) CopyBasicFieldsFromPart_listWOP(part_list *Part_listWOP) {
	// insertion point for fields commit

	part_listDB.Name_Data.String = part_list.Name
	part_listDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPart_list
func (part_listDB *Part_listDB) CopyBasicFieldsToPart_list(part_list *models.Part_list) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_list.Name = part_listDB.Name_Data.String
}

// CopyBasicFieldsToPart_list_WOP
func (part_listDB *Part_listDB) CopyBasicFieldsToPart_list_WOP(part_list *models.Part_list_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_list.Name = part_listDB.Name_Data.String
}

// CopyBasicFieldsToPart_listWOP
func (part_listDB *Part_listDB) CopyBasicFieldsToPart_listWOP(part_list *Part_listWOP) {
	part_list.ID = int(part_listDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	part_list.Name = part_listDB.Name_Data.String
}

// Backup generates a json file from a slice of all Part_listDB instances in the backrepo
func (backRepoPart_list *BackRepoPart_listStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Part_listDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_listDB, 0)
	for _, part_listDB := range backRepoPart_list.Map_Part_listDBID_Part_listDB {
		forBackup = append(forBackup, part_listDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Part_list ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Part_list file", err.Error())
	}
}

// Backup generates a json file from a slice of all Part_listDB instances in the backrepo
func (backRepoPart_list *BackRepoPart_listStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_listDB, 0)
	for _, part_listDB := range backRepoPart_list.Map_Part_listDBID_Part_listDB {
		forBackup = append(forBackup, part_listDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Part_list")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Part_list_Fields, -1)
	for _, part_listDB := range forBackup {

		var part_listWOP Part_listWOP
		part_listDB.CopyBasicFieldsToPart_listWOP(&part_listWOP)

		row := sh.AddRow()
		row.WriteStruct(&part_listWOP, -1)
	}
}

// RestoreXL from the "Part_list" sheet all Part_listDB instances
func (backRepoPart_list *BackRepoPart_listStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPart_listid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Part_list"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPart_list.rowVisitorPart_list)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPart_list *BackRepoPart_listStruct) rowVisitorPart_list(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var part_listWOP Part_listWOP
		row.ReadStruct(&part_listWOP)

		// add the unmarshalled struct to the stage
		part_listDB := new(Part_listDB)
		part_listDB.CopyBasicFieldsFromPart_listWOP(&part_listWOP)

		part_listDB_ID_atBackupTime := part_listDB.ID
		part_listDB.ID = 0
		query := backRepoPart_list.db.Create(part_listDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_list.Map_Part_listDBID_Part_listDB[part_listDB.ID] = part_listDB
		BackRepoPart_listid_atBckpTime_newID[part_listDB_ID_atBackupTime] = part_listDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Part_listDB.json" in dirPath that stores an array
// of Part_listDB and stores it in the database
// the map BackRepoPart_listid_atBckpTime_newID is updated accordingly
func (backRepoPart_list *BackRepoPart_listStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPart_listid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Part_listDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Part_list file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Part_listDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Part_listDBID_Part_listDB
	for _, part_listDB := range forRestore {

		part_listDB_ID_atBackupTime := part_listDB.ID
		part_listDB.ID = 0
		query := backRepoPart_list.db.Create(part_listDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_list.Map_Part_listDBID_Part_listDB[part_listDB.ID] = part_listDB
		BackRepoPart_listid_atBckpTime_newID[part_listDB_ID_atBackupTime] = part_listDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Part_list file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Part_list>id_atBckpTime_newID
// to compute new index
func (backRepoPart_list *BackRepoPart_listStruct) RestorePhaseTwo() {

	for _, part_listDB := range backRepoPart_list.Map_Part_listDBID_Part_listDB {

		// next line of code is to avert unused variable compilation error
		_ = part_listDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPart_list.db.Model(part_listDB).Updates(*part_listDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPart_list.ResetReversePointers commits all staged instances of Part_list to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_list *BackRepoPart_listStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, part_list := range backRepoPart_list.Map_Part_listDBID_Part_listPtr {
		backRepoPart_list.ResetReversePointersInstance(backRepo, idx, part_list)
	}

	return
}

func (backRepoPart_list *BackRepoPart_listStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, part_list *models.Part_list) (Error error) {

	// fetch matching part_listDB
	if part_listDB, ok := backRepoPart_list.Map_Part_listDBID_Part_listDB[idx]; ok {
		_ = part_listDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPart_listid_atBckpTime_newID map[uint]uint
