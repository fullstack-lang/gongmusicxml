// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Frame_note_sql sql.NullBool
var dummy_Frame_note_time time.Duration
var dummy_Frame_note_sort sort.Float64Slice

// Frame_noteAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model frame_noteAPI
type Frame_noteAPI struct {
	gorm.Model

	models.Frame_note_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Frame_notePointersEncoding Frame_notePointersEncoding
}

// Frame_notePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Frame_notePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Fret is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FretID sql.NullInt64

	// field Fingering is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FingeringID sql.NullInt64

	// field Barre is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	BarreID sql.NullInt64
}

// Frame_noteDB describes a frame_note in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model frame_noteDB
type Frame_noteDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field frame_noteDB.Name
	Name_Data sql.NullString

	// Declation for basic field frame_noteDB.Astring
	Astring_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Frame_notePointersEncoding
}

// Frame_noteDBs arrays frame_noteDBs
// swagger:response frame_noteDBsResponse
type Frame_noteDBs []Frame_noteDB

// Frame_noteDBResponse provides response
// swagger:response frame_noteDBResponse
type Frame_noteDBResponse struct {
	Frame_noteDB
}

// Frame_noteWOP is a Frame_note without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Frame_noteWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Astring string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Frame_note_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Astring",
}

type BackRepoFrame_noteStruct struct {
	// stores Frame_noteDB according to their gorm ID
	Map_Frame_noteDBID_Frame_noteDB map[uint]*Frame_noteDB

	// stores Frame_noteDB ID according to Frame_note address
	Map_Frame_notePtr_Frame_noteDBID map[*models.Frame_note]uint

	// stores Frame_note according to their gorm ID
	Map_Frame_noteDBID_Frame_notePtr map[uint]*models.Frame_note

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFrame_note *BackRepoFrame_noteStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFrame_note.stage
	return
}

func (backRepoFrame_note *BackRepoFrame_noteStruct) GetDB() *gorm.DB {
	return backRepoFrame_note.db
}

// GetFrame_noteDBFromFrame_notePtr is a handy function to access the back repo instance from the stage instance
func (backRepoFrame_note *BackRepoFrame_noteStruct) GetFrame_noteDBFromFrame_notePtr(frame_note *models.Frame_note) (frame_noteDB *Frame_noteDB) {
	id := backRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note]
	frame_noteDB = backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[id]
	return
}

// BackRepoFrame_note.CommitPhaseOne commits all staged instances of Frame_note to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrame_note *BackRepoFrame_noteStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for frame_note := range stage.Frame_notes {
		backRepoFrame_note.CommitPhaseOneInstance(frame_note)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, frame_note := range backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr {
		if _, ok := stage.Frame_notes[frame_note]; !ok {
			backRepoFrame_note.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFrame_note.CommitDeleteInstance commits deletion of Frame_note to the BackRepo
func (backRepoFrame_note *BackRepoFrame_noteStruct) CommitDeleteInstance(id uint) (Error error) {

	frame_note := backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr[id]

	// frame_note is not staged anymore, remove frame_noteDB
	frame_noteDB := backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[id]
	query := backRepoFrame_note.db.Unscoped().Delete(&frame_noteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID, frame_note)
	delete(backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr, id)
	delete(backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB, id)

	return
}

// BackRepoFrame_note.CommitPhaseOneInstance commits frame_note staged instances of Frame_note to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrame_note *BackRepoFrame_noteStruct) CommitPhaseOneInstance(frame_note *models.Frame_note) (Error error) {

	// check if the frame_note is not commited yet
	if _, ok := backRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note]; ok {
		return
	}

	// initiate frame_note
	var frame_noteDB Frame_noteDB
	frame_noteDB.CopyBasicFieldsFromFrame_note(frame_note)

	query := backRepoFrame_note.db.Create(&frame_noteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note] = frame_noteDB.ID
	backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr[frame_noteDB.ID] = frame_note
	backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[frame_noteDB.ID] = &frame_noteDB

	return
}

// BackRepoFrame_note.CommitPhaseTwo commits all staged instances of Frame_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame_note *BackRepoFrame_noteStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, frame_note := range backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr {
		backRepoFrame_note.CommitPhaseTwoInstance(backRepo, idx, frame_note)
	}

	return
}

// BackRepoFrame_note.CommitPhaseTwoInstance commits {{structname }} of models.Frame_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame_note *BackRepoFrame_noteStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, frame_note *models.Frame_note) (Error error) {

	// fetch matching frame_noteDB
	if frame_noteDB, ok := backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[idx]; ok {

		frame_noteDB.CopyBasicFieldsFromFrame_note(frame_note)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value frame_note.Fret translates to updating the frame_note.FretID
		frame_noteDB.FretID.Valid = true // allow for a 0 value (nil association)
		if frame_note.Fret != nil {
			if FretId, ok := backRepo.BackRepoFret.Map_FretPtr_FretDBID[frame_note.Fret]; ok {
				frame_noteDB.FretID.Int64 = int64(FretId)
				frame_noteDB.FretID.Valid = true
			}
		} else {
			frame_noteDB.FretID.Int64 = 0
			frame_noteDB.FretID.Valid = true
		}

		// commit pointer value frame_note.Fingering translates to updating the frame_note.FingeringID
		frame_noteDB.FingeringID.Valid = true // allow for a 0 value (nil association)
		if frame_note.Fingering != nil {
			if FingeringId, ok := backRepo.BackRepoFingering.Map_FingeringPtr_FingeringDBID[frame_note.Fingering]; ok {
				frame_noteDB.FingeringID.Int64 = int64(FingeringId)
				frame_noteDB.FingeringID.Valid = true
			}
		} else {
			frame_noteDB.FingeringID.Int64 = 0
			frame_noteDB.FingeringID.Valid = true
		}

		// commit pointer value frame_note.Barre translates to updating the frame_note.BarreID
		frame_noteDB.BarreID.Valid = true // allow for a 0 value (nil association)
		if frame_note.Barre != nil {
			if BarreId, ok := backRepo.BackRepoBarre.Map_BarrePtr_BarreDBID[frame_note.Barre]; ok {
				frame_noteDB.BarreID.Int64 = int64(BarreId)
				frame_noteDB.BarreID.Valid = true
			}
		} else {
			frame_noteDB.BarreID.Int64 = 0
			frame_noteDB.BarreID.Valid = true
		}

		query := backRepoFrame_note.db.Save(&frame_noteDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Frame_note intance %s", frame_note.Name))
		return err
	}

	return
}

// BackRepoFrame_note.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFrame_note *BackRepoFrame_noteStruct) CheckoutPhaseOne() (Error error) {

	frame_noteDBArray := make([]Frame_noteDB, 0)
	query := backRepoFrame_note.db.Find(&frame_noteDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	frame_noteInstancesToBeRemovedFromTheStage := make(map[*models.Frame_note]any)
	for key, value := range backRepoFrame_note.stage.Frame_notes {
		frame_noteInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, frame_noteDB := range frame_noteDBArray {
		backRepoFrame_note.CheckoutPhaseOneInstance(&frame_noteDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		frame_note, ok := backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr[frame_noteDB.ID]
		if ok {
			delete(frame_noteInstancesToBeRemovedFromTheStage, frame_note)
		}
	}

	// remove from stage and back repo's 3 maps all frame_notes that are not in the checkout
	for frame_note := range frame_noteInstancesToBeRemovedFromTheStage {
		frame_note.Unstage(backRepoFrame_note.GetStage())

		// remove instance from the back repo 3 maps
		frame_noteID := backRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note]
		delete(backRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID, frame_note)
		delete(backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB, frame_noteID)
		delete(backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr, frame_noteID)
	}

	return
}

// CheckoutPhaseOneInstance takes a frame_noteDB that has been found in the DB, updates the backRepo and stages the
// models version of the frame_noteDB
func (backRepoFrame_note *BackRepoFrame_noteStruct) CheckoutPhaseOneInstance(frame_noteDB *Frame_noteDB) (Error error) {

	frame_note, ok := backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr[frame_noteDB.ID]
	if !ok {
		frame_note = new(models.Frame_note)

		backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr[frame_noteDB.ID] = frame_note
		backRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note] = frame_noteDB.ID

		// append model store with the new element
		frame_note.Name = frame_noteDB.Name_Data.String
		frame_note.Stage(backRepoFrame_note.GetStage())
	}
	frame_noteDB.CopyBasicFieldsToFrame_note(frame_note)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	frame_note.Stage(backRepoFrame_note.GetStage())

	// preserve pointer to frame_noteDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Frame_noteDBID_Frame_noteDB)[frame_noteDB hold variable pointers
	frame_noteDB_Data := *frame_noteDB
	preservedPtrToFrame_note := &frame_noteDB_Data
	backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[frame_noteDB.ID] = preservedPtrToFrame_note

	return
}

// BackRepoFrame_note.CheckoutPhaseTwo Checkouts all staged instances of Frame_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame_note *BackRepoFrame_noteStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, frame_noteDB := range backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB {
		backRepoFrame_note.CheckoutPhaseTwoInstance(backRepo, frame_noteDB)
	}
	return
}

// BackRepoFrame_note.CheckoutPhaseTwoInstance Checkouts staged instances of Frame_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame_note *BackRepoFrame_noteStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, frame_noteDB *Frame_noteDB) (Error error) {

	frame_note := backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr[frame_noteDB.ID]

	frame_noteDB.DecodePointers(backRepo, frame_note)

	return
}

func (frame_noteDB *Frame_noteDB) DecodePointers(backRepo *BackRepoStruct, frame_note *models.Frame_note) {

	// insertion point for checkout of pointer encoding
	// Fret field
	frame_note.Fret = nil
	if frame_noteDB.FretID.Int64 != 0 {
		frame_note.Fret = backRepo.BackRepoFret.Map_FretDBID_FretPtr[uint(frame_noteDB.FretID.Int64)]
	}
	// Fingering field
	frame_note.Fingering = nil
	if frame_noteDB.FingeringID.Int64 != 0 {
		frame_note.Fingering = backRepo.BackRepoFingering.Map_FingeringDBID_FingeringPtr[uint(frame_noteDB.FingeringID.Int64)]
	}
	// Barre field
	frame_note.Barre = nil
	if frame_noteDB.BarreID.Int64 != 0 {
		frame_note.Barre = backRepo.BackRepoBarre.Map_BarreDBID_BarrePtr[uint(frame_noteDB.BarreID.Int64)]
	}
	return
}

// CommitFrame_note allows commit of a single frame_note (if already staged)
func (backRepo *BackRepoStruct) CommitFrame_note(frame_note *models.Frame_note) {
	backRepo.BackRepoFrame_note.CommitPhaseOneInstance(frame_note)
	if id, ok := backRepo.BackRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note]; ok {
		backRepo.BackRepoFrame_note.CommitPhaseTwoInstance(backRepo, id, frame_note)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFrame_note allows checkout of a single frame_note (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFrame_note(frame_note *models.Frame_note) {
	// check if the frame_note is staged
	if _, ok := backRepo.BackRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note]; ok {

		if id, ok := backRepo.BackRepoFrame_note.Map_Frame_notePtr_Frame_noteDBID[frame_note]; ok {
			var frame_noteDB Frame_noteDB
			frame_noteDB.ID = id

			if err := backRepo.BackRepoFrame_note.db.First(&frame_noteDB, id).Error; err != nil {
				log.Fatalln("CheckoutFrame_note : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFrame_note.CheckoutPhaseOneInstance(&frame_noteDB)
			backRepo.BackRepoFrame_note.CheckoutPhaseTwoInstance(backRepo, &frame_noteDB)
		}
	}
}

// CopyBasicFieldsFromFrame_note
func (frame_noteDB *Frame_noteDB) CopyBasicFieldsFromFrame_note(frame_note *models.Frame_note) {
	// insertion point for fields commit

	frame_noteDB.Name_Data.String = frame_note.Name
	frame_noteDB.Name_Data.Valid = true

	frame_noteDB.Astring_Data.String = frame_note.Astring
	frame_noteDB.Astring_Data.Valid = true
}

// CopyBasicFieldsFromFrame_note_WOP
func (frame_noteDB *Frame_noteDB) CopyBasicFieldsFromFrame_note_WOP(frame_note *models.Frame_note_WOP) {
	// insertion point for fields commit

	frame_noteDB.Name_Data.String = frame_note.Name
	frame_noteDB.Name_Data.Valid = true

	frame_noteDB.Astring_Data.String = frame_note.Astring
	frame_noteDB.Astring_Data.Valid = true
}

// CopyBasicFieldsFromFrame_noteWOP
func (frame_noteDB *Frame_noteDB) CopyBasicFieldsFromFrame_noteWOP(frame_note *Frame_noteWOP) {
	// insertion point for fields commit

	frame_noteDB.Name_Data.String = frame_note.Name
	frame_noteDB.Name_Data.Valid = true

	frame_noteDB.Astring_Data.String = frame_note.Astring
	frame_noteDB.Astring_Data.Valid = true
}

// CopyBasicFieldsToFrame_note
func (frame_noteDB *Frame_noteDB) CopyBasicFieldsToFrame_note(frame_note *models.Frame_note) {
	// insertion point for checkout of basic fields (back repo to stage)
	frame_note.Name = frame_noteDB.Name_Data.String
	frame_note.Astring = frame_noteDB.Astring_Data.String
}

// CopyBasicFieldsToFrame_note_WOP
func (frame_noteDB *Frame_noteDB) CopyBasicFieldsToFrame_note_WOP(frame_note *models.Frame_note_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	frame_note.Name = frame_noteDB.Name_Data.String
	frame_note.Astring = frame_noteDB.Astring_Data.String
}

// CopyBasicFieldsToFrame_noteWOP
func (frame_noteDB *Frame_noteDB) CopyBasicFieldsToFrame_noteWOP(frame_note *Frame_noteWOP) {
	frame_note.ID = int(frame_noteDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	frame_note.Name = frame_noteDB.Name_Data.String
	frame_note.Astring = frame_noteDB.Astring_Data.String
}

// Backup generates a json file from a slice of all Frame_noteDB instances in the backrepo
func (backRepoFrame_note *BackRepoFrame_noteStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Frame_noteDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Frame_noteDB, 0)
	for _, frame_noteDB := range backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB {
		forBackup = append(forBackup, frame_noteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Frame_note ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Frame_note file", err.Error())
	}
}

// Backup generates a json file from a slice of all Frame_noteDB instances in the backrepo
func (backRepoFrame_note *BackRepoFrame_noteStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Frame_noteDB, 0)
	for _, frame_noteDB := range backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB {
		forBackup = append(forBackup, frame_noteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Frame_note")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Frame_note_Fields, -1)
	for _, frame_noteDB := range forBackup {

		var frame_noteWOP Frame_noteWOP
		frame_noteDB.CopyBasicFieldsToFrame_noteWOP(&frame_noteWOP)

		row := sh.AddRow()
		row.WriteStruct(&frame_noteWOP, -1)
	}
}

// RestoreXL from the "Frame_note" sheet all Frame_noteDB instances
func (backRepoFrame_note *BackRepoFrame_noteStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFrame_noteid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Frame_note"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFrame_note.rowVisitorFrame_note)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFrame_note *BackRepoFrame_noteStruct) rowVisitorFrame_note(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var frame_noteWOP Frame_noteWOP
		row.ReadStruct(&frame_noteWOP)

		// add the unmarshalled struct to the stage
		frame_noteDB := new(Frame_noteDB)
		frame_noteDB.CopyBasicFieldsFromFrame_noteWOP(&frame_noteWOP)

		frame_noteDB_ID_atBackupTime := frame_noteDB.ID
		frame_noteDB.ID = 0
		query := backRepoFrame_note.db.Create(frame_noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[frame_noteDB.ID] = frame_noteDB
		BackRepoFrame_noteid_atBckpTime_newID[frame_noteDB_ID_atBackupTime] = frame_noteDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Frame_noteDB.json" in dirPath that stores an array
// of Frame_noteDB and stores it in the database
// the map BackRepoFrame_noteid_atBckpTime_newID is updated accordingly
func (backRepoFrame_note *BackRepoFrame_noteStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFrame_noteid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Frame_noteDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Frame_note file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Frame_noteDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Frame_noteDBID_Frame_noteDB
	for _, frame_noteDB := range forRestore {

		frame_noteDB_ID_atBackupTime := frame_noteDB.ID
		frame_noteDB.ID = 0
		query := backRepoFrame_note.db.Create(frame_noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[frame_noteDB.ID] = frame_noteDB
		BackRepoFrame_noteid_atBckpTime_newID[frame_noteDB_ID_atBackupTime] = frame_noteDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Frame_note file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Frame_note>id_atBckpTime_newID
// to compute new index
func (backRepoFrame_note *BackRepoFrame_noteStruct) RestorePhaseTwo() {

	for _, frame_noteDB := range backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB {

		// next line of code is to avert unused variable compilation error
		_ = frame_noteDB

		// insertion point for reindexing pointers encoding
		// reindexing Fret field
		if frame_noteDB.FretID.Int64 != 0 {
			frame_noteDB.FretID.Int64 = int64(BackRepoFretid_atBckpTime_newID[uint(frame_noteDB.FretID.Int64)])
			frame_noteDB.FretID.Valid = true
		}

		// reindexing Fingering field
		if frame_noteDB.FingeringID.Int64 != 0 {
			frame_noteDB.FingeringID.Int64 = int64(BackRepoFingeringid_atBckpTime_newID[uint(frame_noteDB.FingeringID.Int64)])
			frame_noteDB.FingeringID.Valid = true
		}

		// reindexing Barre field
		if frame_noteDB.BarreID.Int64 != 0 {
			frame_noteDB.BarreID.Int64 = int64(BackRepoBarreid_atBckpTime_newID[uint(frame_noteDB.BarreID.Int64)])
			frame_noteDB.BarreID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoFrame_note.db.Model(frame_noteDB).Updates(*frame_noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFrame_note.ResetReversePointers commits all staged instances of Frame_note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame_note *BackRepoFrame_noteStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, frame_note := range backRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr {
		backRepoFrame_note.ResetReversePointersInstance(backRepo, idx, frame_note)
	}

	return
}

func (backRepoFrame_note *BackRepoFrame_noteStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, frame_note *models.Frame_note) (Error error) {

	// fetch matching frame_noteDB
	if frame_noteDB, ok := backRepoFrame_note.Map_Frame_noteDBID_Frame_noteDB[idx]; ok {
		_ = frame_noteDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFrame_noteid_atBckpTime_newID map[uint]uint
