// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Measure_repeat_sql sql.NullBool
var dummy_Measure_repeat_time time.Duration
var dummy_Measure_repeat_sort sort.Float64Slice

// Measure_repeatAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model measure_repeatAPI
type Measure_repeatAPI struct {
	gorm.Model

	models.Measure_repeat_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Measure_repeatPointersEncoding Measure_repeatPointersEncoding
}

// Measure_repeatPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Measure_repeatPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Measure_repeatDB describes a measure_repeat in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model measure_repeatDB
type Measure_repeatDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field measure_repeatDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Measure_repeatPointersEncoding
}

// Measure_repeatDBs arrays measure_repeatDBs
// swagger:response measure_repeatDBsResponse
type Measure_repeatDBs []Measure_repeatDB

// Measure_repeatDBResponse provides response
// swagger:response measure_repeatDBResponse
type Measure_repeatDBResponse struct {
	Measure_repeatDB
}

// Measure_repeatWOP is a Measure_repeat without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Measure_repeatWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Measure_repeat_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMeasure_repeatStruct struct {
	// stores Measure_repeatDB according to their gorm ID
	Map_Measure_repeatDBID_Measure_repeatDB map[uint]*Measure_repeatDB

	// stores Measure_repeatDB ID according to Measure_repeat address
	Map_Measure_repeatPtr_Measure_repeatDBID map[*models.Measure_repeat]uint

	// stores Measure_repeat according to their gorm ID
	Map_Measure_repeatDBID_Measure_repeatPtr map[uint]*models.Measure_repeat

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMeasure_repeat.stage
	return
}

func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) GetDB() *gorm.DB {
	return backRepoMeasure_repeat.db
}

// GetMeasure_repeatDBFromMeasure_repeatPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) GetMeasure_repeatDBFromMeasure_repeatPtr(measure_repeat *models.Measure_repeat) (measure_repeatDB *Measure_repeatDB) {
	id := backRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat]
	measure_repeatDB = backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[id]
	return
}

// BackRepoMeasure_repeat.CommitPhaseOne commits all staged instances of Measure_repeat to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for measure_repeat := range stage.Measure_repeats {
		backRepoMeasure_repeat.CommitPhaseOneInstance(measure_repeat)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, measure_repeat := range backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr {
		if _, ok := stage.Measure_repeats[measure_repeat]; !ok {
			backRepoMeasure_repeat.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMeasure_repeat.CommitDeleteInstance commits deletion of Measure_repeat to the BackRepo
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CommitDeleteInstance(id uint) (Error error) {

	measure_repeat := backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr[id]

	// measure_repeat is not staged anymore, remove measure_repeatDB
	measure_repeatDB := backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[id]
	query := backRepoMeasure_repeat.db.Unscoped().Delete(&measure_repeatDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID, measure_repeat)
	delete(backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr, id)
	delete(backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB, id)

	return
}

// BackRepoMeasure_repeat.CommitPhaseOneInstance commits measure_repeat staged instances of Measure_repeat to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CommitPhaseOneInstance(measure_repeat *models.Measure_repeat) (Error error) {

	// check if the measure_repeat is not commited yet
	if _, ok := backRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat]; ok {
		return
	}

	// initiate measure_repeat
	var measure_repeatDB Measure_repeatDB
	measure_repeatDB.CopyBasicFieldsFromMeasure_repeat(measure_repeat)

	query := backRepoMeasure_repeat.db.Create(&measure_repeatDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat] = measure_repeatDB.ID
	backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr[measure_repeatDB.ID] = measure_repeat
	backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[measure_repeatDB.ID] = &measure_repeatDB

	return
}

// BackRepoMeasure_repeat.CommitPhaseTwo commits all staged instances of Measure_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_repeat := range backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr {
		backRepoMeasure_repeat.CommitPhaseTwoInstance(backRepo, idx, measure_repeat)
	}

	return
}

// BackRepoMeasure_repeat.CommitPhaseTwoInstance commits {{structname }} of models.Measure_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, measure_repeat *models.Measure_repeat) (Error error) {

	// fetch matching measure_repeatDB
	if measure_repeatDB, ok := backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[idx]; ok {

		measure_repeatDB.CopyBasicFieldsFromMeasure_repeat(measure_repeat)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMeasure_repeat.db.Save(&measure_repeatDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Measure_repeat intance %s", measure_repeat.Name))
		return err
	}

	return
}

// BackRepoMeasure_repeat.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CheckoutPhaseOne() (Error error) {

	measure_repeatDBArray := make([]Measure_repeatDB, 0)
	query := backRepoMeasure_repeat.db.Find(&measure_repeatDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	measure_repeatInstancesToBeRemovedFromTheStage := make(map[*models.Measure_repeat]any)
	for key, value := range backRepoMeasure_repeat.stage.Measure_repeats {
		measure_repeatInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, measure_repeatDB := range measure_repeatDBArray {
		backRepoMeasure_repeat.CheckoutPhaseOneInstance(&measure_repeatDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		measure_repeat, ok := backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr[measure_repeatDB.ID]
		if ok {
			delete(measure_repeatInstancesToBeRemovedFromTheStage, measure_repeat)
		}
	}

	// remove from stage and back repo's 3 maps all measure_repeats that are not in the checkout
	for measure_repeat := range measure_repeatInstancesToBeRemovedFromTheStage {
		measure_repeat.Unstage(backRepoMeasure_repeat.GetStage())

		// remove instance from the back repo 3 maps
		measure_repeatID := backRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat]
		delete(backRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID, measure_repeat)
		delete(backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB, measure_repeatID)
		delete(backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr, measure_repeatID)
	}

	return
}

// CheckoutPhaseOneInstance takes a measure_repeatDB that has been found in the DB, updates the backRepo and stages the
// models version of the measure_repeatDB
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CheckoutPhaseOneInstance(measure_repeatDB *Measure_repeatDB) (Error error) {

	measure_repeat, ok := backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr[measure_repeatDB.ID]
	if !ok {
		measure_repeat = new(models.Measure_repeat)

		backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr[measure_repeatDB.ID] = measure_repeat
		backRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat] = measure_repeatDB.ID

		// append model store with the new element
		measure_repeat.Name = measure_repeatDB.Name_Data.String
		measure_repeat.Stage(backRepoMeasure_repeat.GetStage())
	}
	measure_repeatDB.CopyBasicFieldsToMeasure_repeat(measure_repeat)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	measure_repeat.Stage(backRepoMeasure_repeat.GetStage())

	// preserve pointer to measure_repeatDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Measure_repeatDBID_Measure_repeatDB)[measure_repeatDB hold variable pointers
	measure_repeatDB_Data := *measure_repeatDB
	preservedPtrToMeasure_repeat := &measure_repeatDB_Data
	backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[measure_repeatDB.ID] = preservedPtrToMeasure_repeat

	return
}

// BackRepoMeasure_repeat.CheckoutPhaseTwo Checkouts all staged instances of Measure_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, measure_repeatDB := range backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB {
		backRepoMeasure_repeat.CheckoutPhaseTwoInstance(backRepo, measure_repeatDB)
	}
	return
}

// BackRepoMeasure_repeat.CheckoutPhaseTwoInstance Checkouts staged instances of Measure_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, measure_repeatDB *Measure_repeatDB) (Error error) {

	measure_repeat := backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr[measure_repeatDB.ID]

	measure_repeatDB.DecodePointers(backRepo, measure_repeat)

	return
}

func (measure_repeatDB *Measure_repeatDB) DecodePointers(backRepo *BackRepoStruct, measure_repeat *models.Measure_repeat) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMeasure_repeat allows commit of a single measure_repeat (if already staged)
func (backRepo *BackRepoStruct) CommitMeasure_repeat(measure_repeat *models.Measure_repeat) {
	backRepo.BackRepoMeasure_repeat.CommitPhaseOneInstance(measure_repeat)
	if id, ok := backRepo.BackRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat]; ok {
		backRepo.BackRepoMeasure_repeat.CommitPhaseTwoInstance(backRepo, id, measure_repeat)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMeasure_repeat allows checkout of a single measure_repeat (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMeasure_repeat(measure_repeat *models.Measure_repeat) {
	// check if the measure_repeat is staged
	if _, ok := backRepo.BackRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat]; ok {

		if id, ok := backRepo.BackRepoMeasure_repeat.Map_Measure_repeatPtr_Measure_repeatDBID[measure_repeat]; ok {
			var measure_repeatDB Measure_repeatDB
			measure_repeatDB.ID = id

			if err := backRepo.BackRepoMeasure_repeat.db.First(&measure_repeatDB, id).Error; err != nil {
				log.Fatalln("CheckoutMeasure_repeat : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMeasure_repeat.CheckoutPhaseOneInstance(&measure_repeatDB)
			backRepo.BackRepoMeasure_repeat.CheckoutPhaseTwoInstance(backRepo, &measure_repeatDB)
		}
	}
}

// CopyBasicFieldsFromMeasure_repeat
func (measure_repeatDB *Measure_repeatDB) CopyBasicFieldsFromMeasure_repeat(measure_repeat *models.Measure_repeat) {
	// insertion point for fields commit

	measure_repeatDB.Name_Data.String = measure_repeat.Name
	measure_repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_repeat_WOP
func (measure_repeatDB *Measure_repeatDB) CopyBasicFieldsFromMeasure_repeat_WOP(measure_repeat *models.Measure_repeat_WOP) {
	// insertion point for fields commit

	measure_repeatDB.Name_Data.String = measure_repeat.Name
	measure_repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_repeatWOP
func (measure_repeatDB *Measure_repeatDB) CopyBasicFieldsFromMeasure_repeatWOP(measure_repeat *Measure_repeatWOP) {
	// insertion point for fields commit

	measure_repeatDB.Name_Data.String = measure_repeat.Name
	measure_repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMeasure_repeat
func (measure_repeatDB *Measure_repeatDB) CopyBasicFieldsToMeasure_repeat(measure_repeat *models.Measure_repeat) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_repeat.Name = measure_repeatDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_repeat_WOP
func (measure_repeatDB *Measure_repeatDB) CopyBasicFieldsToMeasure_repeat_WOP(measure_repeat *models.Measure_repeat_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_repeat.Name = measure_repeatDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_repeatWOP
func (measure_repeatDB *Measure_repeatDB) CopyBasicFieldsToMeasure_repeatWOP(measure_repeat *Measure_repeatWOP) {
	measure_repeat.ID = int(measure_repeatDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	measure_repeat.Name = measure_repeatDB.Name_Data.String
}

// Backup generates a json file from a slice of all Measure_repeatDB instances in the backrepo
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Measure_repeatDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_repeatDB, 0)
	for _, measure_repeatDB := range backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB {
		forBackup = append(forBackup, measure_repeatDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Measure_repeat ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Measure_repeat file", err.Error())
	}
}

// Backup generates a json file from a slice of all Measure_repeatDB instances in the backrepo
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_repeatDB, 0)
	for _, measure_repeatDB := range backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB {
		forBackup = append(forBackup, measure_repeatDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Measure_repeat")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Measure_repeat_Fields, -1)
	for _, measure_repeatDB := range forBackup {

		var measure_repeatWOP Measure_repeatWOP
		measure_repeatDB.CopyBasicFieldsToMeasure_repeatWOP(&measure_repeatWOP)

		row := sh.AddRow()
		row.WriteStruct(&measure_repeatWOP, -1)
	}
}

// RestoreXL from the "Measure_repeat" sheet all Measure_repeatDB instances
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMeasure_repeatid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Measure_repeat"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMeasure_repeat.rowVisitorMeasure_repeat)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) rowVisitorMeasure_repeat(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var measure_repeatWOP Measure_repeatWOP
		row.ReadStruct(&measure_repeatWOP)

		// add the unmarshalled struct to the stage
		measure_repeatDB := new(Measure_repeatDB)
		measure_repeatDB.CopyBasicFieldsFromMeasure_repeatWOP(&measure_repeatWOP)

		measure_repeatDB_ID_atBackupTime := measure_repeatDB.ID
		measure_repeatDB.ID = 0
		query := backRepoMeasure_repeat.db.Create(measure_repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[measure_repeatDB.ID] = measure_repeatDB
		BackRepoMeasure_repeatid_atBckpTime_newID[measure_repeatDB_ID_atBackupTime] = measure_repeatDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Measure_repeatDB.json" in dirPath that stores an array
// of Measure_repeatDB and stores it in the database
// the map BackRepoMeasure_repeatid_atBckpTime_newID is updated accordingly
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMeasure_repeatid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Measure_repeatDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Measure_repeat file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Measure_repeatDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Measure_repeatDBID_Measure_repeatDB
	for _, measure_repeatDB := range forRestore {

		measure_repeatDB_ID_atBackupTime := measure_repeatDB.ID
		measure_repeatDB.ID = 0
		query := backRepoMeasure_repeat.db.Create(measure_repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[measure_repeatDB.ID] = measure_repeatDB
		BackRepoMeasure_repeatid_atBckpTime_newID[measure_repeatDB_ID_atBackupTime] = measure_repeatDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Measure_repeat file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Measure_repeat>id_atBckpTime_newID
// to compute new index
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) RestorePhaseTwo() {

	for _, measure_repeatDB := range backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB {

		// next line of code is to avert unused variable compilation error
		_ = measure_repeatDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMeasure_repeat.db.Model(measure_repeatDB).Updates(*measure_repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMeasure_repeat.ResetReversePointers commits all staged instances of Measure_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_repeat := range backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatPtr {
		backRepoMeasure_repeat.ResetReversePointersInstance(backRepo, idx, measure_repeat)
	}

	return
}

func (backRepoMeasure_repeat *BackRepoMeasure_repeatStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, measure_repeat *models.Measure_repeat) (Error error) {

	// fetch matching measure_repeatDB
	if measure_repeatDB, ok := backRepoMeasure_repeat.Map_Measure_repeatDBID_Measure_repeatDB[idx]; ok {
		_ = measure_repeatDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMeasure_repeatid_atBckpTime_newID map[uint]uint
