// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tuplet_dot_sql sql.NullBool
var dummy_Tuplet_dot_time time.Duration
var dummy_Tuplet_dot_sort sort.Float64Slice

// Tuplet_dotAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tuplet_dotAPI
type Tuplet_dotAPI struct {
	gorm.Model

	models.Tuplet_dot_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Tuplet_dotPointersEncoding Tuplet_dotPointersEncoding
}

// Tuplet_dotPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Tuplet_dotPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Tuplet_dotDB describes a tuplet_dot in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tuplet_dotDB
type Tuplet_dotDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tuplet_dotDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Tuplet_dotPointersEncoding
}

// Tuplet_dotDBs arrays tuplet_dotDBs
// swagger:response tuplet_dotDBsResponse
type Tuplet_dotDBs []Tuplet_dotDB

// Tuplet_dotDBResponse provides response
// swagger:response tuplet_dotDBResponse
type Tuplet_dotDBResponse struct {
	Tuplet_dotDB
}

// Tuplet_dotWOP is a Tuplet_dot without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Tuplet_dotWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Tuplet_dot_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTuplet_dotStruct struct {
	// stores Tuplet_dotDB according to their gorm ID
	Map_Tuplet_dotDBID_Tuplet_dotDB map[uint]*Tuplet_dotDB

	// stores Tuplet_dotDB ID according to Tuplet_dot address
	Map_Tuplet_dotPtr_Tuplet_dotDBID map[*models.Tuplet_dot]uint

	// stores Tuplet_dot according to their gorm ID
	Map_Tuplet_dotDBID_Tuplet_dotPtr map[uint]*models.Tuplet_dot

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTuplet_dot.stage
	return
}

func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) GetDB() *gorm.DB {
	return backRepoTuplet_dot.db
}

// GetTuplet_dotDBFromTuplet_dotPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) GetTuplet_dotDBFromTuplet_dotPtr(tuplet_dot *models.Tuplet_dot) (tuplet_dotDB *Tuplet_dotDB) {
	id := backRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot]
	tuplet_dotDB = backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[id]
	return
}

// BackRepoTuplet_dot.CommitPhaseOne commits all staged instances of Tuplet_dot to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tuplet_dot := range stage.Tuplet_dots {
		backRepoTuplet_dot.CommitPhaseOneInstance(tuplet_dot)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tuplet_dot := range backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr {
		if _, ok := stage.Tuplet_dots[tuplet_dot]; !ok {
			backRepoTuplet_dot.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTuplet_dot.CommitDeleteInstance commits deletion of Tuplet_dot to the BackRepo
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CommitDeleteInstance(id uint) (Error error) {

	tuplet_dot := backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr[id]

	// tuplet_dot is not staged anymore, remove tuplet_dotDB
	tuplet_dotDB := backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[id]
	query := backRepoTuplet_dot.db.Unscoped().Delete(&tuplet_dotDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID, tuplet_dot)
	delete(backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr, id)
	delete(backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB, id)

	return
}

// BackRepoTuplet_dot.CommitPhaseOneInstance commits tuplet_dot staged instances of Tuplet_dot to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CommitPhaseOneInstance(tuplet_dot *models.Tuplet_dot) (Error error) {

	// check if the tuplet_dot is not commited yet
	if _, ok := backRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot]; ok {
		return
	}

	// initiate tuplet_dot
	var tuplet_dotDB Tuplet_dotDB
	tuplet_dotDB.CopyBasicFieldsFromTuplet_dot(tuplet_dot)

	query := backRepoTuplet_dot.db.Create(&tuplet_dotDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot] = tuplet_dotDB.ID
	backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr[tuplet_dotDB.ID] = tuplet_dot
	backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[tuplet_dotDB.ID] = &tuplet_dotDB

	return
}

// BackRepoTuplet_dot.CommitPhaseTwo commits all staged instances of Tuplet_dot to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet_dot := range backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr {
		backRepoTuplet_dot.CommitPhaseTwoInstance(backRepo, idx, tuplet_dot)
	}

	return
}

// BackRepoTuplet_dot.CommitPhaseTwoInstance commits {{structname }} of models.Tuplet_dot to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tuplet_dot *models.Tuplet_dot) (Error error) {

	// fetch matching tuplet_dotDB
	if tuplet_dotDB, ok := backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[idx]; ok {

		tuplet_dotDB.CopyBasicFieldsFromTuplet_dot(tuplet_dot)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTuplet_dot.db.Save(&tuplet_dotDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tuplet_dot intance %s", tuplet_dot.Name))
		return err
	}

	return
}

// BackRepoTuplet_dot.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CheckoutPhaseOne() (Error error) {

	tuplet_dotDBArray := make([]Tuplet_dotDB, 0)
	query := backRepoTuplet_dot.db.Find(&tuplet_dotDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tuplet_dotInstancesToBeRemovedFromTheStage := make(map[*models.Tuplet_dot]any)
	for key, value := range backRepoTuplet_dot.stage.Tuplet_dots {
		tuplet_dotInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tuplet_dotDB := range tuplet_dotDBArray {
		backRepoTuplet_dot.CheckoutPhaseOneInstance(&tuplet_dotDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tuplet_dot, ok := backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr[tuplet_dotDB.ID]
		if ok {
			delete(tuplet_dotInstancesToBeRemovedFromTheStage, tuplet_dot)
		}
	}

	// remove from stage and back repo's 3 maps all tuplet_dots that are not in the checkout
	for tuplet_dot := range tuplet_dotInstancesToBeRemovedFromTheStage {
		tuplet_dot.Unstage(backRepoTuplet_dot.GetStage())

		// remove instance from the back repo 3 maps
		tuplet_dotID := backRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot]
		delete(backRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID, tuplet_dot)
		delete(backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB, tuplet_dotID)
		delete(backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr, tuplet_dotID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tuplet_dotDB that has been found in the DB, updates the backRepo and stages the
// models version of the tuplet_dotDB
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CheckoutPhaseOneInstance(tuplet_dotDB *Tuplet_dotDB) (Error error) {

	tuplet_dot, ok := backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr[tuplet_dotDB.ID]
	if !ok {
		tuplet_dot = new(models.Tuplet_dot)

		backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr[tuplet_dotDB.ID] = tuplet_dot
		backRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot] = tuplet_dotDB.ID

		// append model store with the new element
		tuplet_dot.Name = tuplet_dotDB.Name_Data.String
		tuplet_dot.Stage(backRepoTuplet_dot.GetStage())
	}
	tuplet_dotDB.CopyBasicFieldsToTuplet_dot(tuplet_dot)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tuplet_dot.Stage(backRepoTuplet_dot.GetStage())

	// preserve pointer to tuplet_dotDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Tuplet_dotDBID_Tuplet_dotDB)[tuplet_dotDB hold variable pointers
	tuplet_dotDB_Data := *tuplet_dotDB
	preservedPtrToTuplet_dot := &tuplet_dotDB_Data
	backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[tuplet_dotDB.ID] = preservedPtrToTuplet_dot

	return
}

// BackRepoTuplet_dot.CheckoutPhaseTwo Checkouts all staged instances of Tuplet_dot to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tuplet_dotDB := range backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB {
		backRepoTuplet_dot.CheckoutPhaseTwoInstance(backRepo, tuplet_dotDB)
	}
	return
}

// BackRepoTuplet_dot.CheckoutPhaseTwoInstance Checkouts staged instances of Tuplet_dot to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tuplet_dotDB *Tuplet_dotDB) (Error error) {

	tuplet_dot := backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr[tuplet_dotDB.ID]

	tuplet_dotDB.DecodePointers(backRepo, tuplet_dot)

	return
}

func (tuplet_dotDB *Tuplet_dotDB) DecodePointers(backRepo *BackRepoStruct, tuplet_dot *models.Tuplet_dot) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTuplet_dot allows commit of a single tuplet_dot (if already staged)
func (backRepo *BackRepoStruct) CommitTuplet_dot(tuplet_dot *models.Tuplet_dot) {
	backRepo.BackRepoTuplet_dot.CommitPhaseOneInstance(tuplet_dot)
	if id, ok := backRepo.BackRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot]; ok {
		backRepo.BackRepoTuplet_dot.CommitPhaseTwoInstance(backRepo, id, tuplet_dot)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTuplet_dot allows checkout of a single tuplet_dot (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTuplet_dot(tuplet_dot *models.Tuplet_dot) {
	// check if the tuplet_dot is staged
	if _, ok := backRepo.BackRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot]; ok {

		if id, ok := backRepo.BackRepoTuplet_dot.Map_Tuplet_dotPtr_Tuplet_dotDBID[tuplet_dot]; ok {
			var tuplet_dotDB Tuplet_dotDB
			tuplet_dotDB.ID = id

			if err := backRepo.BackRepoTuplet_dot.db.First(&tuplet_dotDB, id).Error; err != nil {
				log.Fatalln("CheckoutTuplet_dot : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTuplet_dot.CheckoutPhaseOneInstance(&tuplet_dotDB)
			backRepo.BackRepoTuplet_dot.CheckoutPhaseTwoInstance(backRepo, &tuplet_dotDB)
		}
	}
}

// CopyBasicFieldsFromTuplet_dot
func (tuplet_dotDB *Tuplet_dotDB) CopyBasicFieldsFromTuplet_dot(tuplet_dot *models.Tuplet_dot) {
	// insertion point for fields commit

	tuplet_dotDB.Name_Data.String = tuplet_dot.Name
	tuplet_dotDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTuplet_dot_WOP
func (tuplet_dotDB *Tuplet_dotDB) CopyBasicFieldsFromTuplet_dot_WOP(tuplet_dot *models.Tuplet_dot_WOP) {
	// insertion point for fields commit

	tuplet_dotDB.Name_Data.String = tuplet_dot.Name
	tuplet_dotDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTuplet_dotWOP
func (tuplet_dotDB *Tuplet_dotDB) CopyBasicFieldsFromTuplet_dotWOP(tuplet_dot *Tuplet_dotWOP) {
	// insertion point for fields commit

	tuplet_dotDB.Name_Data.String = tuplet_dot.Name
	tuplet_dotDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTuplet_dot
func (tuplet_dotDB *Tuplet_dotDB) CopyBasicFieldsToTuplet_dot(tuplet_dot *models.Tuplet_dot) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_dot.Name = tuplet_dotDB.Name_Data.String
}

// CopyBasicFieldsToTuplet_dot_WOP
func (tuplet_dotDB *Tuplet_dotDB) CopyBasicFieldsToTuplet_dot_WOP(tuplet_dot *models.Tuplet_dot_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_dot.Name = tuplet_dotDB.Name_Data.String
}

// CopyBasicFieldsToTuplet_dotWOP
func (tuplet_dotDB *Tuplet_dotDB) CopyBasicFieldsToTuplet_dotWOP(tuplet_dot *Tuplet_dotWOP) {
	tuplet_dot.ID = int(tuplet_dotDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_dot.Name = tuplet_dotDB.Name_Data.String
}

// Backup generates a json file from a slice of all Tuplet_dotDB instances in the backrepo
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Tuplet_dotDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Tuplet_dotDB, 0)
	for _, tuplet_dotDB := range backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB {
		forBackup = append(forBackup, tuplet_dotDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tuplet_dot ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tuplet_dot file", err.Error())
	}
}

// Backup generates a json file from a slice of all Tuplet_dotDB instances in the backrepo
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Tuplet_dotDB, 0)
	for _, tuplet_dotDB := range backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB {
		forBackup = append(forBackup, tuplet_dotDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tuplet_dot")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tuplet_dot_Fields, -1)
	for _, tuplet_dotDB := range forBackup {

		var tuplet_dotWOP Tuplet_dotWOP
		tuplet_dotDB.CopyBasicFieldsToTuplet_dotWOP(&tuplet_dotWOP)

		row := sh.AddRow()
		row.WriteStruct(&tuplet_dotWOP, -1)
	}
}

// RestoreXL from the "Tuplet_dot" sheet all Tuplet_dotDB instances
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTuplet_dotid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tuplet_dot"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTuplet_dot.rowVisitorTuplet_dot)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) rowVisitorTuplet_dot(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tuplet_dotWOP Tuplet_dotWOP
		row.ReadStruct(&tuplet_dotWOP)

		// add the unmarshalled struct to the stage
		tuplet_dotDB := new(Tuplet_dotDB)
		tuplet_dotDB.CopyBasicFieldsFromTuplet_dotWOP(&tuplet_dotWOP)

		tuplet_dotDB_ID_atBackupTime := tuplet_dotDB.ID
		tuplet_dotDB.ID = 0
		query := backRepoTuplet_dot.db.Create(tuplet_dotDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[tuplet_dotDB.ID] = tuplet_dotDB
		BackRepoTuplet_dotid_atBckpTime_newID[tuplet_dotDB_ID_atBackupTime] = tuplet_dotDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Tuplet_dotDB.json" in dirPath that stores an array
// of Tuplet_dotDB and stores it in the database
// the map BackRepoTuplet_dotid_atBckpTime_newID is updated accordingly
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTuplet_dotid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Tuplet_dotDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tuplet_dot file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Tuplet_dotDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Tuplet_dotDBID_Tuplet_dotDB
	for _, tuplet_dotDB := range forRestore {

		tuplet_dotDB_ID_atBackupTime := tuplet_dotDB.ID
		tuplet_dotDB.ID = 0
		query := backRepoTuplet_dot.db.Create(tuplet_dotDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[tuplet_dotDB.ID] = tuplet_dotDB
		BackRepoTuplet_dotid_atBckpTime_newID[tuplet_dotDB_ID_atBackupTime] = tuplet_dotDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tuplet_dot file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tuplet_dot>id_atBckpTime_newID
// to compute new index
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) RestorePhaseTwo() {

	for _, tuplet_dotDB := range backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB {

		// next line of code is to avert unused variable compilation error
		_ = tuplet_dotDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTuplet_dot.db.Model(tuplet_dotDB).Updates(*tuplet_dotDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTuplet_dot.ResetReversePointers commits all staged instances of Tuplet_dot to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet_dot := range backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr {
		backRepoTuplet_dot.ResetReversePointersInstance(backRepo, idx, tuplet_dot)
	}

	return
}

func (backRepoTuplet_dot *BackRepoTuplet_dotStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tuplet_dot *models.Tuplet_dot) (Error error) {

	// fetch matching tuplet_dotDB
	if tuplet_dotDB, ok := backRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotDB[idx]; ok {
		_ = tuplet_dotDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTuplet_dotid_atBckpTime_newID map[uint]uint
