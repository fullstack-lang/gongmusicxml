// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Empty_placement_smufl_sql sql.NullBool
var dummy_Empty_placement_smufl_time time.Duration
var dummy_Empty_placement_smufl_sort sort.Float64Slice

// Empty_placement_smuflAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model empty_placement_smuflAPI
type Empty_placement_smuflAPI struct {
	gorm.Model

	models.Empty_placement_smufl_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Empty_placement_smuflPointersEncoding Empty_placement_smuflPointersEncoding
}

// Empty_placement_smuflPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Empty_placement_smuflPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Empty_placement_smuflDB describes a empty_placement_smufl in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model empty_placement_smuflDB
type Empty_placement_smuflDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field empty_placement_smuflDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Empty_placement_smuflPointersEncoding
}

// Empty_placement_smuflDBs arrays empty_placement_smuflDBs
// swagger:response empty_placement_smuflDBsResponse
type Empty_placement_smuflDBs []Empty_placement_smuflDB

// Empty_placement_smuflDBResponse provides response
// swagger:response empty_placement_smuflDBResponse
type Empty_placement_smuflDBResponse struct {
	Empty_placement_smuflDB
}

// Empty_placement_smuflWOP is a Empty_placement_smufl without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Empty_placement_smuflWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Empty_placement_smufl_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEmpty_placement_smuflStruct struct {
	// stores Empty_placement_smuflDB according to their gorm ID
	Map_Empty_placement_smuflDBID_Empty_placement_smuflDB map[uint]*Empty_placement_smuflDB

	// stores Empty_placement_smuflDB ID according to Empty_placement_smufl address
	Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID map[*models.Empty_placement_smufl]uint

	// stores Empty_placement_smufl according to their gorm ID
	Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr map[uint]*models.Empty_placement_smufl

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEmpty_placement_smufl.stage
	return
}

func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) GetDB() *gorm.DB {
	return backRepoEmpty_placement_smufl.db
}

// GetEmpty_placement_smuflDBFromEmpty_placement_smuflPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) GetEmpty_placement_smuflDBFromEmpty_placement_smuflPtr(empty_placement_smufl *models.Empty_placement_smufl) (empty_placement_smuflDB *Empty_placement_smuflDB) {
	id := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl]
	empty_placement_smuflDB = backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[id]
	return
}

// BackRepoEmpty_placement_smufl.CommitPhaseOne commits all staged instances of Empty_placement_smufl to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for empty_placement_smufl := range stage.Empty_placement_smufls {
		backRepoEmpty_placement_smufl.CommitPhaseOneInstance(empty_placement_smufl)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, empty_placement_smufl := range backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr {
		if _, ok := stage.Empty_placement_smufls[empty_placement_smufl]; !ok {
			backRepoEmpty_placement_smufl.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmpty_placement_smufl.CommitDeleteInstance commits deletion of Empty_placement_smufl to the BackRepo
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CommitDeleteInstance(id uint) (Error error) {

	empty_placement_smufl := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr[id]

	// empty_placement_smufl is not staged anymore, remove empty_placement_smuflDB
	empty_placement_smuflDB := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[id]
	query := backRepoEmpty_placement_smufl.db.Unscoped().Delete(&empty_placement_smuflDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID, empty_placement_smufl)
	delete(backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr, id)
	delete(backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB, id)

	return
}

// BackRepoEmpty_placement_smufl.CommitPhaseOneInstance commits empty_placement_smufl staged instances of Empty_placement_smufl to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CommitPhaseOneInstance(empty_placement_smufl *models.Empty_placement_smufl) (Error error) {

	// check if the empty_placement_smufl is not commited yet
	if _, ok := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl]; ok {
		return
	}

	// initiate empty_placement_smufl
	var empty_placement_smuflDB Empty_placement_smuflDB
	empty_placement_smuflDB.CopyBasicFieldsFromEmpty_placement_smufl(empty_placement_smufl)

	query := backRepoEmpty_placement_smufl.db.Create(&empty_placement_smuflDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl] = empty_placement_smuflDB.ID
	backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr[empty_placement_smuflDB.ID] = empty_placement_smufl
	backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[empty_placement_smuflDB.ID] = &empty_placement_smuflDB

	return
}

// BackRepoEmpty_placement_smufl.CommitPhaseTwo commits all staged instances of Empty_placement_smufl to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_placement_smufl := range backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr {
		backRepoEmpty_placement_smufl.CommitPhaseTwoInstance(backRepo, idx, empty_placement_smufl)
	}

	return
}

// BackRepoEmpty_placement_smufl.CommitPhaseTwoInstance commits {{structname }} of models.Empty_placement_smufl to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, empty_placement_smufl *models.Empty_placement_smufl) (Error error) {

	// fetch matching empty_placement_smuflDB
	if empty_placement_smuflDB, ok := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[idx]; ok {

		empty_placement_smuflDB.CopyBasicFieldsFromEmpty_placement_smufl(empty_placement_smufl)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEmpty_placement_smufl.db.Save(&empty_placement_smuflDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Empty_placement_smufl intance %s", empty_placement_smufl.Name))
		return err
	}

	return
}

// BackRepoEmpty_placement_smufl.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CheckoutPhaseOne() (Error error) {

	empty_placement_smuflDBArray := make([]Empty_placement_smuflDB, 0)
	query := backRepoEmpty_placement_smufl.db.Find(&empty_placement_smuflDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	empty_placement_smuflInstancesToBeRemovedFromTheStage := make(map[*models.Empty_placement_smufl]any)
	for key, value := range backRepoEmpty_placement_smufl.stage.Empty_placement_smufls {
		empty_placement_smuflInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, empty_placement_smuflDB := range empty_placement_smuflDBArray {
		backRepoEmpty_placement_smufl.CheckoutPhaseOneInstance(&empty_placement_smuflDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		empty_placement_smufl, ok := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr[empty_placement_smuflDB.ID]
		if ok {
			delete(empty_placement_smuflInstancesToBeRemovedFromTheStage, empty_placement_smufl)
		}
	}

	// remove from stage and back repo's 3 maps all empty_placement_smufls that are not in the checkout
	for empty_placement_smufl := range empty_placement_smuflInstancesToBeRemovedFromTheStage {
		empty_placement_smufl.Unstage(backRepoEmpty_placement_smufl.GetStage())

		// remove instance from the back repo 3 maps
		empty_placement_smuflID := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl]
		delete(backRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID, empty_placement_smufl)
		delete(backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB, empty_placement_smuflID)
		delete(backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr, empty_placement_smuflID)
	}

	return
}

// CheckoutPhaseOneInstance takes a empty_placement_smuflDB that has been found in the DB, updates the backRepo and stages the
// models version of the empty_placement_smuflDB
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CheckoutPhaseOneInstance(empty_placement_smuflDB *Empty_placement_smuflDB) (Error error) {

	empty_placement_smufl, ok := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr[empty_placement_smuflDB.ID]
	if !ok {
		empty_placement_smufl = new(models.Empty_placement_smufl)

		backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr[empty_placement_smuflDB.ID] = empty_placement_smufl
		backRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl] = empty_placement_smuflDB.ID

		// append model store with the new element
		empty_placement_smufl.Name = empty_placement_smuflDB.Name_Data.String
		empty_placement_smufl.Stage(backRepoEmpty_placement_smufl.GetStage())
	}
	empty_placement_smuflDB.CopyBasicFieldsToEmpty_placement_smufl(empty_placement_smufl)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	empty_placement_smufl.Stage(backRepoEmpty_placement_smufl.GetStage())

	// preserve pointer to empty_placement_smuflDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Empty_placement_smuflDBID_Empty_placement_smuflDB)[empty_placement_smuflDB hold variable pointers
	empty_placement_smuflDB_Data := *empty_placement_smuflDB
	preservedPtrToEmpty_placement_smufl := &empty_placement_smuflDB_Data
	backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[empty_placement_smuflDB.ID] = preservedPtrToEmpty_placement_smufl

	return
}

// BackRepoEmpty_placement_smufl.CheckoutPhaseTwo Checkouts all staged instances of Empty_placement_smufl to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, empty_placement_smuflDB := range backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB {
		backRepoEmpty_placement_smufl.CheckoutPhaseTwoInstance(backRepo, empty_placement_smuflDB)
	}
	return
}

// BackRepoEmpty_placement_smufl.CheckoutPhaseTwoInstance Checkouts staged instances of Empty_placement_smufl to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, empty_placement_smuflDB *Empty_placement_smuflDB) (Error error) {

	empty_placement_smufl := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr[empty_placement_smuflDB.ID]

	empty_placement_smuflDB.DecodePointers(backRepo, empty_placement_smufl)

	return
}

func (empty_placement_smuflDB *Empty_placement_smuflDB) DecodePointers(backRepo *BackRepoStruct, empty_placement_smufl *models.Empty_placement_smufl) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmpty_placement_smufl allows commit of a single empty_placement_smufl (if already staged)
func (backRepo *BackRepoStruct) CommitEmpty_placement_smufl(empty_placement_smufl *models.Empty_placement_smufl) {
	backRepo.BackRepoEmpty_placement_smufl.CommitPhaseOneInstance(empty_placement_smufl)
	if id, ok := backRepo.BackRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl]; ok {
		backRepo.BackRepoEmpty_placement_smufl.CommitPhaseTwoInstance(backRepo, id, empty_placement_smufl)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmpty_placement_smufl allows checkout of a single empty_placement_smufl (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmpty_placement_smufl(empty_placement_smufl *models.Empty_placement_smufl) {
	// check if the empty_placement_smufl is staged
	if _, ok := backRepo.BackRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl]; ok {

		if id, ok := backRepo.BackRepoEmpty_placement_smufl.Map_Empty_placement_smuflPtr_Empty_placement_smuflDBID[empty_placement_smufl]; ok {
			var empty_placement_smuflDB Empty_placement_smuflDB
			empty_placement_smuflDB.ID = id

			if err := backRepo.BackRepoEmpty_placement_smufl.db.First(&empty_placement_smuflDB, id).Error; err != nil {
				log.Fatalln("CheckoutEmpty_placement_smufl : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmpty_placement_smufl.CheckoutPhaseOneInstance(&empty_placement_smuflDB)
			backRepo.BackRepoEmpty_placement_smufl.CheckoutPhaseTwoInstance(backRepo, &empty_placement_smuflDB)
		}
	}
}

// CopyBasicFieldsFromEmpty_placement_smufl
func (empty_placement_smuflDB *Empty_placement_smuflDB) CopyBasicFieldsFromEmpty_placement_smufl(empty_placement_smufl *models.Empty_placement_smufl) {
	// insertion point for fields commit

	empty_placement_smuflDB.Name_Data.String = empty_placement_smufl.Name
	empty_placement_smuflDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_placement_smufl_WOP
func (empty_placement_smuflDB *Empty_placement_smuflDB) CopyBasicFieldsFromEmpty_placement_smufl_WOP(empty_placement_smufl *models.Empty_placement_smufl_WOP) {
	// insertion point for fields commit

	empty_placement_smuflDB.Name_Data.String = empty_placement_smufl.Name
	empty_placement_smuflDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_placement_smuflWOP
func (empty_placement_smuflDB *Empty_placement_smuflDB) CopyBasicFieldsFromEmpty_placement_smuflWOP(empty_placement_smufl *Empty_placement_smuflWOP) {
	// insertion point for fields commit

	empty_placement_smuflDB.Name_Data.String = empty_placement_smufl.Name
	empty_placement_smuflDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEmpty_placement_smufl
func (empty_placement_smuflDB *Empty_placement_smuflDB) CopyBasicFieldsToEmpty_placement_smufl(empty_placement_smufl *models.Empty_placement_smufl) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_placement_smufl.Name = empty_placement_smuflDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_placement_smufl_WOP
func (empty_placement_smuflDB *Empty_placement_smuflDB) CopyBasicFieldsToEmpty_placement_smufl_WOP(empty_placement_smufl *models.Empty_placement_smufl_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_placement_smufl.Name = empty_placement_smuflDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_placement_smuflWOP
func (empty_placement_smuflDB *Empty_placement_smuflDB) CopyBasicFieldsToEmpty_placement_smuflWOP(empty_placement_smufl *Empty_placement_smuflWOP) {
	empty_placement_smufl.ID = int(empty_placement_smuflDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	empty_placement_smufl.Name = empty_placement_smuflDB.Name_Data.String
}

// Backup generates a json file from a slice of all Empty_placement_smuflDB instances in the backrepo
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Empty_placement_smuflDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_placement_smuflDB, 0)
	for _, empty_placement_smuflDB := range backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB {
		forBackup = append(forBackup, empty_placement_smuflDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Empty_placement_smufl ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Empty_placement_smufl file", err.Error())
	}
}

// Backup generates a json file from a slice of all Empty_placement_smuflDB instances in the backrepo
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_placement_smuflDB, 0)
	for _, empty_placement_smuflDB := range backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB {
		forBackup = append(forBackup, empty_placement_smuflDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Empty_placement_smufl")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Empty_placement_smufl_Fields, -1)
	for _, empty_placement_smuflDB := range forBackup {

		var empty_placement_smuflWOP Empty_placement_smuflWOP
		empty_placement_smuflDB.CopyBasicFieldsToEmpty_placement_smuflWOP(&empty_placement_smuflWOP)

		row := sh.AddRow()
		row.WriteStruct(&empty_placement_smuflWOP, -1)
	}
}

// RestoreXL from the "Empty_placement_smufl" sheet all Empty_placement_smuflDB instances
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmpty_placement_smuflid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Empty_placement_smufl"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmpty_placement_smufl.rowVisitorEmpty_placement_smufl)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) rowVisitorEmpty_placement_smufl(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var empty_placement_smuflWOP Empty_placement_smuflWOP
		row.ReadStruct(&empty_placement_smuflWOP)

		// add the unmarshalled struct to the stage
		empty_placement_smuflDB := new(Empty_placement_smuflDB)
		empty_placement_smuflDB.CopyBasicFieldsFromEmpty_placement_smuflWOP(&empty_placement_smuflWOP)

		empty_placement_smuflDB_ID_atBackupTime := empty_placement_smuflDB.ID
		empty_placement_smuflDB.ID = 0
		query := backRepoEmpty_placement_smufl.db.Create(empty_placement_smuflDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[empty_placement_smuflDB.ID] = empty_placement_smuflDB
		BackRepoEmpty_placement_smuflid_atBckpTime_newID[empty_placement_smuflDB_ID_atBackupTime] = empty_placement_smuflDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Empty_placement_smuflDB.json" in dirPath that stores an array
// of Empty_placement_smuflDB and stores it in the database
// the map BackRepoEmpty_placement_smuflid_atBckpTime_newID is updated accordingly
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmpty_placement_smuflid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Empty_placement_smuflDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Empty_placement_smufl file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Empty_placement_smuflDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Empty_placement_smuflDBID_Empty_placement_smuflDB
	for _, empty_placement_smuflDB := range forRestore {

		empty_placement_smuflDB_ID_atBackupTime := empty_placement_smuflDB.ID
		empty_placement_smuflDB.ID = 0
		query := backRepoEmpty_placement_smufl.db.Create(empty_placement_smuflDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[empty_placement_smuflDB.ID] = empty_placement_smuflDB
		BackRepoEmpty_placement_smuflid_atBckpTime_newID[empty_placement_smuflDB_ID_atBackupTime] = empty_placement_smuflDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Empty_placement_smufl file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Empty_placement_smufl>id_atBckpTime_newID
// to compute new index
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) RestorePhaseTwo() {

	for _, empty_placement_smuflDB := range backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB {

		// next line of code is to avert unused variable compilation error
		_ = empty_placement_smuflDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEmpty_placement_smufl.db.Model(empty_placement_smuflDB).Updates(*empty_placement_smuflDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEmpty_placement_smufl.ResetReversePointers commits all staged instances of Empty_placement_smufl to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_placement_smufl := range backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflPtr {
		backRepoEmpty_placement_smufl.ResetReversePointersInstance(backRepo, idx, empty_placement_smufl)
	}

	return
}

func (backRepoEmpty_placement_smufl *BackRepoEmpty_placement_smuflStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, empty_placement_smufl *models.Empty_placement_smufl) (Error error) {

	// fetch matching empty_placement_smuflDB
	if empty_placement_smuflDB, ok := backRepoEmpty_placement_smufl.Map_Empty_placement_smuflDBID_Empty_placement_smuflDB[idx]; ok {
		_ = empty_placement_smuflDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmpty_placement_smuflid_atBckpTime_newID map[uint]uint
