// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Mordent_sql sql.NullBool
var dummy_Mordent_time time.Duration
var dummy_Mordent_sort sort.Float64Slice

// MordentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model mordentAPI
type MordentAPI struct {
	gorm.Model

	models.Mordent_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MordentPointersEncoding MordentPointersEncoding
}

// MordentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MordentPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// MordentDB describes a mordent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model mordentDB
type MordentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field mordentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MordentPointersEncoding
}

// MordentDBs arrays mordentDBs
// swagger:response mordentDBsResponse
type MordentDBs []MordentDB

// MordentDBResponse provides response
// swagger:response mordentDBResponse
type MordentDBResponse struct {
	MordentDB
}

// MordentWOP is a Mordent without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MordentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Mordent_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMordentStruct struct {
	// stores MordentDB according to their gorm ID
	Map_MordentDBID_MordentDB map[uint]*MordentDB

	// stores MordentDB ID according to Mordent address
	Map_MordentPtr_MordentDBID map[*models.Mordent]uint

	// stores Mordent according to their gorm ID
	Map_MordentDBID_MordentPtr map[uint]*models.Mordent

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMordent *BackRepoMordentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMordent.stage
	return
}

func (backRepoMordent *BackRepoMordentStruct) GetDB() *gorm.DB {
	return backRepoMordent.db
}

// GetMordentDBFromMordentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMordent *BackRepoMordentStruct) GetMordentDBFromMordentPtr(mordent *models.Mordent) (mordentDB *MordentDB) {
	id := backRepoMordent.Map_MordentPtr_MordentDBID[mordent]
	mordentDB = backRepoMordent.Map_MordentDBID_MordentDB[id]
	return
}

// BackRepoMordent.CommitPhaseOne commits all staged instances of Mordent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMordent *BackRepoMordentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for mordent := range stage.Mordents {
		backRepoMordent.CommitPhaseOneInstance(mordent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, mordent := range backRepoMordent.Map_MordentDBID_MordentPtr {
		if _, ok := stage.Mordents[mordent]; !ok {
			backRepoMordent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMordent.CommitDeleteInstance commits deletion of Mordent to the BackRepo
func (backRepoMordent *BackRepoMordentStruct) CommitDeleteInstance(id uint) (Error error) {

	mordent := backRepoMordent.Map_MordentDBID_MordentPtr[id]

	// mordent is not staged anymore, remove mordentDB
	mordentDB := backRepoMordent.Map_MordentDBID_MordentDB[id]
	query := backRepoMordent.db.Unscoped().Delete(&mordentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMordent.Map_MordentPtr_MordentDBID, mordent)
	delete(backRepoMordent.Map_MordentDBID_MordentPtr, id)
	delete(backRepoMordent.Map_MordentDBID_MordentDB, id)

	return
}

// BackRepoMordent.CommitPhaseOneInstance commits mordent staged instances of Mordent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMordent *BackRepoMordentStruct) CommitPhaseOneInstance(mordent *models.Mordent) (Error error) {

	// check if the mordent is not commited yet
	if _, ok := backRepoMordent.Map_MordentPtr_MordentDBID[mordent]; ok {
		return
	}

	// initiate mordent
	var mordentDB MordentDB
	mordentDB.CopyBasicFieldsFromMordent(mordent)

	query := backRepoMordent.db.Create(&mordentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMordent.Map_MordentPtr_MordentDBID[mordent] = mordentDB.ID
	backRepoMordent.Map_MordentDBID_MordentPtr[mordentDB.ID] = mordent
	backRepoMordent.Map_MordentDBID_MordentDB[mordentDB.ID] = &mordentDB

	return
}

// BackRepoMordent.CommitPhaseTwo commits all staged instances of Mordent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMordent *BackRepoMordentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, mordent := range backRepoMordent.Map_MordentDBID_MordentPtr {
		backRepoMordent.CommitPhaseTwoInstance(backRepo, idx, mordent)
	}

	return
}

// BackRepoMordent.CommitPhaseTwoInstance commits {{structname }} of models.Mordent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMordent *BackRepoMordentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, mordent *models.Mordent) (Error error) {

	// fetch matching mordentDB
	if mordentDB, ok := backRepoMordent.Map_MordentDBID_MordentDB[idx]; ok {

		mordentDB.CopyBasicFieldsFromMordent(mordent)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMordent.db.Save(&mordentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Mordent intance %s", mordent.Name))
		return err
	}

	return
}

// BackRepoMordent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMordent *BackRepoMordentStruct) CheckoutPhaseOne() (Error error) {

	mordentDBArray := make([]MordentDB, 0)
	query := backRepoMordent.db.Find(&mordentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	mordentInstancesToBeRemovedFromTheStage := make(map[*models.Mordent]any)
	for key, value := range backRepoMordent.stage.Mordents {
		mordentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, mordentDB := range mordentDBArray {
		backRepoMordent.CheckoutPhaseOneInstance(&mordentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		mordent, ok := backRepoMordent.Map_MordentDBID_MordentPtr[mordentDB.ID]
		if ok {
			delete(mordentInstancesToBeRemovedFromTheStage, mordent)
		}
	}

	// remove from stage and back repo's 3 maps all mordents that are not in the checkout
	for mordent := range mordentInstancesToBeRemovedFromTheStage {
		mordent.Unstage(backRepoMordent.GetStage())

		// remove instance from the back repo 3 maps
		mordentID := backRepoMordent.Map_MordentPtr_MordentDBID[mordent]
		delete(backRepoMordent.Map_MordentPtr_MordentDBID, mordent)
		delete(backRepoMordent.Map_MordentDBID_MordentDB, mordentID)
		delete(backRepoMordent.Map_MordentDBID_MordentPtr, mordentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a mordentDB that has been found in the DB, updates the backRepo and stages the
// models version of the mordentDB
func (backRepoMordent *BackRepoMordentStruct) CheckoutPhaseOneInstance(mordentDB *MordentDB) (Error error) {

	mordent, ok := backRepoMordent.Map_MordentDBID_MordentPtr[mordentDB.ID]
	if !ok {
		mordent = new(models.Mordent)

		backRepoMordent.Map_MordentDBID_MordentPtr[mordentDB.ID] = mordent
		backRepoMordent.Map_MordentPtr_MordentDBID[mordent] = mordentDB.ID

		// append model store with the new element
		mordent.Name = mordentDB.Name_Data.String
		mordent.Stage(backRepoMordent.GetStage())
	}
	mordentDB.CopyBasicFieldsToMordent(mordent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	mordent.Stage(backRepoMordent.GetStage())

	// preserve pointer to mordentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MordentDBID_MordentDB)[mordentDB hold variable pointers
	mordentDB_Data := *mordentDB
	preservedPtrToMordent := &mordentDB_Data
	backRepoMordent.Map_MordentDBID_MordentDB[mordentDB.ID] = preservedPtrToMordent

	return
}

// BackRepoMordent.CheckoutPhaseTwo Checkouts all staged instances of Mordent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMordent *BackRepoMordentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, mordentDB := range backRepoMordent.Map_MordentDBID_MordentDB {
		backRepoMordent.CheckoutPhaseTwoInstance(backRepo, mordentDB)
	}
	return
}

// BackRepoMordent.CheckoutPhaseTwoInstance Checkouts staged instances of Mordent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMordent *BackRepoMordentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, mordentDB *MordentDB) (Error error) {

	mordent := backRepoMordent.Map_MordentDBID_MordentPtr[mordentDB.ID]

	mordentDB.DecodePointers(backRepo, mordent)

	return
}

func (mordentDB *MordentDB) DecodePointers(backRepo *BackRepoStruct, mordent *models.Mordent) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMordent allows commit of a single mordent (if already staged)
func (backRepo *BackRepoStruct) CommitMordent(mordent *models.Mordent) {
	backRepo.BackRepoMordent.CommitPhaseOneInstance(mordent)
	if id, ok := backRepo.BackRepoMordent.Map_MordentPtr_MordentDBID[mordent]; ok {
		backRepo.BackRepoMordent.CommitPhaseTwoInstance(backRepo, id, mordent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMordent allows checkout of a single mordent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMordent(mordent *models.Mordent) {
	// check if the mordent is staged
	if _, ok := backRepo.BackRepoMordent.Map_MordentPtr_MordentDBID[mordent]; ok {

		if id, ok := backRepo.BackRepoMordent.Map_MordentPtr_MordentDBID[mordent]; ok {
			var mordentDB MordentDB
			mordentDB.ID = id

			if err := backRepo.BackRepoMordent.db.First(&mordentDB, id).Error; err != nil {
				log.Fatalln("CheckoutMordent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMordent.CheckoutPhaseOneInstance(&mordentDB)
			backRepo.BackRepoMordent.CheckoutPhaseTwoInstance(backRepo, &mordentDB)
		}
	}
}

// CopyBasicFieldsFromMordent
func (mordentDB *MordentDB) CopyBasicFieldsFromMordent(mordent *models.Mordent) {
	// insertion point for fields commit

	mordentDB.Name_Data.String = mordent.Name
	mordentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMordent_WOP
func (mordentDB *MordentDB) CopyBasicFieldsFromMordent_WOP(mordent *models.Mordent_WOP) {
	// insertion point for fields commit

	mordentDB.Name_Data.String = mordent.Name
	mordentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMordentWOP
func (mordentDB *MordentDB) CopyBasicFieldsFromMordentWOP(mordent *MordentWOP) {
	// insertion point for fields commit

	mordentDB.Name_Data.String = mordent.Name
	mordentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMordent
func (mordentDB *MordentDB) CopyBasicFieldsToMordent(mordent *models.Mordent) {
	// insertion point for checkout of basic fields (back repo to stage)
	mordent.Name = mordentDB.Name_Data.String
}

// CopyBasicFieldsToMordent_WOP
func (mordentDB *MordentDB) CopyBasicFieldsToMordent_WOP(mordent *models.Mordent_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	mordent.Name = mordentDB.Name_Data.String
}

// CopyBasicFieldsToMordentWOP
func (mordentDB *MordentDB) CopyBasicFieldsToMordentWOP(mordent *MordentWOP) {
	mordent.ID = int(mordentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	mordent.Name = mordentDB.Name_Data.String
}

// Backup generates a json file from a slice of all MordentDB instances in the backrepo
func (backRepoMordent *BackRepoMordentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MordentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MordentDB, 0)
	for _, mordentDB := range backRepoMordent.Map_MordentDBID_MordentDB {
		forBackup = append(forBackup, mordentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Mordent ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Mordent file", err.Error())
	}
}

// Backup generates a json file from a slice of all MordentDB instances in the backrepo
func (backRepoMordent *BackRepoMordentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MordentDB, 0)
	for _, mordentDB := range backRepoMordent.Map_MordentDBID_MordentDB {
		forBackup = append(forBackup, mordentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Mordent")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Mordent_Fields, -1)
	for _, mordentDB := range forBackup {

		var mordentWOP MordentWOP
		mordentDB.CopyBasicFieldsToMordentWOP(&mordentWOP)

		row := sh.AddRow()
		row.WriteStruct(&mordentWOP, -1)
	}
}

// RestoreXL from the "Mordent" sheet all MordentDB instances
func (backRepoMordent *BackRepoMordentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMordentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Mordent"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMordent.rowVisitorMordent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMordent *BackRepoMordentStruct) rowVisitorMordent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var mordentWOP MordentWOP
		row.ReadStruct(&mordentWOP)

		// add the unmarshalled struct to the stage
		mordentDB := new(MordentDB)
		mordentDB.CopyBasicFieldsFromMordentWOP(&mordentWOP)

		mordentDB_ID_atBackupTime := mordentDB.ID
		mordentDB.ID = 0
		query := backRepoMordent.db.Create(mordentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMordent.Map_MordentDBID_MordentDB[mordentDB.ID] = mordentDB
		BackRepoMordentid_atBckpTime_newID[mordentDB_ID_atBackupTime] = mordentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MordentDB.json" in dirPath that stores an array
// of MordentDB and stores it in the database
// the map BackRepoMordentid_atBckpTime_newID is updated accordingly
func (backRepoMordent *BackRepoMordentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMordentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MordentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Mordent file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MordentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MordentDBID_MordentDB
	for _, mordentDB := range forRestore {

		mordentDB_ID_atBackupTime := mordentDB.ID
		mordentDB.ID = 0
		query := backRepoMordent.db.Create(mordentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMordent.Map_MordentDBID_MordentDB[mordentDB.ID] = mordentDB
		BackRepoMordentid_atBckpTime_newID[mordentDB_ID_atBackupTime] = mordentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Mordent file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Mordent>id_atBckpTime_newID
// to compute new index
func (backRepoMordent *BackRepoMordentStruct) RestorePhaseTwo() {

	for _, mordentDB := range backRepoMordent.Map_MordentDBID_MordentDB {

		// next line of code is to avert unused variable compilation error
		_ = mordentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMordent.db.Model(mordentDB).Updates(*mordentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMordent.ResetReversePointers commits all staged instances of Mordent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMordent *BackRepoMordentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, mordent := range backRepoMordent.Map_MordentDBID_MordentPtr {
		backRepoMordent.ResetReversePointersInstance(backRepo, idx, mordent)
	}

	return
}

func (backRepoMordent *BackRepoMordentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, mordent *models.Mordent) (Error error) {

	// fetch matching mordentDB
	if mordentDB, ok := backRepoMordent.Map_MordentDBID_MordentDB[idx]; ok {
		_ = mordentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMordentid_atBckpTime_newID map[uint]uint
