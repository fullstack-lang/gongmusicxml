// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Other_play_sql sql.NullBool
var dummy_Other_play_time time.Duration
var dummy_Other_play_sort sort.Float64Slice

// Other_playAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model other_playAPI
type Other_playAPI struct {
	gorm.Model

	models.Other_play_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Other_playPointersEncoding Other_playPointersEncoding
}

// Other_playPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Other_playPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Other_playDB describes a other_play in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model other_playDB
type Other_playDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field other_playDB.Name
	Name_Data sql.NullString

	// Declation for basic field other_playDB.Value
	Value_Data sql.NullString

	// Declation for basic field other_playDB.Type
	Type_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Other_playPointersEncoding
}

// Other_playDBs arrays other_playDBs
// swagger:response other_playDBsResponse
type Other_playDBs []Other_playDB

// Other_playDBResponse provides response
// swagger:response other_playDBResponse
type Other_playDBResponse struct {
	Other_playDB
}

// Other_playWOP is a Other_play without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Other_playWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`

	Type string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Other_play_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
	"Type",
}

type BackRepoOther_playStruct struct {
	// stores Other_playDB according to their gorm ID
	Map_Other_playDBID_Other_playDB map[uint]*Other_playDB

	// stores Other_playDB ID according to Other_play address
	Map_Other_playPtr_Other_playDBID map[*models.Other_play]uint

	// stores Other_play according to their gorm ID
	Map_Other_playDBID_Other_playPtr map[uint]*models.Other_play

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOther_play *BackRepoOther_playStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOther_play.stage
	return
}

func (backRepoOther_play *BackRepoOther_playStruct) GetDB() *gorm.DB {
	return backRepoOther_play.db
}

// GetOther_playDBFromOther_playPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOther_play *BackRepoOther_playStruct) GetOther_playDBFromOther_playPtr(other_play *models.Other_play) (other_playDB *Other_playDB) {
	id := backRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play]
	other_playDB = backRepoOther_play.Map_Other_playDBID_Other_playDB[id]
	return
}

// BackRepoOther_play.CommitPhaseOne commits all staged instances of Other_play to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOther_play *BackRepoOther_playStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for other_play := range stage.Other_plays {
		backRepoOther_play.CommitPhaseOneInstance(other_play)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, other_play := range backRepoOther_play.Map_Other_playDBID_Other_playPtr {
		if _, ok := stage.Other_plays[other_play]; !ok {
			backRepoOther_play.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOther_play.CommitDeleteInstance commits deletion of Other_play to the BackRepo
func (backRepoOther_play *BackRepoOther_playStruct) CommitDeleteInstance(id uint) (Error error) {

	other_play := backRepoOther_play.Map_Other_playDBID_Other_playPtr[id]

	// other_play is not staged anymore, remove other_playDB
	other_playDB := backRepoOther_play.Map_Other_playDBID_Other_playDB[id]
	query := backRepoOther_play.db.Unscoped().Delete(&other_playDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOther_play.Map_Other_playPtr_Other_playDBID, other_play)
	delete(backRepoOther_play.Map_Other_playDBID_Other_playPtr, id)
	delete(backRepoOther_play.Map_Other_playDBID_Other_playDB, id)

	return
}

// BackRepoOther_play.CommitPhaseOneInstance commits other_play staged instances of Other_play to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOther_play *BackRepoOther_playStruct) CommitPhaseOneInstance(other_play *models.Other_play) (Error error) {

	// check if the other_play is not commited yet
	if _, ok := backRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play]; ok {
		return
	}

	// initiate other_play
	var other_playDB Other_playDB
	other_playDB.CopyBasicFieldsFromOther_play(other_play)

	query := backRepoOther_play.db.Create(&other_playDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play] = other_playDB.ID
	backRepoOther_play.Map_Other_playDBID_Other_playPtr[other_playDB.ID] = other_play
	backRepoOther_play.Map_Other_playDBID_Other_playDB[other_playDB.ID] = &other_playDB

	return
}

// BackRepoOther_play.CommitPhaseTwo commits all staged instances of Other_play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_play *BackRepoOther_playStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, other_play := range backRepoOther_play.Map_Other_playDBID_Other_playPtr {
		backRepoOther_play.CommitPhaseTwoInstance(backRepo, idx, other_play)
	}

	return
}

// BackRepoOther_play.CommitPhaseTwoInstance commits {{structname }} of models.Other_play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_play *BackRepoOther_playStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, other_play *models.Other_play) (Error error) {

	// fetch matching other_playDB
	if other_playDB, ok := backRepoOther_play.Map_Other_playDBID_Other_playDB[idx]; ok {

		other_playDB.CopyBasicFieldsFromOther_play(other_play)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOther_play.db.Save(&other_playDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Other_play intance %s", other_play.Name))
		return err
	}

	return
}

// BackRepoOther_play.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOther_play *BackRepoOther_playStruct) CheckoutPhaseOne() (Error error) {

	other_playDBArray := make([]Other_playDB, 0)
	query := backRepoOther_play.db.Find(&other_playDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	other_playInstancesToBeRemovedFromTheStage := make(map[*models.Other_play]any)
	for key, value := range backRepoOther_play.stage.Other_plays {
		other_playInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, other_playDB := range other_playDBArray {
		backRepoOther_play.CheckoutPhaseOneInstance(&other_playDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		other_play, ok := backRepoOther_play.Map_Other_playDBID_Other_playPtr[other_playDB.ID]
		if ok {
			delete(other_playInstancesToBeRemovedFromTheStage, other_play)
		}
	}

	// remove from stage and back repo's 3 maps all other_plays that are not in the checkout
	for other_play := range other_playInstancesToBeRemovedFromTheStage {
		other_play.Unstage(backRepoOther_play.GetStage())

		// remove instance from the back repo 3 maps
		other_playID := backRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play]
		delete(backRepoOther_play.Map_Other_playPtr_Other_playDBID, other_play)
		delete(backRepoOther_play.Map_Other_playDBID_Other_playDB, other_playID)
		delete(backRepoOther_play.Map_Other_playDBID_Other_playPtr, other_playID)
	}

	return
}

// CheckoutPhaseOneInstance takes a other_playDB that has been found in the DB, updates the backRepo and stages the
// models version of the other_playDB
func (backRepoOther_play *BackRepoOther_playStruct) CheckoutPhaseOneInstance(other_playDB *Other_playDB) (Error error) {

	other_play, ok := backRepoOther_play.Map_Other_playDBID_Other_playPtr[other_playDB.ID]
	if !ok {
		other_play = new(models.Other_play)

		backRepoOther_play.Map_Other_playDBID_Other_playPtr[other_playDB.ID] = other_play
		backRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play] = other_playDB.ID

		// append model store with the new element
		other_play.Name = other_playDB.Name_Data.String
		other_play.Stage(backRepoOther_play.GetStage())
	}
	other_playDB.CopyBasicFieldsToOther_play(other_play)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	other_play.Stage(backRepoOther_play.GetStage())

	// preserve pointer to other_playDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Other_playDBID_Other_playDB)[other_playDB hold variable pointers
	other_playDB_Data := *other_playDB
	preservedPtrToOther_play := &other_playDB_Data
	backRepoOther_play.Map_Other_playDBID_Other_playDB[other_playDB.ID] = preservedPtrToOther_play

	return
}

// BackRepoOther_play.CheckoutPhaseTwo Checkouts all staged instances of Other_play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_play *BackRepoOther_playStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, other_playDB := range backRepoOther_play.Map_Other_playDBID_Other_playDB {
		backRepoOther_play.CheckoutPhaseTwoInstance(backRepo, other_playDB)
	}
	return
}

// BackRepoOther_play.CheckoutPhaseTwoInstance Checkouts staged instances of Other_play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_play *BackRepoOther_playStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, other_playDB *Other_playDB) (Error error) {

	other_play := backRepoOther_play.Map_Other_playDBID_Other_playPtr[other_playDB.ID]

	other_playDB.DecodePointers(backRepo, other_play)

	return
}

func (other_playDB *Other_playDB) DecodePointers(backRepo *BackRepoStruct, other_play *models.Other_play) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOther_play allows commit of a single other_play (if already staged)
func (backRepo *BackRepoStruct) CommitOther_play(other_play *models.Other_play) {
	backRepo.BackRepoOther_play.CommitPhaseOneInstance(other_play)
	if id, ok := backRepo.BackRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play]; ok {
		backRepo.BackRepoOther_play.CommitPhaseTwoInstance(backRepo, id, other_play)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOther_play allows checkout of a single other_play (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOther_play(other_play *models.Other_play) {
	// check if the other_play is staged
	if _, ok := backRepo.BackRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play]; ok {

		if id, ok := backRepo.BackRepoOther_play.Map_Other_playPtr_Other_playDBID[other_play]; ok {
			var other_playDB Other_playDB
			other_playDB.ID = id

			if err := backRepo.BackRepoOther_play.db.First(&other_playDB, id).Error; err != nil {
				log.Fatalln("CheckoutOther_play : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOther_play.CheckoutPhaseOneInstance(&other_playDB)
			backRepo.BackRepoOther_play.CheckoutPhaseTwoInstance(backRepo, &other_playDB)
		}
	}
}

// CopyBasicFieldsFromOther_play
func (other_playDB *Other_playDB) CopyBasicFieldsFromOther_play(other_play *models.Other_play) {
	// insertion point for fields commit

	other_playDB.Name_Data.String = other_play.Name
	other_playDB.Name_Data.Valid = true

	other_playDB.Value_Data.String = other_play.Value
	other_playDB.Value_Data.Valid = true

	other_playDB.Type_Data.String = other_play.Type
	other_playDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromOther_play_WOP
func (other_playDB *Other_playDB) CopyBasicFieldsFromOther_play_WOP(other_play *models.Other_play_WOP) {
	// insertion point for fields commit

	other_playDB.Name_Data.String = other_play.Name
	other_playDB.Name_Data.Valid = true

	other_playDB.Value_Data.String = other_play.Value
	other_playDB.Value_Data.Valid = true

	other_playDB.Type_Data.String = other_play.Type
	other_playDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromOther_playWOP
func (other_playDB *Other_playDB) CopyBasicFieldsFromOther_playWOP(other_play *Other_playWOP) {
	// insertion point for fields commit

	other_playDB.Name_Data.String = other_play.Name
	other_playDB.Name_Data.Valid = true

	other_playDB.Value_Data.String = other_play.Value
	other_playDB.Value_Data.Valid = true

	other_playDB.Type_Data.String = other_play.Type
	other_playDB.Type_Data.Valid = true
}

// CopyBasicFieldsToOther_play
func (other_playDB *Other_playDB) CopyBasicFieldsToOther_play(other_play *models.Other_play) {
	// insertion point for checkout of basic fields (back repo to stage)
	other_play.Name = other_playDB.Name_Data.String
	other_play.Value = other_playDB.Value_Data.String
	other_play.Type = other_playDB.Type_Data.String
}

// CopyBasicFieldsToOther_play_WOP
func (other_playDB *Other_playDB) CopyBasicFieldsToOther_play_WOP(other_play *models.Other_play_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	other_play.Name = other_playDB.Name_Data.String
	other_play.Value = other_playDB.Value_Data.String
	other_play.Type = other_playDB.Type_Data.String
}

// CopyBasicFieldsToOther_playWOP
func (other_playDB *Other_playDB) CopyBasicFieldsToOther_playWOP(other_play *Other_playWOP) {
	other_play.ID = int(other_playDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	other_play.Name = other_playDB.Name_Data.String
	other_play.Value = other_playDB.Value_Data.String
	other_play.Type = other_playDB.Type_Data.String
}

// Backup generates a json file from a slice of all Other_playDB instances in the backrepo
func (backRepoOther_play *BackRepoOther_playStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Other_playDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Other_playDB, 0)
	for _, other_playDB := range backRepoOther_play.Map_Other_playDBID_Other_playDB {
		forBackup = append(forBackup, other_playDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Other_play ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Other_play file", err.Error())
	}
}

// Backup generates a json file from a slice of all Other_playDB instances in the backrepo
func (backRepoOther_play *BackRepoOther_playStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Other_playDB, 0)
	for _, other_playDB := range backRepoOther_play.Map_Other_playDBID_Other_playDB {
		forBackup = append(forBackup, other_playDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Other_play")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Other_play_Fields, -1)
	for _, other_playDB := range forBackup {

		var other_playWOP Other_playWOP
		other_playDB.CopyBasicFieldsToOther_playWOP(&other_playWOP)

		row := sh.AddRow()
		row.WriteStruct(&other_playWOP, -1)
	}
}

// RestoreXL from the "Other_play" sheet all Other_playDB instances
func (backRepoOther_play *BackRepoOther_playStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOther_playid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Other_play"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOther_play.rowVisitorOther_play)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOther_play *BackRepoOther_playStruct) rowVisitorOther_play(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var other_playWOP Other_playWOP
		row.ReadStruct(&other_playWOP)

		// add the unmarshalled struct to the stage
		other_playDB := new(Other_playDB)
		other_playDB.CopyBasicFieldsFromOther_playWOP(&other_playWOP)

		other_playDB_ID_atBackupTime := other_playDB.ID
		other_playDB.ID = 0
		query := backRepoOther_play.db.Create(other_playDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOther_play.Map_Other_playDBID_Other_playDB[other_playDB.ID] = other_playDB
		BackRepoOther_playid_atBckpTime_newID[other_playDB_ID_atBackupTime] = other_playDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Other_playDB.json" in dirPath that stores an array
// of Other_playDB and stores it in the database
// the map BackRepoOther_playid_atBckpTime_newID is updated accordingly
func (backRepoOther_play *BackRepoOther_playStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOther_playid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Other_playDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Other_play file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Other_playDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Other_playDBID_Other_playDB
	for _, other_playDB := range forRestore {

		other_playDB_ID_atBackupTime := other_playDB.ID
		other_playDB.ID = 0
		query := backRepoOther_play.db.Create(other_playDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOther_play.Map_Other_playDBID_Other_playDB[other_playDB.ID] = other_playDB
		BackRepoOther_playid_atBckpTime_newID[other_playDB_ID_atBackupTime] = other_playDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Other_play file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Other_play>id_atBckpTime_newID
// to compute new index
func (backRepoOther_play *BackRepoOther_playStruct) RestorePhaseTwo() {

	for _, other_playDB := range backRepoOther_play.Map_Other_playDBID_Other_playDB {

		// next line of code is to avert unused variable compilation error
		_ = other_playDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOther_play.db.Model(other_playDB).Updates(*other_playDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOther_play.ResetReversePointers commits all staged instances of Other_play to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_play *BackRepoOther_playStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, other_play := range backRepoOther_play.Map_Other_playDBID_Other_playPtr {
		backRepoOther_play.ResetReversePointersInstance(backRepo, idx, other_play)
	}

	return
}

func (backRepoOther_play *BackRepoOther_playStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, other_play *models.Other_play) (Error error) {

	// fetch matching other_playDB
	if other_playDB, ok := backRepoOther_play.Map_Other_playDBID_Other_playDB[idx]; ok {
		_ = other_playDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOther_playid_atBckpTime_newID map[uint]uint
