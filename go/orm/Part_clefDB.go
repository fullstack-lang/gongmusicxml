// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Part_clef_sql sql.NullBool
var dummy_Part_clef_time time.Duration
var dummy_Part_clef_sort sort.Float64Slice

// Part_clefAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model part_clefAPI
type Part_clefAPI struct {
	gorm.Model

	models.Part_clef_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Part_clefPointersEncoding Part_clefPointersEncoding
}

// Part_clefPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Part_clefPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Part_clefDB describes a part_clef in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model part_clefDB
type Part_clefDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field part_clefDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Part_clefPointersEncoding
}

// Part_clefDBs arrays part_clefDBs
// swagger:response part_clefDBsResponse
type Part_clefDBs []Part_clefDB

// Part_clefDBResponse provides response
// swagger:response part_clefDBResponse
type Part_clefDBResponse struct {
	Part_clefDB
}

// Part_clefWOP is a Part_clef without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Part_clefWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Part_clef_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPart_clefStruct struct {
	// stores Part_clefDB according to their gorm ID
	Map_Part_clefDBID_Part_clefDB map[uint]*Part_clefDB

	// stores Part_clefDB ID according to Part_clef address
	Map_Part_clefPtr_Part_clefDBID map[*models.Part_clef]uint

	// stores Part_clef according to their gorm ID
	Map_Part_clefDBID_Part_clefPtr map[uint]*models.Part_clef

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPart_clef *BackRepoPart_clefStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPart_clef.stage
	return
}

func (backRepoPart_clef *BackRepoPart_clefStruct) GetDB() *gorm.DB {
	return backRepoPart_clef.db
}

// GetPart_clefDBFromPart_clefPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPart_clef *BackRepoPart_clefStruct) GetPart_clefDBFromPart_clefPtr(part_clef *models.Part_clef) (part_clefDB *Part_clefDB) {
	id := backRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef]
	part_clefDB = backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[id]
	return
}

// BackRepoPart_clef.CommitPhaseOne commits all staged instances of Part_clef to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_clef *BackRepoPart_clefStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for part_clef := range stage.Part_clefs {
		backRepoPart_clef.CommitPhaseOneInstance(part_clef)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, part_clef := range backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr {
		if _, ok := stage.Part_clefs[part_clef]; !ok {
			backRepoPart_clef.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPart_clef.CommitDeleteInstance commits deletion of Part_clef to the BackRepo
func (backRepoPart_clef *BackRepoPart_clefStruct) CommitDeleteInstance(id uint) (Error error) {

	part_clef := backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr[id]

	// part_clef is not staged anymore, remove part_clefDB
	part_clefDB := backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[id]
	query := backRepoPart_clef.db.Unscoped().Delete(&part_clefDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPart_clef.Map_Part_clefPtr_Part_clefDBID, part_clef)
	delete(backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr, id)
	delete(backRepoPart_clef.Map_Part_clefDBID_Part_clefDB, id)

	return
}

// BackRepoPart_clef.CommitPhaseOneInstance commits part_clef staged instances of Part_clef to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_clef *BackRepoPart_clefStruct) CommitPhaseOneInstance(part_clef *models.Part_clef) (Error error) {

	// check if the part_clef is not commited yet
	if _, ok := backRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef]; ok {
		return
	}

	// initiate part_clef
	var part_clefDB Part_clefDB
	part_clefDB.CopyBasicFieldsFromPart_clef(part_clef)

	query := backRepoPart_clef.db.Create(&part_clefDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef] = part_clefDB.ID
	backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr[part_clefDB.ID] = part_clef
	backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[part_clefDB.ID] = &part_clefDB

	return
}

// BackRepoPart_clef.CommitPhaseTwo commits all staged instances of Part_clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_clef *BackRepoPart_clefStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, part_clef := range backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr {
		backRepoPart_clef.CommitPhaseTwoInstance(backRepo, idx, part_clef)
	}

	return
}

// BackRepoPart_clef.CommitPhaseTwoInstance commits {{structname }} of models.Part_clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_clef *BackRepoPart_clefStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, part_clef *models.Part_clef) (Error error) {

	// fetch matching part_clefDB
	if part_clefDB, ok := backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[idx]; ok {

		part_clefDB.CopyBasicFieldsFromPart_clef(part_clef)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPart_clef.db.Save(&part_clefDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Part_clef intance %s", part_clef.Name))
		return err
	}

	return
}

// BackRepoPart_clef.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPart_clef *BackRepoPart_clefStruct) CheckoutPhaseOne() (Error error) {

	part_clefDBArray := make([]Part_clefDB, 0)
	query := backRepoPart_clef.db.Find(&part_clefDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	part_clefInstancesToBeRemovedFromTheStage := make(map[*models.Part_clef]any)
	for key, value := range backRepoPart_clef.stage.Part_clefs {
		part_clefInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, part_clefDB := range part_clefDBArray {
		backRepoPart_clef.CheckoutPhaseOneInstance(&part_clefDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		part_clef, ok := backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr[part_clefDB.ID]
		if ok {
			delete(part_clefInstancesToBeRemovedFromTheStage, part_clef)
		}
	}

	// remove from stage and back repo's 3 maps all part_clefs that are not in the checkout
	for part_clef := range part_clefInstancesToBeRemovedFromTheStage {
		part_clef.Unstage(backRepoPart_clef.GetStage())

		// remove instance from the back repo 3 maps
		part_clefID := backRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef]
		delete(backRepoPart_clef.Map_Part_clefPtr_Part_clefDBID, part_clef)
		delete(backRepoPart_clef.Map_Part_clefDBID_Part_clefDB, part_clefID)
		delete(backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr, part_clefID)
	}

	return
}

// CheckoutPhaseOneInstance takes a part_clefDB that has been found in the DB, updates the backRepo and stages the
// models version of the part_clefDB
func (backRepoPart_clef *BackRepoPart_clefStruct) CheckoutPhaseOneInstance(part_clefDB *Part_clefDB) (Error error) {

	part_clef, ok := backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr[part_clefDB.ID]
	if !ok {
		part_clef = new(models.Part_clef)

		backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr[part_clefDB.ID] = part_clef
		backRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef] = part_clefDB.ID

		// append model store with the new element
		part_clef.Name = part_clefDB.Name_Data.String
		part_clef.Stage(backRepoPart_clef.GetStage())
	}
	part_clefDB.CopyBasicFieldsToPart_clef(part_clef)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	part_clef.Stage(backRepoPart_clef.GetStage())

	// preserve pointer to part_clefDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Part_clefDBID_Part_clefDB)[part_clefDB hold variable pointers
	part_clefDB_Data := *part_clefDB
	preservedPtrToPart_clef := &part_clefDB_Data
	backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[part_clefDB.ID] = preservedPtrToPart_clef

	return
}

// BackRepoPart_clef.CheckoutPhaseTwo Checkouts all staged instances of Part_clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_clef *BackRepoPart_clefStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, part_clefDB := range backRepoPart_clef.Map_Part_clefDBID_Part_clefDB {
		backRepoPart_clef.CheckoutPhaseTwoInstance(backRepo, part_clefDB)
	}
	return
}

// BackRepoPart_clef.CheckoutPhaseTwoInstance Checkouts staged instances of Part_clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_clef *BackRepoPart_clefStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, part_clefDB *Part_clefDB) (Error error) {

	part_clef := backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr[part_clefDB.ID]

	part_clefDB.DecodePointers(backRepo, part_clef)

	return
}

func (part_clefDB *Part_clefDB) DecodePointers(backRepo *BackRepoStruct, part_clef *models.Part_clef) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPart_clef allows commit of a single part_clef (if already staged)
func (backRepo *BackRepoStruct) CommitPart_clef(part_clef *models.Part_clef) {
	backRepo.BackRepoPart_clef.CommitPhaseOneInstance(part_clef)
	if id, ok := backRepo.BackRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef]; ok {
		backRepo.BackRepoPart_clef.CommitPhaseTwoInstance(backRepo, id, part_clef)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPart_clef allows checkout of a single part_clef (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPart_clef(part_clef *models.Part_clef) {
	// check if the part_clef is staged
	if _, ok := backRepo.BackRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef]; ok {

		if id, ok := backRepo.BackRepoPart_clef.Map_Part_clefPtr_Part_clefDBID[part_clef]; ok {
			var part_clefDB Part_clefDB
			part_clefDB.ID = id

			if err := backRepo.BackRepoPart_clef.db.First(&part_clefDB, id).Error; err != nil {
				log.Fatalln("CheckoutPart_clef : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPart_clef.CheckoutPhaseOneInstance(&part_clefDB)
			backRepo.BackRepoPart_clef.CheckoutPhaseTwoInstance(backRepo, &part_clefDB)
		}
	}
}

// CopyBasicFieldsFromPart_clef
func (part_clefDB *Part_clefDB) CopyBasicFieldsFromPart_clef(part_clef *models.Part_clef) {
	// insertion point for fields commit

	part_clefDB.Name_Data.String = part_clef.Name
	part_clefDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_clef_WOP
func (part_clefDB *Part_clefDB) CopyBasicFieldsFromPart_clef_WOP(part_clef *models.Part_clef_WOP) {
	// insertion point for fields commit

	part_clefDB.Name_Data.String = part_clef.Name
	part_clefDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_clefWOP
func (part_clefDB *Part_clefDB) CopyBasicFieldsFromPart_clefWOP(part_clef *Part_clefWOP) {
	// insertion point for fields commit

	part_clefDB.Name_Data.String = part_clef.Name
	part_clefDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPart_clef
func (part_clefDB *Part_clefDB) CopyBasicFieldsToPart_clef(part_clef *models.Part_clef) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_clef.Name = part_clefDB.Name_Data.String
}

// CopyBasicFieldsToPart_clef_WOP
func (part_clefDB *Part_clefDB) CopyBasicFieldsToPart_clef_WOP(part_clef *models.Part_clef_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_clef.Name = part_clefDB.Name_Data.String
}

// CopyBasicFieldsToPart_clefWOP
func (part_clefDB *Part_clefDB) CopyBasicFieldsToPart_clefWOP(part_clef *Part_clefWOP) {
	part_clef.ID = int(part_clefDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	part_clef.Name = part_clefDB.Name_Data.String
}

// Backup generates a json file from a slice of all Part_clefDB instances in the backrepo
func (backRepoPart_clef *BackRepoPart_clefStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Part_clefDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_clefDB, 0)
	for _, part_clefDB := range backRepoPart_clef.Map_Part_clefDBID_Part_clefDB {
		forBackup = append(forBackup, part_clefDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Part_clef ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Part_clef file", err.Error())
	}
}

// Backup generates a json file from a slice of all Part_clefDB instances in the backrepo
func (backRepoPart_clef *BackRepoPart_clefStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_clefDB, 0)
	for _, part_clefDB := range backRepoPart_clef.Map_Part_clefDBID_Part_clefDB {
		forBackup = append(forBackup, part_clefDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Part_clef")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Part_clef_Fields, -1)
	for _, part_clefDB := range forBackup {

		var part_clefWOP Part_clefWOP
		part_clefDB.CopyBasicFieldsToPart_clefWOP(&part_clefWOP)

		row := sh.AddRow()
		row.WriteStruct(&part_clefWOP, -1)
	}
}

// RestoreXL from the "Part_clef" sheet all Part_clefDB instances
func (backRepoPart_clef *BackRepoPart_clefStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPart_clefid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Part_clef"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPart_clef.rowVisitorPart_clef)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPart_clef *BackRepoPart_clefStruct) rowVisitorPart_clef(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var part_clefWOP Part_clefWOP
		row.ReadStruct(&part_clefWOP)

		// add the unmarshalled struct to the stage
		part_clefDB := new(Part_clefDB)
		part_clefDB.CopyBasicFieldsFromPart_clefWOP(&part_clefWOP)

		part_clefDB_ID_atBackupTime := part_clefDB.ID
		part_clefDB.ID = 0
		query := backRepoPart_clef.db.Create(part_clefDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[part_clefDB.ID] = part_clefDB
		BackRepoPart_clefid_atBckpTime_newID[part_clefDB_ID_atBackupTime] = part_clefDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Part_clefDB.json" in dirPath that stores an array
// of Part_clefDB and stores it in the database
// the map BackRepoPart_clefid_atBckpTime_newID is updated accordingly
func (backRepoPart_clef *BackRepoPart_clefStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPart_clefid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Part_clefDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Part_clef file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Part_clefDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Part_clefDBID_Part_clefDB
	for _, part_clefDB := range forRestore {

		part_clefDB_ID_atBackupTime := part_clefDB.ID
		part_clefDB.ID = 0
		query := backRepoPart_clef.db.Create(part_clefDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[part_clefDB.ID] = part_clefDB
		BackRepoPart_clefid_atBckpTime_newID[part_clefDB_ID_atBackupTime] = part_clefDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Part_clef file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Part_clef>id_atBckpTime_newID
// to compute new index
func (backRepoPart_clef *BackRepoPart_clefStruct) RestorePhaseTwo() {

	for _, part_clefDB := range backRepoPart_clef.Map_Part_clefDBID_Part_clefDB {

		// next line of code is to avert unused variable compilation error
		_ = part_clefDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPart_clef.db.Model(part_clefDB).Updates(*part_clefDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPart_clef.ResetReversePointers commits all staged instances of Part_clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_clef *BackRepoPart_clefStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, part_clef := range backRepoPart_clef.Map_Part_clefDBID_Part_clefPtr {
		backRepoPart_clef.ResetReversePointersInstance(backRepo, idx, part_clef)
	}

	return
}

func (backRepoPart_clef *BackRepoPart_clefStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, part_clef *models.Part_clef) (Error error) {

	// fetch matching part_clefDB
	if part_clefDB, ok := backRepoPart_clef.Map_Part_clefDBID_Part_clefDB[idx]; ok {
		_ = part_clefDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPart_clefid_atBckpTime_newID map[uint]uint
