// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Breath_mark_sql sql.NullBool
var dummy_Breath_mark_time time.Duration
var dummy_Breath_mark_sort sort.Float64Slice

// Breath_markAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model breath_markAPI
type Breath_markAPI struct {
	gorm.Model

	models.Breath_mark_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Breath_markPointersEncoding Breath_markPointersEncoding
}

// Breath_markPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Breath_markPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Breath_markDB describes a breath_mark in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model breath_markDB
type Breath_markDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field breath_markDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Breath_markPointersEncoding
}

// Breath_markDBs arrays breath_markDBs
// swagger:response breath_markDBsResponse
type Breath_markDBs []Breath_markDB

// Breath_markDBResponse provides response
// swagger:response breath_markDBResponse
type Breath_markDBResponse struct {
	Breath_markDB
}

// Breath_markWOP is a Breath_mark without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Breath_markWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Breath_mark_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBreath_markStruct struct {
	// stores Breath_markDB according to their gorm ID
	Map_Breath_markDBID_Breath_markDB map[uint]*Breath_markDB

	// stores Breath_markDB ID according to Breath_mark address
	Map_Breath_markPtr_Breath_markDBID map[*models.Breath_mark]uint

	// stores Breath_mark according to their gorm ID
	Map_Breath_markDBID_Breath_markPtr map[uint]*models.Breath_mark

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBreath_mark *BackRepoBreath_markStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBreath_mark.stage
	return
}

func (backRepoBreath_mark *BackRepoBreath_markStruct) GetDB() *gorm.DB {
	return backRepoBreath_mark.db
}

// GetBreath_markDBFromBreath_markPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBreath_mark *BackRepoBreath_markStruct) GetBreath_markDBFromBreath_markPtr(breath_mark *models.Breath_mark) (breath_markDB *Breath_markDB) {
	id := backRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark]
	breath_markDB = backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[id]
	return
}

// BackRepoBreath_mark.CommitPhaseOne commits all staged instances of Breath_mark to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBreath_mark *BackRepoBreath_markStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for breath_mark := range stage.Breath_marks {
		backRepoBreath_mark.CommitPhaseOneInstance(breath_mark)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, breath_mark := range backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr {
		if _, ok := stage.Breath_marks[breath_mark]; !ok {
			backRepoBreath_mark.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBreath_mark.CommitDeleteInstance commits deletion of Breath_mark to the BackRepo
func (backRepoBreath_mark *BackRepoBreath_markStruct) CommitDeleteInstance(id uint) (Error error) {

	breath_mark := backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr[id]

	// breath_mark is not staged anymore, remove breath_markDB
	breath_markDB := backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[id]
	query := backRepoBreath_mark.db.Unscoped().Delete(&breath_markDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID, breath_mark)
	delete(backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr, id)
	delete(backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB, id)

	return
}

// BackRepoBreath_mark.CommitPhaseOneInstance commits breath_mark staged instances of Breath_mark to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBreath_mark *BackRepoBreath_markStruct) CommitPhaseOneInstance(breath_mark *models.Breath_mark) (Error error) {

	// check if the breath_mark is not commited yet
	if _, ok := backRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark]; ok {
		return
	}

	// initiate breath_mark
	var breath_markDB Breath_markDB
	breath_markDB.CopyBasicFieldsFromBreath_mark(breath_mark)

	query := backRepoBreath_mark.db.Create(&breath_markDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark] = breath_markDB.ID
	backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr[breath_markDB.ID] = breath_mark
	backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[breath_markDB.ID] = &breath_markDB

	return
}

// BackRepoBreath_mark.CommitPhaseTwo commits all staged instances of Breath_mark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBreath_mark *BackRepoBreath_markStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, breath_mark := range backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr {
		backRepoBreath_mark.CommitPhaseTwoInstance(backRepo, idx, breath_mark)
	}

	return
}

// BackRepoBreath_mark.CommitPhaseTwoInstance commits {{structname }} of models.Breath_mark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBreath_mark *BackRepoBreath_markStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, breath_mark *models.Breath_mark) (Error error) {

	// fetch matching breath_markDB
	if breath_markDB, ok := backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[idx]; ok {

		breath_markDB.CopyBasicFieldsFromBreath_mark(breath_mark)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBreath_mark.db.Save(&breath_markDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Breath_mark intance %s", breath_mark.Name))
		return err
	}

	return
}

// BackRepoBreath_mark.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBreath_mark *BackRepoBreath_markStruct) CheckoutPhaseOne() (Error error) {

	breath_markDBArray := make([]Breath_markDB, 0)
	query := backRepoBreath_mark.db.Find(&breath_markDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	breath_markInstancesToBeRemovedFromTheStage := make(map[*models.Breath_mark]any)
	for key, value := range backRepoBreath_mark.stage.Breath_marks {
		breath_markInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, breath_markDB := range breath_markDBArray {
		backRepoBreath_mark.CheckoutPhaseOneInstance(&breath_markDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		breath_mark, ok := backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr[breath_markDB.ID]
		if ok {
			delete(breath_markInstancesToBeRemovedFromTheStage, breath_mark)
		}
	}

	// remove from stage and back repo's 3 maps all breath_marks that are not in the checkout
	for breath_mark := range breath_markInstancesToBeRemovedFromTheStage {
		breath_mark.Unstage(backRepoBreath_mark.GetStage())

		// remove instance from the back repo 3 maps
		breath_markID := backRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark]
		delete(backRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID, breath_mark)
		delete(backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB, breath_markID)
		delete(backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr, breath_markID)
	}

	return
}

// CheckoutPhaseOneInstance takes a breath_markDB that has been found in the DB, updates the backRepo and stages the
// models version of the breath_markDB
func (backRepoBreath_mark *BackRepoBreath_markStruct) CheckoutPhaseOneInstance(breath_markDB *Breath_markDB) (Error error) {

	breath_mark, ok := backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr[breath_markDB.ID]
	if !ok {
		breath_mark = new(models.Breath_mark)

		backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr[breath_markDB.ID] = breath_mark
		backRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark] = breath_markDB.ID

		// append model store with the new element
		breath_mark.Name = breath_markDB.Name_Data.String
		breath_mark.Stage(backRepoBreath_mark.GetStage())
	}
	breath_markDB.CopyBasicFieldsToBreath_mark(breath_mark)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	breath_mark.Stage(backRepoBreath_mark.GetStage())

	// preserve pointer to breath_markDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Breath_markDBID_Breath_markDB)[breath_markDB hold variable pointers
	breath_markDB_Data := *breath_markDB
	preservedPtrToBreath_mark := &breath_markDB_Data
	backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[breath_markDB.ID] = preservedPtrToBreath_mark

	return
}

// BackRepoBreath_mark.CheckoutPhaseTwo Checkouts all staged instances of Breath_mark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBreath_mark *BackRepoBreath_markStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, breath_markDB := range backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB {
		backRepoBreath_mark.CheckoutPhaseTwoInstance(backRepo, breath_markDB)
	}
	return
}

// BackRepoBreath_mark.CheckoutPhaseTwoInstance Checkouts staged instances of Breath_mark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBreath_mark *BackRepoBreath_markStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, breath_markDB *Breath_markDB) (Error error) {

	breath_mark := backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr[breath_markDB.ID]

	breath_markDB.DecodePointers(backRepo, breath_mark)

	return
}

func (breath_markDB *Breath_markDB) DecodePointers(backRepo *BackRepoStruct, breath_mark *models.Breath_mark) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBreath_mark allows commit of a single breath_mark (if already staged)
func (backRepo *BackRepoStruct) CommitBreath_mark(breath_mark *models.Breath_mark) {
	backRepo.BackRepoBreath_mark.CommitPhaseOneInstance(breath_mark)
	if id, ok := backRepo.BackRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark]; ok {
		backRepo.BackRepoBreath_mark.CommitPhaseTwoInstance(backRepo, id, breath_mark)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBreath_mark allows checkout of a single breath_mark (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBreath_mark(breath_mark *models.Breath_mark) {
	// check if the breath_mark is staged
	if _, ok := backRepo.BackRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark]; ok {

		if id, ok := backRepo.BackRepoBreath_mark.Map_Breath_markPtr_Breath_markDBID[breath_mark]; ok {
			var breath_markDB Breath_markDB
			breath_markDB.ID = id

			if err := backRepo.BackRepoBreath_mark.db.First(&breath_markDB, id).Error; err != nil {
				log.Fatalln("CheckoutBreath_mark : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBreath_mark.CheckoutPhaseOneInstance(&breath_markDB)
			backRepo.BackRepoBreath_mark.CheckoutPhaseTwoInstance(backRepo, &breath_markDB)
		}
	}
}

// CopyBasicFieldsFromBreath_mark
func (breath_markDB *Breath_markDB) CopyBasicFieldsFromBreath_mark(breath_mark *models.Breath_mark) {
	// insertion point for fields commit

	breath_markDB.Name_Data.String = breath_mark.Name
	breath_markDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBreath_mark_WOP
func (breath_markDB *Breath_markDB) CopyBasicFieldsFromBreath_mark_WOP(breath_mark *models.Breath_mark_WOP) {
	// insertion point for fields commit

	breath_markDB.Name_Data.String = breath_mark.Name
	breath_markDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBreath_markWOP
func (breath_markDB *Breath_markDB) CopyBasicFieldsFromBreath_markWOP(breath_mark *Breath_markWOP) {
	// insertion point for fields commit

	breath_markDB.Name_Data.String = breath_mark.Name
	breath_markDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBreath_mark
func (breath_markDB *Breath_markDB) CopyBasicFieldsToBreath_mark(breath_mark *models.Breath_mark) {
	// insertion point for checkout of basic fields (back repo to stage)
	breath_mark.Name = breath_markDB.Name_Data.String
}

// CopyBasicFieldsToBreath_mark_WOP
func (breath_markDB *Breath_markDB) CopyBasicFieldsToBreath_mark_WOP(breath_mark *models.Breath_mark_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	breath_mark.Name = breath_markDB.Name_Data.String
}

// CopyBasicFieldsToBreath_markWOP
func (breath_markDB *Breath_markDB) CopyBasicFieldsToBreath_markWOP(breath_mark *Breath_markWOP) {
	breath_mark.ID = int(breath_markDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	breath_mark.Name = breath_markDB.Name_Data.String
}

// Backup generates a json file from a slice of all Breath_markDB instances in the backrepo
func (backRepoBreath_mark *BackRepoBreath_markStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Breath_markDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Breath_markDB, 0)
	for _, breath_markDB := range backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB {
		forBackup = append(forBackup, breath_markDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Breath_mark ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Breath_mark file", err.Error())
	}
}

// Backup generates a json file from a slice of all Breath_markDB instances in the backrepo
func (backRepoBreath_mark *BackRepoBreath_markStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Breath_markDB, 0)
	for _, breath_markDB := range backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB {
		forBackup = append(forBackup, breath_markDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Breath_mark")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Breath_mark_Fields, -1)
	for _, breath_markDB := range forBackup {

		var breath_markWOP Breath_markWOP
		breath_markDB.CopyBasicFieldsToBreath_markWOP(&breath_markWOP)

		row := sh.AddRow()
		row.WriteStruct(&breath_markWOP, -1)
	}
}

// RestoreXL from the "Breath_mark" sheet all Breath_markDB instances
func (backRepoBreath_mark *BackRepoBreath_markStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBreath_markid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Breath_mark"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBreath_mark.rowVisitorBreath_mark)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBreath_mark *BackRepoBreath_markStruct) rowVisitorBreath_mark(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var breath_markWOP Breath_markWOP
		row.ReadStruct(&breath_markWOP)

		// add the unmarshalled struct to the stage
		breath_markDB := new(Breath_markDB)
		breath_markDB.CopyBasicFieldsFromBreath_markWOP(&breath_markWOP)

		breath_markDB_ID_atBackupTime := breath_markDB.ID
		breath_markDB.ID = 0
		query := backRepoBreath_mark.db.Create(breath_markDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[breath_markDB.ID] = breath_markDB
		BackRepoBreath_markid_atBckpTime_newID[breath_markDB_ID_atBackupTime] = breath_markDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Breath_markDB.json" in dirPath that stores an array
// of Breath_markDB and stores it in the database
// the map BackRepoBreath_markid_atBckpTime_newID is updated accordingly
func (backRepoBreath_mark *BackRepoBreath_markStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBreath_markid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Breath_markDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Breath_mark file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Breath_markDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Breath_markDBID_Breath_markDB
	for _, breath_markDB := range forRestore {

		breath_markDB_ID_atBackupTime := breath_markDB.ID
		breath_markDB.ID = 0
		query := backRepoBreath_mark.db.Create(breath_markDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[breath_markDB.ID] = breath_markDB
		BackRepoBreath_markid_atBckpTime_newID[breath_markDB_ID_atBackupTime] = breath_markDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Breath_mark file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Breath_mark>id_atBckpTime_newID
// to compute new index
func (backRepoBreath_mark *BackRepoBreath_markStruct) RestorePhaseTwo() {

	for _, breath_markDB := range backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB {

		// next line of code is to avert unused variable compilation error
		_ = breath_markDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBreath_mark.db.Model(breath_markDB).Updates(*breath_markDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBreath_mark.ResetReversePointers commits all staged instances of Breath_mark to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBreath_mark *BackRepoBreath_markStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, breath_mark := range backRepoBreath_mark.Map_Breath_markDBID_Breath_markPtr {
		backRepoBreath_mark.ResetReversePointersInstance(backRepo, idx, breath_mark)
	}

	return
}

func (backRepoBreath_mark *BackRepoBreath_markStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, breath_mark *models.Breath_mark) (Error error) {

	// fetch matching breath_markDB
	if breath_markDB, ok := backRepoBreath_mark.Map_Breath_markDBID_Breath_markDB[idx]; ok {
		_ = breath_markDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBreath_markid_atBckpTime_newID map[uint]uint
