// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_System_layout_sql sql.NullBool
var dummy_System_layout_time time.Duration
var dummy_System_layout_sort sort.Float64Slice

// System_layoutAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model system_layoutAPI
type System_layoutAPI struct {
	gorm.Model

	models.System_layout_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	System_layoutPointersEncoding System_layoutPointersEncoding
}

// System_layoutPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type System_layoutPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field System_margins is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	System_marginsID sql.NullInt64

	// field System_dividers is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	System_dividersID sql.NullInt64
}

// System_layoutDB describes a system_layout in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model system_layoutDB
type System_layoutDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field system_layoutDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	System_layoutPointersEncoding
}

// System_layoutDBs arrays system_layoutDBs
// swagger:response system_layoutDBsResponse
type System_layoutDBs []System_layoutDB

// System_layoutDBResponse provides response
// swagger:response system_layoutDBResponse
type System_layoutDBResponse struct {
	System_layoutDB
}

// System_layoutWOP is a System_layout without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type System_layoutWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var System_layout_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSystem_layoutStruct struct {
	// stores System_layoutDB according to their gorm ID
	Map_System_layoutDBID_System_layoutDB map[uint]*System_layoutDB

	// stores System_layoutDB ID according to System_layout address
	Map_System_layoutPtr_System_layoutDBID map[*models.System_layout]uint

	// stores System_layout according to their gorm ID
	Map_System_layoutDBID_System_layoutPtr map[uint]*models.System_layout

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSystem_layout *BackRepoSystem_layoutStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSystem_layout.stage
	return
}

func (backRepoSystem_layout *BackRepoSystem_layoutStruct) GetDB() *gorm.DB {
	return backRepoSystem_layout.db
}

// GetSystem_layoutDBFromSystem_layoutPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) GetSystem_layoutDBFromSystem_layoutPtr(system_layout *models.System_layout) (system_layoutDB *System_layoutDB) {
	id := backRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout]
	system_layoutDB = backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[id]
	return
}

// BackRepoSystem_layout.CommitPhaseOne commits all staged instances of System_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for system_layout := range stage.System_layouts {
		backRepoSystem_layout.CommitPhaseOneInstance(system_layout)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, system_layout := range backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr {
		if _, ok := stage.System_layouts[system_layout]; !ok {
			backRepoSystem_layout.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSystem_layout.CommitDeleteInstance commits deletion of System_layout to the BackRepo
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CommitDeleteInstance(id uint) (Error error) {

	system_layout := backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr[id]

	// system_layout is not staged anymore, remove system_layoutDB
	system_layoutDB := backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[id]
	query := backRepoSystem_layout.db.Unscoped().Delete(&system_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID, system_layout)
	delete(backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr, id)
	delete(backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB, id)

	return
}

// BackRepoSystem_layout.CommitPhaseOneInstance commits system_layout staged instances of System_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CommitPhaseOneInstance(system_layout *models.System_layout) (Error error) {

	// check if the system_layout is not commited yet
	if _, ok := backRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout]; ok {
		return
	}

	// initiate system_layout
	var system_layoutDB System_layoutDB
	system_layoutDB.CopyBasicFieldsFromSystem_layout(system_layout)

	query := backRepoSystem_layout.db.Create(&system_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout] = system_layoutDB.ID
	backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr[system_layoutDB.ID] = system_layout
	backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[system_layoutDB.ID] = &system_layoutDB

	return
}

// BackRepoSystem_layout.CommitPhaseTwo commits all staged instances of System_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, system_layout := range backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr {
		backRepoSystem_layout.CommitPhaseTwoInstance(backRepo, idx, system_layout)
	}

	return
}

// BackRepoSystem_layout.CommitPhaseTwoInstance commits {{structname }} of models.System_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, system_layout *models.System_layout) (Error error) {

	// fetch matching system_layoutDB
	if system_layoutDB, ok := backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[idx]; ok {

		system_layoutDB.CopyBasicFieldsFromSystem_layout(system_layout)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value system_layout.System_margins translates to updating the system_layout.System_marginsID
		system_layoutDB.System_marginsID.Valid = true // allow for a 0 value (nil association)
		if system_layout.System_margins != nil {
			if System_marginsId, ok := backRepo.BackRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_layout.System_margins]; ok {
				system_layoutDB.System_marginsID.Int64 = int64(System_marginsId)
				system_layoutDB.System_marginsID.Valid = true
			}
		} else {
			system_layoutDB.System_marginsID.Int64 = 0
			system_layoutDB.System_marginsID.Valid = true
		}

		// commit pointer value system_layout.System_dividers translates to updating the system_layout.System_dividersID
		system_layoutDB.System_dividersID.Valid = true // allow for a 0 value (nil association)
		if system_layout.System_dividers != nil {
			if System_dividersId, ok := backRepo.BackRepoSystem_dividers.Map_System_dividersPtr_System_dividersDBID[system_layout.System_dividers]; ok {
				system_layoutDB.System_dividersID.Int64 = int64(System_dividersId)
				system_layoutDB.System_dividersID.Valid = true
			}
		} else {
			system_layoutDB.System_dividersID.Int64 = 0
			system_layoutDB.System_dividersID.Valid = true
		}

		query := backRepoSystem_layout.db.Save(&system_layoutDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown System_layout intance %s", system_layout.Name))
		return err
	}

	return
}

// BackRepoSystem_layout.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CheckoutPhaseOne() (Error error) {

	system_layoutDBArray := make([]System_layoutDB, 0)
	query := backRepoSystem_layout.db.Find(&system_layoutDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	system_layoutInstancesToBeRemovedFromTheStage := make(map[*models.System_layout]any)
	for key, value := range backRepoSystem_layout.stage.System_layouts {
		system_layoutInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, system_layoutDB := range system_layoutDBArray {
		backRepoSystem_layout.CheckoutPhaseOneInstance(&system_layoutDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		system_layout, ok := backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr[system_layoutDB.ID]
		if ok {
			delete(system_layoutInstancesToBeRemovedFromTheStage, system_layout)
		}
	}

	// remove from stage and back repo's 3 maps all system_layouts that are not in the checkout
	for system_layout := range system_layoutInstancesToBeRemovedFromTheStage {
		system_layout.Unstage(backRepoSystem_layout.GetStage())

		// remove instance from the back repo 3 maps
		system_layoutID := backRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout]
		delete(backRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID, system_layout)
		delete(backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB, system_layoutID)
		delete(backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr, system_layoutID)
	}

	return
}

// CheckoutPhaseOneInstance takes a system_layoutDB that has been found in the DB, updates the backRepo and stages the
// models version of the system_layoutDB
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CheckoutPhaseOneInstance(system_layoutDB *System_layoutDB) (Error error) {

	system_layout, ok := backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr[system_layoutDB.ID]
	if !ok {
		system_layout = new(models.System_layout)

		backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr[system_layoutDB.ID] = system_layout
		backRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout] = system_layoutDB.ID

		// append model store with the new element
		system_layout.Name = system_layoutDB.Name_Data.String
		system_layout.Stage(backRepoSystem_layout.GetStage())
	}
	system_layoutDB.CopyBasicFieldsToSystem_layout(system_layout)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	system_layout.Stage(backRepoSystem_layout.GetStage())

	// preserve pointer to system_layoutDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_System_layoutDBID_System_layoutDB)[system_layoutDB hold variable pointers
	system_layoutDB_Data := *system_layoutDB
	preservedPtrToSystem_layout := &system_layoutDB_Data
	backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[system_layoutDB.ID] = preservedPtrToSystem_layout

	return
}

// BackRepoSystem_layout.CheckoutPhaseTwo Checkouts all staged instances of System_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, system_layoutDB := range backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB {
		backRepoSystem_layout.CheckoutPhaseTwoInstance(backRepo, system_layoutDB)
	}
	return
}

// BackRepoSystem_layout.CheckoutPhaseTwoInstance Checkouts staged instances of System_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, system_layoutDB *System_layoutDB) (Error error) {

	system_layout := backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr[system_layoutDB.ID]

	system_layoutDB.DecodePointers(backRepo, system_layout)

	return
}

func (system_layoutDB *System_layoutDB) DecodePointers(backRepo *BackRepoStruct, system_layout *models.System_layout) {

	// insertion point for checkout of pointer encoding
	// System_margins field
	system_layout.System_margins = nil
	if system_layoutDB.System_marginsID.Int64 != 0 {
		system_layout.System_margins = backRepo.BackRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr[uint(system_layoutDB.System_marginsID.Int64)]
	}
	// System_dividers field
	system_layout.System_dividers = nil
	if system_layoutDB.System_dividersID.Int64 != 0 {
		system_layout.System_dividers = backRepo.BackRepoSystem_dividers.Map_System_dividersDBID_System_dividersPtr[uint(system_layoutDB.System_dividersID.Int64)]
	}
	return
}

// CommitSystem_layout allows commit of a single system_layout (if already staged)
func (backRepo *BackRepoStruct) CommitSystem_layout(system_layout *models.System_layout) {
	backRepo.BackRepoSystem_layout.CommitPhaseOneInstance(system_layout)
	if id, ok := backRepo.BackRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout]; ok {
		backRepo.BackRepoSystem_layout.CommitPhaseTwoInstance(backRepo, id, system_layout)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSystem_layout allows checkout of a single system_layout (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSystem_layout(system_layout *models.System_layout) {
	// check if the system_layout is staged
	if _, ok := backRepo.BackRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout]; ok {

		if id, ok := backRepo.BackRepoSystem_layout.Map_System_layoutPtr_System_layoutDBID[system_layout]; ok {
			var system_layoutDB System_layoutDB
			system_layoutDB.ID = id

			if err := backRepo.BackRepoSystem_layout.db.First(&system_layoutDB, id).Error; err != nil {
				log.Fatalln("CheckoutSystem_layout : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSystem_layout.CheckoutPhaseOneInstance(&system_layoutDB)
			backRepo.BackRepoSystem_layout.CheckoutPhaseTwoInstance(backRepo, &system_layoutDB)
		}
	}
}

// CopyBasicFieldsFromSystem_layout
func (system_layoutDB *System_layoutDB) CopyBasicFieldsFromSystem_layout(system_layout *models.System_layout) {
	// insertion point for fields commit

	system_layoutDB.Name_Data.String = system_layout.Name
	system_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSystem_layout_WOP
func (system_layoutDB *System_layoutDB) CopyBasicFieldsFromSystem_layout_WOP(system_layout *models.System_layout_WOP) {
	// insertion point for fields commit

	system_layoutDB.Name_Data.String = system_layout.Name
	system_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSystem_layoutWOP
func (system_layoutDB *System_layoutDB) CopyBasicFieldsFromSystem_layoutWOP(system_layout *System_layoutWOP) {
	// insertion point for fields commit

	system_layoutDB.Name_Data.String = system_layout.Name
	system_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSystem_layout
func (system_layoutDB *System_layoutDB) CopyBasicFieldsToSystem_layout(system_layout *models.System_layout) {
	// insertion point for checkout of basic fields (back repo to stage)
	system_layout.Name = system_layoutDB.Name_Data.String
}

// CopyBasicFieldsToSystem_layout_WOP
func (system_layoutDB *System_layoutDB) CopyBasicFieldsToSystem_layout_WOP(system_layout *models.System_layout_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	system_layout.Name = system_layoutDB.Name_Data.String
}

// CopyBasicFieldsToSystem_layoutWOP
func (system_layoutDB *System_layoutDB) CopyBasicFieldsToSystem_layoutWOP(system_layout *System_layoutWOP) {
	system_layout.ID = int(system_layoutDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	system_layout.Name = system_layoutDB.Name_Data.String
}

// Backup generates a json file from a slice of all System_layoutDB instances in the backrepo
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "System_layoutDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*System_layoutDB, 0)
	for _, system_layoutDB := range backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB {
		forBackup = append(forBackup, system_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json System_layout ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json System_layout file", err.Error())
	}
}

// Backup generates a json file from a slice of all System_layoutDB instances in the backrepo
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*System_layoutDB, 0)
	for _, system_layoutDB := range backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB {
		forBackup = append(forBackup, system_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("System_layout")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&System_layout_Fields, -1)
	for _, system_layoutDB := range forBackup {

		var system_layoutWOP System_layoutWOP
		system_layoutDB.CopyBasicFieldsToSystem_layoutWOP(&system_layoutWOP)

		row := sh.AddRow()
		row.WriteStruct(&system_layoutWOP, -1)
	}
}

// RestoreXL from the "System_layout" sheet all System_layoutDB instances
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSystem_layoutid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["System_layout"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSystem_layout.rowVisitorSystem_layout)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSystem_layout *BackRepoSystem_layoutStruct) rowVisitorSystem_layout(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var system_layoutWOP System_layoutWOP
		row.ReadStruct(&system_layoutWOP)

		// add the unmarshalled struct to the stage
		system_layoutDB := new(System_layoutDB)
		system_layoutDB.CopyBasicFieldsFromSystem_layoutWOP(&system_layoutWOP)

		system_layoutDB_ID_atBackupTime := system_layoutDB.ID
		system_layoutDB.ID = 0
		query := backRepoSystem_layout.db.Create(system_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[system_layoutDB.ID] = system_layoutDB
		BackRepoSystem_layoutid_atBckpTime_newID[system_layoutDB_ID_atBackupTime] = system_layoutDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "System_layoutDB.json" in dirPath that stores an array
// of System_layoutDB and stores it in the database
// the map BackRepoSystem_layoutid_atBckpTime_newID is updated accordingly
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSystem_layoutid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "System_layoutDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json System_layout file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*System_layoutDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_System_layoutDBID_System_layoutDB
	for _, system_layoutDB := range forRestore {

		system_layoutDB_ID_atBackupTime := system_layoutDB.ID
		system_layoutDB.ID = 0
		query := backRepoSystem_layout.db.Create(system_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[system_layoutDB.ID] = system_layoutDB
		BackRepoSystem_layoutid_atBckpTime_newID[system_layoutDB_ID_atBackupTime] = system_layoutDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json System_layout file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<System_layout>id_atBckpTime_newID
// to compute new index
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) RestorePhaseTwo() {

	for _, system_layoutDB := range backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB {

		// next line of code is to avert unused variable compilation error
		_ = system_layoutDB

		// insertion point for reindexing pointers encoding
		// reindexing System_margins field
		if system_layoutDB.System_marginsID.Int64 != 0 {
			system_layoutDB.System_marginsID.Int64 = int64(BackRepoSystem_marginsid_atBckpTime_newID[uint(system_layoutDB.System_marginsID.Int64)])
			system_layoutDB.System_marginsID.Valid = true
		}

		// reindexing System_dividers field
		if system_layoutDB.System_dividersID.Int64 != 0 {
			system_layoutDB.System_dividersID.Int64 = int64(BackRepoSystem_dividersid_atBckpTime_newID[uint(system_layoutDB.System_dividersID.Int64)])
			system_layoutDB.System_dividersID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSystem_layout.db.Model(system_layoutDB).Updates(*system_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSystem_layout.ResetReversePointers commits all staged instances of System_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_layout *BackRepoSystem_layoutStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, system_layout := range backRepoSystem_layout.Map_System_layoutDBID_System_layoutPtr {
		backRepoSystem_layout.ResetReversePointersInstance(backRepo, idx, system_layout)
	}

	return
}

func (backRepoSystem_layout *BackRepoSystem_layoutStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, system_layout *models.System_layout) (Error error) {

	// fetch matching system_layoutDB
	if system_layoutDB, ok := backRepoSystem_layout.Map_System_layoutDBID_System_layoutDB[idx]; ok {
		_ = system_layoutDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSystem_layoutid_atBckpTime_newID map[uint]uint
