// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Cancel_sql sql.NullBool
var dummy_Cancel_time time.Duration
var dummy_Cancel_sort sort.Float64Slice

// CancelAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model cancelAPI
type CancelAPI struct {
	gorm.Model

	models.Cancel_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CancelPointersEncoding CancelPointersEncoding
}

// CancelPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CancelPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CancelDB describes a cancel in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model cancelDB
type CancelDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field cancelDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CancelPointersEncoding
}

// CancelDBs arrays cancelDBs
// swagger:response cancelDBsResponse
type CancelDBs []CancelDB

// CancelDBResponse provides response
// swagger:response cancelDBResponse
type CancelDBResponse struct {
	CancelDB
}

// CancelWOP is a Cancel without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CancelWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Cancel_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoCancelStruct struct {
	// stores CancelDB according to their gorm ID
	Map_CancelDBID_CancelDB map[uint]*CancelDB

	// stores CancelDB ID according to Cancel address
	Map_CancelPtr_CancelDBID map[*models.Cancel]uint

	// stores Cancel according to their gorm ID
	Map_CancelDBID_CancelPtr map[uint]*models.Cancel

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCancel *BackRepoCancelStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCancel.stage
	return
}

func (backRepoCancel *BackRepoCancelStruct) GetDB() *gorm.DB {
	return backRepoCancel.db
}

// GetCancelDBFromCancelPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCancel *BackRepoCancelStruct) GetCancelDBFromCancelPtr(cancel *models.Cancel) (cancelDB *CancelDB) {
	id := backRepoCancel.Map_CancelPtr_CancelDBID[cancel]
	cancelDB = backRepoCancel.Map_CancelDBID_CancelDB[id]
	return
}

// BackRepoCancel.CommitPhaseOne commits all staged instances of Cancel to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCancel *BackRepoCancelStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for cancel := range stage.Cancels {
		backRepoCancel.CommitPhaseOneInstance(cancel)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, cancel := range backRepoCancel.Map_CancelDBID_CancelPtr {
		if _, ok := stage.Cancels[cancel]; !ok {
			backRepoCancel.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCancel.CommitDeleteInstance commits deletion of Cancel to the BackRepo
func (backRepoCancel *BackRepoCancelStruct) CommitDeleteInstance(id uint) (Error error) {

	cancel := backRepoCancel.Map_CancelDBID_CancelPtr[id]

	// cancel is not staged anymore, remove cancelDB
	cancelDB := backRepoCancel.Map_CancelDBID_CancelDB[id]
	query := backRepoCancel.db.Unscoped().Delete(&cancelDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCancel.Map_CancelPtr_CancelDBID, cancel)
	delete(backRepoCancel.Map_CancelDBID_CancelPtr, id)
	delete(backRepoCancel.Map_CancelDBID_CancelDB, id)

	return
}

// BackRepoCancel.CommitPhaseOneInstance commits cancel staged instances of Cancel to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCancel *BackRepoCancelStruct) CommitPhaseOneInstance(cancel *models.Cancel) (Error error) {

	// check if the cancel is not commited yet
	if _, ok := backRepoCancel.Map_CancelPtr_CancelDBID[cancel]; ok {
		return
	}

	// initiate cancel
	var cancelDB CancelDB
	cancelDB.CopyBasicFieldsFromCancel(cancel)

	query := backRepoCancel.db.Create(&cancelDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCancel.Map_CancelPtr_CancelDBID[cancel] = cancelDB.ID
	backRepoCancel.Map_CancelDBID_CancelPtr[cancelDB.ID] = cancel
	backRepoCancel.Map_CancelDBID_CancelDB[cancelDB.ID] = &cancelDB

	return
}

// BackRepoCancel.CommitPhaseTwo commits all staged instances of Cancel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCancel *BackRepoCancelStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, cancel := range backRepoCancel.Map_CancelDBID_CancelPtr {
		backRepoCancel.CommitPhaseTwoInstance(backRepo, idx, cancel)
	}

	return
}

// BackRepoCancel.CommitPhaseTwoInstance commits {{structname }} of models.Cancel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCancel *BackRepoCancelStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, cancel *models.Cancel) (Error error) {

	// fetch matching cancelDB
	if cancelDB, ok := backRepoCancel.Map_CancelDBID_CancelDB[idx]; ok {

		cancelDB.CopyBasicFieldsFromCancel(cancel)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCancel.db.Save(&cancelDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Cancel intance %s", cancel.Name))
		return err
	}

	return
}

// BackRepoCancel.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCancel *BackRepoCancelStruct) CheckoutPhaseOne() (Error error) {

	cancelDBArray := make([]CancelDB, 0)
	query := backRepoCancel.db.Find(&cancelDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	cancelInstancesToBeRemovedFromTheStage := make(map[*models.Cancel]any)
	for key, value := range backRepoCancel.stage.Cancels {
		cancelInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, cancelDB := range cancelDBArray {
		backRepoCancel.CheckoutPhaseOneInstance(&cancelDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		cancel, ok := backRepoCancel.Map_CancelDBID_CancelPtr[cancelDB.ID]
		if ok {
			delete(cancelInstancesToBeRemovedFromTheStage, cancel)
		}
	}

	// remove from stage and back repo's 3 maps all cancels that are not in the checkout
	for cancel := range cancelInstancesToBeRemovedFromTheStage {
		cancel.Unstage(backRepoCancel.GetStage())

		// remove instance from the back repo 3 maps
		cancelID := backRepoCancel.Map_CancelPtr_CancelDBID[cancel]
		delete(backRepoCancel.Map_CancelPtr_CancelDBID, cancel)
		delete(backRepoCancel.Map_CancelDBID_CancelDB, cancelID)
		delete(backRepoCancel.Map_CancelDBID_CancelPtr, cancelID)
	}

	return
}

// CheckoutPhaseOneInstance takes a cancelDB that has been found in the DB, updates the backRepo and stages the
// models version of the cancelDB
func (backRepoCancel *BackRepoCancelStruct) CheckoutPhaseOneInstance(cancelDB *CancelDB) (Error error) {

	cancel, ok := backRepoCancel.Map_CancelDBID_CancelPtr[cancelDB.ID]
	if !ok {
		cancel = new(models.Cancel)

		backRepoCancel.Map_CancelDBID_CancelPtr[cancelDB.ID] = cancel
		backRepoCancel.Map_CancelPtr_CancelDBID[cancel] = cancelDB.ID

		// append model store with the new element
		cancel.Name = cancelDB.Name_Data.String
		cancel.Stage(backRepoCancel.GetStage())
	}
	cancelDB.CopyBasicFieldsToCancel(cancel)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	cancel.Stage(backRepoCancel.GetStage())

	// preserve pointer to cancelDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CancelDBID_CancelDB)[cancelDB hold variable pointers
	cancelDB_Data := *cancelDB
	preservedPtrToCancel := &cancelDB_Data
	backRepoCancel.Map_CancelDBID_CancelDB[cancelDB.ID] = preservedPtrToCancel

	return
}

// BackRepoCancel.CheckoutPhaseTwo Checkouts all staged instances of Cancel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCancel *BackRepoCancelStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, cancelDB := range backRepoCancel.Map_CancelDBID_CancelDB {
		backRepoCancel.CheckoutPhaseTwoInstance(backRepo, cancelDB)
	}
	return
}

// BackRepoCancel.CheckoutPhaseTwoInstance Checkouts staged instances of Cancel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCancel *BackRepoCancelStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, cancelDB *CancelDB) (Error error) {

	cancel := backRepoCancel.Map_CancelDBID_CancelPtr[cancelDB.ID]

	cancelDB.DecodePointers(backRepo, cancel)

	return
}

func (cancelDB *CancelDB) DecodePointers(backRepo *BackRepoStruct, cancel *models.Cancel) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCancel allows commit of a single cancel (if already staged)
func (backRepo *BackRepoStruct) CommitCancel(cancel *models.Cancel) {
	backRepo.BackRepoCancel.CommitPhaseOneInstance(cancel)
	if id, ok := backRepo.BackRepoCancel.Map_CancelPtr_CancelDBID[cancel]; ok {
		backRepo.BackRepoCancel.CommitPhaseTwoInstance(backRepo, id, cancel)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCancel allows checkout of a single cancel (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCancel(cancel *models.Cancel) {
	// check if the cancel is staged
	if _, ok := backRepo.BackRepoCancel.Map_CancelPtr_CancelDBID[cancel]; ok {

		if id, ok := backRepo.BackRepoCancel.Map_CancelPtr_CancelDBID[cancel]; ok {
			var cancelDB CancelDB
			cancelDB.ID = id

			if err := backRepo.BackRepoCancel.db.First(&cancelDB, id).Error; err != nil {
				log.Fatalln("CheckoutCancel : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCancel.CheckoutPhaseOneInstance(&cancelDB)
			backRepo.BackRepoCancel.CheckoutPhaseTwoInstance(backRepo, &cancelDB)
		}
	}
}

// CopyBasicFieldsFromCancel
func (cancelDB *CancelDB) CopyBasicFieldsFromCancel(cancel *models.Cancel) {
	// insertion point for fields commit

	cancelDB.Name_Data.String = cancel.Name
	cancelDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCancel_WOP
func (cancelDB *CancelDB) CopyBasicFieldsFromCancel_WOP(cancel *models.Cancel_WOP) {
	// insertion point for fields commit

	cancelDB.Name_Data.String = cancel.Name
	cancelDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCancelWOP
func (cancelDB *CancelDB) CopyBasicFieldsFromCancelWOP(cancel *CancelWOP) {
	// insertion point for fields commit

	cancelDB.Name_Data.String = cancel.Name
	cancelDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCancel
func (cancelDB *CancelDB) CopyBasicFieldsToCancel(cancel *models.Cancel) {
	// insertion point for checkout of basic fields (back repo to stage)
	cancel.Name = cancelDB.Name_Data.String
}

// CopyBasicFieldsToCancel_WOP
func (cancelDB *CancelDB) CopyBasicFieldsToCancel_WOP(cancel *models.Cancel_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	cancel.Name = cancelDB.Name_Data.String
}

// CopyBasicFieldsToCancelWOP
func (cancelDB *CancelDB) CopyBasicFieldsToCancelWOP(cancel *CancelWOP) {
	cancel.ID = int(cancelDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	cancel.Name = cancelDB.Name_Data.String
}

// Backup generates a json file from a slice of all CancelDB instances in the backrepo
func (backRepoCancel *BackRepoCancelStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CancelDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CancelDB, 0)
	for _, cancelDB := range backRepoCancel.Map_CancelDBID_CancelDB {
		forBackup = append(forBackup, cancelDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Cancel ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Cancel file", err.Error())
	}
}

// Backup generates a json file from a slice of all CancelDB instances in the backrepo
func (backRepoCancel *BackRepoCancelStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CancelDB, 0)
	for _, cancelDB := range backRepoCancel.Map_CancelDBID_CancelDB {
		forBackup = append(forBackup, cancelDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Cancel")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Cancel_Fields, -1)
	for _, cancelDB := range forBackup {

		var cancelWOP CancelWOP
		cancelDB.CopyBasicFieldsToCancelWOP(&cancelWOP)

		row := sh.AddRow()
		row.WriteStruct(&cancelWOP, -1)
	}
}

// RestoreXL from the "Cancel" sheet all CancelDB instances
func (backRepoCancel *BackRepoCancelStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCancelid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Cancel"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCancel.rowVisitorCancel)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCancel *BackRepoCancelStruct) rowVisitorCancel(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var cancelWOP CancelWOP
		row.ReadStruct(&cancelWOP)

		// add the unmarshalled struct to the stage
		cancelDB := new(CancelDB)
		cancelDB.CopyBasicFieldsFromCancelWOP(&cancelWOP)

		cancelDB_ID_atBackupTime := cancelDB.ID
		cancelDB.ID = 0
		query := backRepoCancel.db.Create(cancelDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCancel.Map_CancelDBID_CancelDB[cancelDB.ID] = cancelDB
		BackRepoCancelid_atBckpTime_newID[cancelDB_ID_atBackupTime] = cancelDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CancelDB.json" in dirPath that stores an array
// of CancelDB and stores it in the database
// the map BackRepoCancelid_atBckpTime_newID is updated accordingly
func (backRepoCancel *BackRepoCancelStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCancelid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CancelDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Cancel file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CancelDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CancelDBID_CancelDB
	for _, cancelDB := range forRestore {

		cancelDB_ID_atBackupTime := cancelDB.ID
		cancelDB.ID = 0
		query := backRepoCancel.db.Create(cancelDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCancel.Map_CancelDBID_CancelDB[cancelDB.ID] = cancelDB
		BackRepoCancelid_atBckpTime_newID[cancelDB_ID_atBackupTime] = cancelDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Cancel file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Cancel>id_atBckpTime_newID
// to compute new index
func (backRepoCancel *BackRepoCancelStruct) RestorePhaseTwo() {

	for _, cancelDB := range backRepoCancel.Map_CancelDBID_CancelDB {

		// next line of code is to avert unused variable compilation error
		_ = cancelDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCancel.db.Model(cancelDB).Updates(*cancelDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCancel.ResetReversePointers commits all staged instances of Cancel to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCancel *BackRepoCancelStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, cancel := range backRepoCancel.Map_CancelDBID_CancelPtr {
		backRepoCancel.ResetReversePointersInstance(backRepo, idx, cancel)
	}

	return
}

func (backRepoCancel *BackRepoCancelStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, cancel *models.Cancel) (Error error) {

	// fetch matching cancelDB
	if cancelDB, ok := backRepoCancel.Map_CancelDBID_CancelDB[idx]; ok {
		_ = cancelDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCancelid_atBckpTime_newID map[uint]uint
