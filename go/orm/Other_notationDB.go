// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Other_notation_sql sql.NullBool
var dummy_Other_notation_time time.Duration
var dummy_Other_notation_sort sort.Float64Slice

// Other_notationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model other_notationAPI
type Other_notationAPI struct {
	gorm.Model

	models.Other_notation_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Other_notationPointersEncoding Other_notationPointersEncoding
}

// Other_notationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Other_notationPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Other_notationDB describes a other_notation in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model other_notationDB
type Other_notationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field other_notationDB.Name
	Name_Data sql.NullString

	// Declation for basic field other_notationDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Other_notationPointersEncoding
}

// Other_notationDBs arrays other_notationDBs
// swagger:response other_notationDBsResponse
type Other_notationDBs []Other_notationDB

// Other_notationDBResponse provides response
// swagger:response other_notationDBResponse
type Other_notationDBResponse struct {
	Other_notationDB
}

// Other_notationWOP is a Other_notation without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Other_notationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Other_notation_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoOther_notationStruct struct {
	// stores Other_notationDB according to their gorm ID
	Map_Other_notationDBID_Other_notationDB map[uint]*Other_notationDB

	// stores Other_notationDB ID according to Other_notation address
	Map_Other_notationPtr_Other_notationDBID map[*models.Other_notation]uint

	// stores Other_notation according to their gorm ID
	Map_Other_notationDBID_Other_notationPtr map[uint]*models.Other_notation

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOther_notation *BackRepoOther_notationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOther_notation.stage
	return
}

func (backRepoOther_notation *BackRepoOther_notationStruct) GetDB() *gorm.DB {
	return backRepoOther_notation.db
}

// GetOther_notationDBFromOther_notationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOther_notation *BackRepoOther_notationStruct) GetOther_notationDBFromOther_notationPtr(other_notation *models.Other_notation) (other_notationDB *Other_notationDB) {
	id := backRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation]
	other_notationDB = backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[id]
	return
}

// BackRepoOther_notation.CommitPhaseOne commits all staged instances of Other_notation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOther_notation *BackRepoOther_notationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for other_notation := range stage.Other_notations {
		backRepoOther_notation.CommitPhaseOneInstance(other_notation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, other_notation := range backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr {
		if _, ok := stage.Other_notations[other_notation]; !ok {
			backRepoOther_notation.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOther_notation.CommitDeleteInstance commits deletion of Other_notation to the BackRepo
func (backRepoOther_notation *BackRepoOther_notationStruct) CommitDeleteInstance(id uint) (Error error) {

	other_notation := backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr[id]

	// other_notation is not staged anymore, remove other_notationDB
	other_notationDB := backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[id]
	query := backRepoOther_notation.db.Unscoped().Delete(&other_notationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOther_notation.Map_Other_notationPtr_Other_notationDBID, other_notation)
	delete(backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr, id)
	delete(backRepoOther_notation.Map_Other_notationDBID_Other_notationDB, id)

	return
}

// BackRepoOther_notation.CommitPhaseOneInstance commits other_notation staged instances of Other_notation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOther_notation *BackRepoOther_notationStruct) CommitPhaseOneInstance(other_notation *models.Other_notation) (Error error) {

	// check if the other_notation is not commited yet
	if _, ok := backRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation]; ok {
		return
	}

	// initiate other_notation
	var other_notationDB Other_notationDB
	other_notationDB.CopyBasicFieldsFromOther_notation(other_notation)

	query := backRepoOther_notation.db.Create(&other_notationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation] = other_notationDB.ID
	backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr[other_notationDB.ID] = other_notation
	backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[other_notationDB.ID] = &other_notationDB

	return
}

// BackRepoOther_notation.CommitPhaseTwo commits all staged instances of Other_notation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_notation *BackRepoOther_notationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, other_notation := range backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr {
		backRepoOther_notation.CommitPhaseTwoInstance(backRepo, idx, other_notation)
	}

	return
}

// BackRepoOther_notation.CommitPhaseTwoInstance commits {{structname }} of models.Other_notation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_notation *BackRepoOther_notationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, other_notation *models.Other_notation) (Error error) {

	// fetch matching other_notationDB
	if other_notationDB, ok := backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[idx]; ok {

		other_notationDB.CopyBasicFieldsFromOther_notation(other_notation)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOther_notation.db.Save(&other_notationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Other_notation intance %s", other_notation.Name))
		return err
	}

	return
}

// BackRepoOther_notation.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOther_notation *BackRepoOther_notationStruct) CheckoutPhaseOne() (Error error) {

	other_notationDBArray := make([]Other_notationDB, 0)
	query := backRepoOther_notation.db.Find(&other_notationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	other_notationInstancesToBeRemovedFromTheStage := make(map[*models.Other_notation]any)
	for key, value := range backRepoOther_notation.stage.Other_notations {
		other_notationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, other_notationDB := range other_notationDBArray {
		backRepoOther_notation.CheckoutPhaseOneInstance(&other_notationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		other_notation, ok := backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr[other_notationDB.ID]
		if ok {
			delete(other_notationInstancesToBeRemovedFromTheStage, other_notation)
		}
	}

	// remove from stage and back repo's 3 maps all other_notations that are not in the checkout
	for other_notation := range other_notationInstancesToBeRemovedFromTheStage {
		other_notation.Unstage(backRepoOther_notation.GetStage())

		// remove instance from the back repo 3 maps
		other_notationID := backRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation]
		delete(backRepoOther_notation.Map_Other_notationPtr_Other_notationDBID, other_notation)
		delete(backRepoOther_notation.Map_Other_notationDBID_Other_notationDB, other_notationID)
		delete(backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr, other_notationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a other_notationDB that has been found in the DB, updates the backRepo and stages the
// models version of the other_notationDB
func (backRepoOther_notation *BackRepoOther_notationStruct) CheckoutPhaseOneInstance(other_notationDB *Other_notationDB) (Error error) {

	other_notation, ok := backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr[other_notationDB.ID]
	if !ok {
		other_notation = new(models.Other_notation)

		backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr[other_notationDB.ID] = other_notation
		backRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation] = other_notationDB.ID

		// append model store with the new element
		other_notation.Name = other_notationDB.Name_Data.String
		other_notation.Stage(backRepoOther_notation.GetStage())
	}
	other_notationDB.CopyBasicFieldsToOther_notation(other_notation)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	other_notation.Stage(backRepoOther_notation.GetStage())

	// preserve pointer to other_notationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Other_notationDBID_Other_notationDB)[other_notationDB hold variable pointers
	other_notationDB_Data := *other_notationDB
	preservedPtrToOther_notation := &other_notationDB_Data
	backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[other_notationDB.ID] = preservedPtrToOther_notation

	return
}

// BackRepoOther_notation.CheckoutPhaseTwo Checkouts all staged instances of Other_notation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_notation *BackRepoOther_notationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, other_notationDB := range backRepoOther_notation.Map_Other_notationDBID_Other_notationDB {
		backRepoOther_notation.CheckoutPhaseTwoInstance(backRepo, other_notationDB)
	}
	return
}

// BackRepoOther_notation.CheckoutPhaseTwoInstance Checkouts staged instances of Other_notation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_notation *BackRepoOther_notationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, other_notationDB *Other_notationDB) (Error error) {

	other_notation := backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr[other_notationDB.ID]

	other_notationDB.DecodePointers(backRepo, other_notation)

	return
}

func (other_notationDB *Other_notationDB) DecodePointers(backRepo *BackRepoStruct, other_notation *models.Other_notation) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOther_notation allows commit of a single other_notation (if already staged)
func (backRepo *BackRepoStruct) CommitOther_notation(other_notation *models.Other_notation) {
	backRepo.BackRepoOther_notation.CommitPhaseOneInstance(other_notation)
	if id, ok := backRepo.BackRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation]; ok {
		backRepo.BackRepoOther_notation.CommitPhaseTwoInstance(backRepo, id, other_notation)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOther_notation allows checkout of a single other_notation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOther_notation(other_notation *models.Other_notation) {
	// check if the other_notation is staged
	if _, ok := backRepo.BackRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation]; ok {

		if id, ok := backRepo.BackRepoOther_notation.Map_Other_notationPtr_Other_notationDBID[other_notation]; ok {
			var other_notationDB Other_notationDB
			other_notationDB.ID = id

			if err := backRepo.BackRepoOther_notation.db.First(&other_notationDB, id).Error; err != nil {
				log.Fatalln("CheckoutOther_notation : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOther_notation.CheckoutPhaseOneInstance(&other_notationDB)
			backRepo.BackRepoOther_notation.CheckoutPhaseTwoInstance(backRepo, &other_notationDB)
		}
	}
}

// CopyBasicFieldsFromOther_notation
func (other_notationDB *Other_notationDB) CopyBasicFieldsFromOther_notation(other_notation *models.Other_notation) {
	// insertion point for fields commit

	other_notationDB.Name_Data.String = other_notation.Name
	other_notationDB.Name_Data.Valid = true

	other_notationDB.Value_Data.String = other_notation.Value
	other_notationDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromOther_notation_WOP
func (other_notationDB *Other_notationDB) CopyBasicFieldsFromOther_notation_WOP(other_notation *models.Other_notation_WOP) {
	// insertion point for fields commit

	other_notationDB.Name_Data.String = other_notation.Name
	other_notationDB.Name_Data.Valid = true

	other_notationDB.Value_Data.String = other_notation.Value
	other_notationDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromOther_notationWOP
func (other_notationDB *Other_notationDB) CopyBasicFieldsFromOther_notationWOP(other_notation *Other_notationWOP) {
	// insertion point for fields commit

	other_notationDB.Name_Data.String = other_notation.Name
	other_notationDB.Name_Data.Valid = true

	other_notationDB.Value_Data.String = other_notation.Value
	other_notationDB.Value_Data.Valid = true
}

// CopyBasicFieldsToOther_notation
func (other_notationDB *Other_notationDB) CopyBasicFieldsToOther_notation(other_notation *models.Other_notation) {
	// insertion point for checkout of basic fields (back repo to stage)
	other_notation.Name = other_notationDB.Name_Data.String
	other_notation.Value = other_notationDB.Value_Data.String
}

// CopyBasicFieldsToOther_notation_WOP
func (other_notationDB *Other_notationDB) CopyBasicFieldsToOther_notation_WOP(other_notation *models.Other_notation_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	other_notation.Name = other_notationDB.Name_Data.String
	other_notation.Value = other_notationDB.Value_Data.String
}

// CopyBasicFieldsToOther_notationWOP
func (other_notationDB *Other_notationDB) CopyBasicFieldsToOther_notationWOP(other_notation *Other_notationWOP) {
	other_notation.ID = int(other_notationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	other_notation.Name = other_notationDB.Name_Data.String
	other_notation.Value = other_notationDB.Value_Data.String
}

// Backup generates a json file from a slice of all Other_notationDB instances in the backrepo
func (backRepoOther_notation *BackRepoOther_notationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Other_notationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Other_notationDB, 0)
	for _, other_notationDB := range backRepoOther_notation.Map_Other_notationDBID_Other_notationDB {
		forBackup = append(forBackup, other_notationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Other_notation ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Other_notation file", err.Error())
	}
}

// Backup generates a json file from a slice of all Other_notationDB instances in the backrepo
func (backRepoOther_notation *BackRepoOther_notationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Other_notationDB, 0)
	for _, other_notationDB := range backRepoOther_notation.Map_Other_notationDBID_Other_notationDB {
		forBackup = append(forBackup, other_notationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Other_notation")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Other_notation_Fields, -1)
	for _, other_notationDB := range forBackup {

		var other_notationWOP Other_notationWOP
		other_notationDB.CopyBasicFieldsToOther_notationWOP(&other_notationWOP)

		row := sh.AddRow()
		row.WriteStruct(&other_notationWOP, -1)
	}
}

// RestoreXL from the "Other_notation" sheet all Other_notationDB instances
func (backRepoOther_notation *BackRepoOther_notationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOther_notationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Other_notation"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOther_notation.rowVisitorOther_notation)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOther_notation *BackRepoOther_notationStruct) rowVisitorOther_notation(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var other_notationWOP Other_notationWOP
		row.ReadStruct(&other_notationWOP)

		// add the unmarshalled struct to the stage
		other_notationDB := new(Other_notationDB)
		other_notationDB.CopyBasicFieldsFromOther_notationWOP(&other_notationWOP)

		other_notationDB_ID_atBackupTime := other_notationDB.ID
		other_notationDB.ID = 0
		query := backRepoOther_notation.db.Create(other_notationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[other_notationDB.ID] = other_notationDB
		BackRepoOther_notationid_atBckpTime_newID[other_notationDB_ID_atBackupTime] = other_notationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Other_notationDB.json" in dirPath that stores an array
// of Other_notationDB and stores it in the database
// the map BackRepoOther_notationid_atBckpTime_newID is updated accordingly
func (backRepoOther_notation *BackRepoOther_notationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOther_notationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Other_notationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Other_notation file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Other_notationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Other_notationDBID_Other_notationDB
	for _, other_notationDB := range forRestore {

		other_notationDB_ID_atBackupTime := other_notationDB.ID
		other_notationDB.ID = 0
		query := backRepoOther_notation.db.Create(other_notationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[other_notationDB.ID] = other_notationDB
		BackRepoOther_notationid_atBckpTime_newID[other_notationDB_ID_atBackupTime] = other_notationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Other_notation file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Other_notation>id_atBckpTime_newID
// to compute new index
func (backRepoOther_notation *BackRepoOther_notationStruct) RestorePhaseTwo() {

	for _, other_notationDB := range backRepoOther_notation.Map_Other_notationDBID_Other_notationDB {

		// next line of code is to avert unused variable compilation error
		_ = other_notationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOther_notation.db.Model(other_notationDB).Updates(*other_notationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOther_notation.ResetReversePointers commits all staged instances of Other_notation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOther_notation *BackRepoOther_notationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, other_notation := range backRepoOther_notation.Map_Other_notationDBID_Other_notationPtr {
		backRepoOther_notation.ResetReversePointersInstance(backRepo, idx, other_notation)
	}

	return
}

func (backRepoOther_notation *BackRepoOther_notationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, other_notation *models.Other_notation) (Error error) {

	// fetch matching other_notationDB
	if other_notationDB, ok := backRepoOther_notation.Map_Other_notationDBID_Other_notationDB[idx]; ok {
		_ = other_notationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOther_notationid_atBckpTime_newID map[uint]uint
