// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_String_mute_sql sql.NullBool
var dummy_String_mute_time time.Duration
var dummy_String_mute_sort sort.Float64Slice

// String_muteAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model string_muteAPI
type String_muteAPI struct {
	gorm.Model

	models.String_mute_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	String_mutePointersEncoding String_mutePointersEncoding
}

// String_mutePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type String_mutePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// String_muteDB describes a string_mute in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model string_muteDB
type String_muteDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field string_muteDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	String_mutePointersEncoding
}

// String_muteDBs arrays string_muteDBs
// swagger:response string_muteDBsResponse
type String_muteDBs []String_muteDB

// String_muteDBResponse provides response
// swagger:response string_muteDBResponse
type String_muteDBResponse struct {
	String_muteDB
}

// String_muteWOP is a String_mute without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type String_muteWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var String_mute_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoString_muteStruct struct {
	// stores String_muteDB according to their gorm ID
	Map_String_muteDBID_String_muteDB map[uint]*String_muteDB

	// stores String_muteDB ID according to String_mute address
	Map_String_mutePtr_String_muteDBID map[*models.String_mute]uint

	// stores String_mute according to their gorm ID
	Map_String_muteDBID_String_mutePtr map[uint]*models.String_mute

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoString_mute *BackRepoString_muteStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoString_mute.stage
	return
}

func (backRepoString_mute *BackRepoString_muteStruct) GetDB() *gorm.DB {
	return backRepoString_mute.db
}

// GetString_muteDBFromString_mutePtr is a handy function to access the back repo instance from the stage instance
func (backRepoString_mute *BackRepoString_muteStruct) GetString_muteDBFromString_mutePtr(string_mute *models.String_mute) (string_muteDB *String_muteDB) {
	id := backRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute]
	string_muteDB = backRepoString_mute.Map_String_muteDBID_String_muteDB[id]
	return
}

// BackRepoString_mute.CommitPhaseOne commits all staged instances of String_mute to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoString_mute *BackRepoString_muteStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for string_mute := range stage.String_mutes {
		backRepoString_mute.CommitPhaseOneInstance(string_mute)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, string_mute := range backRepoString_mute.Map_String_muteDBID_String_mutePtr {
		if _, ok := stage.String_mutes[string_mute]; !ok {
			backRepoString_mute.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoString_mute.CommitDeleteInstance commits deletion of String_mute to the BackRepo
func (backRepoString_mute *BackRepoString_muteStruct) CommitDeleteInstance(id uint) (Error error) {

	string_mute := backRepoString_mute.Map_String_muteDBID_String_mutePtr[id]

	// string_mute is not staged anymore, remove string_muteDB
	string_muteDB := backRepoString_mute.Map_String_muteDBID_String_muteDB[id]
	query := backRepoString_mute.db.Unscoped().Delete(&string_muteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoString_mute.Map_String_mutePtr_String_muteDBID, string_mute)
	delete(backRepoString_mute.Map_String_muteDBID_String_mutePtr, id)
	delete(backRepoString_mute.Map_String_muteDBID_String_muteDB, id)

	return
}

// BackRepoString_mute.CommitPhaseOneInstance commits string_mute staged instances of String_mute to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoString_mute *BackRepoString_muteStruct) CommitPhaseOneInstance(string_mute *models.String_mute) (Error error) {

	// check if the string_mute is not commited yet
	if _, ok := backRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute]; ok {
		return
	}

	// initiate string_mute
	var string_muteDB String_muteDB
	string_muteDB.CopyBasicFieldsFromString_mute(string_mute)

	query := backRepoString_mute.db.Create(&string_muteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute] = string_muteDB.ID
	backRepoString_mute.Map_String_muteDBID_String_mutePtr[string_muteDB.ID] = string_mute
	backRepoString_mute.Map_String_muteDBID_String_muteDB[string_muteDB.ID] = &string_muteDB

	return
}

// BackRepoString_mute.CommitPhaseTwo commits all staged instances of String_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoString_mute *BackRepoString_muteStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, string_mute := range backRepoString_mute.Map_String_muteDBID_String_mutePtr {
		backRepoString_mute.CommitPhaseTwoInstance(backRepo, idx, string_mute)
	}

	return
}

// BackRepoString_mute.CommitPhaseTwoInstance commits {{structname }} of models.String_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoString_mute *BackRepoString_muteStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, string_mute *models.String_mute) (Error error) {

	// fetch matching string_muteDB
	if string_muteDB, ok := backRepoString_mute.Map_String_muteDBID_String_muteDB[idx]; ok {

		string_muteDB.CopyBasicFieldsFromString_mute(string_mute)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoString_mute.db.Save(&string_muteDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown String_mute intance %s", string_mute.Name))
		return err
	}

	return
}

// BackRepoString_mute.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoString_mute *BackRepoString_muteStruct) CheckoutPhaseOne() (Error error) {

	string_muteDBArray := make([]String_muteDB, 0)
	query := backRepoString_mute.db.Find(&string_muteDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	string_muteInstancesToBeRemovedFromTheStage := make(map[*models.String_mute]any)
	for key, value := range backRepoString_mute.stage.String_mutes {
		string_muteInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, string_muteDB := range string_muteDBArray {
		backRepoString_mute.CheckoutPhaseOneInstance(&string_muteDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		string_mute, ok := backRepoString_mute.Map_String_muteDBID_String_mutePtr[string_muteDB.ID]
		if ok {
			delete(string_muteInstancesToBeRemovedFromTheStage, string_mute)
		}
	}

	// remove from stage and back repo's 3 maps all string_mutes that are not in the checkout
	for string_mute := range string_muteInstancesToBeRemovedFromTheStage {
		string_mute.Unstage(backRepoString_mute.GetStage())

		// remove instance from the back repo 3 maps
		string_muteID := backRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute]
		delete(backRepoString_mute.Map_String_mutePtr_String_muteDBID, string_mute)
		delete(backRepoString_mute.Map_String_muteDBID_String_muteDB, string_muteID)
		delete(backRepoString_mute.Map_String_muteDBID_String_mutePtr, string_muteID)
	}

	return
}

// CheckoutPhaseOneInstance takes a string_muteDB that has been found in the DB, updates the backRepo and stages the
// models version of the string_muteDB
func (backRepoString_mute *BackRepoString_muteStruct) CheckoutPhaseOneInstance(string_muteDB *String_muteDB) (Error error) {

	string_mute, ok := backRepoString_mute.Map_String_muteDBID_String_mutePtr[string_muteDB.ID]
	if !ok {
		string_mute = new(models.String_mute)

		backRepoString_mute.Map_String_muteDBID_String_mutePtr[string_muteDB.ID] = string_mute
		backRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute] = string_muteDB.ID

		// append model store with the new element
		string_mute.Name = string_muteDB.Name_Data.String
		string_mute.Stage(backRepoString_mute.GetStage())
	}
	string_muteDB.CopyBasicFieldsToString_mute(string_mute)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	string_mute.Stage(backRepoString_mute.GetStage())

	// preserve pointer to string_muteDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_String_muteDBID_String_muteDB)[string_muteDB hold variable pointers
	string_muteDB_Data := *string_muteDB
	preservedPtrToString_mute := &string_muteDB_Data
	backRepoString_mute.Map_String_muteDBID_String_muteDB[string_muteDB.ID] = preservedPtrToString_mute

	return
}

// BackRepoString_mute.CheckoutPhaseTwo Checkouts all staged instances of String_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoString_mute *BackRepoString_muteStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, string_muteDB := range backRepoString_mute.Map_String_muteDBID_String_muteDB {
		backRepoString_mute.CheckoutPhaseTwoInstance(backRepo, string_muteDB)
	}
	return
}

// BackRepoString_mute.CheckoutPhaseTwoInstance Checkouts staged instances of String_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoString_mute *BackRepoString_muteStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, string_muteDB *String_muteDB) (Error error) {

	string_mute := backRepoString_mute.Map_String_muteDBID_String_mutePtr[string_muteDB.ID]

	string_muteDB.DecodePointers(backRepo, string_mute)

	return
}

func (string_muteDB *String_muteDB) DecodePointers(backRepo *BackRepoStruct, string_mute *models.String_mute) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitString_mute allows commit of a single string_mute (if already staged)
func (backRepo *BackRepoStruct) CommitString_mute(string_mute *models.String_mute) {
	backRepo.BackRepoString_mute.CommitPhaseOneInstance(string_mute)
	if id, ok := backRepo.BackRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute]; ok {
		backRepo.BackRepoString_mute.CommitPhaseTwoInstance(backRepo, id, string_mute)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitString_mute allows checkout of a single string_mute (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutString_mute(string_mute *models.String_mute) {
	// check if the string_mute is staged
	if _, ok := backRepo.BackRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute]; ok {

		if id, ok := backRepo.BackRepoString_mute.Map_String_mutePtr_String_muteDBID[string_mute]; ok {
			var string_muteDB String_muteDB
			string_muteDB.ID = id

			if err := backRepo.BackRepoString_mute.db.First(&string_muteDB, id).Error; err != nil {
				log.Fatalln("CheckoutString_mute : Problem with getting object with id:", id)
			}
			backRepo.BackRepoString_mute.CheckoutPhaseOneInstance(&string_muteDB)
			backRepo.BackRepoString_mute.CheckoutPhaseTwoInstance(backRepo, &string_muteDB)
		}
	}
}

// CopyBasicFieldsFromString_mute
func (string_muteDB *String_muteDB) CopyBasicFieldsFromString_mute(string_mute *models.String_mute) {
	// insertion point for fields commit

	string_muteDB.Name_Data.String = string_mute.Name
	string_muteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromString_mute_WOP
func (string_muteDB *String_muteDB) CopyBasicFieldsFromString_mute_WOP(string_mute *models.String_mute_WOP) {
	// insertion point for fields commit

	string_muteDB.Name_Data.String = string_mute.Name
	string_muteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromString_muteWOP
func (string_muteDB *String_muteDB) CopyBasicFieldsFromString_muteWOP(string_mute *String_muteWOP) {
	// insertion point for fields commit

	string_muteDB.Name_Data.String = string_mute.Name
	string_muteDB.Name_Data.Valid = true
}

// CopyBasicFieldsToString_mute
func (string_muteDB *String_muteDB) CopyBasicFieldsToString_mute(string_mute *models.String_mute) {
	// insertion point for checkout of basic fields (back repo to stage)
	string_mute.Name = string_muteDB.Name_Data.String
}

// CopyBasicFieldsToString_mute_WOP
func (string_muteDB *String_muteDB) CopyBasicFieldsToString_mute_WOP(string_mute *models.String_mute_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	string_mute.Name = string_muteDB.Name_Data.String
}

// CopyBasicFieldsToString_muteWOP
func (string_muteDB *String_muteDB) CopyBasicFieldsToString_muteWOP(string_mute *String_muteWOP) {
	string_mute.ID = int(string_muteDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	string_mute.Name = string_muteDB.Name_Data.String
}

// Backup generates a json file from a slice of all String_muteDB instances in the backrepo
func (backRepoString_mute *BackRepoString_muteStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "String_muteDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*String_muteDB, 0)
	for _, string_muteDB := range backRepoString_mute.Map_String_muteDBID_String_muteDB {
		forBackup = append(forBackup, string_muteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json String_mute ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json String_mute file", err.Error())
	}
}

// Backup generates a json file from a slice of all String_muteDB instances in the backrepo
func (backRepoString_mute *BackRepoString_muteStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*String_muteDB, 0)
	for _, string_muteDB := range backRepoString_mute.Map_String_muteDBID_String_muteDB {
		forBackup = append(forBackup, string_muteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("String_mute")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&String_mute_Fields, -1)
	for _, string_muteDB := range forBackup {

		var string_muteWOP String_muteWOP
		string_muteDB.CopyBasicFieldsToString_muteWOP(&string_muteWOP)

		row := sh.AddRow()
		row.WriteStruct(&string_muteWOP, -1)
	}
}

// RestoreXL from the "String_mute" sheet all String_muteDB instances
func (backRepoString_mute *BackRepoString_muteStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoString_muteid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["String_mute"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoString_mute.rowVisitorString_mute)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoString_mute *BackRepoString_muteStruct) rowVisitorString_mute(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var string_muteWOP String_muteWOP
		row.ReadStruct(&string_muteWOP)

		// add the unmarshalled struct to the stage
		string_muteDB := new(String_muteDB)
		string_muteDB.CopyBasicFieldsFromString_muteWOP(&string_muteWOP)

		string_muteDB_ID_atBackupTime := string_muteDB.ID
		string_muteDB.ID = 0
		query := backRepoString_mute.db.Create(string_muteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoString_mute.Map_String_muteDBID_String_muteDB[string_muteDB.ID] = string_muteDB
		BackRepoString_muteid_atBckpTime_newID[string_muteDB_ID_atBackupTime] = string_muteDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "String_muteDB.json" in dirPath that stores an array
// of String_muteDB and stores it in the database
// the map BackRepoString_muteid_atBckpTime_newID is updated accordingly
func (backRepoString_mute *BackRepoString_muteStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoString_muteid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "String_muteDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json String_mute file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*String_muteDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_String_muteDBID_String_muteDB
	for _, string_muteDB := range forRestore {

		string_muteDB_ID_atBackupTime := string_muteDB.ID
		string_muteDB.ID = 0
		query := backRepoString_mute.db.Create(string_muteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoString_mute.Map_String_muteDBID_String_muteDB[string_muteDB.ID] = string_muteDB
		BackRepoString_muteid_atBckpTime_newID[string_muteDB_ID_atBackupTime] = string_muteDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json String_mute file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<String_mute>id_atBckpTime_newID
// to compute new index
func (backRepoString_mute *BackRepoString_muteStruct) RestorePhaseTwo() {

	for _, string_muteDB := range backRepoString_mute.Map_String_muteDBID_String_muteDB {

		// next line of code is to avert unused variable compilation error
		_ = string_muteDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoString_mute.db.Model(string_muteDB).Updates(*string_muteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoString_mute.ResetReversePointers commits all staged instances of String_mute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoString_mute *BackRepoString_muteStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, string_mute := range backRepoString_mute.Map_String_muteDBID_String_mutePtr {
		backRepoString_mute.ResetReversePointersInstance(backRepo, idx, string_mute)
	}

	return
}

func (backRepoString_mute *BackRepoString_muteStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, string_mute *models.String_mute) (Error error) {

	// fetch matching string_muteDB
	if string_muteDB, ok := backRepoString_mute.Map_String_muteDBID_String_muteDB[idx]; ok {
		_ = string_muteDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoString_muteid_atBckpTime_newID map[uint]uint
