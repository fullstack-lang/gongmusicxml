// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Numeral_sql sql.NullBool
var dummy_Numeral_time time.Duration
var dummy_Numeral_sort sort.Float64Slice

// NumeralAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model numeralAPI
type NumeralAPI struct {
	gorm.Model

	models.Numeral_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	NumeralPointersEncoding NumeralPointersEncoding
}

// NumeralPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type NumeralPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Numeral_root is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Numeral_rootID sql.NullInt64

	// field Numeral_alter is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Numeral_alterID sql.NullInt64

	// field Numeral_key is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Numeral_keyID sql.NullInt64
}

// NumeralDB describes a numeral in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model numeralDB
type NumeralDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field numeralDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	NumeralPointersEncoding
}

// NumeralDBs arrays numeralDBs
// swagger:response numeralDBsResponse
type NumeralDBs []NumeralDB

// NumeralDBResponse provides response
// swagger:response numeralDBResponse
type NumeralDBResponse struct {
	NumeralDB
}

// NumeralWOP is a Numeral without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type NumeralWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Numeral_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoNumeralStruct struct {
	// stores NumeralDB according to their gorm ID
	Map_NumeralDBID_NumeralDB map[uint]*NumeralDB

	// stores NumeralDB ID according to Numeral address
	Map_NumeralPtr_NumeralDBID map[*models.Numeral]uint

	// stores Numeral according to their gorm ID
	Map_NumeralDBID_NumeralPtr map[uint]*models.Numeral

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNumeral *BackRepoNumeralStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNumeral.stage
	return
}

func (backRepoNumeral *BackRepoNumeralStruct) GetDB() *gorm.DB {
	return backRepoNumeral.db
}

// GetNumeralDBFromNumeralPtr is a handy function to access the back repo instance from the stage instance
func (backRepoNumeral *BackRepoNumeralStruct) GetNumeralDBFromNumeralPtr(numeral *models.Numeral) (numeralDB *NumeralDB) {
	id := backRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral]
	numeralDB = backRepoNumeral.Map_NumeralDBID_NumeralDB[id]
	return
}

// BackRepoNumeral.CommitPhaseOne commits all staged instances of Numeral to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNumeral *BackRepoNumeralStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for numeral := range stage.Numerals {
		backRepoNumeral.CommitPhaseOneInstance(numeral)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, numeral := range backRepoNumeral.Map_NumeralDBID_NumeralPtr {
		if _, ok := stage.Numerals[numeral]; !ok {
			backRepoNumeral.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNumeral.CommitDeleteInstance commits deletion of Numeral to the BackRepo
func (backRepoNumeral *BackRepoNumeralStruct) CommitDeleteInstance(id uint) (Error error) {

	numeral := backRepoNumeral.Map_NumeralDBID_NumeralPtr[id]

	// numeral is not staged anymore, remove numeralDB
	numeralDB := backRepoNumeral.Map_NumeralDBID_NumeralDB[id]
	query := backRepoNumeral.db.Unscoped().Delete(&numeralDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNumeral.Map_NumeralPtr_NumeralDBID, numeral)
	delete(backRepoNumeral.Map_NumeralDBID_NumeralPtr, id)
	delete(backRepoNumeral.Map_NumeralDBID_NumeralDB, id)

	return
}

// BackRepoNumeral.CommitPhaseOneInstance commits numeral staged instances of Numeral to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNumeral *BackRepoNumeralStruct) CommitPhaseOneInstance(numeral *models.Numeral) (Error error) {

	// check if the numeral is not commited yet
	if _, ok := backRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral]; ok {
		return
	}

	// initiate numeral
	var numeralDB NumeralDB
	numeralDB.CopyBasicFieldsFromNumeral(numeral)

	query := backRepoNumeral.db.Create(&numeralDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral] = numeralDB.ID
	backRepoNumeral.Map_NumeralDBID_NumeralPtr[numeralDB.ID] = numeral
	backRepoNumeral.Map_NumeralDBID_NumeralDB[numeralDB.ID] = &numeralDB

	return
}

// BackRepoNumeral.CommitPhaseTwo commits all staged instances of Numeral to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral *BackRepoNumeralStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, numeral := range backRepoNumeral.Map_NumeralDBID_NumeralPtr {
		backRepoNumeral.CommitPhaseTwoInstance(backRepo, idx, numeral)
	}

	return
}

// BackRepoNumeral.CommitPhaseTwoInstance commits {{structname }} of models.Numeral to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral *BackRepoNumeralStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, numeral *models.Numeral) (Error error) {

	// fetch matching numeralDB
	if numeralDB, ok := backRepoNumeral.Map_NumeralDBID_NumeralDB[idx]; ok {

		numeralDB.CopyBasicFieldsFromNumeral(numeral)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value numeral.Numeral_root translates to updating the numeral.Numeral_rootID
		numeralDB.Numeral_rootID.Valid = true // allow for a 0 value (nil association)
		if numeral.Numeral_root != nil {
			if Numeral_rootId, ok := backRepo.BackRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral.Numeral_root]; ok {
				numeralDB.Numeral_rootID.Int64 = int64(Numeral_rootId)
				numeralDB.Numeral_rootID.Valid = true
			}
		} else {
			numeralDB.Numeral_rootID.Int64 = 0
			numeralDB.Numeral_rootID.Valid = true
		}

		// commit pointer value numeral.Numeral_alter translates to updating the numeral.Numeral_alterID
		numeralDB.Numeral_alterID.Valid = true // allow for a 0 value (nil association)
		if numeral.Numeral_alter != nil {
			if Numeral_alterId, ok := backRepo.BackRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[numeral.Numeral_alter]; ok {
				numeralDB.Numeral_alterID.Int64 = int64(Numeral_alterId)
				numeralDB.Numeral_alterID.Valid = true
			}
		} else {
			numeralDB.Numeral_alterID.Int64 = 0
			numeralDB.Numeral_alterID.Valid = true
		}

		// commit pointer value numeral.Numeral_key translates to updating the numeral.Numeral_keyID
		numeralDB.Numeral_keyID.Valid = true // allow for a 0 value (nil association)
		if numeral.Numeral_key != nil {
			if Numeral_keyId, ok := backRepo.BackRepoNumeral_key.Map_Numeral_keyPtr_Numeral_keyDBID[numeral.Numeral_key]; ok {
				numeralDB.Numeral_keyID.Int64 = int64(Numeral_keyId)
				numeralDB.Numeral_keyID.Valid = true
			}
		} else {
			numeralDB.Numeral_keyID.Int64 = 0
			numeralDB.Numeral_keyID.Valid = true
		}

		query := backRepoNumeral.db.Save(&numeralDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Numeral intance %s", numeral.Name))
		return err
	}

	return
}

// BackRepoNumeral.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNumeral *BackRepoNumeralStruct) CheckoutPhaseOne() (Error error) {

	numeralDBArray := make([]NumeralDB, 0)
	query := backRepoNumeral.db.Find(&numeralDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	numeralInstancesToBeRemovedFromTheStage := make(map[*models.Numeral]any)
	for key, value := range backRepoNumeral.stage.Numerals {
		numeralInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, numeralDB := range numeralDBArray {
		backRepoNumeral.CheckoutPhaseOneInstance(&numeralDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		numeral, ok := backRepoNumeral.Map_NumeralDBID_NumeralPtr[numeralDB.ID]
		if ok {
			delete(numeralInstancesToBeRemovedFromTheStage, numeral)
		}
	}

	// remove from stage and back repo's 3 maps all numerals that are not in the checkout
	for numeral := range numeralInstancesToBeRemovedFromTheStage {
		numeral.Unstage(backRepoNumeral.GetStage())

		// remove instance from the back repo 3 maps
		numeralID := backRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral]
		delete(backRepoNumeral.Map_NumeralPtr_NumeralDBID, numeral)
		delete(backRepoNumeral.Map_NumeralDBID_NumeralDB, numeralID)
		delete(backRepoNumeral.Map_NumeralDBID_NumeralPtr, numeralID)
	}

	return
}

// CheckoutPhaseOneInstance takes a numeralDB that has been found in the DB, updates the backRepo and stages the
// models version of the numeralDB
func (backRepoNumeral *BackRepoNumeralStruct) CheckoutPhaseOneInstance(numeralDB *NumeralDB) (Error error) {

	numeral, ok := backRepoNumeral.Map_NumeralDBID_NumeralPtr[numeralDB.ID]
	if !ok {
		numeral = new(models.Numeral)

		backRepoNumeral.Map_NumeralDBID_NumeralPtr[numeralDB.ID] = numeral
		backRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral] = numeralDB.ID

		// append model store with the new element
		numeral.Name = numeralDB.Name_Data.String
		numeral.Stage(backRepoNumeral.GetStage())
	}
	numeralDB.CopyBasicFieldsToNumeral(numeral)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	numeral.Stage(backRepoNumeral.GetStage())

	// preserve pointer to numeralDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_NumeralDBID_NumeralDB)[numeralDB hold variable pointers
	numeralDB_Data := *numeralDB
	preservedPtrToNumeral := &numeralDB_Data
	backRepoNumeral.Map_NumeralDBID_NumeralDB[numeralDB.ID] = preservedPtrToNumeral

	return
}

// BackRepoNumeral.CheckoutPhaseTwo Checkouts all staged instances of Numeral to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral *BackRepoNumeralStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, numeralDB := range backRepoNumeral.Map_NumeralDBID_NumeralDB {
		backRepoNumeral.CheckoutPhaseTwoInstance(backRepo, numeralDB)
	}
	return
}

// BackRepoNumeral.CheckoutPhaseTwoInstance Checkouts staged instances of Numeral to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral *BackRepoNumeralStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, numeralDB *NumeralDB) (Error error) {

	numeral := backRepoNumeral.Map_NumeralDBID_NumeralPtr[numeralDB.ID]

	numeralDB.DecodePointers(backRepo, numeral)

	return
}

func (numeralDB *NumeralDB) DecodePointers(backRepo *BackRepoStruct, numeral *models.Numeral) {

	// insertion point for checkout of pointer encoding
	// Numeral_root field
	numeral.Numeral_root = nil
	if numeralDB.Numeral_rootID.Int64 != 0 {
		numeral.Numeral_root = backRepo.BackRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr[uint(numeralDB.Numeral_rootID.Int64)]
	}
	// Numeral_alter field
	numeral.Numeral_alter = nil
	if numeralDB.Numeral_alterID.Int64 != 0 {
		numeral.Numeral_alter = backRepo.BackRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[uint(numeralDB.Numeral_alterID.Int64)]
	}
	// Numeral_key field
	numeral.Numeral_key = nil
	if numeralDB.Numeral_keyID.Int64 != 0 {
		numeral.Numeral_key = backRepo.BackRepoNumeral_key.Map_Numeral_keyDBID_Numeral_keyPtr[uint(numeralDB.Numeral_keyID.Int64)]
	}
	return
}

// CommitNumeral allows commit of a single numeral (if already staged)
func (backRepo *BackRepoStruct) CommitNumeral(numeral *models.Numeral) {
	backRepo.BackRepoNumeral.CommitPhaseOneInstance(numeral)
	if id, ok := backRepo.BackRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral]; ok {
		backRepo.BackRepoNumeral.CommitPhaseTwoInstance(backRepo, id, numeral)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNumeral allows checkout of a single numeral (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNumeral(numeral *models.Numeral) {
	// check if the numeral is staged
	if _, ok := backRepo.BackRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral]; ok {

		if id, ok := backRepo.BackRepoNumeral.Map_NumeralPtr_NumeralDBID[numeral]; ok {
			var numeralDB NumeralDB
			numeralDB.ID = id

			if err := backRepo.BackRepoNumeral.db.First(&numeralDB, id).Error; err != nil {
				log.Fatalln("CheckoutNumeral : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNumeral.CheckoutPhaseOneInstance(&numeralDB)
			backRepo.BackRepoNumeral.CheckoutPhaseTwoInstance(backRepo, &numeralDB)
		}
	}
}

// CopyBasicFieldsFromNumeral
func (numeralDB *NumeralDB) CopyBasicFieldsFromNumeral(numeral *models.Numeral) {
	// insertion point for fields commit

	numeralDB.Name_Data.String = numeral.Name
	numeralDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNumeral_WOP
func (numeralDB *NumeralDB) CopyBasicFieldsFromNumeral_WOP(numeral *models.Numeral_WOP) {
	// insertion point for fields commit

	numeralDB.Name_Data.String = numeral.Name
	numeralDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNumeralWOP
func (numeralDB *NumeralDB) CopyBasicFieldsFromNumeralWOP(numeral *NumeralWOP) {
	// insertion point for fields commit

	numeralDB.Name_Data.String = numeral.Name
	numeralDB.Name_Data.Valid = true
}

// CopyBasicFieldsToNumeral
func (numeralDB *NumeralDB) CopyBasicFieldsToNumeral(numeral *models.Numeral) {
	// insertion point for checkout of basic fields (back repo to stage)
	numeral.Name = numeralDB.Name_Data.String
}

// CopyBasicFieldsToNumeral_WOP
func (numeralDB *NumeralDB) CopyBasicFieldsToNumeral_WOP(numeral *models.Numeral_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	numeral.Name = numeralDB.Name_Data.String
}

// CopyBasicFieldsToNumeralWOP
func (numeralDB *NumeralDB) CopyBasicFieldsToNumeralWOP(numeral *NumeralWOP) {
	numeral.ID = int(numeralDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	numeral.Name = numeralDB.Name_Data.String
}

// Backup generates a json file from a slice of all NumeralDB instances in the backrepo
func (backRepoNumeral *BackRepoNumeralStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "NumeralDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NumeralDB, 0)
	for _, numeralDB := range backRepoNumeral.Map_NumeralDBID_NumeralDB {
		forBackup = append(forBackup, numeralDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Numeral ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Numeral file", err.Error())
	}
}

// Backup generates a json file from a slice of all NumeralDB instances in the backrepo
func (backRepoNumeral *BackRepoNumeralStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NumeralDB, 0)
	for _, numeralDB := range backRepoNumeral.Map_NumeralDBID_NumeralDB {
		forBackup = append(forBackup, numeralDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Numeral")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Numeral_Fields, -1)
	for _, numeralDB := range forBackup {

		var numeralWOP NumeralWOP
		numeralDB.CopyBasicFieldsToNumeralWOP(&numeralWOP)

		row := sh.AddRow()
		row.WriteStruct(&numeralWOP, -1)
	}
}

// RestoreXL from the "Numeral" sheet all NumeralDB instances
func (backRepoNumeral *BackRepoNumeralStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNumeralid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Numeral"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNumeral.rowVisitorNumeral)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNumeral *BackRepoNumeralStruct) rowVisitorNumeral(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var numeralWOP NumeralWOP
		row.ReadStruct(&numeralWOP)

		// add the unmarshalled struct to the stage
		numeralDB := new(NumeralDB)
		numeralDB.CopyBasicFieldsFromNumeralWOP(&numeralWOP)

		numeralDB_ID_atBackupTime := numeralDB.ID
		numeralDB.ID = 0
		query := backRepoNumeral.db.Create(numeralDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNumeral.Map_NumeralDBID_NumeralDB[numeralDB.ID] = numeralDB
		BackRepoNumeralid_atBckpTime_newID[numeralDB_ID_atBackupTime] = numeralDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "NumeralDB.json" in dirPath that stores an array
// of NumeralDB and stores it in the database
// the map BackRepoNumeralid_atBckpTime_newID is updated accordingly
func (backRepoNumeral *BackRepoNumeralStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNumeralid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "NumeralDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Numeral file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*NumeralDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_NumeralDBID_NumeralDB
	for _, numeralDB := range forRestore {

		numeralDB_ID_atBackupTime := numeralDB.ID
		numeralDB.ID = 0
		query := backRepoNumeral.db.Create(numeralDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNumeral.Map_NumeralDBID_NumeralDB[numeralDB.ID] = numeralDB
		BackRepoNumeralid_atBckpTime_newID[numeralDB_ID_atBackupTime] = numeralDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Numeral file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Numeral>id_atBckpTime_newID
// to compute new index
func (backRepoNumeral *BackRepoNumeralStruct) RestorePhaseTwo() {

	for _, numeralDB := range backRepoNumeral.Map_NumeralDBID_NumeralDB {

		// next line of code is to avert unused variable compilation error
		_ = numeralDB

		// insertion point for reindexing pointers encoding
		// reindexing Numeral_root field
		if numeralDB.Numeral_rootID.Int64 != 0 {
			numeralDB.Numeral_rootID.Int64 = int64(BackRepoNumeral_rootid_atBckpTime_newID[uint(numeralDB.Numeral_rootID.Int64)])
			numeralDB.Numeral_rootID.Valid = true
		}

		// reindexing Numeral_alter field
		if numeralDB.Numeral_alterID.Int64 != 0 {
			numeralDB.Numeral_alterID.Int64 = int64(BackRepoHarmony_alterid_atBckpTime_newID[uint(numeralDB.Numeral_alterID.Int64)])
			numeralDB.Numeral_alterID.Valid = true
		}

		// reindexing Numeral_key field
		if numeralDB.Numeral_keyID.Int64 != 0 {
			numeralDB.Numeral_keyID.Int64 = int64(BackRepoNumeral_keyid_atBckpTime_newID[uint(numeralDB.Numeral_keyID.Int64)])
			numeralDB.Numeral_keyID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoNumeral.db.Model(numeralDB).Updates(*numeralDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNumeral.ResetReversePointers commits all staged instances of Numeral to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral *BackRepoNumeralStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, numeral := range backRepoNumeral.Map_NumeralDBID_NumeralPtr {
		backRepoNumeral.ResetReversePointersInstance(backRepo, idx, numeral)
	}

	return
}

func (backRepoNumeral *BackRepoNumeralStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, numeral *models.Numeral) (Error error) {

	// fetch matching numeralDB
	if numeralDB, ok := backRepoNumeral.Map_NumeralDBID_NumeralDB[idx]; ok {
		_ = numeralDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNumeralid_atBckpTime_newID map[uint]uint
