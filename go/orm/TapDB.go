// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tap_sql sql.NullBool
var dummy_Tap_time time.Duration
var dummy_Tap_sort sort.Float64Slice

// TapAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tapAPI
type TapAPI struct {
	gorm.Model

	models.Tap_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TapPointersEncoding TapPointersEncoding
}

// TapPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TapPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TapDB describes a tap in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tapDB
type TapDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tapDB.Name
	Name_Data sql.NullString

	// Declation for basic field tapDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TapPointersEncoding
}

// TapDBs arrays tapDBs
// swagger:response tapDBsResponse
type TapDBs []TapDB

// TapDBResponse provides response
// swagger:response tapDBResponse
type TapDBResponse struct {
	TapDB
}

// TapWOP is a Tap without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TapWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Tap_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoTapStruct struct {
	// stores TapDB according to their gorm ID
	Map_TapDBID_TapDB map[uint]*TapDB

	// stores TapDB ID according to Tap address
	Map_TapPtr_TapDBID map[*models.Tap]uint

	// stores Tap according to their gorm ID
	Map_TapDBID_TapPtr map[uint]*models.Tap

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTap *BackRepoTapStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTap.stage
	return
}

func (backRepoTap *BackRepoTapStruct) GetDB() *gorm.DB {
	return backRepoTap.db
}

// GetTapDBFromTapPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTap *BackRepoTapStruct) GetTapDBFromTapPtr(tap *models.Tap) (tapDB *TapDB) {
	id := backRepoTap.Map_TapPtr_TapDBID[tap]
	tapDB = backRepoTap.Map_TapDBID_TapDB[id]
	return
}

// BackRepoTap.CommitPhaseOne commits all staged instances of Tap to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTap *BackRepoTapStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tap := range stage.Taps {
		backRepoTap.CommitPhaseOneInstance(tap)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tap := range backRepoTap.Map_TapDBID_TapPtr {
		if _, ok := stage.Taps[tap]; !ok {
			backRepoTap.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTap.CommitDeleteInstance commits deletion of Tap to the BackRepo
func (backRepoTap *BackRepoTapStruct) CommitDeleteInstance(id uint) (Error error) {

	tap := backRepoTap.Map_TapDBID_TapPtr[id]

	// tap is not staged anymore, remove tapDB
	tapDB := backRepoTap.Map_TapDBID_TapDB[id]
	query := backRepoTap.db.Unscoped().Delete(&tapDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTap.Map_TapPtr_TapDBID, tap)
	delete(backRepoTap.Map_TapDBID_TapPtr, id)
	delete(backRepoTap.Map_TapDBID_TapDB, id)

	return
}

// BackRepoTap.CommitPhaseOneInstance commits tap staged instances of Tap to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTap *BackRepoTapStruct) CommitPhaseOneInstance(tap *models.Tap) (Error error) {

	// check if the tap is not commited yet
	if _, ok := backRepoTap.Map_TapPtr_TapDBID[tap]; ok {
		return
	}

	// initiate tap
	var tapDB TapDB
	tapDB.CopyBasicFieldsFromTap(tap)

	query := backRepoTap.db.Create(&tapDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTap.Map_TapPtr_TapDBID[tap] = tapDB.ID
	backRepoTap.Map_TapDBID_TapPtr[tapDB.ID] = tap
	backRepoTap.Map_TapDBID_TapDB[tapDB.ID] = &tapDB

	return
}

// BackRepoTap.CommitPhaseTwo commits all staged instances of Tap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTap *BackRepoTapStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tap := range backRepoTap.Map_TapDBID_TapPtr {
		backRepoTap.CommitPhaseTwoInstance(backRepo, idx, tap)
	}

	return
}

// BackRepoTap.CommitPhaseTwoInstance commits {{structname }} of models.Tap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTap *BackRepoTapStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tap *models.Tap) (Error error) {

	// fetch matching tapDB
	if tapDB, ok := backRepoTap.Map_TapDBID_TapDB[idx]; ok {

		tapDB.CopyBasicFieldsFromTap(tap)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTap.db.Save(&tapDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tap intance %s", tap.Name))
		return err
	}

	return
}

// BackRepoTap.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTap *BackRepoTapStruct) CheckoutPhaseOne() (Error error) {

	tapDBArray := make([]TapDB, 0)
	query := backRepoTap.db.Find(&tapDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tapInstancesToBeRemovedFromTheStage := make(map[*models.Tap]any)
	for key, value := range backRepoTap.stage.Taps {
		tapInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tapDB := range tapDBArray {
		backRepoTap.CheckoutPhaseOneInstance(&tapDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tap, ok := backRepoTap.Map_TapDBID_TapPtr[tapDB.ID]
		if ok {
			delete(tapInstancesToBeRemovedFromTheStage, tap)
		}
	}

	// remove from stage and back repo's 3 maps all taps that are not in the checkout
	for tap := range tapInstancesToBeRemovedFromTheStage {
		tap.Unstage(backRepoTap.GetStage())

		// remove instance from the back repo 3 maps
		tapID := backRepoTap.Map_TapPtr_TapDBID[tap]
		delete(backRepoTap.Map_TapPtr_TapDBID, tap)
		delete(backRepoTap.Map_TapDBID_TapDB, tapID)
		delete(backRepoTap.Map_TapDBID_TapPtr, tapID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tapDB that has been found in the DB, updates the backRepo and stages the
// models version of the tapDB
func (backRepoTap *BackRepoTapStruct) CheckoutPhaseOneInstance(tapDB *TapDB) (Error error) {

	tap, ok := backRepoTap.Map_TapDBID_TapPtr[tapDB.ID]
	if !ok {
		tap = new(models.Tap)

		backRepoTap.Map_TapDBID_TapPtr[tapDB.ID] = tap
		backRepoTap.Map_TapPtr_TapDBID[tap] = tapDB.ID

		// append model store with the new element
		tap.Name = tapDB.Name_Data.String
		tap.Stage(backRepoTap.GetStage())
	}
	tapDB.CopyBasicFieldsToTap(tap)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tap.Stage(backRepoTap.GetStage())

	// preserve pointer to tapDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TapDBID_TapDB)[tapDB hold variable pointers
	tapDB_Data := *tapDB
	preservedPtrToTap := &tapDB_Data
	backRepoTap.Map_TapDBID_TapDB[tapDB.ID] = preservedPtrToTap

	return
}

// BackRepoTap.CheckoutPhaseTwo Checkouts all staged instances of Tap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTap *BackRepoTapStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tapDB := range backRepoTap.Map_TapDBID_TapDB {
		backRepoTap.CheckoutPhaseTwoInstance(backRepo, tapDB)
	}
	return
}

// BackRepoTap.CheckoutPhaseTwoInstance Checkouts staged instances of Tap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTap *BackRepoTapStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tapDB *TapDB) (Error error) {

	tap := backRepoTap.Map_TapDBID_TapPtr[tapDB.ID]

	tapDB.DecodePointers(backRepo, tap)

	return
}

func (tapDB *TapDB) DecodePointers(backRepo *BackRepoStruct, tap *models.Tap) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTap allows commit of a single tap (if already staged)
func (backRepo *BackRepoStruct) CommitTap(tap *models.Tap) {
	backRepo.BackRepoTap.CommitPhaseOneInstance(tap)
	if id, ok := backRepo.BackRepoTap.Map_TapPtr_TapDBID[tap]; ok {
		backRepo.BackRepoTap.CommitPhaseTwoInstance(backRepo, id, tap)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTap allows checkout of a single tap (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTap(tap *models.Tap) {
	// check if the tap is staged
	if _, ok := backRepo.BackRepoTap.Map_TapPtr_TapDBID[tap]; ok {

		if id, ok := backRepo.BackRepoTap.Map_TapPtr_TapDBID[tap]; ok {
			var tapDB TapDB
			tapDB.ID = id

			if err := backRepo.BackRepoTap.db.First(&tapDB, id).Error; err != nil {
				log.Fatalln("CheckoutTap : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTap.CheckoutPhaseOneInstance(&tapDB)
			backRepo.BackRepoTap.CheckoutPhaseTwoInstance(backRepo, &tapDB)
		}
	}
}

// CopyBasicFieldsFromTap
func (tapDB *TapDB) CopyBasicFieldsFromTap(tap *models.Tap) {
	// insertion point for fields commit

	tapDB.Name_Data.String = tap.Name
	tapDB.Name_Data.Valid = true

	tapDB.Value_Data.String = tap.Value
	tapDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromTap_WOP
func (tapDB *TapDB) CopyBasicFieldsFromTap_WOP(tap *models.Tap_WOP) {
	// insertion point for fields commit

	tapDB.Name_Data.String = tap.Name
	tapDB.Name_Data.Valid = true

	tapDB.Value_Data.String = tap.Value
	tapDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromTapWOP
func (tapDB *TapDB) CopyBasicFieldsFromTapWOP(tap *TapWOP) {
	// insertion point for fields commit

	tapDB.Name_Data.String = tap.Name
	tapDB.Name_Data.Valid = true

	tapDB.Value_Data.String = tap.Value
	tapDB.Value_Data.Valid = true
}

// CopyBasicFieldsToTap
func (tapDB *TapDB) CopyBasicFieldsToTap(tap *models.Tap) {
	// insertion point for checkout of basic fields (back repo to stage)
	tap.Name = tapDB.Name_Data.String
	tap.Value = tapDB.Value_Data.String
}

// CopyBasicFieldsToTap_WOP
func (tapDB *TapDB) CopyBasicFieldsToTap_WOP(tap *models.Tap_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tap.Name = tapDB.Name_Data.String
	tap.Value = tapDB.Value_Data.String
}

// CopyBasicFieldsToTapWOP
func (tapDB *TapDB) CopyBasicFieldsToTapWOP(tap *TapWOP) {
	tap.ID = int(tapDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tap.Name = tapDB.Name_Data.String
	tap.Value = tapDB.Value_Data.String
}

// Backup generates a json file from a slice of all TapDB instances in the backrepo
func (backRepoTap *BackRepoTapStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TapDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TapDB, 0)
	for _, tapDB := range backRepoTap.Map_TapDBID_TapDB {
		forBackup = append(forBackup, tapDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tap ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tap file", err.Error())
	}
}

// Backup generates a json file from a slice of all TapDB instances in the backrepo
func (backRepoTap *BackRepoTapStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TapDB, 0)
	for _, tapDB := range backRepoTap.Map_TapDBID_TapDB {
		forBackup = append(forBackup, tapDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tap")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tap_Fields, -1)
	for _, tapDB := range forBackup {

		var tapWOP TapWOP
		tapDB.CopyBasicFieldsToTapWOP(&tapWOP)

		row := sh.AddRow()
		row.WriteStruct(&tapWOP, -1)
	}
}

// RestoreXL from the "Tap" sheet all TapDB instances
func (backRepoTap *BackRepoTapStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTapid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tap"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTap.rowVisitorTap)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTap *BackRepoTapStruct) rowVisitorTap(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tapWOP TapWOP
		row.ReadStruct(&tapWOP)

		// add the unmarshalled struct to the stage
		tapDB := new(TapDB)
		tapDB.CopyBasicFieldsFromTapWOP(&tapWOP)

		tapDB_ID_atBackupTime := tapDB.ID
		tapDB.ID = 0
		query := backRepoTap.db.Create(tapDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTap.Map_TapDBID_TapDB[tapDB.ID] = tapDB
		BackRepoTapid_atBckpTime_newID[tapDB_ID_atBackupTime] = tapDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TapDB.json" in dirPath that stores an array
// of TapDB and stores it in the database
// the map BackRepoTapid_atBckpTime_newID is updated accordingly
func (backRepoTap *BackRepoTapStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTapid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TapDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tap file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TapDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TapDBID_TapDB
	for _, tapDB := range forRestore {

		tapDB_ID_atBackupTime := tapDB.ID
		tapDB.ID = 0
		query := backRepoTap.db.Create(tapDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTap.Map_TapDBID_TapDB[tapDB.ID] = tapDB
		BackRepoTapid_atBckpTime_newID[tapDB_ID_atBackupTime] = tapDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tap file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tap>id_atBckpTime_newID
// to compute new index
func (backRepoTap *BackRepoTapStruct) RestorePhaseTwo() {

	for _, tapDB := range backRepoTap.Map_TapDBID_TapDB {

		// next line of code is to avert unused variable compilation error
		_ = tapDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTap.db.Model(tapDB).Updates(*tapDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTap.ResetReversePointers commits all staged instances of Tap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTap *BackRepoTapStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tap := range backRepoTap.Map_TapDBID_TapPtr {
		backRepoTap.ResetReversePointersInstance(backRepo, idx, tap)
	}

	return
}

func (backRepoTap *BackRepoTapStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tap *models.Tap) (Error error) {

	// fetch matching tapDB
	if tapDB, ok := backRepoTap.Map_TapDBID_TapDB[idx]; ok {
		_ = tapDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTapid_atBckpTime_newID map[uint]uint
