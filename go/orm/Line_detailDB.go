// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Line_detail_sql sql.NullBool
var dummy_Line_detail_time time.Duration
var dummy_Line_detail_sort sort.Float64Slice

// Line_detailAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model line_detailAPI
type Line_detailAPI struct {
	gorm.Model

	models.Line_detail_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Line_detailPointersEncoding Line_detailPointersEncoding
}

// Line_detailPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Line_detailPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Line_detailDB describes a line_detail in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model line_detailDB
type Line_detailDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field line_detailDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Line_detailPointersEncoding
}

// Line_detailDBs arrays line_detailDBs
// swagger:response line_detailDBsResponse
type Line_detailDBs []Line_detailDB

// Line_detailDBResponse provides response
// swagger:response line_detailDBResponse
type Line_detailDBResponse struct {
	Line_detailDB
}

// Line_detailWOP is a Line_detail without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Line_detailWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Line_detail_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLine_detailStruct struct {
	// stores Line_detailDB according to their gorm ID
	Map_Line_detailDBID_Line_detailDB map[uint]*Line_detailDB

	// stores Line_detailDB ID according to Line_detail address
	Map_Line_detailPtr_Line_detailDBID map[*models.Line_detail]uint

	// stores Line_detail according to their gorm ID
	Map_Line_detailDBID_Line_detailPtr map[uint]*models.Line_detail

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLine_detail *BackRepoLine_detailStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLine_detail.stage
	return
}

func (backRepoLine_detail *BackRepoLine_detailStruct) GetDB() *gorm.DB {
	return backRepoLine_detail.db
}

// GetLine_detailDBFromLine_detailPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLine_detail *BackRepoLine_detailStruct) GetLine_detailDBFromLine_detailPtr(line_detail *models.Line_detail) (line_detailDB *Line_detailDB) {
	id := backRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail]
	line_detailDB = backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[id]
	return
}

// BackRepoLine_detail.CommitPhaseOne commits all staged instances of Line_detail to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine_detail *BackRepoLine_detailStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for line_detail := range stage.Line_details {
		backRepoLine_detail.CommitPhaseOneInstance(line_detail)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, line_detail := range backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr {
		if _, ok := stage.Line_details[line_detail]; !ok {
			backRepoLine_detail.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLine_detail.CommitDeleteInstance commits deletion of Line_detail to the BackRepo
func (backRepoLine_detail *BackRepoLine_detailStruct) CommitDeleteInstance(id uint) (Error error) {

	line_detail := backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr[id]

	// line_detail is not staged anymore, remove line_detailDB
	line_detailDB := backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[id]
	query := backRepoLine_detail.db.Unscoped().Delete(&line_detailDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLine_detail.Map_Line_detailPtr_Line_detailDBID, line_detail)
	delete(backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr, id)
	delete(backRepoLine_detail.Map_Line_detailDBID_Line_detailDB, id)

	return
}

// BackRepoLine_detail.CommitPhaseOneInstance commits line_detail staged instances of Line_detail to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLine_detail *BackRepoLine_detailStruct) CommitPhaseOneInstance(line_detail *models.Line_detail) (Error error) {

	// check if the line_detail is not commited yet
	if _, ok := backRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail]; ok {
		return
	}

	// initiate line_detail
	var line_detailDB Line_detailDB
	line_detailDB.CopyBasicFieldsFromLine_detail(line_detail)

	query := backRepoLine_detail.db.Create(&line_detailDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail] = line_detailDB.ID
	backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr[line_detailDB.ID] = line_detail
	backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[line_detailDB.ID] = &line_detailDB

	return
}

// BackRepoLine_detail.CommitPhaseTwo commits all staged instances of Line_detail to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_detail *BackRepoLine_detailStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, line_detail := range backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr {
		backRepoLine_detail.CommitPhaseTwoInstance(backRepo, idx, line_detail)
	}

	return
}

// BackRepoLine_detail.CommitPhaseTwoInstance commits {{structname }} of models.Line_detail to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_detail *BackRepoLine_detailStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, line_detail *models.Line_detail) (Error error) {

	// fetch matching line_detailDB
	if line_detailDB, ok := backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[idx]; ok {

		line_detailDB.CopyBasicFieldsFromLine_detail(line_detail)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoLine_detail.db.Save(&line_detailDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Line_detail intance %s", line_detail.Name))
		return err
	}

	return
}

// BackRepoLine_detail.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLine_detail *BackRepoLine_detailStruct) CheckoutPhaseOne() (Error error) {

	line_detailDBArray := make([]Line_detailDB, 0)
	query := backRepoLine_detail.db.Find(&line_detailDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	line_detailInstancesToBeRemovedFromTheStage := make(map[*models.Line_detail]any)
	for key, value := range backRepoLine_detail.stage.Line_details {
		line_detailInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, line_detailDB := range line_detailDBArray {
		backRepoLine_detail.CheckoutPhaseOneInstance(&line_detailDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		line_detail, ok := backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr[line_detailDB.ID]
		if ok {
			delete(line_detailInstancesToBeRemovedFromTheStage, line_detail)
		}
	}

	// remove from stage and back repo's 3 maps all line_details that are not in the checkout
	for line_detail := range line_detailInstancesToBeRemovedFromTheStage {
		line_detail.Unstage(backRepoLine_detail.GetStage())

		// remove instance from the back repo 3 maps
		line_detailID := backRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail]
		delete(backRepoLine_detail.Map_Line_detailPtr_Line_detailDBID, line_detail)
		delete(backRepoLine_detail.Map_Line_detailDBID_Line_detailDB, line_detailID)
		delete(backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr, line_detailID)
	}

	return
}

// CheckoutPhaseOneInstance takes a line_detailDB that has been found in the DB, updates the backRepo and stages the
// models version of the line_detailDB
func (backRepoLine_detail *BackRepoLine_detailStruct) CheckoutPhaseOneInstance(line_detailDB *Line_detailDB) (Error error) {

	line_detail, ok := backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr[line_detailDB.ID]
	if !ok {
		line_detail = new(models.Line_detail)

		backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr[line_detailDB.ID] = line_detail
		backRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail] = line_detailDB.ID

		// append model store with the new element
		line_detail.Name = line_detailDB.Name_Data.String
		line_detail.Stage(backRepoLine_detail.GetStage())
	}
	line_detailDB.CopyBasicFieldsToLine_detail(line_detail)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	line_detail.Stage(backRepoLine_detail.GetStage())

	// preserve pointer to line_detailDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Line_detailDBID_Line_detailDB)[line_detailDB hold variable pointers
	line_detailDB_Data := *line_detailDB
	preservedPtrToLine_detail := &line_detailDB_Data
	backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[line_detailDB.ID] = preservedPtrToLine_detail

	return
}

// BackRepoLine_detail.CheckoutPhaseTwo Checkouts all staged instances of Line_detail to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_detail *BackRepoLine_detailStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, line_detailDB := range backRepoLine_detail.Map_Line_detailDBID_Line_detailDB {
		backRepoLine_detail.CheckoutPhaseTwoInstance(backRepo, line_detailDB)
	}
	return
}

// BackRepoLine_detail.CheckoutPhaseTwoInstance Checkouts staged instances of Line_detail to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_detail *BackRepoLine_detailStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, line_detailDB *Line_detailDB) (Error error) {

	line_detail := backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr[line_detailDB.ID]

	line_detailDB.DecodePointers(backRepo, line_detail)

	return
}

func (line_detailDB *Line_detailDB) DecodePointers(backRepo *BackRepoStruct, line_detail *models.Line_detail) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLine_detail allows commit of a single line_detail (if already staged)
func (backRepo *BackRepoStruct) CommitLine_detail(line_detail *models.Line_detail) {
	backRepo.BackRepoLine_detail.CommitPhaseOneInstance(line_detail)
	if id, ok := backRepo.BackRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail]; ok {
		backRepo.BackRepoLine_detail.CommitPhaseTwoInstance(backRepo, id, line_detail)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLine_detail allows checkout of a single line_detail (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLine_detail(line_detail *models.Line_detail) {
	// check if the line_detail is staged
	if _, ok := backRepo.BackRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail]; ok {

		if id, ok := backRepo.BackRepoLine_detail.Map_Line_detailPtr_Line_detailDBID[line_detail]; ok {
			var line_detailDB Line_detailDB
			line_detailDB.ID = id

			if err := backRepo.BackRepoLine_detail.db.First(&line_detailDB, id).Error; err != nil {
				log.Fatalln("CheckoutLine_detail : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLine_detail.CheckoutPhaseOneInstance(&line_detailDB)
			backRepo.BackRepoLine_detail.CheckoutPhaseTwoInstance(backRepo, &line_detailDB)
		}
	}
}

// CopyBasicFieldsFromLine_detail
func (line_detailDB *Line_detailDB) CopyBasicFieldsFromLine_detail(line_detail *models.Line_detail) {
	// insertion point for fields commit

	line_detailDB.Name_Data.String = line_detail.Name
	line_detailDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLine_detail_WOP
func (line_detailDB *Line_detailDB) CopyBasicFieldsFromLine_detail_WOP(line_detail *models.Line_detail_WOP) {
	// insertion point for fields commit

	line_detailDB.Name_Data.String = line_detail.Name
	line_detailDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLine_detailWOP
func (line_detailDB *Line_detailDB) CopyBasicFieldsFromLine_detailWOP(line_detail *Line_detailWOP) {
	// insertion point for fields commit

	line_detailDB.Name_Data.String = line_detail.Name
	line_detailDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLine_detail
func (line_detailDB *Line_detailDB) CopyBasicFieldsToLine_detail(line_detail *models.Line_detail) {
	// insertion point for checkout of basic fields (back repo to stage)
	line_detail.Name = line_detailDB.Name_Data.String
}

// CopyBasicFieldsToLine_detail_WOP
func (line_detailDB *Line_detailDB) CopyBasicFieldsToLine_detail_WOP(line_detail *models.Line_detail_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	line_detail.Name = line_detailDB.Name_Data.String
}

// CopyBasicFieldsToLine_detailWOP
func (line_detailDB *Line_detailDB) CopyBasicFieldsToLine_detailWOP(line_detail *Line_detailWOP) {
	line_detail.ID = int(line_detailDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	line_detail.Name = line_detailDB.Name_Data.String
}

// Backup generates a json file from a slice of all Line_detailDB instances in the backrepo
func (backRepoLine_detail *BackRepoLine_detailStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Line_detailDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Line_detailDB, 0)
	for _, line_detailDB := range backRepoLine_detail.Map_Line_detailDBID_Line_detailDB {
		forBackup = append(forBackup, line_detailDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Line_detail ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Line_detail file", err.Error())
	}
}

// Backup generates a json file from a slice of all Line_detailDB instances in the backrepo
func (backRepoLine_detail *BackRepoLine_detailStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Line_detailDB, 0)
	for _, line_detailDB := range backRepoLine_detail.Map_Line_detailDBID_Line_detailDB {
		forBackup = append(forBackup, line_detailDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Line_detail")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Line_detail_Fields, -1)
	for _, line_detailDB := range forBackup {

		var line_detailWOP Line_detailWOP
		line_detailDB.CopyBasicFieldsToLine_detailWOP(&line_detailWOP)

		row := sh.AddRow()
		row.WriteStruct(&line_detailWOP, -1)
	}
}

// RestoreXL from the "Line_detail" sheet all Line_detailDB instances
func (backRepoLine_detail *BackRepoLine_detailStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLine_detailid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Line_detail"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLine_detail.rowVisitorLine_detail)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLine_detail *BackRepoLine_detailStruct) rowVisitorLine_detail(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var line_detailWOP Line_detailWOP
		row.ReadStruct(&line_detailWOP)

		// add the unmarshalled struct to the stage
		line_detailDB := new(Line_detailDB)
		line_detailDB.CopyBasicFieldsFromLine_detailWOP(&line_detailWOP)

		line_detailDB_ID_atBackupTime := line_detailDB.ID
		line_detailDB.ID = 0
		query := backRepoLine_detail.db.Create(line_detailDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[line_detailDB.ID] = line_detailDB
		BackRepoLine_detailid_atBckpTime_newID[line_detailDB_ID_atBackupTime] = line_detailDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Line_detailDB.json" in dirPath that stores an array
// of Line_detailDB and stores it in the database
// the map BackRepoLine_detailid_atBckpTime_newID is updated accordingly
func (backRepoLine_detail *BackRepoLine_detailStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLine_detailid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Line_detailDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Line_detail file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Line_detailDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Line_detailDBID_Line_detailDB
	for _, line_detailDB := range forRestore {

		line_detailDB_ID_atBackupTime := line_detailDB.ID
		line_detailDB.ID = 0
		query := backRepoLine_detail.db.Create(line_detailDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[line_detailDB.ID] = line_detailDB
		BackRepoLine_detailid_atBckpTime_newID[line_detailDB_ID_atBackupTime] = line_detailDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Line_detail file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Line_detail>id_atBckpTime_newID
// to compute new index
func (backRepoLine_detail *BackRepoLine_detailStruct) RestorePhaseTwo() {

	for _, line_detailDB := range backRepoLine_detail.Map_Line_detailDBID_Line_detailDB {

		// next line of code is to avert unused variable compilation error
		_ = line_detailDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLine_detail.db.Model(line_detailDB).Updates(*line_detailDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLine_detail.ResetReversePointers commits all staged instances of Line_detail to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLine_detail *BackRepoLine_detailStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, line_detail := range backRepoLine_detail.Map_Line_detailDBID_Line_detailPtr {
		backRepoLine_detail.ResetReversePointersInstance(backRepo, idx, line_detail)
	}

	return
}

func (backRepoLine_detail *BackRepoLine_detailStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, line_detail *models.Line_detail) (Error error) {

	// fetch matching line_detailDB
	if line_detailDB, ok := backRepoLine_detail.Map_Line_detailDBID_Line_detailDB[idx]; ok {
		_ = line_detailDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLine_detailid_atBckpTime_newID map[uint]uint
