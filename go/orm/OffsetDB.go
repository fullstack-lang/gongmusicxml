// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Offset_sql sql.NullBool
var dummy_Offset_time time.Duration
var dummy_Offset_sort sort.Float64Slice

// OffsetAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model offsetAPI
type OffsetAPI struct {
	gorm.Model

	models.Offset_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	OffsetPointersEncoding OffsetPointersEncoding
}

// OffsetPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type OffsetPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// OffsetDB describes a offset in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model offsetDB
type OffsetDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field offsetDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	OffsetPointersEncoding
}

// OffsetDBs arrays offsetDBs
// swagger:response offsetDBsResponse
type OffsetDBs []OffsetDB

// OffsetDBResponse provides response
// swagger:response offsetDBResponse
type OffsetDBResponse struct {
	OffsetDB
}

// OffsetWOP is a Offset without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type OffsetWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Offset_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoOffsetStruct struct {
	// stores OffsetDB according to their gorm ID
	Map_OffsetDBID_OffsetDB map[uint]*OffsetDB

	// stores OffsetDB ID according to Offset address
	Map_OffsetPtr_OffsetDBID map[*models.Offset]uint

	// stores Offset according to their gorm ID
	Map_OffsetDBID_OffsetPtr map[uint]*models.Offset

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoOffset *BackRepoOffsetStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoOffset.stage
	return
}

func (backRepoOffset *BackRepoOffsetStruct) GetDB() *gorm.DB {
	return backRepoOffset.db
}

// GetOffsetDBFromOffsetPtr is a handy function to access the back repo instance from the stage instance
func (backRepoOffset *BackRepoOffsetStruct) GetOffsetDBFromOffsetPtr(offset *models.Offset) (offsetDB *OffsetDB) {
	id := backRepoOffset.Map_OffsetPtr_OffsetDBID[offset]
	offsetDB = backRepoOffset.Map_OffsetDBID_OffsetDB[id]
	return
}

// BackRepoOffset.CommitPhaseOne commits all staged instances of Offset to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOffset *BackRepoOffsetStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for offset := range stage.Offsets {
		backRepoOffset.CommitPhaseOneInstance(offset)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, offset := range backRepoOffset.Map_OffsetDBID_OffsetPtr {
		if _, ok := stage.Offsets[offset]; !ok {
			backRepoOffset.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoOffset.CommitDeleteInstance commits deletion of Offset to the BackRepo
func (backRepoOffset *BackRepoOffsetStruct) CommitDeleteInstance(id uint) (Error error) {

	offset := backRepoOffset.Map_OffsetDBID_OffsetPtr[id]

	// offset is not staged anymore, remove offsetDB
	offsetDB := backRepoOffset.Map_OffsetDBID_OffsetDB[id]
	query := backRepoOffset.db.Unscoped().Delete(&offsetDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoOffset.Map_OffsetPtr_OffsetDBID, offset)
	delete(backRepoOffset.Map_OffsetDBID_OffsetPtr, id)
	delete(backRepoOffset.Map_OffsetDBID_OffsetDB, id)

	return
}

// BackRepoOffset.CommitPhaseOneInstance commits offset staged instances of Offset to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoOffset *BackRepoOffsetStruct) CommitPhaseOneInstance(offset *models.Offset) (Error error) {

	// check if the offset is not commited yet
	if _, ok := backRepoOffset.Map_OffsetPtr_OffsetDBID[offset]; ok {
		return
	}

	// initiate offset
	var offsetDB OffsetDB
	offsetDB.CopyBasicFieldsFromOffset(offset)

	query := backRepoOffset.db.Create(&offsetDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoOffset.Map_OffsetPtr_OffsetDBID[offset] = offsetDB.ID
	backRepoOffset.Map_OffsetDBID_OffsetPtr[offsetDB.ID] = offset
	backRepoOffset.Map_OffsetDBID_OffsetDB[offsetDB.ID] = &offsetDB

	return
}

// BackRepoOffset.CommitPhaseTwo commits all staged instances of Offset to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOffset *BackRepoOffsetStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, offset := range backRepoOffset.Map_OffsetDBID_OffsetPtr {
		backRepoOffset.CommitPhaseTwoInstance(backRepo, idx, offset)
	}

	return
}

// BackRepoOffset.CommitPhaseTwoInstance commits {{structname }} of models.Offset to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOffset *BackRepoOffsetStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, offset *models.Offset) (Error error) {

	// fetch matching offsetDB
	if offsetDB, ok := backRepoOffset.Map_OffsetDBID_OffsetDB[idx]; ok {

		offsetDB.CopyBasicFieldsFromOffset(offset)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoOffset.db.Save(&offsetDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Offset intance %s", offset.Name))
		return err
	}

	return
}

// BackRepoOffset.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoOffset *BackRepoOffsetStruct) CheckoutPhaseOne() (Error error) {

	offsetDBArray := make([]OffsetDB, 0)
	query := backRepoOffset.db.Find(&offsetDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	offsetInstancesToBeRemovedFromTheStage := make(map[*models.Offset]any)
	for key, value := range backRepoOffset.stage.Offsets {
		offsetInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, offsetDB := range offsetDBArray {
		backRepoOffset.CheckoutPhaseOneInstance(&offsetDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		offset, ok := backRepoOffset.Map_OffsetDBID_OffsetPtr[offsetDB.ID]
		if ok {
			delete(offsetInstancesToBeRemovedFromTheStage, offset)
		}
	}

	// remove from stage and back repo's 3 maps all offsets that are not in the checkout
	for offset := range offsetInstancesToBeRemovedFromTheStage {
		offset.Unstage(backRepoOffset.GetStage())

		// remove instance from the back repo 3 maps
		offsetID := backRepoOffset.Map_OffsetPtr_OffsetDBID[offset]
		delete(backRepoOffset.Map_OffsetPtr_OffsetDBID, offset)
		delete(backRepoOffset.Map_OffsetDBID_OffsetDB, offsetID)
		delete(backRepoOffset.Map_OffsetDBID_OffsetPtr, offsetID)
	}

	return
}

// CheckoutPhaseOneInstance takes a offsetDB that has been found in the DB, updates the backRepo and stages the
// models version of the offsetDB
func (backRepoOffset *BackRepoOffsetStruct) CheckoutPhaseOneInstance(offsetDB *OffsetDB) (Error error) {

	offset, ok := backRepoOffset.Map_OffsetDBID_OffsetPtr[offsetDB.ID]
	if !ok {
		offset = new(models.Offset)

		backRepoOffset.Map_OffsetDBID_OffsetPtr[offsetDB.ID] = offset
		backRepoOffset.Map_OffsetPtr_OffsetDBID[offset] = offsetDB.ID

		// append model store with the new element
		offset.Name = offsetDB.Name_Data.String
		offset.Stage(backRepoOffset.GetStage())
	}
	offsetDB.CopyBasicFieldsToOffset(offset)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	offset.Stage(backRepoOffset.GetStage())

	// preserve pointer to offsetDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_OffsetDBID_OffsetDB)[offsetDB hold variable pointers
	offsetDB_Data := *offsetDB
	preservedPtrToOffset := &offsetDB_Data
	backRepoOffset.Map_OffsetDBID_OffsetDB[offsetDB.ID] = preservedPtrToOffset

	return
}

// BackRepoOffset.CheckoutPhaseTwo Checkouts all staged instances of Offset to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOffset *BackRepoOffsetStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, offsetDB := range backRepoOffset.Map_OffsetDBID_OffsetDB {
		backRepoOffset.CheckoutPhaseTwoInstance(backRepo, offsetDB)
	}
	return
}

// BackRepoOffset.CheckoutPhaseTwoInstance Checkouts staged instances of Offset to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOffset *BackRepoOffsetStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, offsetDB *OffsetDB) (Error error) {

	offset := backRepoOffset.Map_OffsetDBID_OffsetPtr[offsetDB.ID]

	offsetDB.DecodePointers(backRepo, offset)

	return
}

func (offsetDB *OffsetDB) DecodePointers(backRepo *BackRepoStruct, offset *models.Offset) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitOffset allows commit of a single offset (if already staged)
func (backRepo *BackRepoStruct) CommitOffset(offset *models.Offset) {
	backRepo.BackRepoOffset.CommitPhaseOneInstance(offset)
	if id, ok := backRepo.BackRepoOffset.Map_OffsetPtr_OffsetDBID[offset]; ok {
		backRepo.BackRepoOffset.CommitPhaseTwoInstance(backRepo, id, offset)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitOffset allows checkout of a single offset (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutOffset(offset *models.Offset) {
	// check if the offset is staged
	if _, ok := backRepo.BackRepoOffset.Map_OffsetPtr_OffsetDBID[offset]; ok {

		if id, ok := backRepo.BackRepoOffset.Map_OffsetPtr_OffsetDBID[offset]; ok {
			var offsetDB OffsetDB
			offsetDB.ID = id

			if err := backRepo.BackRepoOffset.db.First(&offsetDB, id).Error; err != nil {
				log.Fatalln("CheckoutOffset : Problem with getting object with id:", id)
			}
			backRepo.BackRepoOffset.CheckoutPhaseOneInstance(&offsetDB)
			backRepo.BackRepoOffset.CheckoutPhaseTwoInstance(backRepo, &offsetDB)
		}
	}
}

// CopyBasicFieldsFromOffset
func (offsetDB *OffsetDB) CopyBasicFieldsFromOffset(offset *models.Offset) {
	// insertion point for fields commit

	offsetDB.Name_Data.String = offset.Name
	offsetDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOffset_WOP
func (offsetDB *OffsetDB) CopyBasicFieldsFromOffset_WOP(offset *models.Offset_WOP) {
	// insertion point for fields commit

	offsetDB.Name_Data.String = offset.Name
	offsetDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromOffsetWOP
func (offsetDB *OffsetDB) CopyBasicFieldsFromOffsetWOP(offset *OffsetWOP) {
	// insertion point for fields commit

	offsetDB.Name_Data.String = offset.Name
	offsetDB.Name_Data.Valid = true
}

// CopyBasicFieldsToOffset
func (offsetDB *OffsetDB) CopyBasicFieldsToOffset(offset *models.Offset) {
	// insertion point for checkout of basic fields (back repo to stage)
	offset.Name = offsetDB.Name_Data.String
}

// CopyBasicFieldsToOffset_WOP
func (offsetDB *OffsetDB) CopyBasicFieldsToOffset_WOP(offset *models.Offset_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	offset.Name = offsetDB.Name_Data.String
}

// CopyBasicFieldsToOffsetWOP
func (offsetDB *OffsetDB) CopyBasicFieldsToOffsetWOP(offset *OffsetWOP) {
	offset.ID = int(offsetDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	offset.Name = offsetDB.Name_Data.String
}

// Backup generates a json file from a slice of all OffsetDB instances in the backrepo
func (backRepoOffset *BackRepoOffsetStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "OffsetDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OffsetDB, 0)
	for _, offsetDB := range backRepoOffset.Map_OffsetDBID_OffsetDB {
		forBackup = append(forBackup, offsetDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Offset ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Offset file", err.Error())
	}
}

// Backup generates a json file from a slice of all OffsetDB instances in the backrepo
func (backRepoOffset *BackRepoOffsetStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*OffsetDB, 0)
	for _, offsetDB := range backRepoOffset.Map_OffsetDBID_OffsetDB {
		forBackup = append(forBackup, offsetDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Offset")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Offset_Fields, -1)
	for _, offsetDB := range forBackup {

		var offsetWOP OffsetWOP
		offsetDB.CopyBasicFieldsToOffsetWOP(&offsetWOP)

		row := sh.AddRow()
		row.WriteStruct(&offsetWOP, -1)
	}
}

// RestoreXL from the "Offset" sheet all OffsetDB instances
func (backRepoOffset *BackRepoOffsetStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoOffsetid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Offset"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoOffset.rowVisitorOffset)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoOffset *BackRepoOffsetStruct) rowVisitorOffset(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var offsetWOP OffsetWOP
		row.ReadStruct(&offsetWOP)

		// add the unmarshalled struct to the stage
		offsetDB := new(OffsetDB)
		offsetDB.CopyBasicFieldsFromOffsetWOP(&offsetWOP)

		offsetDB_ID_atBackupTime := offsetDB.ID
		offsetDB.ID = 0
		query := backRepoOffset.db.Create(offsetDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOffset.Map_OffsetDBID_OffsetDB[offsetDB.ID] = offsetDB
		BackRepoOffsetid_atBckpTime_newID[offsetDB_ID_atBackupTime] = offsetDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "OffsetDB.json" in dirPath that stores an array
// of OffsetDB and stores it in the database
// the map BackRepoOffsetid_atBckpTime_newID is updated accordingly
func (backRepoOffset *BackRepoOffsetStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoOffsetid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "OffsetDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Offset file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*OffsetDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_OffsetDBID_OffsetDB
	for _, offsetDB := range forRestore {

		offsetDB_ID_atBackupTime := offsetDB.ID
		offsetDB.ID = 0
		query := backRepoOffset.db.Create(offsetDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoOffset.Map_OffsetDBID_OffsetDB[offsetDB.ID] = offsetDB
		BackRepoOffsetid_atBckpTime_newID[offsetDB_ID_atBackupTime] = offsetDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Offset file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Offset>id_atBckpTime_newID
// to compute new index
func (backRepoOffset *BackRepoOffsetStruct) RestorePhaseTwo() {

	for _, offsetDB := range backRepoOffset.Map_OffsetDBID_OffsetDB {

		// next line of code is to avert unused variable compilation error
		_ = offsetDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoOffset.db.Model(offsetDB).Updates(*offsetDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoOffset.ResetReversePointers commits all staged instances of Offset to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoOffset *BackRepoOffsetStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, offset := range backRepoOffset.Map_OffsetDBID_OffsetPtr {
		backRepoOffset.ResetReversePointersInstance(backRepo, idx, offset)
	}

	return
}

func (backRepoOffset *BackRepoOffsetStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, offset *models.Offset) (Error error) {

	// fetch matching offsetDB
	if offsetDB, ok := backRepoOffset.Map_OffsetDBID_OffsetDB[idx]; ok {
		_ = offsetDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoOffsetid_atBckpTime_newID map[uint]uint
