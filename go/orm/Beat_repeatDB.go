// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Beat_repeat_sql sql.NullBool
var dummy_Beat_repeat_time time.Duration
var dummy_Beat_repeat_sort sort.Float64Slice

// Beat_repeatAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model beat_repeatAPI
type Beat_repeatAPI struct {
	gorm.Model

	models.Beat_repeat_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Beat_repeatPointersEncoding Beat_repeatPointersEncoding
}

// Beat_repeatPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Beat_repeatPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Beat_repeatDB describes a beat_repeat in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model beat_repeatDB
type Beat_repeatDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field beat_repeatDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Beat_repeatPointersEncoding
}

// Beat_repeatDBs arrays beat_repeatDBs
// swagger:response beat_repeatDBsResponse
type Beat_repeatDBs []Beat_repeatDB

// Beat_repeatDBResponse provides response
// swagger:response beat_repeatDBResponse
type Beat_repeatDBResponse struct {
	Beat_repeatDB
}

// Beat_repeatWOP is a Beat_repeat without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Beat_repeatWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Beat_repeat_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBeat_repeatStruct struct {
	// stores Beat_repeatDB according to their gorm ID
	Map_Beat_repeatDBID_Beat_repeatDB map[uint]*Beat_repeatDB

	// stores Beat_repeatDB ID according to Beat_repeat address
	Map_Beat_repeatPtr_Beat_repeatDBID map[*models.Beat_repeat]uint

	// stores Beat_repeat according to their gorm ID
	Map_Beat_repeatDBID_Beat_repeatPtr map[uint]*models.Beat_repeat

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBeat_repeat.stage
	return
}

func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) GetDB() *gorm.DB {
	return backRepoBeat_repeat.db
}

// GetBeat_repeatDBFromBeat_repeatPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) GetBeat_repeatDBFromBeat_repeatPtr(beat_repeat *models.Beat_repeat) (beat_repeatDB *Beat_repeatDB) {
	id := backRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat]
	beat_repeatDB = backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[id]
	return
}

// BackRepoBeat_repeat.CommitPhaseOne commits all staged instances of Beat_repeat to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for beat_repeat := range stage.Beat_repeats {
		backRepoBeat_repeat.CommitPhaseOneInstance(beat_repeat)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, beat_repeat := range backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr {
		if _, ok := stage.Beat_repeats[beat_repeat]; !ok {
			backRepoBeat_repeat.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBeat_repeat.CommitDeleteInstance commits deletion of Beat_repeat to the BackRepo
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CommitDeleteInstance(id uint) (Error error) {

	beat_repeat := backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr[id]

	// beat_repeat is not staged anymore, remove beat_repeatDB
	beat_repeatDB := backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[id]
	query := backRepoBeat_repeat.db.Unscoped().Delete(&beat_repeatDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID, beat_repeat)
	delete(backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr, id)
	delete(backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB, id)

	return
}

// BackRepoBeat_repeat.CommitPhaseOneInstance commits beat_repeat staged instances of Beat_repeat to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CommitPhaseOneInstance(beat_repeat *models.Beat_repeat) (Error error) {

	// check if the beat_repeat is not commited yet
	if _, ok := backRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat]; ok {
		return
	}

	// initiate beat_repeat
	var beat_repeatDB Beat_repeatDB
	beat_repeatDB.CopyBasicFieldsFromBeat_repeat(beat_repeat)

	query := backRepoBeat_repeat.db.Create(&beat_repeatDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat] = beat_repeatDB.ID
	backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr[beat_repeatDB.ID] = beat_repeat
	backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[beat_repeatDB.ID] = &beat_repeatDB

	return
}

// BackRepoBeat_repeat.CommitPhaseTwo commits all staged instances of Beat_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, beat_repeat := range backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr {
		backRepoBeat_repeat.CommitPhaseTwoInstance(backRepo, idx, beat_repeat)
	}

	return
}

// BackRepoBeat_repeat.CommitPhaseTwoInstance commits {{structname }} of models.Beat_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, beat_repeat *models.Beat_repeat) (Error error) {

	// fetch matching beat_repeatDB
	if beat_repeatDB, ok := backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[idx]; ok {

		beat_repeatDB.CopyBasicFieldsFromBeat_repeat(beat_repeat)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBeat_repeat.db.Save(&beat_repeatDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Beat_repeat intance %s", beat_repeat.Name))
		return err
	}

	return
}

// BackRepoBeat_repeat.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CheckoutPhaseOne() (Error error) {

	beat_repeatDBArray := make([]Beat_repeatDB, 0)
	query := backRepoBeat_repeat.db.Find(&beat_repeatDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	beat_repeatInstancesToBeRemovedFromTheStage := make(map[*models.Beat_repeat]any)
	for key, value := range backRepoBeat_repeat.stage.Beat_repeats {
		beat_repeatInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, beat_repeatDB := range beat_repeatDBArray {
		backRepoBeat_repeat.CheckoutPhaseOneInstance(&beat_repeatDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		beat_repeat, ok := backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr[beat_repeatDB.ID]
		if ok {
			delete(beat_repeatInstancesToBeRemovedFromTheStage, beat_repeat)
		}
	}

	// remove from stage and back repo's 3 maps all beat_repeats that are not in the checkout
	for beat_repeat := range beat_repeatInstancesToBeRemovedFromTheStage {
		beat_repeat.Unstage(backRepoBeat_repeat.GetStage())

		// remove instance from the back repo 3 maps
		beat_repeatID := backRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat]
		delete(backRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID, beat_repeat)
		delete(backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB, beat_repeatID)
		delete(backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr, beat_repeatID)
	}

	return
}

// CheckoutPhaseOneInstance takes a beat_repeatDB that has been found in the DB, updates the backRepo and stages the
// models version of the beat_repeatDB
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CheckoutPhaseOneInstance(beat_repeatDB *Beat_repeatDB) (Error error) {

	beat_repeat, ok := backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr[beat_repeatDB.ID]
	if !ok {
		beat_repeat = new(models.Beat_repeat)

		backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr[beat_repeatDB.ID] = beat_repeat
		backRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat] = beat_repeatDB.ID

		// append model store with the new element
		beat_repeat.Name = beat_repeatDB.Name_Data.String
		beat_repeat.Stage(backRepoBeat_repeat.GetStage())
	}
	beat_repeatDB.CopyBasicFieldsToBeat_repeat(beat_repeat)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	beat_repeat.Stage(backRepoBeat_repeat.GetStage())

	// preserve pointer to beat_repeatDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Beat_repeatDBID_Beat_repeatDB)[beat_repeatDB hold variable pointers
	beat_repeatDB_Data := *beat_repeatDB
	preservedPtrToBeat_repeat := &beat_repeatDB_Data
	backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[beat_repeatDB.ID] = preservedPtrToBeat_repeat

	return
}

// BackRepoBeat_repeat.CheckoutPhaseTwo Checkouts all staged instances of Beat_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, beat_repeatDB := range backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB {
		backRepoBeat_repeat.CheckoutPhaseTwoInstance(backRepo, beat_repeatDB)
	}
	return
}

// BackRepoBeat_repeat.CheckoutPhaseTwoInstance Checkouts staged instances of Beat_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, beat_repeatDB *Beat_repeatDB) (Error error) {

	beat_repeat := backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr[beat_repeatDB.ID]

	beat_repeatDB.DecodePointers(backRepo, beat_repeat)

	return
}

func (beat_repeatDB *Beat_repeatDB) DecodePointers(backRepo *BackRepoStruct, beat_repeat *models.Beat_repeat) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBeat_repeat allows commit of a single beat_repeat (if already staged)
func (backRepo *BackRepoStruct) CommitBeat_repeat(beat_repeat *models.Beat_repeat) {
	backRepo.BackRepoBeat_repeat.CommitPhaseOneInstance(beat_repeat)
	if id, ok := backRepo.BackRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat]; ok {
		backRepo.BackRepoBeat_repeat.CommitPhaseTwoInstance(backRepo, id, beat_repeat)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBeat_repeat allows checkout of a single beat_repeat (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBeat_repeat(beat_repeat *models.Beat_repeat) {
	// check if the beat_repeat is staged
	if _, ok := backRepo.BackRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat]; ok {

		if id, ok := backRepo.BackRepoBeat_repeat.Map_Beat_repeatPtr_Beat_repeatDBID[beat_repeat]; ok {
			var beat_repeatDB Beat_repeatDB
			beat_repeatDB.ID = id

			if err := backRepo.BackRepoBeat_repeat.db.First(&beat_repeatDB, id).Error; err != nil {
				log.Fatalln("CheckoutBeat_repeat : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBeat_repeat.CheckoutPhaseOneInstance(&beat_repeatDB)
			backRepo.BackRepoBeat_repeat.CheckoutPhaseTwoInstance(backRepo, &beat_repeatDB)
		}
	}
}

// CopyBasicFieldsFromBeat_repeat
func (beat_repeatDB *Beat_repeatDB) CopyBasicFieldsFromBeat_repeat(beat_repeat *models.Beat_repeat) {
	// insertion point for fields commit

	beat_repeatDB.Name_Data.String = beat_repeat.Name
	beat_repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBeat_repeat_WOP
func (beat_repeatDB *Beat_repeatDB) CopyBasicFieldsFromBeat_repeat_WOP(beat_repeat *models.Beat_repeat_WOP) {
	// insertion point for fields commit

	beat_repeatDB.Name_Data.String = beat_repeat.Name
	beat_repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBeat_repeatWOP
func (beat_repeatDB *Beat_repeatDB) CopyBasicFieldsFromBeat_repeatWOP(beat_repeat *Beat_repeatWOP) {
	// insertion point for fields commit

	beat_repeatDB.Name_Data.String = beat_repeat.Name
	beat_repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBeat_repeat
func (beat_repeatDB *Beat_repeatDB) CopyBasicFieldsToBeat_repeat(beat_repeat *models.Beat_repeat) {
	// insertion point for checkout of basic fields (back repo to stage)
	beat_repeat.Name = beat_repeatDB.Name_Data.String
}

// CopyBasicFieldsToBeat_repeat_WOP
func (beat_repeatDB *Beat_repeatDB) CopyBasicFieldsToBeat_repeat_WOP(beat_repeat *models.Beat_repeat_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	beat_repeat.Name = beat_repeatDB.Name_Data.String
}

// CopyBasicFieldsToBeat_repeatWOP
func (beat_repeatDB *Beat_repeatDB) CopyBasicFieldsToBeat_repeatWOP(beat_repeat *Beat_repeatWOP) {
	beat_repeat.ID = int(beat_repeatDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	beat_repeat.Name = beat_repeatDB.Name_Data.String
}

// Backup generates a json file from a slice of all Beat_repeatDB instances in the backrepo
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Beat_repeatDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Beat_repeatDB, 0)
	for _, beat_repeatDB := range backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB {
		forBackup = append(forBackup, beat_repeatDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Beat_repeat ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Beat_repeat file", err.Error())
	}
}

// Backup generates a json file from a slice of all Beat_repeatDB instances in the backrepo
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Beat_repeatDB, 0)
	for _, beat_repeatDB := range backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB {
		forBackup = append(forBackup, beat_repeatDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Beat_repeat")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Beat_repeat_Fields, -1)
	for _, beat_repeatDB := range forBackup {

		var beat_repeatWOP Beat_repeatWOP
		beat_repeatDB.CopyBasicFieldsToBeat_repeatWOP(&beat_repeatWOP)

		row := sh.AddRow()
		row.WriteStruct(&beat_repeatWOP, -1)
	}
}

// RestoreXL from the "Beat_repeat" sheet all Beat_repeatDB instances
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBeat_repeatid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Beat_repeat"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBeat_repeat.rowVisitorBeat_repeat)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) rowVisitorBeat_repeat(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var beat_repeatWOP Beat_repeatWOP
		row.ReadStruct(&beat_repeatWOP)

		// add the unmarshalled struct to the stage
		beat_repeatDB := new(Beat_repeatDB)
		beat_repeatDB.CopyBasicFieldsFromBeat_repeatWOP(&beat_repeatWOP)

		beat_repeatDB_ID_atBackupTime := beat_repeatDB.ID
		beat_repeatDB.ID = 0
		query := backRepoBeat_repeat.db.Create(beat_repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[beat_repeatDB.ID] = beat_repeatDB
		BackRepoBeat_repeatid_atBckpTime_newID[beat_repeatDB_ID_atBackupTime] = beat_repeatDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Beat_repeatDB.json" in dirPath that stores an array
// of Beat_repeatDB and stores it in the database
// the map BackRepoBeat_repeatid_atBckpTime_newID is updated accordingly
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBeat_repeatid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Beat_repeatDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Beat_repeat file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Beat_repeatDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Beat_repeatDBID_Beat_repeatDB
	for _, beat_repeatDB := range forRestore {

		beat_repeatDB_ID_atBackupTime := beat_repeatDB.ID
		beat_repeatDB.ID = 0
		query := backRepoBeat_repeat.db.Create(beat_repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[beat_repeatDB.ID] = beat_repeatDB
		BackRepoBeat_repeatid_atBckpTime_newID[beat_repeatDB_ID_atBackupTime] = beat_repeatDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Beat_repeat file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Beat_repeat>id_atBckpTime_newID
// to compute new index
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) RestorePhaseTwo() {

	for _, beat_repeatDB := range backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB {

		// next line of code is to avert unused variable compilation error
		_ = beat_repeatDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBeat_repeat.db.Model(beat_repeatDB).Updates(*beat_repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBeat_repeat.ResetReversePointers commits all staged instances of Beat_repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, beat_repeat := range backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatPtr {
		backRepoBeat_repeat.ResetReversePointersInstance(backRepo, idx, beat_repeat)
	}

	return
}

func (backRepoBeat_repeat *BackRepoBeat_repeatStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, beat_repeat *models.Beat_repeat) (Error error) {

	// fetch matching beat_repeatDB
	if beat_repeatDB, ok := backRepoBeat_repeat.Map_Beat_repeatDBID_Beat_repeatDB[idx]; ok {
		_ = beat_repeatDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBeat_repeatid_atBckpTime_newID map[uint]uint
