// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Lyric_font_sql sql.NullBool
var dummy_Lyric_font_time time.Duration
var dummy_Lyric_font_sort sort.Float64Slice

// Lyric_fontAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lyric_fontAPI
type Lyric_fontAPI struct {
	gorm.Model

	models.Lyric_font_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Lyric_fontPointersEncoding Lyric_fontPointersEncoding
}

// Lyric_fontPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Lyric_fontPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Lyric_fontDB describes a lyric_font in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model lyric_fontDB
type Lyric_fontDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field lyric_fontDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Lyric_fontPointersEncoding
}

// Lyric_fontDBs arrays lyric_fontDBs
// swagger:response lyric_fontDBsResponse
type Lyric_fontDBs []Lyric_fontDB

// Lyric_fontDBResponse provides response
// swagger:response lyric_fontDBResponse
type Lyric_fontDBResponse struct {
	Lyric_fontDB
}

// Lyric_fontWOP is a Lyric_font without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Lyric_fontWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Lyric_font_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLyric_fontStruct struct {
	// stores Lyric_fontDB according to their gorm ID
	Map_Lyric_fontDBID_Lyric_fontDB map[uint]*Lyric_fontDB

	// stores Lyric_fontDB ID according to Lyric_font address
	Map_Lyric_fontPtr_Lyric_fontDBID map[*models.Lyric_font]uint

	// stores Lyric_font according to their gorm ID
	Map_Lyric_fontDBID_Lyric_fontPtr map[uint]*models.Lyric_font

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLyric_font *BackRepoLyric_fontStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLyric_font.stage
	return
}

func (backRepoLyric_font *BackRepoLyric_fontStruct) GetDB() *gorm.DB {
	return backRepoLyric_font.db
}

// GetLyric_fontDBFromLyric_fontPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLyric_font *BackRepoLyric_fontStruct) GetLyric_fontDBFromLyric_fontPtr(lyric_font *models.Lyric_font) (lyric_fontDB *Lyric_fontDB) {
	id := backRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font]
	lyric_fontDB = backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[id]
	return
}

// BackRepoLyric_font.CommitPhaseOne commits all staged instances of Lyric_font to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLyric_font *BackRepoLyric_fontStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for lyric_font := range stage.Lyric_fonts {
		backRepoLyric_font.CommitPhaseOneInstance(lyric_font)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, lyric_font := range backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr {
		if _, ok := stage.Lyric_fonts[lyric_font]; !ok {
			backRepoLyric_font.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLyric_font.CommitDeleteInstance commits deletion of Lyric_font to the BackRepo
func (backRepoLyric_font *BackRepoLyric_fontStruct) CommitDeleteInstance(id uint) (Error error) {

	lyric_font := backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr[id]

	// lyric_font is not staged anymore, remove lyric_fontDB
	lyric_fontDB := backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[id]
	query := backRepoLyric_font.db.Unscoped().Delete(&lyric_fontDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID, lyric_font)
	delete(backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr, id)
	delete(backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB, id)

	return
}

// BackRepoLyric_font.CommitPhaseOneInstance commits lyric_font staged instances of Lyric_font to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLyric_font *BackRepoLyric_fontStruct) CommitPhaseOneInstance(lyric_font *models.Lyric_font) (Error error) {

	// check if the lyric_font is not commited yet
	if _, ok := backRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font]; ok {
		return
	}

	// initiate lyric_font
	var lyric_fontDB Lyric_fontDB
	lyric_fontDB.CopyBasicFieldsFromLyric_font(lyric_font)

	query := backRepoLyric_font.db.Create(&lyric_fontDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font] = lyric_fontDB.ID
	backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr[lyric_fontDB.ID] = lyric_font
	backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[lyric_fontDB.ID] = &lyric_fontDB

	return
}

// BackRepoLyric_font.CommitPhaseTwo commits all staged instances of Lyric_font to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_font *BackRepoLyric_fontStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, lyric_font := range backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr {
		backRepoLyric_font.CommitPhaseTwoInstance(backRepo, idx, lyric_font)
	}

	return
}

// BackRepoLyric_font.CommitPhaseTwoInstance commits {{structname }} of models.Lyric_font to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_font *BackRepoLyric_fontStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, lyric_font *models.Lyric_font) (Error error) {

	// fetch matching lyric_fontDB
	if lyric_fontDB, ok := backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[idx]; ok {

		lyric_fontDB.CopyBasicFieldsFromLyric_font(lyric_font)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoLyric_font.db.Save(&lyric_fontDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Lyric_font intance %s", lyric_font.Name))
		return err
	}

	return
}

// BackRepoLyric_font.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLyric_font *BackRepoLyric_fontStruct) CheckoutPhaseOne() (Error error) {

	lyric_fontDBArray := make([]Lyric_fontDB, 0)
	query := backRepoLyric_font.db.Find(&lyric_fontDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	lyric_fontInstancesToBeRemovedFromTheStage := make(map[*models.Lyric_font]any)
	for key, value := range backRepoLyric_font.stage.Lyric_fonts {
		lyric_fontInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, lyric_fontDB := range lyric_fontDBArray {
		backRepoLyric_font.CheckoutPhaseOneInstance(&lyric_fontDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		lyric_font, ok := backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr[lyric_fontDB.ID]
		if ok {
			delete(lyric_fontInstancesToBeRemovedFromTheStage, lyric_font)
		}
	}

	// remove from stage and back repo's 3 maps all lyric_fonts that are not in the checkout
	for lyric_font := range lyric_fontInstancesToBeRemovedFromTheStage {
		lyric_font.Unstage(backRepoLyric_font.GetStage())

		// remove instance from the back repo 3 maps
		lyric_fontID := backRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font]
		delete(backRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID, lyric_font)
		delete(backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB, lyric_fontID)
		delete(backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr, lyric_fontID)
	}

	return
}

// CheckoutPhaseOneInstance takes a lyric_fontDB that has been found in the DB, updates the backRepo and stages the
// models version of the lyric_fontDB
func (backRepoLyric_font *BackRepoLyric_fontStruct) CheckoutPhaseOneInstance(lyric_fontDB *Lyric_fontDB) (Error error) {

	lyric_font, ok := backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr[lyric_fontDB.ID]
	if !ok {
		lyric_font = new(models.Lyric_font)

		backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr[lyric_fontDB.ID] = lyric_font
		backRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font] = lyric_fontDB.ID

		// append model store with the new element
		lyric_font.Name = lyric_fontDB.Name_Data.String
		lyric_font.Stage(backRepoLyric_font.GetStage())
	}
	lyric_fontDB.CopyBasicFieldsToLyric_font(lyric_font)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	lyric_font.Stage(backRepoLyric_font.GetStage())

	// preserve pointer to lyric_fontDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Lyric_fontDBID_Lyric_fontDB)[lyric_fontDB hold variable pointers
	lyric_fontDB_Data := *lyric_fontDB
	preservedPtrToLyric_font := &lyric_fontDB_Data
	backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[lyric_fontDB.ID] = preservedPtrToLyric_font

	return
}

// BackRepoLyric_font.CheckoutPhaseTwo Checkouts all staged instances of Lyric_font to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_font *BackRepoLyric_fontStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lyric_fontDB := range backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB {
		backRepoLyric_font.CheckoutPhaseTwoInstance(backRepo, lyric_fontDB)
	}
	return
}

// BackRepoLyric_font.CheckoutPhaseTwoInstance Checkouts staged instances of Lyric_font to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_font *BackRepoLyric_fontStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lyric_fontDB *Lyric_fontDB) (Error error) {

	lyric_font := backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr[lyric_fontDB.ID]

	lyric_fontDB.DecodePointers(backRepo, lyric_font)

	return
}

func (lyric_fontDB *Lyric_fontDB) DecodePointers(backRepo *BackRepoStruct, lyric_font *models.Lyric_font) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLyric_font allows commit of a single lyric_font (if already staged)
func (backRepo *BackRepoStruct) CommitLyric_font(lyric_font *models.Lyric_font) {
	backRepo.BackRepoLyric_font.CommitPhaseOneInstance(lyric_font)
	if id, ok := backRepo.BackRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font]; ok {
		backRepo.BackRepoLyric_font.CommitPhaseTwoInstance(backRepo, id, lyric_font)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLyric_font allows checkout of a single lyric_font (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLyric_font(lyric_font *models.Lyric_font) {
	// check if the lyric_font is staged
	if _, ok := backRepo.BackRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font]; ok {

		if id, ok := backRepo.BackRepoLyric_font.Map_Lyric_fontPtr_Lyric_fontDBID[lyric_font]; ok {
			var lyric_fontDB Lyric_fontDB
			lyric_fontDB.ID = id

			if err := backRepo.BackRepoLyric_font.db.First(&lyric_fontDB, id).Error; err != nil {
				log.Fatalln("CheckoutLyric_font : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLyric_font.CheckoutPhaseOneInstance(&lyric_fontDB)
			backRepo.BackRepoLyric_font.CheckoutPhaseTwoInstance(backRepo, &lyric_fontDB)
		}
	}
}

// CopyBasicFieldsFromLyric_font
func (lyric_fontDB *Lyric_fontDB) CopyBasicFieldsFromLyric_font(lyric_font *models.Lyric_font) {
	// insertion point for fields commit

	lyric_fontDB.Name_Data.String = lyric_font.Name
	lyric_fontDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLyric_font_WOP
func (lyric_fontDB *Lyric_fontDB) CopyBasicFieldsFromLyric_font_WOP(lyric_font *models.Lyric_font_WOP) {
	// insertion point for fields commit

	lyric_fontDB.Name_Data.String = lyric_font.Name
	lyric_fontDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLyric_fontWOP
func (lyric_fontDB *Lyric_fontDB) CopyBasicFieldsFromLyric_fontWOP(lyric_font *Lyric_fontWOP) {
	// insertion point for fields commit

	lyric_fontDB.Name_Data.String = lyric_font.Name
	lyric_fontDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLyric_font
func (lyric_fontDB *Lyric_fontDB) CopyBasicFieldsToLyric_font(lyric_font *models.Lyric_font) {
	// insertion point for checkout of basic fields (back repo to stage)
	lyric_font.Name = lyric_fontDB.Name_Data.String
}

// CopyBasicFieldsToLyric_font_WOP
func (lyric_fontDB *Lyric_fontDB) CopyBasicFieldsToLyric_font_WOP(lyric_font *models.Lyric_font_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	lyric_font.Name = lyric_fontDB.Name_Data.String
}

// CopyBasicFieldsToLyric_fontWOP
func (lyric_fontDB *Lyric_fontDB) CopyBasicFieldsToLyric_fontWOP(lyric_font *Lyric_fontWOP) {
	lyric_font.ID = int(lyric_fontDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	lyric_font.Name = lyric_fontDB.Name_Data.String
}

// Backup generates a json file from a slice of all Lyric_fontDB instances in the backrepo
func (backRepoLyric_font *BackRepoLyric_fontStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Lyric_fontDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Lyric_fontDB, 0)
	for _, lyric_fontDB := range backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB {
		forBackup = append(forBackup, lyric_fontDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Lyric_font ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Lyric_font file", err.Error())
	}
}

// Backup generates a json file from a slice of all Lyric_fontDB instances in the backrepo
func (backRepoLyric_font *BackRepoLyric_fontStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Lyric_fontDB, 0)
	for _, lyric_fontDB := range backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB {
		forBackup = append(forBackup, lyric_fontDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Lyric_font")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Lyric_font_Fields, -1)
	for _, lyric_fontDB := range forBackup {

		var lyric_fontWOP Lyric_fontWOP
		lyric_fontDB.CopyBasicFieldsToLyric_fontWOP(&lyric_fontWOP)

		row := sh.AddRow()
		row.WriteStruct(&lyric_fontWOP, -1)
	}
}

// RestoreXL from the "Lyric_font" sheet all Lyric_fontDB instances
func (backRepoLyric_font *BackRepoLyric_fontStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLyric_fontid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Lyric_font"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLyric_font.rowVisitorLyric_font)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLyric_font *BackRepoLyric_fontStruct) rowVisitorLyric_font(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var lyric_fontWOP Lyric_fontWOP
		row.ReadStruct(&lyric_fontWOP)

		// add the unmarshalled struct to the stage
		lyric_fontDB := new(Lyric_fontDB)
		lyric_fontDB.CopyBasicFieldsFromLyric_fontWOP(&lyric_fontWOP)

		lyric_fontDB_ID_atBackupTime := lyric_fontDB.ID
		lyric_fontDB.ID = 0
		query := backRepoLyric_font.db.Create(lyric_fontDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[lyric_fontDB.ID] = lyric_fontDB
		BackRepoLyric_fontid_atBckpTime_newID[lyric_fontDB_ID_atBackupTime] = lyric_fontDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Lyric_fontDB.json" in dirPath that stores an array
// of Lyric_fontDB and stores it in the database
// the map BackRepoLyric_fontid_atBckpTime_newID is updated accordingly
func (backRepoLyric_font *BackRepoLyric_fontStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLyric_fontid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Lyric_fontDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Lyric_font file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Lyric_fontDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Lyric_fontDBID_Lyric_fontDB
	for _, lyric_fontDB := range forRestore {

		lyric_fontDB_ID_atBackupTime := lyric_fontDB.ID
		lyric_fontDB.ID = 0
		query := backRepoLyric_font.db.Create(lyric_fontDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[lyric_fontDB.ID] = lyric_fontDB
		BackRepoLyric_fontid_atBckpTime_newID[lyric_fontDB_ID_atBackupTime] = lyric_fontDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Lyric_font file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Lyric_font>id_atBckpTime_newID
// to compute new index
func (backRepoLyric_font *BackRepoLyric_fontStruct) RestorePhaseTwo() {

	for _, lyric_fontDB := range backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB {

		// next line of code is to avert unused variable compilation error
		_ = lyric_fontDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLyric_font.db.Model(lyric_fontDB).Updates(*lyric_fontDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLyric_font.ResetReversePointers commits all staged instances of Lyric_font to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLyric_font *BackRepoLyric_fontStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, lyric_font := range backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontPtr {
		backRepoLyric_font.ResetReversePointersInstance(backRepo, idx, lyric_font)
	}

	return
}

func (backRepoLyric_font *BackRepoLyric_fontStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, lyric_font *models.Lyric_font) (Error error) {

	// fetch matching lyric_fontDB
	if lyric_fontDB, ok := backRepoLyric_font.Map_Lyric_fontDBID_Lyric_fontDB[idx]; ok {
		_ = lyric_fontDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLyric_fontid_atBckpTime_newID map[uint]uint
