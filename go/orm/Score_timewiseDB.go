// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Score_timewise_sql sql.NullBool
var dummy_Score_timewise_time time.Duration
var dummy_Score_timewise_sort sort.Float64Slice

// Score_timewiseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model score_timewiseAPI
type Score_timewiseAPI struct {
	gorm.Model

	models.Score_timewise_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Score_timewisePointersEncoding Score_timewisePointersEncoding
}

// Score_timewisePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Score_timewisePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Score_timewiseDB describes a score_timewise in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model score_timewiseDB
type Score_timewiseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field score_timewiseDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Score_timewisePointersEncoding
}

// Score_timewiseDBs arrays score_timewiseDBs
// swagger:response score_timewiseDBsResponse
type Score_timewiseDBs []Score_timewiseDB

// Score_timewiseDBResponse provides response
// swagger:response score_timewiseDBResponse
type Score_timewiseDBResponse struct {
	Score_timewiseDB
}

// Score_timewiseWOP is a Score_timewise without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Score_timewiseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Score_timewise_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoScore_timewiseStruct struct {
	// stores Score_timewiseDB according to their gorm ID
	Map_Score_timewiseDBID_Score_timewiseDB map[uint]*Score_timewiseDB

	// stores Score_timewiseDB ID according to Score_timewise address
	Map_Score_timewisePtr_Score_timewiseDBID map[*models.Score_timewise]uint

	// stores Score_timewise according to their gorm ID
	Map_Score_timewiseDBID_Score_timewisePtr map[uint]*models.Score_timewise

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoScore_timewise *BackRepoScore_timewiseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoScore_timewise.stage
	return
}

func (backRepoScore_timewise *BackRepoScore_timewiseStruct) GetDB() *gorm.DB {
	return backRepoScore_timewise.db
}

// GetScore_timewiseDBFromScore_timewisePtr is a handy function to access the back repo instance from the stage instance
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) GetScore_timewiseDBFromScore_timewisePtr(score_timewise *models.Score_timewise) (score_timewiseDB *Score_timewiseDB) {
	id := backRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise]
	score_timewiseDB = backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[id]
	return
}

// BackRepoScore_timewise.CommitPhaseOne commits all staged instances of Score_timewise to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for score_timewise := range stage.Score_timewises {
		backRepoScore_timewise.CommitPhaseOneInstance(score_timewise)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, score_timewise := range backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr {
		if _, ok := stage.Score_timewises[score_timewise]; !ok {
			backRepoScore_timewise.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoScore_timewise.CommitDeleteInstance commits deletion of Score_timewise to the BackRepo
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CommitDeleteInstance(id uint) (Error error) {

	score_timewise := backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr[id]

	// score_timewise is not staged anymore, remove score_timewiseDB
	score_timewiseDB := backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[id]
	query := backRepoScore_timewise.db.Unscoped().Delete(&score_timewiseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID, score_timewise)
	delete(backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr, id)
	delete(backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB, id)

	return
}

// BackRepoScore_timewise.CommitPhaseOneInstance commits score_timewise staged instances of Score_timewise to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CommitPhaseOneInstance(score_timewise *models.Score_timewise) (Error error) {

	// check if the score_timewise is not commited yet
	if _, ok := backRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise]; ok {
		return
	}

	// initiate score_timewise
	var score_timewiseDB Score_timewiseDB
	score_timewiseDB.CopyBasicFieldsFromScore_timewise(score_timewise)

	query := backRepoScore_timewise.db.Create(&score_timewiseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise] = score_timewiseDB.ID
	backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr[score_timewiseDB.ID] = score_timewise
	backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[score_timewiseDB.ID] = &score_timewiseDB

	return
}

// BackRepoScore_timewise.CommitPhaseTwo commits all staged instances of Score_timewise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, score_timewise := range backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr {
		backRepoScore_timewise.CommitPhaseTwoInstance(backRepo, idx, score_timewise)
	}

	return
}

// BackRepoScore_timewise.CommitPhaseTwoInstance commits {{structname }} of models.Score_timewise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, score_timewise *models.Score_timewise) (Error error) {

	// fetch matching score_timewiseDB
	if score_timewiseDB, ok := backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[idx]; ok {

		score_timewiseDB.CopyBasicFieldsFromScore_timewise(score_timewise)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoScore_timewise.db.Save(&score_timewiseDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Score_timewise intance %s", score_timewise.Name))
		return err
	}

	return
}

// BackRepoScore_timewise.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CheckoutPhaseOne() (Error error) {

	score_timewiseDBArray := make([]Score_timewiseDB, 0)
	query := backRepoScore_timewise.db.Find(&score_timewiseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	score_timewiseInstancesToBeRemovedFromTheStage := make(map[*models.Score_timewise]any)
	for key, value := range backRepoScore_timewise.stage.Score_timewises {
		score_timewiseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, score_timewiseDB := range score_timewiseDBArray {
		backRepoScore_timewise.CheckoutPhaseOneInstance(&score_timewiseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		score_timewise, ok := backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr[score_timewiseDB.ID]
		if ok {
			delete(score_timewiseInstancesToBeRemovedFromTheStage, score_timewise)
		}
	}

	// remove from stage and back repo's 3 maps all score_timewises that are not in the checkout
	for score_timewise := range score_timewiseInstancesToBeRemovedFromTheStage {
		score_timewise.Unstage(backRepoScore_timewise.GetStage())

		// remove instance from the back repo 3 maps
		score_timewiseID := backRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise]
		delete(backRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID, score_timewise)
		delete(backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB, score_timewiseID)
		delete(backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr, score_timewiseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a score_timewiseDB that has been found in the DB, updates the backRepo and stages the
// models version of the score_timewiseDB
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CheckoutPhaseOneInstance(score_timewiseDB *Score_timewiseDB) (Error error) {

	score_timewise, ok := backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr[score_timewiseDB.ID]
	if !ok {
		score_timewise = new(models.Score_timewise)

		backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr[score_timewiseDB.ID] = score_timewise
		backRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise] = score_timewiseDB.ID

		// append model store with the new element
		score_timewise.Name = score_timewiseDB.Name_Data.String
		score_timewise.Stage(backRepoScore_timewise.GetStage())
	}
	score_timewiseDB.CopyBasicFieldsToScore_timewise(score_timewise)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	score_timewise.Stage(backRepoScore_timewise.GetStage())

	// preserve pointer to score_timewiseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Score_timewiseDBID_Score_timewiseDB)[score_timewiseDB hold variable pointers
	score_timewiseDB_Data := *score_timewiseDB
	preservedPtrToScore_timewise := &score_timewiseDB_Data
	backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[score_timewiseDB.ID] = preservedPtrToScore_timewise

	return
}

// BackRepoScore_timewise.CheckoutPhaseTwo Checkouts all staged instances of Score_timewise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, score_timewiseDB := range backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB {
		backRepoScore_timewise.CheckoutPhaseTwoInstance(backRepo, score_timewiseDB)
	}
	return
}

// BackRepoScore_timewise.CheckoutPhaseTwoInstance Checkouts staged instances of Score_timewise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, score_timewiseDB *Score_timewiseDB) (Error error) {

	score_timewise := backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr[score_timewiseDB.ID]

	score_timewiseDB.DecodePointers(backRepo, score_timewise)

	return
}

func (score_timewiseDB *Score_timewiseDB) DecodePointers(backRepo *BackRepoStruct, score_timewise *models.Score_timewise) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitScore_timewise allows commit of a single score_timewise (if already staged)
func (backRepo *BackRepoStruct) CommitScore_timewise(score_timewise *models.Score_timewise) {
	backRepo.BackRepoScore_timewise.CommitPhaseOneInstance(score_timewise)
	if id, ok := backRepo.BackRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise]; ok {
		backRepo.BackRepoScore_timewise.CommitPhaseTwoInstance(backRepo, id, score_timewise)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitScore_timewise allows checkout of a single score_timewise (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutScore_timewise(score_timewise *models.Score_timewise) {
	// check if the score_timewise is staged
	if _, ok := backRepo.BackRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise]; ok {

		if id, ok := backRepo.BackRepoScore_timewise.Map_Score_timewisePtr_Score_timewiseDBID[score_timewise]; ok {
			var score_timewiseDB Score_timewiseDB
			score_timewiseDB.ID = id

			if err := backRepo.BackRepoScore_timewise.db.First(&score_timewiseDB, id).Error; err != nil {
				log.Fatalln("CheckoutScore_timewise : Problem with getting object with id:", id)
			}
			backRepo.BackRepoScore_timewise.CheckoutPhaseOneInstance(&score_timewiseDB)
			backRepo.BackRepoScore_timewise.CheckoutPhaseTwoInstance(backRepo, &score_timewiseDB)
		}
	}
}

// CopyBasicFieldsFromScore_timewise
func (score_timewiseDB *Score_timewiseDB) CopyBasicFieldsFromScore_timewise(score_timewise *models.Score_timewise) {
	// insertion point for fields commit

	score_timewiseDB.Name_Data.String = score_timewise.Name
	score_timewiseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScore_timewise_WOP
func (score_timewiseDB *Score_timewiseDB) CopyBasicFieldsFromScore_timewise_WOP(score_timewise *models.Score_timewise_WOP) {
	// insertion point for fields commit

	score_timewiseDB.Name_Data.String = score_timewise.Name
	score_timewiseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScore_timewiseWOP
func (score_timewiseDB *Score_timewiseDB) CopyBasicFieldsFromScore_timewiseWOP(score_timewise *Score_timewiseWOP) {
	// insertion point for fields commit

	score_timewiseDB.Name_Data.String = score_timewise.Name
	score_timewiseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToScore_timewise
func (score_timewiseDB *Score_timewiseDB) CopyBasicFieldsToScore_timewise(score_timewise *models.Score_timewise) {
	// insertion point for checkout of basic fields (back repo to stage)
	score_timewise.Name = score_timewiseDB.Name_Data.String
}

// CopyBasicFieldsToScore_timewise_WOP
func (score_timewiseDB *Score_timewiseDB) CopyBasicFieldsToScore_timewise_WOP(score_timewise *models.Score_timewise_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	score_timewise.Name = score_timewiseDB.Name_Data.String
}

// CopyBasicFieldsToScore_timewiseWOP
func (score_timewiseDB *Score_timewiseDB) CopyBasicFieldsToScore_timewiseWOP(score_timewise *Score_timewiseWOP) {
	score_timewise.ID = int(score_timewiseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	score_timewise.Name = score_timewiseDB.Name_Data.String
}

// Backup generates a json file from a slice of all Score_timewiseDB instances in the backrepo
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Score_timewiseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Score_timewiseDB, 0)
	for _, score_timewiseDB := range backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB {
		forBackup = append(forBackup, score_timewiseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Score_timewise ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Score_timewise file", err.Error())
	}
}

// Backup generates a json file from a slice of all Score_timewiseDB instances in the backrepo
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Score_timewiseDB, 0)
	for _, score_timewiseDB := range backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB {
		forBackup = append(forBackup, score_timewiseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Score_timewise")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Score_timewise_Fields, -1)
	for _, score_timewiseDB := range forBackup {

		var score_timewiseWOP Score_timewiseWOP
		score_timewiseDB.CopyBasicFieldsToScore_timewiseWOP(&score_timewiseWOP)

		row := sh.AddRow()
		row.WriteStruct(&score_timewiseWOP, -1)
	}
}

// RestoreXL from the "Score_timewise" sheet all Score_timewiseDB instances
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoScore_timewiseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Score_timewise"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoScore_timewise.rowVisitorScore_timewise)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoScore_timewise *BackRepoScore_timewiseStruct) rowVisitorScore_timewise(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var score_timewiseWOP Score_timewiseWOP
		row.ReadStruct(&score_timewiseWOP)

		// add the unmarshalled struct to the stage
		score_timewiseDB := new(Score_timewiseDB)
		score_timewiseDB.CopyBasicFieldsFromScore_timewiseWOP(&score_timewiseWOP)

		score_timewiseDB_ID_atBackupTime := score_timewiseDB.ID
		score_timewiseDB.ID = 0
		query := backRepoScore_timewise.db.Create(score_timewiseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[score_timewiseDB.ID] = score_timewiseDB
		BackRepoScore_timewiseid_atBckpTime_newID[score_timewiseDB_ID_atBackupTime] = score_timewiseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Score_timewiseDB.json" in dirPath that stores an array
// of Score_timewiseDB and stores it in the database
// the map BackRepoScore_timewiseid_atBckpTime_newID is updated accordingly
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoScore_timewiseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Score_timewiseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Score_timewise file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Score_timewiseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Score_timewiseDBID_Score_timewiseDB
	for _, score_timewiseDB := range forRestore {

		score_timewiseDB_ID_atBackupTime := score_timewiseDB.ID
		score_timewiseDB.ID = 0
		query := backRepoScore_timewise.db.Create(score_timewiseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[score_timewiseDB.ID] = score_timewiseDB
		BackRepoScore_timewiseid_atBckpTime_newID[score_timewiseDB_ID_atBackupTime] = score_timewiseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Score_timewise file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Score_timewise>id_atBckpTime_newID
// to compute new index
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) RestorePhaseTwo() {

	for _, score_timewiseDB := range backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB {

		// next line of code is to avert unused variable compilation error
		_ = score_timewiseDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoScore_timewise.db.Model(score_timewiseDB).Updates(*score_timewiseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoScore_timewise.ResetReversePointers commits all staged instances of Score_timewise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_timewise *BackRepoScore_timewiseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, score_timewise := range backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewisePtr {
		backRepoScore_timewise.ResetReversePointersInstance(backRepo, idx, score_timewise)
	}

	return
}

func (backRepoScore_timewise *BackRepoScore_timewiseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, score_timewise *models.Score_timewise) (Error error) {

	// fetch matching score_timewiseDB
	if score_timewiseDB, ok := backRepoScore_timewise.Map_Score_timewiseDBID_Score_timewiseDB[idx]; ok {
		_ = score_timewiseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoScore_timewiseid_atBckpTime_newID map[uint]uint
