// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Degree_type_sql sql.NullBool
var dummy_Degree_type_time time.Duration
var dummy_Degree_type_sort sort.Float64Slice

// Degree_typeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model degree_typeAPI
type Degree_typeAPI struct {
	gorm.Model

	models.Degree_type_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Degree_typePointersEncoding Degree_typePointersEncoding
}

// Degree_typePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Degree_typePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Degree_typeDB describes a degree_type in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model degree_typeDB
type Degree_typeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field degree_typeDB.Name
	Name_Data sql.NullString

	// Declation for basic field degree_typeDB.Text
	Text_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Degree_typePointersEncoding
}

// Degree_typeDBs arrays degree_typeDBs
// swagger:response degree_typeDBsResponse
type Degree_typeDBs []Degree_typeDB

// Degree_typeDBResponse provides response
// swagger:response degree_typeDBResponse
type Degree_typeDBResponse struct {
	Degree_typeDB
}

// Degree_typeWOP is a Degree_type without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Degree_typeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Degree_type_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoDegree_typeStruct struct {
	// stores Degree_typeDB according to their gorm ID
	Map_Degree_typeDBID_Degree_typeDB map[uint]*Degree_typeDB

	// stores Degree_typeDB ID according to Degree_type address
	Map_Degree_typePtr_Degree_typeDBID map[*models.Degree_type]uint

	// stores Degree_type according to their gorm ID
	Map_Degree_typeDBID_Degree_typePtr map[uint]*models.Degree_type

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDegree_type *BackRepoDegree_typeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDegree_type.stage
	return
}

func (backRepoDegree_type *BackRepoDegree_typeStruct) GetDB() *gorm.DB {
	return backRepoDegree_type.db
}

// GetDegree_typeDBFromDegree_typePtr is a handy function to access the back repo instance from the stage instance
func (backRepoDegree_type *BackRepoDegree_typeStruct) GetDegree_typeDBFromDegree_typePtr(degree_type *models.Degree_type) (degree_typeDB *Degree_typeDB) {
	id := backRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type]
	degree_typeDB = backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[id]
	return
}

// BackRepoDegree_type.CommitPhaseOne commits all staged instances of Degree_type to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree_type *BackRepoDegree_typeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for degree_type := range stage.Degree_types {
		backRepoDegree_type.CommitPhaseOneInstance(degree_type)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, degree_type := range backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr {
		if _, ok := stage.Degree_types[degree_type]; !ok {
			backRepoDegree_type.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDegree_type.CommitDeleteInstance commits deletion of Degree_type to the BackRepo
func (backRepoDegree_type *BackRepoDegree_typeStruct) CommitDeleteInstance(id uint) (Error error) {

	degree_type := backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr[id]

	// degree_type is not staged anymore, remove degree_typeDB
	degree_typeDB := backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[id]
	query := backRepoDegree_type.db.Unscoped().Delete(&degree_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID, degree_type)
	delete(backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr, id)
	delete(backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB, id)

	return
}

// BackRepoDegree_type.CommitPhaseOneInstance commits degree_type staged instances of Degree_type to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree_type *BackRepoDegree_typeStruct) CommitPhaseOneInstance(degree_type *models.Degree_type) (Error error) {

	// check if the degree_type is not commited yet
	if _, ok := backRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type]; ok {
		return
	}

	// initiate degree_type
	var degree_typeDB Degree_typeDB
	degree_typeDB.CopyBasicFieldsFromDegree_type(degree_type)

	query := backRepoDegree_type.db.Create(&degree_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type] = degree_typeDB.ID
	backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr[degree_typeDB.ID] = degree_type
	backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[degree_typeDB.ID] = &degree_typeDB

	return
}

// BackRepoDegree_type.CommitPhaseTwo commits all staged instances of Degree_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_type *BackRepoDegree_typeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, degree_type := range backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr {
		backRepoDegree_type.CommitPhaseTwoInstance(backRepo, idx, degree_type)
	}

	return
}

// BackRepoDegree_type.CommitPhaseTwoInstance commits {{structname }} of models.Degree_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_type *BackRepoDegree_typeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, degree_type *models.Degree_type) (Error error) {

	// fetch matching degree_typeDB
	if degree_typeDB, ok := backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[idx]; ok {

		degree_typeDB.CopyBasicFieldsFromDegree_type(degree_type)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDegree_type.db.Save(&degree_typeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Degree_type intance %s", degree_type.Name))
		return err
	}

	return
}

// BackRepoDegree_type.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDegree_type *BackRepoDegree_typeStruct) CheckoutPhaseOne() (Error error) {

	degree_typeDBArray := make([]Degree_typeDB, 0)
	query := backRepoDegree_type.db.Find(&degree_typeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	degree_typeInstancesToBeRemovedFromTheStage := make(map[*models.Degree_type]any)
	for key, value := range backRepoDegree_type.stage.Degree_types {
		degree_typeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, degree_typeDB := range degree_typeDBArray {
		backRepoDegree_type.CheckoutPhaseOneInstance(&degree_typeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		degree_type, ok := backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr[degree_typeDB.ID]
		if ok {
			delete(degree_typeInstancesToBeRemovedFromTheStage, degree_type)
		}
	}

	// remove from stage and back repo's 3 maps all degree_types that are not in the checkout
	for degree_type := range degree_typeInstancesToBeRemovedFromTheStage {
		degree_type.Unstage(backRepoDegree_type.GetStage())

		// remove instance from the back repo 3 maps
		degree_typeID := backRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type]
		delete(backRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID, degree_type)
		delete(backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB, degree_typeID)
		delete(backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr, degree_typeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a degree_typeDB that has been found in the DB, updates the backRepo and stages the
// models version of the degree_typeDB
func (backRepoDegree_type *BackRepoDegree_typeStruct) CheckoutPhaseOneInstance(degree_typeDB *Degree_typeDB) (Error error) {

	degree_type, ok := backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr[degree_typeDB.ID]
	if !ok {
		degree_type = new(models.Degree_type)

		backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr[degree_typeDB.ID] = degree_type
		backRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type] = degree_typeDB.ID

		// append model store with the new element
		degree_type.Name = degree_typeDB.Name_Data.String
		degree_type.Stage(backRepoDegree_type.GetStage())
	}
	degree_typeDB.CopyBasicFieldsToDegree_type(degree_type)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	degree_type.Stage(backRepoDegree_type.GetStage())

	// preserve pointer to degree_typeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Degree_typeDBID_Degree_typeDB)[degree_typeDB hold variable pointers
	degree_typeDB_Data := *degree_typeDB
	preservedPtrToDegree_type := &degree_typeDB_Data
	backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[degree_typeDB.ID] = preservedPtrToDegree_type

	return
}

// BackRepoDegree_type.CheckoutPhaseTwo Checkouts all staged instances of Degree_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_type *BackRepoDegree_typeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, degree_typeDB := range backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB {
		backRepoDegree_type.CheckoutPhaseTwoInstance(backRepo, degree_typeDB)
	}
	return
}

// BackRepoDegree_type.CheckoutPhaseTwoInstance Checkouts staged instances of Degree_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_type *BackRepoDegree_typeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, degree_typeDB *Degree_typeDB) (Error error) {

	degree_type := backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr[degree_typeDB.ID]

	degree_typeDB.DecodePointers(backRepo, degree_type)

	return
}

func (degree_typeDB *Degree_typeDB) DecodePointers(backRepo *BackRepoStruct, degree_type *models.Degree_type) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDegree_type allows commit of a single degree_type (if already staged)
func (backRepo *BackRepoStruct) CommitDegree_type(degree_type *models.Degree_type) {
	backRepo.BackRepoDegree_type.CommitPhaseOneInstance(degree_type)
	if id, ok := backRepo.BackRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type]; ok {
		backRepo.BackRepoDegree_type.CommitPhaseTwoInstance(backRepo, id, degree_type)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDegree_type allows checkout of a single degree_type (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDegree_type(degree_type *models.Degree_type) {
	// check if the degree_type is staged
	if _, ok := backRepo.BackRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type]; ok {

		if id, ok := backRepo.BackRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree_type]; ok {
			var degree_typeDB Degree_typeDB
			degree_typeDB.ID = id

			if err := backRepo.BackRepoDegree_type.db.First(&degree_typeDB, id).Error; err != nil {
				log.Fatalln("CheckoutDegree_type : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDegree_type.CheckoutPhaseOneInstance(&degree_typeDB)
			backRepo.BackRepoDegree_type.CheckoutPhaseTwoInstance(backRepo, &degree_typeDB)
		}
	}
}

// CopyBasicFieldsFromDegree_type
func (degree_typeDB *Degree_typeDB) CopyBasicFieldsFromDegree_type(degree_type *models.Degree_type) {
	// insertion point for fields commit

	degree_typeDB.Name_Data.String = degree_type.Name
	degree_typeDB.Name_Data.Valid = true

	degree_typeDB.Text_Data.String = degree_type.Text
	degree_typeDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromDegree_type_WOP
func (degree_typeDB *Degree_typeDB) CopyBasicFieldsFromDegree_type_WOP(degree_type *models.Degree_type_WOP) {
	// insertion point for fields commit

	degree_typeDB.Name_Data.String = degree_type.Name
	degree_typeDB.Name_Data.Valid = true

	degree_typeDB.Text_Data.String = degree_type.Text
	degree_typeDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromDegree_typeWOP
func (degree_typeDB *Degree_typeDB) CopyBasicFieldsFromDegree_typeWOP(degree_type *Degree_typeWOP) {
	// insertion point for fields commit

	degree_typeDB.Name_Data.String = degree_type.Name
	degree_typeDB.Name_Data.Valid = true

	degree_typeDB.Text_Data.String = degree_type.Text
	degree_typeDB.Text_Data.Valid = true
}

// CopyBasicFieldsToDegree_type
func (degree_typeDB *Degree_typeDB) CopyBasicFieldsToDegree_type(degree_type *models.Degree_type) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree_type.Name = degree_typeDB.Name_Data.String
	degree_type.Text = degree_typeDB.Text_Data.String
}

// CopyBasicFieldsToDegree_type_WOP
func (degree_typeDB *Degree_typeDB) CopyBasicFieldsToDegree_type_WOP(degree_type *models.Degree_type_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree_type.Name = degree_typeDB.Name_Data.String
	degree_type.Text = degree_typeDB.Text_Data.String
}

// CopyBasicFieldsToDegree_typeWOP
func (degree_typeDB *Degree_typeDB) CopyBasicFieldsToDegree_typeWOP(degree_type *Degree_typeWOP) {
	degree_type.ID = int(degree_typeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	degree_type.Name = degree_typeDB.Name_Data.String
	degree_type.Text = degree_typeDB.Text_Data.String
}

// Backup generates a json file from a slice of all Degree_typeDB instances in the backrepo
func (backRepoDegree_type *BackRepoDegree_typeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Degree_typeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Degree_typeDB, 0)
	for _, degree_typeDB := range backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB {
		forBackup = append(forBackup, degree_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Degree_type ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Degree_type file", err.Error())
	}
}

// Backup generates a json file from a slice of all Degree_typeDB instances in the backrepo
func (backRepoDegree_type *BackRepoDegree_typeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Degree_typeDB, 0)
	for _, degree_typeDB := range backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB {
		forBackup = append(forBackup, degree_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Degree_type")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Degree_type_Fields, -1)
	for _, degree_typeDB := range forBackup {

		var degree_typeWOP Degree_typeWOP
		degree_typeDB.CopyBasicFieldsToDegree_typeWOP(&degree_typeWOP)

		row := sh.AddRow()
		row.WriteStruct(&degree_typeWOP, -1)
	}
}

// RestoreXL from the "Degree_type" sheet all Degree_typeDB instances
func (backRepoDegree_type *BackRepoDegree_typeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDegree_typeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Degree_type"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDegree_type.rowVisitorDegree_type)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDegree_type *BackRepoDegree_typeStruct) rowVisitorDegree_type(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var degree_typeWOP Degree_typeWOP
		row.ReadStruct(&degree_typeWOP)

		// add the unmarshalled struct to the stage
		degree_typeDB := new(Degree_typeDB)
		degree_typeDB.CopyBasicFieldsFromDegree_typeWOP(&degree_typeWOP)

		degree_typeDB_ID_atBackupTime := degree_typeDB.ID
		degree_typeDB.ID = 0
		query := backRepoDegree_type.db.Create(degree_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[degree_typeDB.ID] = degree_typeDB
		BackRepoDegree_typeid_atBckpTime_newID[degree_typeDB_ID_atBackupTime] = degree_typeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Degree_typeDB.json" in dirPath that stores an array
// of Degree_typeDB and stores it in the database
// the map BackRepoDegree_typeid_atBckpTime_newID is updated accordingly
func (backRepoDegree_type *BackRepoDegree_typeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDegree_typeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Degree_typeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Degree_type file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Degree_typeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Degree_typeDBID_Degree_typeDB
	for _, degree_typeDB := range forRestore {

		degree_typeDB_ID_atBackupTime := degree_typeDB.ID
		degree_typeDB.ID = 0
		query := backRepoDegree_type.db.Create(degree_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[degree_typeDB.ID] = degree_typeDB
		BackRepoDegree_typeid_atBckpTime_newID[degree_typeDB_ID_atBackupTime] = degree_typeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Degree_type file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Degree_type>id_atBckpTime_newID
// to compute new index
func (backRepoDegree_type *BackRepoDegree_typeStruct) RestorePhaseTwo() {

	for _, degree_typeDB := range backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB {

		// next line of code is to avert unused variable compilation error
		_ = degree_typeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDegree_type.db.Model(degree_typeDB).Updates(*degree_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDegree_type.ResetReversePointers commits all staged instances of Degree_type to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree_type *BackRepoDegree_typeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, degree_type := range backRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr {
		backRepoDegree_type.ResetReversePointersInstance(backRepo, idx, degree_type)
	}

	return
}

func (backRepoDegree_type *BackRepoDegree_typeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, degree_type *models.Degree_type) (Error error) {

	// fetch matching degree_typeDB
	if degree_typeDB, ok := backRepoDegree_type.Map_Degree_typeDBID_Degree_typeDB[idx]; ok {
		_ = degree_typeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDegree_typeid_atBckpTime_newID map[uint]uint
