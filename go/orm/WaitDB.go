// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Wait_sql sql.NullBool
var dummy_Wait_time time.Duration
var dummy_Wait_sort sort.Float64Slice

// WaitAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model waitAPI
type WaitAPI struct {
	gorm.Model

	models.Wait_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	WaitPointersEncoding WaitPointersEncoding
}

// WaitPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type WaitPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// WaitDB describes a wait in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model waitDB
type WaitDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field waitDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	WaitPointersEncoding
}

// WaitDBs arrays waitDBs
// swagger:response waitDBsResponse
type WaitDBs []WaitDB

// WaitDBResponse provides response
// swagger:response waitDBResponse
type WaitDBResponse struct {
	WaitDB
}

// WaitWOP is a Wait without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type WaitWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Wait_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoWaitStruct struct {
	// stores WaitDB according to their gorm ID
	Map_WaitDBID_WaitDB map[uint]*WaitDB

	// stores WaitDB ID according to Wait address
	Map_WaitPtr_WaitDBID map[*models.Wait]uint

	// stores Wait according to their gorm ID
	Map_WaitDBID_WaitPtr map[uint]*models.Wait

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoWait *BackRepoWaitStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoWait.stage
	return
}

func (backRepoWait *BackRepoWaitStruct) GetDB() *gorm.DB {
	return backRepoWait.db
}

// GetWaitDBFromWaitPtr is a handy function to access the back repo instance from the stage instance
func (backRepoWait *BackRepoWaitStruct) GetWaitDBFromWaitPtr(wait *models.Wait) (waitDB *WaitDB) {
	id := backRepoWait.Map_WaitPtr_WaitDBID[wait]
	waitDB = backRepoWait.Map_WaitDBID_WaitDB[id]
	return
}

// BackRepoWait.CommitPhaseOne commits all staged instances of Wait to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWait *BackRepoWaitStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for wait := range stage.Waits {
		backRepoWait.CommitPhaseOneInstance(wait)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, wait := range backRepoWait.Map_WaitDBID_WaitPtr {
		if _, ok := stage.Waits[wait]; !ok {
			backRepoWait.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWait.CommitDeleteInstance commits deletion of Wait to the BackRepo
func (backRepoWait *BackRepoWaitStruct) CommitDeleteInstance(id uint) (Error error) {

	wait := backRepoWait.Map_WaitDBID_WaitPtr[id]

	// wait is not staged anymore, remove waitDB
	waitDB := backRepoWait.Map_WaitDBID_WaitDB[id]
	query := backRepoWait.db.Unscoped().Delete(&waitDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoWait.Map_WaitPtr_WaitDBID, wait)
	delete(backRepoWait.Map_WaitDBID_WaitPtr, id)
	delete(backRepoWait.Map_WaitDBID_WaitDB, id)

	return
}

// BackRepoWait.CommitPhaseOneInstance commits wait staged instances of Wait to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWait *BackRepoWaitStruct) CommitPhaseOneInstance(wait *models.Wait) (Error error) {

	// check if the wait is not commited yet
	if _, ok := backRepoWait.Map_WaitPtr_WaitDBID[wait]; ok {
		return
	}

	// initiate wait
	var waitDB WaitDB
	waitDB.CopyBasicFieldsFromWait(wait)

	query := backRepoWait.db.Create(&waitDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoWait.Map_WaitPtr_WaitDBID[wait] = waitDB.ID
	backRepoWait.Map_WaitDBID_WaitPtr[waitDB.ID] = wait
	backRepoWait.Map_WaitDBID_WaitDB[waitDB.ID] = &waitDB

	return
}

// BackRepoWait.CommitPhaseTwo commits all staged instances of Wait to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWait *BackRepoWaitStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, wait := range backRepoWait.Map_WaitDBID_WaitPtr {
		backRepoWait.CommitPhaseTwoInstance(backRepo, idx, wait)
	}

	return
}

// BackRepoWait.CommitPhaseTwoInstance commits {{structname }} of models.Wait to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWait *BackRepoWaitStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, wait *models.Wait) (Error error) {

	// fetch matching waitDB
	if waitDB, ok := backRepoWait.Map_WaitDBID_WaitDB[idx]; ok {

		waitDB.CopyBasicFieldsFromWait(wait)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoWait.db.Save(&waitDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Wait intance %s", wait.Name))
		return err
	}

	return
}

// BackRepoWait.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoWait *BackRepoWaitStruct) CheckoutPhaseOne() (Error error) {

	waitDBArray := make([]WaitDB, 0)
	query := backRepoWait.db.Find(&waitDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	waitInstancesToBeRemovedFromTheStage := make(map[*models.Wait]any)
	for key, value := range backRepoWait.stage.Waits {
		waitInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, waitDB := range waitDBArray {
		backRepoWait.CheckoutPhaseOneInstance(&waitDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		wait, ok := backRepoWait.Map_WaitDBID_WaitPtr[waitDB.ID]
		if ok {
			delete(waitInstancesToBeRemovedFromTheStage, wait)
		}
	}

	// remove from stage and back repo's 3 maps all waits that are not in the checkout
	for wait := range waitInstancesToBeRemovedFromTheStage {
		wait.Unstage(backRepoWait.GetStage())

		// remove instance from the back repo 3 maps
		waitID := backRepoWait.Map_WaitPtr_WaitDBID[wait]
		delete(backRepoWait.Map_WaitPtr_WaitDBID, wait)
		delete(backRepoWait.Map_WaitDBID_WaitDB, waitID)
		delete(backRepoWait.Map_WaitDBID_WaitPtr, waitID)
	}

	return
}

// CheckoutPhaseOneInstance takes a waitDB that has been found in the DB, updates the backRepo and stages the
// models version of the waitDB
func (backRepoWait *BackRepoWaitStruct) CheckoutPhaseOneInstance(waitDB *WaitDB) (Error error) {

	wait, ok := backRepoWait.Map_WaitDBID_WaitPtr[waitDB.ID]
	if !ok {
		wait = new(models.Wait)

		backRepoWait.Map_WaitDBID_WaitPtr[waitDB.ID] = wait
		backRepoWait.Map_WaitPtr_WaitDBID[wait] = waitDB.ID

		// append model store with the new element
		wait.Name = waitDB.Name_Data.String
		wait.Stage(backRepoWait.GetStage())
	}
	waitDB.CopyBasicFieldsToWait(wait)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	wait.Stage(backRepoWait.GetStage())

	// preserve pointer to waitDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_WaitDBID_WaitDB)[waitDB hold variable pointers
	waitDB_Data := *waitDB
	preservedPtrToWait := &waitDB_Data
	backRepoWait.Map_WaitDBID_WaitDB[waitDB.ID] = preservedPtrToWait

	return
}

// BackRepoWait.CheckoutPhaseTwo Checkouts all staged instances of Wait to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWait *BackRepoWaitStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, waitDB := range backRepoWait.Map_WaitDBID_WaitDB {
		backRepoWait.CheckoutPhaseTwoInstance(backRepo, waitDB)
	}
	return
}

// BackRepoWait.CheckoutPhaseTwoInstance Checkouts staged instances of Wait to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWait *BackRepoWaitStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, waitDB *WaitDB) (Error error) {

	wait := backRepoWait.Map_WaitDBID_WaitPtr[waitDB.ID]

	waitDB.DecodePointers(backRepo, wait)

	return
}

func (waitDB *WaitDB) DecodePointers(backRepo *BackRepoStruct, wait *models.Wait) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitWait allows commit of a single wait (if already staged)
func (backRepo *BackRepoStruct) CommitWait(wait *models.Wait) {
	backRepo.BackRepoWait.CommitPhaseOneInstance(wait)
	if id, ok := backRepo.BackRepoWait.Map_WaitPtr_WaitDBID[wait]; ok {
		backRepo.BackRepoWait.CommitPhaseTwoInstance(backRepo, id, wait)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitWait allows checkout of a single wait (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWait(wait *models.Wait) {
	// check if the wait is staged
	if _, ok := backRepo.BackRepoWait.Map_WaitPtr_WaitDBID[wait]; ok {

		if id, ok := backRepo.BackRepoWait.Map_WaitPtr_WaitDBID[wait]; ok {
			var waitDB WaitDB
			waitDB.ID = id

			if err := backRepo.BackRepoWait.db.First(&waitDB, id).Error; err != nil {
				log.Fatalln("CheckoutWait : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWait.CheckoutPhaseOneInstance(&waitDB)
			backRepo.BackRepoWait.CheckoutPhaseTwoInstance(backRepo, &waitDB)
		}
	}
}

// CopyBasicFieldsFromWait
func (waitDB *WaitDB) CopyBasicFieldsFromWait(wait *models.Wait) {
	// insertion point for fields commit

	waitDB.Name_Data.String = wait.Name
	waitDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWait_WOP
func (waitDB *WaitDB) CopyBasicFieldsFromWait_WOP(wait *models.Wait_WOP) {
	// insertion point for fields commit

	waitDB.Name_Data.String = wait.Name
	waitDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWaitWOP
func (waitDB *WaitDB) CopyBasicFieldsFromWaitWOP(wait *WaitWOP) {
	// insertion point for fields commit

	waitDB.Name_Data.String = wait.Name
	waitDB.Name_Data.Valid = true
}

// CopyBasicFieldsToWait
func (waitDB *WaitDB) CopyBasicFieldsToWait(wait *models.Wait) {
	// insertion point for checkout of basic fields (back repo to stage)
	wait.Name = waitDB.Name_Data.String
}

// CopyBasicFieldsToWait_WOP
func (waitDB *WaitDB) CopyBasicFieldsToWait_WOP(wait *models.Wait_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	wait.Name = waitDB.Name_Data.String
}

// CopyBasicFieldsToWaitWOP
func (waitDB *WaitDB) CopyBasicFieldsToWaitWOP(wait *WaitWOP) {
	wait.ID = int(waitDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	wait.Name = waitDB.Name_Data.String
}

// Backup generates a json file from a slice of all WaitDB instances in the backrepo
func (backRepoWait *BackRepoWaitStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "WaitDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WaitDB, 0)
	for _, waitDB := range backRepoWait.Map_WaitDBID_WaitDB {
		forBackup = append(forBackup, waitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Wait ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Wait file", err.Error())
	}
}

// Backup generates a json file from a slice of all WaitDB instances in the backrepo
func (backRepoWait *BackRepoWaitStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WaitDB, 0)
	for _, waitDB := range backRepoWait.Map_WaitDBID_WaitDB {
		forBackup = append(forBackup, waitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Wait")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Wait_Fields, -1)
	for _, waitDB := range forBackup {

		var waitWOP WaitWOP
		waitDB.CopyBasicFieldsToWaitWOP(&waitWOP)

		row := sh.AddRow()
		row.WriteStruct(&waitWOP, -1)
	}
}

// RestoreXL from the "Wait" sheet all WaitDB instances
func (backRepoWait *BackRepoWaitStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoWaitid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Wait"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoWait.rowVisitorWait)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoWait *BackRepoWaitStruct) rowVisitorWait(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var waitWOP WaitWOP
		row.ReadStruct(&waitWOP)

		// add the unmarshalled struct to the stage
		waitDB := new(WaitDB)
		waitDB.CopyBasicFieldsFromWaitWOP(&waitWOP)

		waitDB_ID_atBackupTime := waitDB.ID
		waitDB.ID = 0
		query := backRepoWait.db.Create(waitDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWait.Map_WaitDBID_WaitDB[waitDB.ID] = waitDB
		BackRepoWaitid_atBckpTime_newID[waitDB_ID_atBackupTime] = waitDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "WaitDB.json" in dirPath that stores an array
// of WaitDB and stores it in the database
// the map BackRepoWaitid_atBckpTime_newID is updated accordingly
func (backRepoWait *BackRepoWaitStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoWaitid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "WaitDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Wait file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*WaitDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_WaitDBID_WaitDB
	for _, waitDB := range forRestore {

		waitDB_ID_atBackupTime := waitDB.ID
		waitDB.ID = 0
		query := backRepoWait.db.Create(waitDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWait.Map_WaitDBID_WaitDB[waitDB.ID] = waitDB
		BackRepoWaitid_atBckpTime_newID[waitDB_ID_atBackupTime] = waitDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Wait file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Wait>id_atBckpTime_newID
// to compute new index
func (backRepoWait *BackRepoWaitStruct) RestorePhaseTwo() {

	for _, waitDB := range backRepoWait.Map_WaitDBID_WaitDB {

		// next line of code is to avert unused variable compilation error
		_ = waitDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoWait.db.Model(waitDB).Updates(*waitDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoWait.ResetReversePointers commits all staged instances of Wait to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWait *BackRepoWaitStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, wait := range backRepoWait.Map_WaitDBID_WaitPtr {
		backRepoWait.ResetReversePointersInstance(backRepo, idx, wait)
	}

	return
}

func (backRepoWait *BackRepoWaitStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, wait *models.Wait) (Error error) {

	// fetch matching waitDB
	if waitDB, ok := backRepoWait.Map_WaitDBID_WaitDB[idx]; ok {
		_ = waitDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoWaitid_atBckpTime_newID map[uint]uint
