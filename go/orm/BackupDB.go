// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Backup_sql sql.NullBool
var dummy_Backup_time time.Duration
var dummy_Backup_sort sort.Float64Slice

// BackupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model backupAPI
type BackupAPI struct {
	gorm.Model

	models.Backup_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BackupPointersEncoding BackupPointersEncoding
}

// BackupPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BackupPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// BackupDB describes a backup in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model backupDB
type BackupDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field backupDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BackupPointersEncoding
}

// BackupDBs arrays backupDBs
// swagger:response backupDBsResponse
type BackupDBs []BackupDB

// BackupDBResponse provides response
// swagger:response backupDBResponse
type BackupDBResponse struct {
	BackupDB
}

// BackupWOP is a Backup without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BackupWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Backup_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBackupStruct struct {
	// stores BackupDB according to their gorm ID
	Map_BackupDBID_BackupDB map[uint]*BackupDB

	// stores BackupDB ID according to Backup address
	Map_BackupPtr_BackupDBID map[*models.Backup]uint

	// stores Backup according to their gorm ID
	Map_BackupDBID_BackupPtr map[uint]*models.Backup

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBackup *BackRepoBackupStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBackup.stage
	return
}

func (backRepoBackup *BackRepoBackupStruct) GetDB() *gorm.DB {
	return backRepoBackup.db
}

// GetBackupDBFromBackupPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBackup *BackRepoBackupStruct) GetBackupDBFromBackupPtr(backup *models.Backup) (backupDB *BackupDB) {
	id := backRepoBackup.Map_BackupPtr_BackupDBID[backup]
	backupDB = backRepoBackup.Map_BackupDBID_BackupDB[id]
	return
}

// BackRepoBackup.CommitPhaseOne commits all staged instances of Backup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBackup *BackRepoBackupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for backup := range stage.Backups {
		backRepoBackup.CommitPhaseOneInstance(backup)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, backup := range backRepoBackup.Map_BackupDBID_BackupPtr {
		if _, ok := stage.Backups[backup]; !ok {
			backRepoBackup.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBackup.CommitDeleteInstance commits deletion of Backup to the BackRepo
func (backRepoBackup *BackRepoBackupStruct) CommitDeleteInstance(id uint) (Error error) {

	backup := backRepoBackup.Map_BackupDBID_BackupPtr[id]

	// backup is not staged anymore, remove backupDB
	backupDB := backRepoBackup.Map_BackupDBID_BackupDB[id]
	query := backRepoBackup.db.Unscoped().Delete(&backupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBackup.Map_BackupPtr_BackupDBID, backup)
	delete(backRepoBackup.Map_BackupDBID_BackupPtr, id)
	delete(backRepoBackup.Map_BackupDBID_BackupDB, id)

	return
}

// BackRepoBackup.CommitPhaseOneInstance commits backup staged instances of Backup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBackup *BackRepoBackupStruct) CommitPhaseOneInstance(backup *models.Backup) (Error error) {

	// check if the backup is not commited yet
	if _, ok := backRepoBackup.Map_BackupPtr_BackupDBID[backup]; ok {
		return
	}

	// initiate backup
	var backupDB BackupDB
	backupDB.CopyBasicFieldsFromBackup(backup)

	query := backRepoBackup.db.Create(&backupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBackup.Map_BackupPtr_BackupDBID[backup] = backupDB.ID
	backRepoBackup.Map_BackupDBID_BackupPtr[backupDB.ID] = backup
	backRepoBackup.Map_BackupDBID_BackupDB[backupDB.ID] = &backupDB

	return
}

// BackRepoBackup.CommitPhaseTwo commits all staged instances of Backup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBackup *BackRepoBackupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, backup := range backRepoBackup.Map_BackupDBID_BackupPtr {
		backRepoBackup.CommitPhaseTwoInstance(backRepo, idx, backup)
	}

	return
}

// BackRepoBackup.CommitPhaseTwoInstance commits {{structname }} of models.Backup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBackup *BackRepoBackupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, backup *models.Backup) (Error error) {

	// fetch matching backupDB
	if backupDB, ok := backRepoBackup.Map_BackupDBID_BackupDB[idx]; ok {

		backupDB.CopyBasicFieldsFromBackup(backup)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBackup.db.Save(&backupDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Backup intance %s", backup.Name))
		return err
	}

	return
}

// BackRepoBackup.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBackup *BackRepoBackupStruct) CheckoutPhaseOne() (Error error) {

	backupDBArray := make([]BackupDB, 0)
	query := backRepoBackup.db.Find(&backupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	backupInstancesToBeRemovedFromTheStage := make(map[*models.Backup]any)
	for key, value := range backRepoBackup.stage.Backups {
		backupInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, backupDB := range backupDBArray {
		backRepoBackup.CheckoutPhaseOneInstance(&backupDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		backup, ok := backRepoBackup.Map_BackupDBID_BackupPtr[backupDB.ID]
		if ok {
			delete(backupInstancesToBeRemovedFromTheStage, backup)
		}
	}

	// remove from stage and back repo's 3 maps all backups that are not in the checkout
	for backup := range backupInstancesToBeRemovedFromTheStage {
		backup.Unstage(backRepoBackup.GetStage())

		// remove instance from the back repo 3 maps
		backupID := backRepoBackup.Map_BackupPtr_BackupDBID[backup]
		delete(backRepoBackup.Map_BackupPtr_BackupDBID, backup)
		delete(backRepoBackup.Map_BackupDBID_BackupDB, backupID)
		delete(backRepoBackup.Map_BackupDBID_BackupPtr, backupID)
	}

	return
}

// CheckoutPhaseOneInstance takes a backupDB that has been found in the DB, updates the backRepo and stages the
// models version of the backupDB
func (backRepoBackup *BackRepoBackupStruct) CheckoutPhaseOneInstance(backupDB *BackupDB) (Error error) {

	backup, ok := backRepoBackup.Map_BackupDBID_BackupPtr[backupDB.ID]
	if !ok {
		backup = new(models.Backup)

		backRepoBackup.Map_BackupDBID_BackupPtr[backupDB.ID] = backup
		backRepoBackup.Map_BackupPtr_BackupDBID[backup] = backupDB.ID

		// append model store with the new element
		backup.Name = backupDB.Name_Data.String
		backup.Stage(backRepoBackup.GetStage())
	}
	backupDB.CopyBasicFieldsToBackup(backup)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	backup.Stage(backRepoBackup.GetStage())

	// preserve pointer to backupDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BackupDBID_BackupDB)[backupDB hold variable pointers
	backupDB_Data := *backupDB
	preservedPtrToBackup := &backupDB_Data
	backRepoBackup.Map_BackupDBID_BackupDB[backupDB.ID] = preservedPtrToBackup

	return
}

// BackRepoBackup.CheckoutPhaseTwo Checkouts all staged instances of Backup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBackup *BackRepoBackupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, backupDB := range backRepoBackup.Map_BackupDBID_BackupDB {
		backRepoBackup.CheckoutPhaseTwoInstance(backRepo, backupDB)
	}
	return
}

// BackRepoBackup.CheckoutPhaseTwoInstance Checkouts staged instances of Backup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBackup *BackRepoBackupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, backupDB *BackupDB) (Error error) {

	backup := backRepoBackup.Map_BackupDBID_BackupPtr[backupDB.ID]

	backupDB.DecodePointers(backRepo, backup)

	return
}

func (backupDB *BackupDB) DecodePointers(backRepo *BackRepoStruct, backup *models.Backup) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBackup allows commit of a single backup (if already staged)
func (backRepo *BackRepoStruct) CommitBackup(backup *models.Backup) {
	backRepo.BackRepoBackup.CommitPhaseOneInstance(backup)
	if id, ok := backRepo.BackRepoBackup.Map_BackupPtr_BackupDBID[backup]; ok {
		backRepo.BackRepoBackup.CommitPhaseTwoInstance(backRepo, id, backup)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBackup allows checkout of a single backup (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBackup(backup *models.Backup) {
	// check if the backup is staged
	if _, ok := backRepo.BackRepoBackup.Map_BackupPtr_BackupDBID[backup]; ok {

		if id, ok := backRepo.BackRepoBackup.Map_BackupPtr_BackupDBID[backup]; ok {
			var backupDB BackupDB
			backupDB.ID = id

			if err := backRepo.BackRepoBackup.db.First(&backupDB, id).Error; err != nil {
				log.Fatalln("CheckoutBackup : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBackup.CheckoutPhaseOneInstance(&backupDB)
			backRepo.BackRepoBackup.CheckoutPhaseTwoInstance(backRepo, &backupDB)
		}
	}
}

// CopyBasicFieldsFromBackup
func (backupDB *BackupDB) CopyBasicFieldsFromBackup(backup *models.Backup) {
	// insertion point for fields commit

	backupDB.Name_Data.String = backup.Name
	backupDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBackup_WOP
func (backupDB *BackupDB) CopyBasicFieldsFromBackup_WOP(backup *models.Backup_WOP) {
	// insertion point for fields commit

	backupDB.Name_Data.String = backup.Name
	backupDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBackupWOP
func (backupDB *BackupDB) CopyBasicFieldsFromBackupWOP(backup *BackupWOP) {
	// insertion point for fields commit

	backupDB.Name_Data.String = backup.Name
	backupDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBackup
func (backupDB *BackupDB) CopyBasicFieldsToBackup(backup *models.Backup) {
	// insertion point for checkout of basic fields (back repo to stage)
	backup.Name = backupDB.Name_Data.String
}

// CopyBasicFieldsToBackup_WOP
func (backupDB *BackupDB) CopyBasicFieldsToBackup_WOP(backup *models.Backup_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	backup.Name = backupDB.Name_Data.String
}

// CopyBasicFieldsToBackupWOP
func (backupDB *BackupDB) CopyBasicFieldsToBackupWOP(backup *BackupWOP) {
	backup.ID = int(backupDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	backup.Name = backupDB.Name_Data.String
}

// Backup generates a json file from a slice of all BackupDB instances in the backrepo
func (backRepoBackup *BackRepoBackupStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BackupDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BackupDB, 0)
	for _, backupDB := range backRepoBackup.Map_BackupDBID_BackupDB {
		forBackup = append(forBackup, backupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Backup ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Backup file", err.Error())
	}
}

// Backup generates a json file from a slice of all BackupDB instances in the backrepo
func (backRepoBackup *BackRepoBackupStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BackupDB, 0)
	for _, backupDB := range backRepoBackup.Map_BackupDBID_BackupDB {
		forBackup = append(forBackup, backupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Backup")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Backup_Fields, -1)
	for _, backupDB := range forBackup {

		var backupWOP BackupWOP
		backupDB.CopyBasicFieldsToBackupWOP(&backupWOP)

		row := sh.AddRow()
		row.WriteStruct(&backupWOP, -1)
	}
}

// RestoreXL from the "Backup" sheet all BackupDB instances
func (backRepoBackup *BackRepoBackupStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBackupid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Backup"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBackup.rowVisitorBackup)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBackup *BackRepoBackupStruct) rowVisitorBackup(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var backupWOP BackupWOP
		row.ReadStruct(&backupWOP)

		// add the unmarshalled struct to the stage
		backupDB := new(BackupDB)
		backupDB.CopyBasicFieldsFromBackupWOP(&backupWOP)

		backupDB_ID_atBackupTime := backupDB.ID
		backupDB.ID = 0
		query := backRepoBackup.db.Create(backupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBackup.Map_BackupDBID_BackupDB[backupDB.ID] = backupDB
		BackRepoBackupid_atBckpTime_newID[backupDB_ID_atBackupTime] = backupDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BackupDB.json" in dirPath that stores an array
// of BackupDB and stores it in the database
// the map BackRepoBackupid_atBckpTime_newID is updated accordingly
func (backRepoBackup *BackRepoBackupStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBackupid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BackupDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Backup file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BackupDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BackupDBID_BackupDB
	for _, backupDB := range forRestore {

		backupDB_ID_atBackupTime := backupDB.ID
		backupDB.ID = 0
		query := backRepoBackup.db.Create(backupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBackup.Map_BackupDBID_BackupDB[backupDB.ID] = backupDB
		BackRepoBackupid_atBckpTime_newID[backupDB_ID_atBackupTime] = backupDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Backup file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Backup>id_atBckpTime_newID
// to compute new index
func (backRepoBackup *BackRepoBackupStruct) RestorePhaseTwo() {

	for _, backupDB := range backRepoBackup.Map_BackupDBID_BackupDB {

		// next line of code is to avert unused variable compilation error
		_ = backupDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBackup.db.Model(backupDB).Updates(*backupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBackup.ResetReversePointers commits all staged instances of Backup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBackup *BackRepoBackupStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, backup := range backRepoBackup.Map_BackupDBID_BackupPtr {
		backRepoBackup.ResetReversePointersInstance(backRepo, idx, backup)
	}

	return
}

func (backRepoBackup *BackRepoBackupStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, backup *models.Backup) (Error error) {

	// fetch matching backupDB
	if backupDB, ok := backRepoBackup.Map_BackupDBID_BackupDB[idx]; ok {
		_ = backupDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBackupid_atBckpTime_newID map[uint]uint
