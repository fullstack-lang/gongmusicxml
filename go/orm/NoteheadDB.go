// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Notehead_sql sql.NullBool
var dummy_Notehead_time time.Duration
var dummy_Notehead_sort sort.Float64Slice

// NoteheadAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model noteheadAPI
type NoteheadAPI struct {
	gorm.Model

	models.Notehead_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	NoteheadPointersEncoding NoteheadPointersEncoding
}

// NoteheadPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type NoteheadPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// NoteheadDB describes a notehead in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model noteheadDB
type NoteheadDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field noteheadDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	NoteheadPointersEncoding
}

// NoteheadDBs arrays noteheadDBs
// swagger:response noteheadDBsResponse
type NoteheadDBs []NoteheadDB

// NoteheadDBResponse provides response
// swagger:response noteheadDBResponse
type NoteheadDBResponse struct {
	NoteheadDB
}

// NoteheadWOP is a Notehead without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type NoteheadWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Notehead_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoNoteheadStruct struct {
	// stores NoteheadDB according to their gorm ID
	Map_NoteheadDBID_NoteheadDB map[uint]*NoteheadDB

	// stores NoteheadDB ID according to Notehead address
	Map_NoteheadPtr_NoteheadDBID map[*models.Notehead]uint

	// stores Notehead according to their gorm ID
	Map_NoteheadDBID_NoteheadPtr map[uint]*models.Notehead

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNotehead *BackRepoNoteheadStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNotehead.stage
	return
}

func (backRepoNotehead *BackRepoNoteheadStruct) GetDB() *gorm.DB {
	return backRepoNotehead.db
}

// GetNoteheadDBFromNoteheadPtr is a handy function to access the back repo instance from the stage instance
func (backRepoNotehead *BackRepoNoteheadStruct) GetNoteheadDBFromNoteheadPtr(notehead *models.Notehead) (noteheadDB *NoteheadDB) {
	id := backRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead]
	noteheadDB = backRepoNotehead.Map_NoteheadDBID_NoteheadDB[id]
	return
}

// BackRepoNotehead.CommitPhaseOne commits all staged instances of Notehead to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNotehead *BackRepoNoteheadStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for notehead := range stage.Noteheads {
		backRepoNotehead.CommitPhaseOneInstance(notehead)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, notehead := range backRepoNotehead.Map_NoteheadDBID_NoteheadPtr {
		if _, ok := stage.Noteheads[notehead]; !ok {
			backRepoNotehead.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNotehead.CommitDeleteInstance commits deletion of Notehead to the BackRepo
func (backRepoNotehead *BackRepoNoteheadStruct) CommitDeleteInstance(id uint) (Error error) {

	notehead := backRepoNotehead.Map_NoteheadDBID_NoteheadPtr[id]

	// notehead is not staged anymore, remove noteheadDB
	noteheadDB := backRepoNotehead.Map_NoteheadDBID_NoteheadDB[id]
	query := backRepoNotehead.db.Unscoped().Delete(&noteheadDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNotehead.Map_NoteheadPtr_NoteheadDBID, notehead)
	delete(backRepoNotehead.Map_NoteheadDBID_NoteheadPtr, id)
	delete(backRepoNotehead.Map_NoteheadDBID_NoteheadDB, id)

	return
}

// BackRepoNotehead.CommitPhaseOneInstance commits notehead staged instances of Notehead to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNotehead *BackRepoNoteheadStruct) CommitPhaseOneInstance(notehead *models.Notehead) (Error error) {

	// check if the notehead is not commited yet
	if _, ok := backRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead]; ok {
		return
	}

	// initiate notehead
	var noteheadDB NoteheadDB
	noteheadDB.CopyBasicFieldsFromNotehead(notehead)

	query := backRepoNotehead.db.Create(&noteheadDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead] = noteheadDB.ID
	backRepoNotehead.Map_NoteheadDBID_NoteheadPtr[noteheadDB.ID] = notehead
	backRepoNotehead.Map_NoteheadDBID_NoteheadDB[noteheadDB.ID] = &noteheadDB

	return
}

// BackRepoNotehead.CommitPhaseTwo commits all staged instances of Notehead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead *BackRepoNoteheadStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, notehead := range backRepoNotehead.Map_NoteheadDBID_NoteheadPtr {
		backRepoNotehead.CommitPhaseTwoInstance(backRepo, idx, notehead)
	}

	return
}

// BackRepoNotehead.CommitPhaseTwoInstance commits {{structname }} of models.Notehead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead *BackRepoNoteheadStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, notehead *models.Notehead) (Error error) {

	// fetch matching noteheadDB
	if noteheadDB, ok := backRepoNotehead.Map_NoteheadDBID_NoteheadDB[idx]; ok {

		noteheadDB.CopyBasicFieldsFromNotehead(notehead)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoNotehead.db.Save(&noteheadDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Notehead intance %s", notehead.Name))
		return err
	}

	return
}

// BackRepoNotehead.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNotehead *BackRepoNoteheadStruct) CheckoutPhaseOne() (Error error) {

	noteheadDBArray := make([]NoteheadDB, 0)
	query := backRepoNotehead.db.Find(&noteheadDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	noteheadInstancesToBeRemovedFromTheStage := make(map[*models.Notehead]any)
	for key, value := range backRepoNotehead.stage.Noteheads {
		noteheadInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, noteheadDB := range noteheadDBArray {
		backRepoNotehead.CheckoutPhaseOneInstance(&noteheadDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		notehead, ok := backRepoNotehead.Map_NoteheadDBID_NoteheadPtr[noteheadDB.ID]
		if ok {
			delete(noteheadInstancesToBeRemovedFromTheStage, notehead)
		}
	}

	// remove from stage and back repo's 3 maps all noteheads that are not in the checkout
	for notehead := range noteheadInstancesToBeRemovedFromTheStage {
		notehead.Unstage(backRepoNotehead.GetStage())

		// remove instance from the back repo 3 maps
		noteheadID := backRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead]
		delete(backRepoNotehead.Map_NoteheadPtr_NoteheadDBID, notehead)
		delete(backRepoNotehead.Map_NoteheadDBID_NoteheadDB, noteheadID)
		delete(backRepoNotehead.Map_NoteheadDBID_NoteheadPtr, noteheadID)
	}

	return
}

// CheckoutPhaseOneInstance takes a noteheadDB that has been found in the DB, updates the backRepo and stages the
// models version of the noteheadDB
func (backRepoNotehead *BackRepoNoteheadStruct) CheckoutPhaseOneInstance(noteheadDB *NoteheadDB) (Error error) {

	notehead, ok := backRepoNotehead.Map_NoteheadDBID_NoteheadPtr[noteheadDB.ID]
	if !ok {
		notehead = new(models.Notehead)

		backRepoNotehead.Map_NoteheadDBID_NoteheadPtr[noteheadDB.ID] = notehead
		backRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead] = noteheadDB.ID

		// append model store with the new element
		notehead.Name = noteheadDB.Name_Data.String
		notehead.Stage(backRepoNotehead.GetStage())
	}
	noteheadDB.CopyBasicFieldsToNotehead(notehead)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	notehead.Stage(backRepoNotehead.GetStage())

	// preserve pointer to noteheadDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_NoteheadDBID_NoteheadDB)[noteheadDB hold variable pointers
	noteheadDB_Data := *noteheadDB
	preservedPtrToNotehead := &noteheadDB_Data
	backRepoNotehead.Map_NoteheadDBID_NoteheadDB[noteheadDB.ID] = preservedPtrToNotehead

	return
}

// BackRepoNotehead.CheckoutPhaseTwo Checkouts all staged instances of Notehead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead *BackRepoNoteheadStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, noteheadDB := range backRepoNotehead.Map_NoteheadDBID_NoteheadDB {
		backRepoNotehead.CheckoutPhaseTwoInstance(backRepo, noteheadDB)
	}
	return
}

// BackRepoNotehead.CheckoutPhaseTwoInstance Checkouts staged instances of Notehead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead *BackRepoNoteheadStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, noteheadDB *NoteheadDB) (Error error) {

	notehead := backRepoNotehead.Map_NoteheadDBID_NoteheadPtr[noteheadDB.ID]

	noteheadDB.DecodePointers(backRepo, notehead)

	return
}

func (noteheadDB *NoteheadDB) DecodePointers(backRepo *BackRepoStruct, notehead *models.Notehead) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitNotehead allows commit of a single notehead (if already staged)
func (backRepo *BackRepoStruct) CommitNotehead(notehead *models.Notehead) {
	backRepo.BackRepoNotehead.CommitPhaseOneInstance(notehead)
	if id, ok := backRepo.BackRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead]; ok {
		backRepo.BackRepoNotehead.CommitPhaseTwoInstance(backRepo, id, notehead)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNotehead allows checkout of a single notehead (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNotehead(notehead *models.Notehead) {
	// check if the notehead is staged
	if _, ok := backRepo.BackRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead]; ok {

		if id, ok := backRepo.BackRepoNotehead.Map_NoteheadPtr_NoteheadDBID[notehead]; ok {
			var noteheadDB NoteheadDB
			noteheadDB.ID = id

			if err := backRepo.BackRepoNotehead.db.First(&noteheadDB, id).Error; err != nil {
				log.Fatalln("CheckoutNotehead : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNotehead.CheckoutPhaseOneInstance(&noteheadDB)
			backRepo.BackRepoNotehead.CheckoutPhaseTwoInstance(backRepo, &noteheadDB)
		}
	}
}

// CopyBasicFieldsFromNotehead
func (noteheadDB *NoteheadDB) CopyBasicFieldsFromNotehead(notehead *models.Notehead) {
	// insertion point for fields commit

	noteheadDB.Name_Data.String = notehead.Name
	noteheadDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNotehead_WOP
func (noteheadDB *NoteheadDB) CopyBasicFieldsFromNotehead_WOP(notehead *models.Notehead_WOP) {
	// insertion point for fields commit

	noteheadDB.Name_Data.String = notehead.Name
	noteheadDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNoteheadWOP
func (noteheadDB *NoteheadDB) CopyBasicFieldsFromNoteheadWOP(notehead *NoteheadWOP) {
	// insertion point for fields commit

	noteheadDB.Name_Data.String = notehead.Name
	noteheadDB.Name_Data.Valid = true
}

// CopyBasicFieldsToNotehead
func (noteheadDB *NoteheadDB) CopyBasicFieldsToNotehead(notehead *models.Notehead) {
	// insertion point for checkout of basic fields (back repo to stage)
	notehead.Name = noteheadDB.Name_Data.String
}

// CopyBasicFieldsToNotehead_WOP
func (noteheadDB *NoteheadDB) CopyBasicFieldsToNotehead_WOP(notehead *models.Notehead_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	notehead.Name = noteheadDB.Name_Data.String
}

// CopyBasicFieldsToNoteheadWOP
func (noteheadDB *NoteheadDB) CopyBasicFieldsToNoteheadWOP(notehead *NoteheadWOP) {
	notehead.ID = int(noteheadDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	notehead.Name = noteheadDB.Name_Data.String
}

// Backup generates a json file from a slice of all NoteheadDB instances in the backrepo
func (backRepoNotehead *BackRepoNoteheadStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "NoteheadDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteheadDB, 0)
	for _, noteheadDB := range backRepoNotehead.Map_NoteheadDBID_NoteheadDB {
		forBackup = append(forBackup, noteheadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Notehead ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Notehead file", err.Error())
	}
}

// Backup generates a json file from a slice of all NoteheadDB instances in the backrepo
func (backRepoNotehead *BackRepoNoteheadStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteheadDB, 0)
	for _, noteheadDB := range backRepoNotehead.Map_NoteheadDBID_NoteheadDB {
		forBackup = append(forBackup, noteheadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Notehead")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Notehead_Fields, -1)
	for _, noteheadDB := range forBackup {

		var noteheadWOP NoteheadWOP
		noteheadDB.CopyBasicFieldsToNoteheadWOP(&noteheadWOP)

		row := sh.AddRow()
		row.WriteStruct(&noteheadWOP, -1)
	}
}

// RestoreXL from the "Notehead" sheet all NoteheadDB instances
func (backRepoNotehead *BackRepoNoteheadStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNoteheadid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Notehead"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNotehead.rowVisitorNotehead)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNotehead *BackRepoNoteheadStruct) rowVisitorNotehead(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var noteheadWOP NoteheadWOP
		row.ReadStruct(&noteheadWOP)

		// add the unmarshalled struct to the stage
		noteheadDB := new(NoteheadDB)
		noteheadDB.CopyBasicFieldsFromNoteheadWOP(&noteheadWOP)

		noteheadDB_ID_atBackupTime := noteheadDB.ID
		noteheadDB.ID = 0
		query := backRepoNotehead.db.Create(noteheadDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNotehead.Map_NoteheadDBID_NoteheadDB[noteheadDB.ID] = noteheadDB
		BackRepoNoteheadid_atBckpTime_newID[noteheadDB_ID_atBackupTime] = noteheadDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "NoteheadDB.json" in dirPath that stores an array
// of NoteheadDB and stores it in the database
// the map BackRepoNoteheadid_atBckpTime_newID is updated accordingly
func (backRepoNotehead *BackRepoNoteheadStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNoteheadid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "NoteheadDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Notehead file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*NoteheadDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_NoteheadDBID_NoteheadDB
	for _, noteheadDB := range forRestore {

		noteheadDB_ID_atBackupTime := noteheadDB.ID
		noteheadDB.ID = 0
		query := backRepoNotehead.db.Create(noteheadDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNotehead.Map_NoteheadDBID_NoteheadDB[noteheadDB.ID] = noteheadDB
		BackRepoNoteheadid_atBckpTime_newID[noteheadDB_ID_atBackupTime] = noteheadDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Notehead file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Notehead>id_atBckpTime_newID
// to compute new index
func (backRepoNotehead *BackRepoNoteheadStruct) RestorePhaseTwo() {

	for _, noteheadDB := range backRepoNotehead.Map_NoteheadDBID_NoteheadDB {

		// next line of code is to avert unused variable compilation error
		_ = noteheadDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoNotehead.db.Model(noteheadDB).Updates(*noteheadDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNotehead.ResetReversePointers commits all staged instances of Notehead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead *BackRepoNoteheadStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, notehead := range backRepoNotehead.Map_NoteheadDBID_NoteheadPtr {
		backRepoNotehead.ResetReversePointersInstance(backRepo, idx, notehead)
	}

	return
}

func (backRepoNotehead *BackRepoNoteheadStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, notehead *models.Notehead) (Error error) {

	// fetch matching noteheadDB
	if noteheadDB, ok := backRepoNotehead.Map_NoteheadDBID_NoteheadDB[idx]; ok {
		_ = noteheadDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNoteheadid_atBckpTime_newID map[uint]uint
