// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Work_sql sql.NullBool
var dummy_Work_time time.Duration
var dummy_Work_sort sort.Float64Slice

// WorkAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model workAPI
type WorkAPI struct {
	gorm.Model

	models.Work_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	WorkPointersEncoding WorkPointersEncoding
}

// WorkPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type WorkPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Opus is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	OpusID sql.NullInt64
}

// WorkDB describes a work in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model workDB
type WorkDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field workDB.Name
	Name_Data sql.NullString

	// Declation for basic field workDB.Work_number
	Work_number_Data sql.NullString

	// Declation for basic field workDB.Work_title
	Work_title_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	WorkPointersEncoding
}

// WorkDBs arrays workDBs
// swagger:response workDBsResponse
type WorkDBs []WorkDB

// WorkDBResponse provides response
// swagger:response workDBResponse
type WorkDBResponse struct {
	WorkDB
}

// WorkWOP is a Work without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type WorkWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Work_number string `xlsx:"2"`

	Work_title string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Work_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Work_number",
	"Work_title",
}

type BackRepoWorkStruct struct {
	// stores WorkDB according to their gorm ID
	Map_WorkDBID_WorkDB map[uint]*WorkDB

	// stores WorkDB ID according to Work address
	Map_WorkPtr_WorkDBID map[*models.Work]uint

	// stores Work according to their gorm ID
	Map_WorkDBID_WorkPtr map[uint]*models.Work

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoWork *BackRepoWorkStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoWork.stage
	return
}

func (backRepoWork *BackRepoWorkStruct) GetDB() *gorm.DB {
	return backRepoWork.db
}

// GetWorkDBFromWorkPtr is a handy function to access the back repo instance from the stage instance
func (backRepoWork *BackRepoWorkStruct) GetWorkDBFromWorkPtr(work *models.Work) (workDB *WorkDB) {
	id := backRepoWork.Map_WorkPtr_WorkDBID[work]
	workDB = backRepoWork.Map_WorkDBID_WorkDB[id]
	return
}

// BackRepoWork.CommitPhaseOne commits all staged instances of Work to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWork *BackRepoWorkStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for work := range stage.Works {
		backRepoWork.CommitPhaseOneInstance(work)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, work := range backRepoWork.Map_WorkDBID_WorkPtr {
		if _, ok := stage.Works[work]; !ok {
			backRepoWork.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWork.CommitDeleteInstance commits deletion of Work to the BackRepo
func (backRepoWork *BackRepoWorkStruct) CommitDeleteInstance(id uint) (Error error) {

	work := backRepoWork.Map_WorkDBID_WorkPtr[id]

	// work is not staged anymore, remove workDB
	workDB := backRepoWork.Map_WorkDBID_WorkDB[id]
	query := backRepoWork.db.Unscoped().Delete(&workDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoWork.Map_WorkPtr_WorkDBID, work)
	delete(backRepoWork.Map_WorkDBID_WorkPtr, id)
	delete(backRepoWork.Map_WorkDBID_WorkDB, id)

	return
}

// BackRepoWork.CommitPhaseOneInstance commits work staged instances of Work to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWork *BackRepoWorkStruct) CommitPhaseOneInstance(work *models.Work) (Error error) {

	// check if the work is not commited yet
	if _, ok := backRepoWork.Map_WorkPtr_WorkDBID[work]; ok {
		return
	}

	// initiate work
	var workDB WorkDB
	workDB.CopyBasicFieldsFromWork(work)

	query := backRepoWork.db.Create(&workDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoWork.Map_WorkPtr_WorkDBID[work] = workDB.ID
	backRepoWork.Map_WorkDBID_WorkPtr[workDB.ID] = work
	backRepoWork.Map_WorkDBID_WorkDB[workDB.ID] = &workDB

	return
}

// BackRepoWork.CommitPhaseTwo commits all staged instances of Work to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWork *BackRepoWorkStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, work := range backRepoWork.Map_WorkDBID_WorkPtr {
		backRepoWork.CommitPhaseTwoInstance(backRepo, idx, work)
	}

	return
}

// BackRepoWork.CommitPhaseTwoInstance commits {{structname }} of models.Work to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWork *BackRepoWorkStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, work *models.Work) (Error error) {

	// fetch matching workDB
	if workDB, ok := backRepoWork.Map_WorkDBID_WorkDB[idx]; ok {

		workDB.CopyBasicFieldsFromWork(work)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value work.Opus translates to updating the work.OpusID
		workDB.OpusID.Valid = true // allow for a 0 value (nil association)
		if work.Opus != nil {
			if OpusId, ok := backRepo.BackRepoOpus.Map_OpusPtr_OpusDBID[work.Opus]; ok {
				workDB.OpusID.Int64 = int64(OpusId)
				workDB.OpusID.Valid = true
			}
		} else {
			workDB.OpusID.Int64 = 0
			workDB.OpusID.Valid = true
		}

		query := backRepoWork.db.Save(&workDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Work intance %s", work.Name))
		return err
	}

	return
}

// BackRepoWork.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoWork *BackRepoWorkStruct) CheckoutPhaseOne() (Error error) {

	workDBArray := make([]WorkDB, 0)
	query := backRepoWork.db.Find(&workDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	workInstancesToBeRemovedFromTheStage := make(map[*models.Work]any)
	for key, value := range backRepoWork.stage.Works {
		workInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, workDB := range workDBArray {
		backRepoWork.CheckoutPhaseOneInstance(&workDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		work, ok := backRepoWork.Map_WorkDBID_WorkPtr[workDB.ID]
		if ok {
			delete(workInstancesToBeRemovedFromTheStage, work)
		}
	}

	// remove from stage and back repo's 3 maps all works that are not in the checkout
	for work := range workInstancesToBeRemovedFromTheStage {
		work.Unstage(backRepoWork.GetStage())

		// remove instance from the back repo 3 maps
		workID := backRepoWork.Map_WorkPtr_WorkDBID[work]
		delete(backRepoWork.Map_WorkPtr_WorkDBID, work)
		delete(backRepoWork.Map_WorkDBID_WorkDB, workID)
		delete(backRepoWork.Map_WorkDBID_WorkPtr, workID)
	}

	return
}

// CheckoutPhaseOneInstance takes a workDB that has been found in the DB, updates the backRepo and stages the
// models version of the workDB
func (backRepoWork *BackRepoWorkStruct) CheckoutPhaseOneInstance(workDB *WorkDB) (Error error) {

	work, ok := backRepoWork.Map_WorkDBID_WorkPtr[workDB.ID]
	if !ok {
		work = new(models.Work)

		backRepoWork.Map_WorkDBID_WorkPtr[workDB.ID] = work
		backRepoWork.Map_WorkPtr_WorkDBID[work] = workDB.ID

		// append model store with the new element
		work.Name = workDB.Name_Data.String
		work.Stage(backRepoWork.GetStage())
	}
	workDB.CopyBasicFieldsToWork(work)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	work.Stage(backRepoWork.GetStage())

	// preserve pointer to workDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_WorkDBID_WorkDB)[workDB hold variable pointers
	workDB_Data := *workDB
	preservedPtrToWork := &workDB_Data
	backRepoWork.Map_WorkDBID_WorkDB[workDB.ID] = preservedPtrToWork

	return
}

// BackRepoWork.CheckoutPhaseTwo Checkouts all staged instances of Work to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWork *BackRepoWorkStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, workDB := range backRepoWork.Map_WorkDBID_WorkDB {
		backRepoWork.CheckoutPhaseTwoInstance(backRepo, workDB)
	}
	return
}

// BackRepoWork.CheckoutPhaseTwoInstance Checkouts staged instances of Work to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWork *BackRepoWorkStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, workDB *WorkDB) (Error error) {

	work := backRepoWork.Map_WorkDBID_WorkPtr[workDB.ID]

	workDB.DecodePointers(backRepo, work)

	return
}

func (workDB *WorkDB) DecodePointers(backRepo *BackRepoStruct, work *models.Work) {

	// insertion point for checkout of pointer encoding
	// Opus field
	work.Opus = nil
	if workDB.OpusID.Int64 != 0 {
		work.Opus = backRepo.BackRepoOpus.Map_OpusDBID_OpusPtr[uint(workDB.OpusID.Int64)]
	}
	return
}

// CommitWork allows commit of a single work (if already staged)
func (backRepo *BackRepoStruct) CommitWork(work *models.Work) {
	backRepo.BackRepoWork.CommitPhaseOneInstance(work)
	if id, ok := backRepo.BackRepoWork.Map_WorkPtr_WorkDBID[work]; ok {
		backRepo.BackRepoWork.CommitPhaseTwoInstance(backRepo, id, work)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitWork allows checkout of a single work (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWork(work *models.Work) {
	// check if the work is staged
	if _, ok := backRepo.BackRepoWork.Map_WorkPtr_WorkDBID[work]; ok {

		if id, ok := backRepo.BackRepoWork.Map_WorkPtr_WorkDBID[work]; ok {
			var workDB WorkDB
			workDB.ID = id

			if err := backRepo.BackRepoWork.db.First(&workDB, id).Error; err != nil {
				log.Fatalln("CheckoutWork : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWork.CheckoutPhaseOneInstance(&workDB)
			backRepo.BackRepoWork.CheckoutPhaseTwoInstance(backRepo, &workDB)
		}
	}
}

// CopyBasicFieldsFromWork
func (workDB *WorkDB) CopyBasicFieldsFromWork(work *models.Work) {
	// insertion point for fields commit

	workDB.Name_Data.String = work.Name
	workDB.Name_Data.Valid = true

	workDB.Work_number_Data.String = work.Work_number
	workDB.Work_number_Data.Valid = true

	workDB.Work_title_Data.String = work.Work_title
	workDB.Work_title_Data.Valid = true
}

// CopyBasicFieldsFromWork_WOP
func (workDB *WorkDB) CopyBasicFieldsFromWork_WOP(work *models.Work_WOP) {
	// insertion point for fields commit

	workDB.Name_Data.String = work.Name
	workDB.Name_Data.Valid = true

	workDB.Work_number_Data.String = work.Work_number
	workDB.Work_number_Data.Valid = true

	workDB.Work_title_Data.String = work.Work_title
	workDB.Work_title_Data.Valid = true
}

// CopyBasicFieldsFromWorkWOP
func (workDB *WorkDB) CopyBasicFieldsFromWorkWOP(work *WorkWOP) {
	// insertion point for fields commit

	workDB.Name_Data.String = work.Name
	workDB.Name_Data.Valid = true

	workDB.Work_number_Data.String = work.Work_number
	workDB.Work_number_Data.Valid = true

	workDB.Work_title_Data.String = work.Work_title
	workDB.Work_title_Data.Valid = true
}

// CopyBasicFieldsToWork
func (workDB *WorkDB) CopyBasicFieldsToWork(work *models.Work) {
	// insertion point for checkout of basic fields (back repo to stage)
	work.Name = workDB.Name_Data.String
	work.Work_number = workDB.Work_number_Data.String
	work.Work_title = workDB.Work_title_Data.String
}

// CopyBasicFieldsToWork_WOP
func (workDB *WorkDB) CopyBasicFieldsToWork_WOP(work *models.Work_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	work.Name = workDB.Name_Data.String
	work.Work_number = workDB.Work_number_Data.String
	work.Work_title = workDB.Work_title_Data.String
}

// CopyBasicFieldsToWorkWOP
func (workDB *WorkDB) CopyBasicFieldsToWorkWOP(work *WorkWOP) {
	work.ID = int(workDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	work.Name = workDB.Name_Data.String
	work.Work_number = workDB.Work_number_Data.String
	work.Work_title = workDB.Work_title_Data.String
}

// Backup generates a json file from a slice of all WorkDB instances in the backrepo
func (backRepoWork *BackRepoWorkStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "WorkDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WorkDB, 0)
	for _, workDB := range backRepoWork.Map_WorkDBID_WorkDB {
		forBackup = append(forBackup, workDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Work ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Work file", err.Error())
	}
}

// Backup generates a json file from a slice of all WorkDB instances in the backrepo
func (backRepoWork *BackRepoWorkStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WorkDB, 0)
	for _, workDB := range backRepoWork.Map_WorkDBID_WorkDB {
		forBackup = append(forBackup, workDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Work")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Work_Fields, -1)
	for _, workDB := range forBackup {

		var workWOP WorkWOP
		workDB.CopyBasicFieldsToWorkWOP(&workWOP)

		row := sh.AddRow()
		row.WriteStruct(&workWOP, -1)
	}
}

// RestoreXL from the "Work" sheet all WorkDB instances
func (backRepoWork *BackRepoWorkStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoWorkid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Work"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoWork.rowVisitorWork)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoWork *BackRepoWorkStruct) rowVisitorWork(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var workWOP WorkWOP
		row.ReadStruct(&workWOP)

		// add the unmarshalled struct to the stage
		workDB := new(WorkDB)
		workDB.CopyBasicFieldsFromWorkWOP(&workWOP)

		workDB_ID_atBackupTime := workDB.ID
		workDB.ID = 0
		query := backRepoWork.db.Create(workDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWork.Map_WorkDBID_WorkDB[workDB.ID] = workDB
		BackRepoWorkid_atBckpTime_newID[workDB_ID_atBackupTime] = workDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "WorkDB.json" in dirPath that stores an array
// of WorkDB and stores it in the database
// the map BackRepoWorkid_atBckpTime_newID is updated accordingly
func (backRepoWork *BackRepoWorkStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoWorkid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "WorkDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Work file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*WorkDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_WorkDBID_WorkDB
	for _, workDB := range forRestore {

		workDB_ID_atBackupTime := workDB.ID
		workDB.ID = 0
		query := backRepoWork.db.Create(workDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWork.Map_WorkDBID_WorkDB[workDB.ID] = workDB
		BackRepoWorkid_atBckpTime_newID[workDB_ID_atBackupTime] = workDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Work file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Work>id_atBckpTime_newID
// to compute new index
func (backRepoWork *BackRepoWorkStruct) RestorePhaseTwo() {

	for _, workDB := range backRepoWork.Map_WorkDBID_WorkDB {

		// next line of code is to avert unused variable compilation error
		_ = workDB

		// insertion point for reindexing pointers encoding
		// reindexing Opus field
		if workDB.OpusID.Int64 != 0 {
			workDB.OpusID.Int64 = int64(BackRepoOpusid_atBckpTime_newID[uint(workDB.OpusID.Int64)])
			workDB.OpusID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoWork.db.Model(workDB).Updates(*workDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoWork.ResetReversePointers commits all staged instances of Work to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWork *BackRepoWorkStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, work := range backRepoWork.Map_WorkDBID_WorkPtr {
		backRepoWork.ResetReversePointersInstance(backRepo, idx, work)
	}

	return
}

func (backRepoWork *BackRepoWorkStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, work *models.Work) (Error error) {

	// fetch matching workDB
	if workDB, ok := backRepoWork.Map_WorkDBID_WorkDB[idx]; ok {
		_ = workDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoWorkid_atBckpTime_newID map[uint]uint
