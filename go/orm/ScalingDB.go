// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Scaling_sql sql.NullBool
var dummy_Scaling_time time.Duration
var dummy_Scaling_sort sort.Float64Slice

// ScalingAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model scalingAPI
type ScalingAPI struct {
	gorm.Model

	models.Scaling_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ScalingPointersEncoding ScalingPointersEncoding
}

// ScalingPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ScalingPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ScalingDB describes a scaling in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model scalingDB
type ScalingDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field scalingDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ScalingPointersEncoding
}

// ScalingDBs arrays scalingDBs
// swagger:response scalingDBsResponse
type ScalingDBs []ScalingDB

// ScalingDBResponse provides response
// swagger:response scalingDBResponse
type ScalingDBResponse struct {
	ScalingDB
}

// ScalingWOP is a Scaling without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ScalingWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Scaling_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoScalingStruct struct {
	// stores ScalingDB according to their gorm ID
	Map_ScalingDBID_ScalingDB map[uint]*ScalingDB

	// stores ScalingDB ID according to Scaling address
	Map_ScalingPtr_ScalingDBID map[*models.Scaling]uint

	// stores Scaling according to their gorm ID
	Map_ScalingDBID_ScalingPtr map[uint]*models.Scaling

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoScaling *BackRepoScalingStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoScaling.stage
	return
}

func (backRepoScaling *BackRepoScalingStruct) GetDB() *gorm.DB {
	return backRepoScaling.db
}

// GetScalingDBFromScalingPtr is a handy function to access the back repo instance from the stage instance
func (backRepoScaling *BackRepoScalingStruct) GetScalingDBFromScalingPtr(scaling *models.Scaling) (scalingDB *ScalingDB) {
	id := backRepoScaling.Map_ScalingPtr_ScalingDBID[scaling]
	scalingDB = backRepoScaling.Map_ScalingDBID_ScalingDB[id]
	return
}

// BackRepoScaling.CommitPhaseOne commits all staged instances of Scaling to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScaling *BackRepoScalingStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for scaling := range stage.Scalings {
		backRepoScaling.CommitPhaseOneInstance(scaling)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, scaling := range backRepoScaling.Map_ScalingDBID_ScalingPtr {
		if _, ok := stage.Scalings[scaling]; !ok {
			backRepoScaling.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoScaling.CommitDeleteInstance commits deletion of Scaling to the BackRepo
func (backRepoScaling *BackRepoScalingStruct) CommitDeleteInstance(id uint) (Error error) {

	scaling := backRepoScaling.Map_ScalingDBID_ScalingPtr[id]

	// scaling is not staged anymore, remove scalingDB
	scalingDB := backRepoScaling.Map_ScalingDBID_ScalingDB[id]
	query := backRepoScaling.db.Unscoped().Delete(&scalingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoScaling.Map_ScalingPtr_ScalingDBID, scaling)
	delete(backRepoScaling.Map_ScalingDBID_ScalingPtr, id)
	delete(backRepoScaling.Map_ScalingDBID_ScalingDB, id)

	return
}

// BackRepoScaling.CommitPhaseOneInstance commits scaling staged instances of Scaling to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScaling *BackRepoScalingStruct) CommitPhaseOneInstance(scaling *models.Scaling) (Error error) {

	// check if the scaling is not commited yet
	if _, ok := backRepoScaling.Map_ScalingPtr_ScalingDBID[scaling]; ok {
		return
	}

	// initiate scaling
	var scalingDB ScalingDB
	scalingDB.CopyBasicFieldsFromScaling(scaling)

	query := backRepoScaling.db.Create(&scalingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoScaling.Map_ScalingPtr_ScalingDBID[scaling] = scalingDB.ID
	backRepoScaling.Map_ScalingDBID_ScalingPtr[scalingDB.ID] = scaling
	backRepoScaling.Map_ScalingDBID_ScalingDB[scalingDB.ID] = &scalingDB

	return
}

// BackRepoScaling.CommitPhaseTwo commits all staged instances of Scaling to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScaling *BackRepoScalingStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, scaling := range backRepoScaling.Map_ScalingDBID_ScalingPtr {
		backRepoScaling.CommitPhaseTwoInstance(backRepo, idx, scaling)
	}

	return
}

// BackRepoScaling.CommitPhaseTwoInstance commits {{structname }} of models.Scaling to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScaling *BackRepoScalingStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, scaling *models.Scaling) (Error error) {

	// fetch matching scalingDB
	if scalingDB, ok := backRepoScaling.Map_ScalingDBID_ScalingDB[idx]; ok {

		scalingDB.CopyBasicFieldsFromScaling(scaling)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoScaling.db.Save(&scalingDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Scaling intance %s", scaling.Name))
		return err
	}

	return
}

// BackRepoScaling.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoScaling *BackRepoScalingStruct) CheckoutPhaseOne() (Error error) {

	scalingDBArray := make([]ScalingDB, 0)
	query := backRepoScaling.db.Find(&scalingDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	scalingInstancesToBeRemovedFromTheStage := make(map[*models.Scaling]any)
	for key, value := range backRepoScaling.stage.Scalings {
		scalingInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, scalingDB := range scalingDBArray {
		backRepoScaling.CheckoutPhaseOneInstance(&scalingDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		scaling, ok := backRepoScaling.Map_ScalingDBID_ScalingPtr[scalingDB.ID]
		if ok {
			delete(scalingInstancesToBeRemovedFromTheStage, scaling)
		}
	}

	// remove from stage and back repo's 3 maps all scalings that are not in the checkout
	for scaling := range scalingInstancesToBeRemovedFromTheStage {
		scaling.Unstage(backRepoScaling.GetStage())

		// remove instance from the back repo 3 maps
		scalingID := backRepoScaling.Map_ScalingPtr_ScalingDBID[scaling]
		delete(backRepoScaling.Map_ScalingPtr_ScalingDBID, scaling)
		delete(backRepoScaling.Map_ScalingDBID_ScalingDB, scalingID)
		delete(backRepoScaling.Map_ScalingDBID_ScalingPtr, scalingID)
	}

	return
}

// CheckoutPhaseOneInstance takes a scalingDB that has been found in the DB, updates the backRepo and stages the
// models version of the scalingDB
func (backRepoScaling *BackRepoScalingStruct) CheckoutPhaseOneInstance(scalingDB *ScalingDB) (Error error) {

	scaling, ok := backRepoScaling.Map_ScalingDBID_ScalingPtr[scalingDB.ID]
	if !ok {
		scaling = new(models.Scaling)

		backRepoScaling.Map_ScalingDBID_ScalingPtr[scalingDB.ID] = scaling
		backRepoScaling.Map_ScalingPtr_ScalingDBID[scaling] = scalingDB.ID

		// append model store with the new element
		scaling.Name = scalingDB.Name_Data.String
		scaling.Stage(backRepoScaling.GetStage())
	}
	scalingDB.CopyBasicFieldsToScaling(scaling)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	scaling.Stage(backRepoScaling.GetStage())

	// preserve pointer to scalingDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ScalingDBID_ScalingDB)[scalingDB hold variable pointers
	scalingDB_Data := *scalingDB
	preservedPtrToScaling := &scalingDB_Data
	backRepoScaling.Map_ScalingDBID_ScalingDB[scalingDB.ID] = preservedPtrToScaling

	return
}

// BackRepoScaling.CheckoutPhaseTwo Checkouts all staged instances of Scaling to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScaling *BackRepoScalingStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, scalingDB := range backRepoScaling.Map_ScalingDBID_ScalingDB {
		backRepoScaling.CheckoutPhaseTwoInstance(backRepo, scalingDB)
	}
	return
}

// BackRepoScaling.CheckoutPhaseTwoInstance Checkouts staged instances of Scaling to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScaling *BackRepoScalingStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, scalingDB *ScalingDB) (Error error) {

	scaling := backRepoScaling.Map_ScalingDBID_ScalingPtr[scalingDB.ID]

	scalingDB.DecodePointers(backRepo, scaling)

	return
}

func (scalingDB *ScalingDB) DecodePointers(backRepo *BackRepoStruct, scaling *models.Scaling) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitScaling allows commit of a single scaling (if already staged)
func (backRepo *BackRepoStruct) CommitScaling(scaling *models.Scaling) {
	backRepo.BackRepoScaling.CommitPhaseOneInstance(scaling)
	if id, ok := backRepo.BackRepoScaling.Map_ScalingPtr_ScalingDBID[scaling]; ok {
		backRepo.BackRepoScaling.CommitPhaseTwoInstance(backRepo, id, scaling)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitScaling allows checkout of a single scaling (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutScaling(scaling *models.Scaling) {
	// check if the scaling is staged
	if _, ok := backRepo.BackRepoScaling.Map_ScalingPtr_ScalingDBID[scaling]; ok {

		if id, ok := backRepo.BackRepoScaling.Map_ScalingPtr_ScalingDBID[scaling]; ok {
			var scalingDB ScalingDB
			scalingDB.ID = id

			if err := backRepo.BackRepoScaling.db.First(&scalingDB, id).Error; err != nil {
				log.Fatalln("CheckoutScaling : Problem with getting object with id:", id)
			}
			backRepo.BackRepoScaling.CheckoutPhaseOneInstance(&scalingDB)
			backRepo.BackRepoScaling.CheckoutPhaseTwoInstance(backRepo, &scalingDB)
		}
	}
}

// CopyBasicFieldsFromScaling
func (scalingDB *ScalingDB) CopyBasicFieldsFromScaling(scaling *models.Scaling) {
	// insertion point for fields commit

	scalingDB.Name_Data.String = scaling.Name
	scalingDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScaling_WOP
func (scalingDB *ScalingDB) CopyBasicFieldsFromScaling_WOP(scaling *models.Scaling_WOP) {
	// insertion point for fields commit

	scalingDB.Name_Data.String = scaling.Name
	scalingDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScalingWOP
func (scalingDB *ScalingDB) CopyBasicFieldsFromScalingWOP(scaling *ScalingWOP) {
	// insertion point for fields commit

	scalingDB.Name_Data.String = scaling.Name
	scalingDB.Name_Data.Valid = true
}

// CopyBasicFieldsToScaling
func (scalingDB *ScalingDB) CopyBasicFieldsToScaling(scaling *models.Scaling) {
	// insertion point for checkout of basic fields (back repo to stage)
	scaling.Name = scalingDB.Name_Data.String
}

// CopyBasicFieldsToScaling_WOP
func (scalingDB *ScalingDB) CopyBasicFieldsToScaling_WOP(scaling *models.Scaling_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	scaling.Name = scalingDB.Name_Data.String
}

// CopyBasicFieldsToScalingWOP
func (scalingDB *ScalingDB) CopyBasicFieldsToScalingWOP(scaling *ScalingWOP) {
	scaling.ID = int(scalingDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	scaling.Name = scalingDB.Name_Data.String
}

// Backup generates a json file from a slice of all ScalingDB instances in the backrepo
func (backRepoScaling *BackRepoScalingStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ScalingDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScalingDB, 0)
	for _, scalingDB := range backRepoScaling.Map_ScalingDBID_ScalingDB {
		forBackup = append(forBackup, scalingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Scaling ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Scaling file", err.Error())
	}
}

// Backup generates a json file from a slice of all ScalingDB instances in the backrepo
func (backRepoScaling *BackRepoScalingStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScalingDB, 0)
	for _, scalingDB := range backRepoScaling.Map_ScalingDBID_ScalingDB {
		forBackup = append(forBackup, scalingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Scaling")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Scaling_Fields, -1)
	for _, scalingDB := range forBackup {

		var scalingWOP ScalingWOP
		scalingDB.CopyBasicFieldsToScalingWOP(&scalingWOP)

		row := sh.AddRow()
		row.WriteStruct(&scalingWOP, -1)
	}
}

// RestoreXL from the "Scaling" sheet all ScalingDB instances
func (backRepoScaling *BackRepoScalingStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoScalingid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Scaling"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoScaling.rowVisitorScaling)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoScaling *BackRepoScalingStruct) rowVisitorScaling(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var scalingWOP ScalingWOP
		row.ReadStruct(&scalingWOP)

		// add the unmarshalled struct to the stage
		scalingDB := new(ScalingDB)
		scalingDB.CopyBasicFieldsFromScalingWOP(&scalingWOP)

		scalingDB_ID_atBackupTime := scalingDB.ID
		scalingDB.ID = 0
		query := backRepoScaling.db.Create(scalingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScaling.Map_ScalingDBID_ScalingDB[scalingDB.ID] = scalingDB
		BackRepoScalingid_atBckpTime_newID[scalingDB_ID_atBackupTime] = scalingDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ScalingDB.json" in dirPath that stores an array
// of ScalingDB and stores it in the database
// the map BackRepoScalingid_atBckpTime_newID is updated accordingly
func (backRepoScaling *BackRepoScalingStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoScalingid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ScalingDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Scaling file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ScalingDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ScalingDBID_ScalingDB
	for _, scalingDB := range forRestore {

		scalingDB_ID_atBackupTime := scalingDB.ID
		scalingDB.ID = 0
		query := backRepoScaling.db.Create(scalingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScaling.Map_ScalingDBID_ScalingDB[scalingDB.ID] = scalingDB
		BackRepoScalingid_atBckpTime_newID[scalingDB_ID_atBackupTime] = scalingDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Scaling file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Scaling>id_atBckpTime_newID
// to compute new index
func (backRepoScaling *BackRepoScalingStruct) RestorePhaseTwo() {

	for _, scalingDB := range backRepoScaling.Map_ScalingDBID_ScalingDB {

		// next line of code is to avert unused variable compilation error
		_ = scalingDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoScaling.db.Model(scalingDB).Updates(*scalingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoScaling.ResetReversePointers commits all staged instances of Scaling to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScaling *BackRepoScalingStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, scaling := range backRepoScaling.Map_ScalingDBID_ScalingPtr {
		backRepoScaling.ResetReversePointersInstance(backRepo, idx, scaling)
	}

	return
}

func (backRepoScaling *BackRepoScalingStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, scaling *models.Scaling) (Error error) {

	// fetch matching scalingDB
	if scalingDB, ok := backRepoScaling.Map_ScalingDBID_ScalingDB[idx]; ok {
		_ = scalingDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoScalingid_atBckpTime_newID map[uint]uint
