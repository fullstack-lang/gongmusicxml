// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Note_sql sql.NullBool
var dummy_Note_time time.Duration
var dummy_Note_sort sort.Float64Slice

// NoteAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model noteAPI
type NoteAPI struct {
	gorm.Model

	models.Note_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	NotePointersEncoding NotePointersEncoding
}

// NotePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type NotePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Instrument is a slice of pointers to another Struct (optional or 0..1)
	Instrument IntSlice `gorm:"type:TEXT"`

	// field Type_ is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Type_ID sql.NullInt64

	// field Dot is a slice of pointers to another Struct (optional or 0..1)
	Dot IntSlice `gorm:"type:TEXT"`

	// field Accidental is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AccidentalID sql.NullInt64

	// field Time_modification is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Time_modificationID sql.NullInt64

	// field Stem is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	StemID sql.NullInt64

	// field Notehead is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NoteheadID sql.NullInt64

	// field Notehead_text is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Notehead_textID sql.NullInt64

	// field Beam is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	BeamID sql.NullInt64

	// field Notations is a slice of pointers to another Struct (optional or 0..1)
	Notations IntSlice `gorm:"type:TEXT"`

	// field Lyric is a slice of pointers to another Struct (optional or 0..1)
	Lyric IntSlice `gorm:"type:TEXT"`

	// field Play is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PlayID sql.NullInt64

	// field Listen is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ListenID sql.NullInt64
}

// NoteDB describes a note in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model noteDB
type NoteDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field noteDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	NotePointersEncoding
}

// NoteDBs arrays noteDBs
// swagger:response noteDBsResponse
type NoteDBs []NoteDB

// NoteDBResponse provides response
// swagger:response noteDBResponse
type NoteDBResponse struct {
	NoteDB
}

// NoteWOP is a Note without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type NoteWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Note_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoNoteStruct struct {
	// stores NoteDB according to their gorm ID
	Map_NoteDBID_NoteDB map[uint]*NoteDB

	// stores NoteDB ID according to Note address
	Map_NotePtr_NoteDBID map[*models.Note]uint

	// stores Note according to their gorm ID
	Map_NoteDBID_NotePtr map[uint]*models.Note

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNote *BackRepoNoteStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNote.stage
	return
}

func (backRepoNote *BackRepoNoteStruct) GetDB() *gorm.DB {
	return backRepoNote.db
}

// GetNoteDBFromNotePtr is a handy function to access the back repo instance from the stage instance
func (backRepoNote *BackRepoNoteStruct) GetNoteDBFromNotePtr(note *models.Note) (noteDB *NoteDB) {
	id := backRepoNote.Map_NotePtr_NoteDBID[note]
	noteDB = backRepoNote.Map_NoteDBID_NoteDB[id]
	return
}

// BackRepoNote.CommitPhaseOne commits all staged instances of Note to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNote *BackRepoNoteStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for note := range stage.Notes {
		backRepoNote.CommitPhaseOneInstance(note)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, note := range backRepoNote.Map_NoteDBID_NotePtr {
		if _, ok := stage.Notes[note]; !ok {
			backRepoNote.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNote.CommitDeleteInstance commits deletion of Note to the BackRepo
func (backRepoNote *BackRepoNoteStruct) CommitDeleteInstance(id uint) (Error error) {

	note := backRepoNote.Map_NoteDBID_NotePtr[id]

	// note is not staged anymore, remove noteDB
	noteDB := backRepoNote.Map_NoteDBID_NoteDB[id]
	query := backRepoNote.db.Unscoped().Delete(&noteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNote.Map_NotePtr_NoteDBID, note)
	delete(backRepoNote.Map_NoteDBID_NotePtr, id)
	delete(backRepoNote.Map_NoteDBID_NoteDB, id)

	return
}

// BackRepoNote.CommitPhaseOneInstance commits note staged instances of Note to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNote *BackRepoNoteStruct) CommitPhaseOneInstance(note *models.Note) (Error error) {

	// check if the note is not commited yet
	if _, ok := backRepoNote.Map_NotePtr_NoteDBID[note]; ok {
		return
	}

	// initiate note
	var noteDB NoteDB
	noteDB.CopyBasicFieldsFromNote(note)

	query := backRepoNote.db.Create(&noteDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNote.Map_NotePtr_NoteDBID[note] = noteDB.ID
	backRepoNote.Map_NoteDBID_NotePtr[noteDB.ID] = note
	backRepoNote.Map_NoteDBID_NoteDB[noteDB.ID] = &noteDB

	return
}

// BackRepoNote.CommitPhaseTwo commits all staged instances of Note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote *BackRepoNoteStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, note := range backRepoNote.Map_NoteDBID_NotePtr {
		backRepoNote.CommitPhaseTwoInstance(backRepo, idx, note)
	}

	return
}

// BackRepoNote.CommitPhaseTwoInstance commits {{structname }} of models.Note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote *BackRepoNoteStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, note *models.Note) (Error error) {

	// fetch matching noteDB
	if noteDB, ok := backRepoNote.Map_NoteDBID_NoteDB[idx]; ok {

		noteDB.CopyBasicFieldsFromNote(note)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		noteDB.NotePointersEncoding.Instrument = make([]int, 0)
		// 2. encode
		for _, instrumentAssocEnd := range note.Instrument {
			instrumentAssocEnd_DB :=
				backRepo.BackRepoInstrument.GetInstrumentDBFromInstrumentPtr(instrumentAssocEnd)
			
			// the stage might be inconsistant, meaning that the instrumentAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if instrumentAssocEnd_DB == nil {
				continue
			}
			
			noteDB.NotePointersEncoding.Instrument =
				append(noteDB.NotePointersEncoding.Instrument, int(instrumentAssocEnd_DB.ID))
		}

		// commit pointer value note.Type_ translates to updating the note.Type_ID
		noteDB.Type_ID.Valid = true // allow for a 0 value (nil association)
		if note.Type_ != nil {
			if Type_Id, ok := backRepo.BackRepoNote_type.Map_Note_typePtr_Note_typeDBID[note.Type_]; ok {
				noteDB.Type_ID.Int64 = int64(Type_Id)
				noteDB.Type_ID.Valid = true
			}
		} else {
			noteDB.Type_ID.Int64 = 0
			noteDB.Type_ID.Valid = true
		}

		// 1. reset
		noteDB.NotePointersEncoding.Dot = make([]int, 0)
		// 2. encode
		for _, empty_placementAssocEnd := range note.Dot {
			empty_placementAssocEnd_DB :=
				backRepo.BackRepoEmpty_placement.GetEmpty_placementDBFromEmpty_placementPtr(empty_placementAssocEnd)
			
			// the stage might be inconsistant, meaning that the empty_placementAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if empty_placementAssocEnd_DB == nil {
				continue
			}
			
			noteDB.NotePointersEncoding.Dot =
				append(noteDB.NotePointersEncoding.Dot, int(empty_placementAssocEnd_DB.ID))
		}

		// commit pointer value note.Accidental translates to updating the note.AccidentalID
		noteDB.AccidentalID.Valid = true // allow for a 0 value (nil association)
		if note.Accidental != nil {
			if AccidentalId, ok := backRepo.BackRepoAccidental.Map_AccidentalPtr_AccidentalDBID[note.Accidental]; ok {
				noteDB.AccidentalID.Int64 = int64(AccidentalId)
				noteDB.AccidentalID.Valid = true
			}
		} else {
			noteDB.AccidentalID.Int64 = 0
			noteDB.AccidentalID.Valid = true
		}

		// commit pointer value note.Time_modification translates to updating the note.Time_modificationID
		noteDB.Time_modificationID.Valid = true // allow for a 0 value (nil association)
		if note.Time_modification != nil {
			if Time_modificationId, ok := backRepo.BackRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[note.Time_modification]; ok {
				noteDB.Time_modificationID.Int64 = int64(Time_modificationId)
				noteDB.Time_modificationID.Valid = true
			}
		} else {
			noteDB.Time_modificationID.Int64 = 0
			noteDB.Time_modificationID.Valid = true
		}

		// commit pointer value note.Stem translates to updating the note.StemID
		noteDB.StemID.Valid = true // allow for a 0 value (nil association)
		if note.Stem != nil {
			if StemId, ok := backRepo.BackRepoStem.Map_StemPtr_StemDBID[note.Stem]; ok {
				noteDB.StemID.Int64 = int64(StemId)
				noteDB.StemID.Valid = true
			}
		} else {
			noteDB.StemID.Int64 = 0
			noteDB.StemID.Valid = true
		}

		// commit pointer value note.Notehead translates to updating the note.NoteheadID
		noteDB.NoteheadID.Valid = true // allow for a 0 value (nil association)
		if note.Notehead != nil {
			if NoteheadId, ok := backRepo.BackRepoNotehead.Map_NoteheadPtr_NoteheadDBID[note.Notehead]; ok {
				noteDB.NoteheadID.Int64 = int64(NoteheadId)
				noteDB.NoteheadID.Valid = true
			}
		} else {
			noteDB.NoteheadID.Int64 = 0
			noteDB.NoteheadID.Valid = true
		}

		// commit pointer value note.Notehead_text translates to updating the note.Notehead_textID
		noteDB.Notehead_textID.Valid = true // allow for a 0 value (nil association)
		if note.Notehead_text != nil {
			if Notehead_textId, ok := backRepo.BackRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[note.Notehead_text]; ok {
				noteDB.Notehead_textID.Int64 = int64(Notehead_textId)
				noteDB.Notehead_textID.Valid = true
			}
		} else {
			noteDB.Notehead_textID.Int64 = 0
			noteDB.Notehead_textID.Valid = true
		}

		// commit pointer value note.Beam translates to updating the note.BeamID
		noteDB.BeamID.Valid = true // allow for a 0 value (nil association)
		if note.Beam != nil {
			if BeamId, ok := backRepo.BackRepoBeam.Map_BeamPtr_BeamDBID[note.Beam]; ok {
				noteDB.BeamID.Int64 = int64(BeamId)
				noteDB.BeamID.Valid = true
			}
		} else {
			noteDB.BeamID.Int64 = 0
			noteDB.BeamID.Valid = true
		}

		// 1. reset
		noteDB.NotePointersEncoding.Notations = make([]int, 0)
		// 2. encode
		for _, notationsAssocEnd := range note.Notations {
			notationsAssocEnd_DB :=
				backRepo.BackRepoNotations.GetNotationsDBFromNotationsPtr(notationsAssocEnd)
			
			// the stage might be inconsistant, meaning that the notationsAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if notationsAssocEnd_DB == nil {
				continue
			}
			
			noteDB.NotePointersEncoding.Notations =
				append(noteDB.NotePointersEncoding.Notations, int(notationsAssocEnd_DB.ID))
		}

		// 1. reset
		noteDB.NotePointersEncoding.Lyric = make([]int, 0)
		// 2. encode
		for _, lyricAssocEnd := range note.Lyric {
			lyricAssocEnd_DB :=
				backRepo.BackRepoLyric.GetLyricDBFromLyricPtr(lyricAssocEnd)
			
			// the stage might be inconsistant, meaning that the lyricAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if lyricAssocEnd_DB == nil {
				continue
			}
			
			noteDB.NotePointersEncoding.Lyric =
				append(noteDB.NotePointersEncoding.Lyric, int(lyricAssocEnd_DB.ID))
		}

		// commit pointer value note.Play translates to updating the note.PlayID
		noteDB.PlayID.Valid = true // allow for a 0 value (nil association)
		if note.Play != nil {
			if PlayId, ok := backRepo.BackRepoPlay.Map_PlayPtr_PlayDBID[note.Play]; ok {
				noteDB.PlayID.Int64 = int64(PlayId)
				noteDB.PlayID.Valid = true
			}
		} else {
			noteDB.PlayID.Int64 = 0
			noteDB.PlayID.Valid = true
		}

		// commit pointer value note.Listen translates to updating the note.ListenID
		noteDB.ListenID.Valid = true // allow for a 0 value (nil association)
		if note.Listen != nil {
			if ListenId, ok := backRepo.BackRepoListen.Map_ListenPtr_ListenDBID[note.Listen]; ok {
				noteDB.ListenID.Int64 = int64(ListenId)
				noteDB.ListenID.Valid = true
			}
		} else {
			noteDB.ListenID.Int64 = 0
			noteDB.ListenID.Valid = true
		}

		query := backRepoNote.db.Save(&noteDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Note intance %s", note.Name))
		return err
	}

	return
}

// BackRepoNote.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNote *BackRepoNoteStruct) CheckoutPhaseOne() (Error error) {

	noteDBArray := make([]NoteDB, 0)
	query := backRepoNote.db.Find(&noteDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	noteInstancesToBeRemovedFromTheStage := make(map[*models.Note]any)
	for key, value := range backRepoNote.stage.Notes {
		noteInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, noteDB := range noteDBArray {
		backRepoNote.CheckoutPhaseOneInstance(&noteDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		note, ok := backRepoNote.Map_NoteDBID_NotePtr[noteDB.ID]
		if ok {
			delete(noteInstancesToBeRemovedFromTheStage, note)
		}
	}

	// remove from stage and back repo's 3 maps all notes that are not in the checkout
	for note := range noteInstancesToBeRemovedFromTheStage {
		note.Unstage(backRepoNote.GetStage())

		// remove instance from the back repo 3 maps
		noteID := backRepoNote.Map_NotePtr_NoteDBID[note]
		delete(backRepoNote.Map_NotePtr_NoteDBID, note)
		delete(backRepoNote.Map_NoteDBID_NoteDB, noteID)
		delete(backRepoNote.Map_NoteDBID_NotePtr, noteID)
	}

	return
}

// CheckoutPhaseOneInstance takes a noteDB that has been found in the DB, updates the backRepo and stages the
// models version of the noteDB
func (backRepoNote *BackRepoNoteStruct) CheckoutPhaseOneInstance(noteDB *NoteDB) (Error error) {

	note, ok := backRepoNote.Map_NoteDBID_NotePtr[noteDB.ID]
	if !ok {
		note = new(models.Note)

		backRepoNote.Map_NoteDBID_NotePtr[noteDB.ID] = note
		backRepoNote.Map_NotePtr_NoteDBID[note] = noteDB.ID

		// append model store with the new element
		note.Name = noteDB.Name_Data.String
		note.Stage(backRepoNote.GetStage())
	}
	noteDB.CopyBasicFieldsToNote(note)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	note.Stage(backRepoNote.GetStage())

	// preserve pointer to noteDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_NoteDBID_NoteDB)[noteDB hold variable pointers
	noteDB_Data := *noteDB
	preservedPtrToNote := &noteDB_Data
	backRepoNote.Map_NoteDBID_NoteDB[noteDB.ID] = preservedPtrToNote

	return
}

// BackRepoNote.CheckoutPhaseTwo Checkouts all staged instances of Note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote *BackRepoNoteStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, noteDB := range backRepoNote.Map_NoteDBID_NoteDB {
		backRepoNote.CheckoutPhaseTwoInstance(backRepo, noteDB)
	}
	return
}

// BackRepoNote.CheckoutPhaseTwoInstance Checkouts staged instances of Note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote *BackRepoNoteStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, noteDB *NoteDB) (Error error) {

	note := backRepoNote.Map_NoteDBID_NotePtr[noteDB.ID]

	noteDB.DecodePointers(backRepo, note)

	return
}

func (noteDB *NoteDB) DecodePointers(backRepo *BackRepoStruct, note *models.Note) {

	// insertion point for checkout of pointer encoding
	// This loop redeem note.Instrument in the stage from the encode in the back repo
	// It parses all InstrumentDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	note.Instrument = note.Instrument[:0]
	for _, _Instrumentid := range noteDB.NotePointersEncoding.Instrument {
		note.Instrument = append(note.Instrument, backRepo.BackRepoInstrument.Map_InstrumentDBID_InstrumentPtr[uint(_Instrumentid)])
	}

	// Type_ field
	note.Type_ = nil
	if noteDB.Type_ID.Int64 != 0 {
		note.Type_ = backRepo.BackRepoNote_type.Map_Note_typeDBID_Note_typePtr[uint(noteDB.Type_ID.Int64)]
	}
	// This loop redeem note.Dot in the stage from the encode in the back repo
	// It parses all Empty_placementDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	note.Dot = note.Dot[:0]
	for _, _Empty_placementid := range noteDB.NotePointersEncoding.Dot {
		note.Dot = append(note.Dot, backRepo.BackRepoEmpty_placement.Map_Empty_placementDBID_Empty_placementPtr[uint(_Empty_placementid)])
	}

	// Accidental field
	note.Accidental = nil
	if noteDB.AccidentalID.Int64 != 0 {
		note.Accidental = backRepo.BackRepoAccidental.Map_AccidentalDBID_AccidentalPtr[uint(noteDB.AccidentalID.Int64)]
	}
	// Time_modification field
	note.Time_modification = nil
	if noteDB.Time_modificationID.Int64 != 0 {
		note.Time_modification = backRepo.BackRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr[uint(noteDB.Time_modificationID.Int64)]
	}
	// Stem field
	note.Stem = nil
	if noteDB.StemID.Int64 != 0 {
		note.Stem = backRepo.BackRepoStem.Map_StemDBID_StemPtr[uint(noteDB.StemID.Int64)]
	}
	// Notehead field
	note.Notehead = nil
	if noteDB.NoteheadID.Int64 != 0 {
		note.Notehead = backRepo.BackRepoNotehead.Map_NoteheadDBID_NoteheadPtr[uint(noteDB.NoteheadID.Int64)]
	}
	// Notehead_text field
	note.Notehead_text = nil
	if noteDB.Notehead_textID.Int64 != 0 {
		note.Notehead_text = backRepo.BackRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr[uint(noteDB.Notehead_textID.Int64)]
	}
	// Beam field
	note.Beam = nil
	if noteDB.BeamID.Int64 != 0 {
		note.Beam = backRepo.BackRepoBeam.Map_BeamDBID_BeamPtr[uint(noteDB.BeamID.Int64)]
	}
	// This loop redeem note.Notations in the stage from the encode in the back repo
	// It parses all NotationsDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	note.Notations = note.Notations[:0]
	for _, _Notationsid := range noteDB.NotePointersEncoding.Notations {
		note.Notations = append(note.Notations, backRepo.BackRepoNotations.Map_NotationsDBID_NotationsPtr[uint(_Notationsid)])
	}

	// This loop redeem note.Lyric in the stage from the encode in the back repo
	// It parses all LyricDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	note.Lyric = note.Lyric[:0]
	for _, _Lyricid := range noteDB.NotePointersEncoding.Lyric {
		note.Lyric = append(note.Lyric, backRepo.BackRepoLyric.Map_LyricDBID_LyricPtr[uint(_Lyricid)])
	}

	// Play field
	note.Play = nil
	if noteDB.PlayID.Int64 != 0 {
		note.Play = backRepo.BackRepoPlay.Map_PlayDBID_PlayPtr[uint(noteDB.PlayID.Int64)]
	}
	// Listen field
	note.Listen = nil
	if noteDB.ListenID.Int64 != 0 {
		note.Listen = backRepo.BackRepoListen.Map_ListenDBID_ListenPtr[uint(noteDB.ListenID.Int64)]
	}
	return
}

// CommitNote allows commit of a single note (if already staged)
func (backRepo *BackRepoStruct) CommitNote(note *models.Note) {
	backRepo.BackRepoNote.CommitPhaseOneInstance(note)
	if id, ok := backRepo.BackRepoNote.Map_NotePtr_NoteDBID[note]; ok {
		backRepo.BackRepoNote.CommitPhaseTwoInstance(backRepo, id, note)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNote allows checkout of a single note (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNote(note *models.Note) {
	// check if the note is staged
	if _, ok := backRepo.BackRepoNote.Map_NotePtr_NoteDBID[note]; ok {

		if id, ok := backRepo.BackRepoNote.Map_NotePtr_NoteDBID[note]; ok {
			var noteDB NoteDB
			noteDB.ID = id

			if err := backRepo.BackRepoNote.db.First(&noteDB, id).Error; err != nil {
				log.Fatalln("CheckoutNote : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNote.CheckoutPhaseOneInstance(&noteDB)
			backRepo.BackRepoNote.CheckoutPhaseTwoInstance(backRepo, &noteDB)
		}
	}
}

// CopyBasicFieldsFromNote
func (noteDB *NoteDB) CopyBasicFieldsFromNote(note *models.Note) {
	// insertion point for fields commit

	noteDB.Name_Data.String = note.Name
	noteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNote_WOP
func (noteDB *NoteDB) CopyBasicFieldsFromNote_WOP(note *models.Note_WOP) {
	// insertion point for fields commit

	noteDB.Name_Data.String = note.Name
	noteDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNoteWOP
func (noteDB *NoteDB) CopyBasicFieldsFromNoteWOP(note *NoteWOP) {
	// insertion point for fields commit

	noteDB.Name_Data.String = note.Name
	noteDB.Name_Data.Valid = true
}

// CopyBasicFieldsToNote
func (noteDB *NoteDB) CopyBasicFieldsToNote(note *models.Note) {
	// insertion point for checkout of basic fields (back repo to stage)
	note.Name = noteDB.Name_Data.String
}

// CopyBasicFieldsToNote_WOP
func (noteDB *NoteDB) CopyBasicFieldsToNote_WOP(note *models.Note_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	note.Name = noteDB.Name_Data.String
}

// CopyBasicFieldsToNoteWOP
func (noteDB *NoteDB) CopyBasicFieldsToNoteWOP(note *NoteWOP) {
	note.ID = int(noteDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	note.Name = noteDB.Name_Data.String
}

// Backup generates a json file from a slice of all NoteDB instances in the backrepo
func (backRepoNote *BackRepoNoteStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "NoteDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteDB, 0)
	for _, noteDB := range backRepoNote.Map_NoteDBID_NoteDB {
		forBackup = append(forBackup, noteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Note ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Note file", err.Error())
	}
}

// Backup generates a json file from a slice of all NoteDB instances in the backrepo
func (backRepoNote *BackRepoNoteStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*NoteDB, 0)
	for _, noteDB := range backRepoNote.Map_NoteDBID_NoteDB {
		forBackup = append(forBackup, noteDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Note")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Note_Fields, -1)
	for _, noteDB := range forBackup {

		var noteWOP NoteWOP
		noteDB.CopyBasicFieldsToNoteWOP(&noteWOP)

		row := sh.AddRow()
		row.WriteStruct(&noteWOP, -1)
	}
}

// RestoreXL from the "Note" sheet all NoteDB instances
func (backRepoNote *BackRepoNoteStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNoteid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Note"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNote.rowVisitorNote)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNote *BackRepoNoteStruct) rowVisitorNote(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var noteWOP NoteWOP
		row.ReadStruct(&noteWOP)

		// add the unmarshalled struct to the stage
		noteDB := new(NoteDB)
		noteDB.CopyBasicFieldsFromNoteWOP(&noteWOP)

		noteDB_ID_atBackupTime := noteDB.ID
		noteDB.ID = 0
		query := backRepoNote.db.Create(noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNote.Map_NoteDBID_NoteDB[noteDB.ID] = noteDB
		BackRepoNoteid_atBckpTime_newID[noteDB_ID_atBackupTime] = noteDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "NoteDB.json" in dirPath that stores an array
// of NoteDB and stores it in the database
// the map BackRepoNoteid_atBckpTime_newID is updated accordingly
func (backRepoNote *BackRepoNoteStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNoteid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "NoteDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Note file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*NoteDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_NoteDBID_NoteDB
	for _, noteDB := range forRestore {

		noteDB_ID_atBackupTime := noteDB.ID
		noteDB.ID = 0
		query := backRepoNote.db.Create(noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNote.Map_NoteDBID_NoteDB[noteDB.ID] = noteDB
		BackRepoNoteid_atBckpTime_newID[noteDB_ID_atBackupTime] = noteDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Note file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Note>id_atBckpTime_newID
// to compute new index
func (backRepoNote *BackRepoNoteStruct) RestorePhaseTwo() {

	for _, noteDB := range backRepoNote.Map_NoteDBID_NoteDB {

		// next line of code is to avert unused variable compilation error
		_ = noteDB

		// insertion point for reindexing pointers encoding
		// reindexing Type_ field
		if noteDB.Type_ID.Int64 != 0 {
			noteDB.Type_ID.Int64 = int64(BackRepoNote_typeid_atBckpTime_newID[uint(noteDB.Type_ID.Int64)])
			noteDB.Type_ID.Valid = true
		}

		// reindexing Accidental field
		if noteDB.AccidentalID.Int64 != 0 {
			noteDB.AccidentalID.Int64 = int64(BackRepoAccidentalid_atBckpTime_newID[uint(noteDB.AccidentalID.Int64)])
			noteDB.AccidentalID.Valid = true
		}

		// reindexing Time_modification field
		if noteDB.Time_modificationID.Int64 != 0 {
			noteDB.Time_modificationID.Int64 = int64(BackRepoTime_modificationid_atBckpTime_newID[uint(noteDB.Time_modificationID.Int64)])
			noteDB.Time_modificationID.Valid = true
		}

		// reindexing Stem field
		if noteDB.StemID.Int64 != 0 {
			noteDB.StemID.Int64 = int64(BackRepoStemid_atBckpTime_newID[uint(noteDB.StemID.Int64)])
			noteDB.StemID.Valid = true
		}

		// reindexing Notehead field
		if noteDB.NoteheadID.Int64 != 0 {
			noteDB.NoteheadID.Int64 = int64(BackRepoNoteheadid_atBckpTime_newID[uint(noteDB.NoteheadID.Int64)])
			noteDB.NoteheadID.Valid = true
		}

		// reindexing Notehead_text field
		if noteDB.Notehead_textID.Int64 != 0 {
			noteDB.Notehead_textID.Int64 = int64(BackRepoNotehead_textid_atBckpTime_newID[uint(noteDB.Notehead_textID.Int64)])
			noteDB.Notehead_textID.Valid = true
		}

		// reindexing Beam field
		if noteDB.BeamID.Int64 != 0 {
			noteDB.BeamID.Int64 = int64(BackRepoBeamid_atBckpTime_newID[uint(noteDB.BeamID.Int64)])
			noteDB.BeamID.Valid = true
		}

		// reindexing Play field
		if noteDB.PlayID.Int64 != 0 {
			noteDB.PlayID.Int64 = int64(BackRepoPlayid_atBckpTime_newID[uint(noteDB.PlayID.Int64)])
			noteDB.PlayID.Valid = true
		}

		// reindexing Listen field
		if noteDB.ListenID.Int64 != 0 {
			noteDB.ListenID.Int64 = int64(BackRepoListenid_atBckpTime_newID[uint(noteDB.ListenID.Int64)])
			noteDB.ListenID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoNote.db.Model(noteDB).Updates(*noteDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNote.ResetReversePointers commits all staged instances of Note to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNote *BackRepoNoteStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, note := range backRepoNote.Map_NoteDBID_NotePtr {
		backRepoNote.ResetReversePointersInstance(backRepo, idx, note)
	}

	return
}

func (backRepoNote *BackRepoNoteStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, note *models.Note) (Error error) {

	// fetch matching noteDB
	if noteDB, ok := backRepoNote.Map_NoteDBID_NoteDB[idx]; ok {
		_ = noteDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNoteid_atBckpTime_newID map[uint]uint
