// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Dashes_sql sql.NullBool
var dummy_Dashes_time time.Duration
var dummy_Dashes_sort sort.Float64Slice

// DashesAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model dashesAPI
type DashesAPI struct {
	gorm.Model

	models.Dashes_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DashesPointersEncoding DashesPointersEncoding
}

// DashesPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DashesPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DashesDB describes a dashes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model dashesDB
type DashesDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field dashesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DashesPointersEncoding
}

// DashesDBs arrays dashesDBs
// swagger:response dashesDBsResponse
type DashesDBs []DashesDB

// DashesDBResponse provides response
// swagger:response dashesDBResponse
type DashesDBResponse struct {
	DashesDB
}

// DashesWOP is a Dashes without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DashesWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Dashes_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDashesStruct struct {
	// stores DashesDB according to their gorm ID
	Map_DashesDBID_DashesDB map[uint]*DashesDB

	// stores DashesDB ID according to Dashes address
	Map_DashesPtr_DashesDBID map[*models.Dashes]uint

	// stores Dashes according to their gorm ID
	Map_DashesDBID_DashesPtr map[uint]*models.Dashes

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDashes *BackRepoDashesStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDashes.stage
	return
}

func (backRepoDashes *BackRepoDashesStruct) GetDB() *gorm.DB {
	return backRepoDashes.db
}

// GetDashesDBFromDashesPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDashes *BackRepoDashesStruct) GetDashesDBFromDashesPtr(dashes *models.Dashes) (dashesDB *DashesDB) {
	id := backRepoDashes.Map_DashesPtr_DashesDBID[dashes]
	dashesDB = backRepoDashes.Map_DashesDBID_DashesDB[id]
	return
}

// BackRepoDashes.CommitPhaseOne commits all staged instances of Dashes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDashes *BackRepoDashesStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for dashes := range stage.Dashess {
		backRepoDashes.CommitPhaseOneInstance(dashes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, dashes := range backRepoDashes.Map_DashesDBID_DashesPtr {
		if _, ok := stage.Dashess[dashes]; !ok {
			backRepoDashes.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDashes.CommitDeleteInstance commits deletion of Dashes to the BackRepo
func (backRepoDashes *BackRepoDashesStruct) CommitDeleteInstance(id uint) (Error error) {

	dashes := backRepoDashes.Map_DashesDBID_DashesPtr[id]

	// dashes is not staged anymore, remove dashesDB
	dashesDB := backRepoDashes.Map_DashesDBID_DashesDB[id]
	query := backRepoDashes.db.Unscoped().Delete(&dashesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDashes.Map_DashesPtr_DashesDBID, dashes)
	delete(backRepoDashes.Map_DashesDBID_DashesPtr, id)
	delete(backRepoDashes.Map_DashesDBID_DashesDB, id)

	return
}

// BackRepoDashes.CommitPhaseOneInstance commits dashes staged instances of Dashes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDashes *BackRepoDashesStruct) CommitPhaseOneInstance(dashes *models.Dashes) (Error error) {

	// check if the dashes is not commited yet
	if _, ok := backRepoDashes.Map_DashesPtr_DashesDBID[dashes]; ok {
		return
	}

	// initiate dashes
	var dashesDB DashesDB
	dashesDB.CopyBasicFieldsFromDashes(dashes)

	query := backRepoDashes.db.Create(&dashesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDashes.Map_DashesPtr_DashesDBID[dashes] = dashesDB.ID
	backRepoDashes.Map_DashesDBID_DashesPtr[dashesDB.ID] = dashes
	backRepoDashes.Map_DashesDBID_DashesDB[dashesDB.ID] = &dashesDB

	return
}

// BackRepoDashes.CommitPhaseTwo commits all staged instances of Dashes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDashes *BackRepoDashesStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, dashes := range backRepoDashes.Map_DashesDBID_DashesPtr {
		backRepoDashes.CommitPhaseTwoInstance(backRepo, idx, dashes)
	}

	return
}

// BackRepoDashes.CommitPhaseTwoInstance commits {{structname }} of models.Dashes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDashes *BackRepoDashesStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, dashes *models.Dashes) (Error error) {

	// fetch matching dashesDB
	if dashesDB, ok := backRepoDashes.Map_DashesDBID_DashesDB[idx]; ok {

		dashesDB.CopyBasicFieldsFromDashes(dashes)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDashes.db.Save(&dashesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Dashes intance %s", dashes.Name))
		return err
	}

	return
}

// BackRepoDashes.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDashes *BackRepoDashesStruct) CheckoutPhaseOne() (Error error) {

	dashesDBArray := make([]DashesDB, 0)
	query := backRepoDashes.db.Find(&dashesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	dashesInstancesToBeRemovedFromTheStage := make(map[*models.Dashes]any)
	for key, value := range backRepoDashes.stage.Dashess {
		dashesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, dashesDB := range dashesDBArray {
		backRepoDashes.CheckoutPhaseOneInstance(&dashesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		dashes, ok := backRepoDashes.Map_DashesDBID_DashesPtr[dashesDB.ID]
		if ok {
			delete(dashesInstancesToBeRemovedFromTheStage, dashes)
		}
	}

	// remove from stage and back repo's 3 maps all dashess that are not in the checkout
	for dashes := range dashesInstancesToBeRemovedFromTheStage {
		dashes.Unstage(backRepoDashes.GetStage())

		// remove instance from the back repo 3 maps
		dashesID := backRepoDashes.Map_DashesPtr_DashesDBID[dashes]
		delete(backRepoDashes.Map_DashesPtr_DashesDBID, dashes)
		delete(backRepoDashes.Map_DashesDBID_DashesDB, dashesID)
		delete(backRepoDashes.Map_DashesDBID_DashesPtr, dashesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a dashesDB that has been found in the DB, updates the backRepo and stages the
// models version of the dashesDB
func (backRepoDashes *BackRepoDashesStruct) CheckoutPhaseOneInstance(dashesDB *DashesDB) (Error error) {

	dashes, ok := backRepoDashes.Map_DashesDBID_DashesPtr[dashesDB.ID]
	if !ok {
		dashes = new(models.Dashes)

		backRepoDashes.Map_DashesDBID_DashesPtr[dashesDB.ID] = dashes
		backRepoDashes.Map_DashesPtr_DashesDBID[dashes] = dashesDB.ID

		// append model store with the new element
		dashes.Name = dashesDB.Name_Data.String
		dashes.Stage(backRepoDashes.GetStage())
	}
	dashesDB.CopyBasicFieldsToDashes(dashes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	dashes.Stage(backRepoDashes.GetStage())

	// preserve pointer to dashesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DashesDBID_DashesDB)[dashesDB hold variable pointers
	dashesDB_Data := *dashesDB
	preservedPtrToDashes := &dashesDB_Data
	backRepoDashes.Map_DashesDBID_DashesDB[dashesDB.ID] = preservedPtrToDashes

	return
}

// BackRepoDashes.CheckoutPhaseTwo Checkouts all staged instances of Dashes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDashes *BackRepoDashesStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, dashesDB := range backRepoDashes.Map_DashesDBID_DashesDB {
		backRepoDashes.CheckoutPhaseTwoInstance(backRepo, dashesDB)
	}
	return
}

// BackRepoDashes.CheckoutPhaseTwoInstance Checkouts staged instances of Dashes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDashes *BackRepoDashesStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, dashesDB *DashesDB) (Error error) {

	dashes := backRepoDashes.Map_DashesDBID_DashesPtr[dashesDB.ID]

	dashesDB.DecodePointers(backRepo, dashes)

	return
}

func (dashesDB *DashesDB) DecodePointers(backRepo *BackRepoStruct, dashes *models.Dashes) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDashes allows commit of a single dashes (if already staged)
func (backRepo *BackRepoStruct) CommitDashes(dashes *models.Dashes) {
	backRepo.BackRepoDashes.CommitPhaseOneInstance(dashes)
	if id, ok := backRepo.BackRepoDashes.Map_DashesPtr_DashesDBID[dashes]; ok {
		backRepo.BackRepoDashes.CommitPhaseTwoInstance(backRepo, id, dashes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDashes allows checkout of a single dashes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDashes(dashes *models.Dashes) {
	// check if the dashes is staged
	if _, ok := backRepo.BackRepoDashes.Map_DashesPtr_DashesDBID[dashes]; ok {

		if id, ok := backRepo.BackRepoDashes.Map_DashesPtr_DashesDBID[dashes]; ok {
			var dashesDB DashesDB
			dashesDB.ID = id

			if err := backRepo.BackRepoDashes.db.First(&dashesDB, id).Error; err != nil {
				log.Fatalln("CheckoutDashes : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDashes.CheckoutPhaseOneInstance(&dashesDB)
			backRepo.BackRepoDashes.CheckoutPhaseTwoInstance(backRepo, &dashesDB)
		}
	}
}

// CopyBasicFieldsFromDashes
func (dashesDB *DashesDB) CopyBasicFieldsFromDashes(dashes *models.Dashes) {
	// insertion point for fields commit

	dashesDB.Name_Data.String = dashes.Name
	dashesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDashes_WOP
func (dashesDB *DashesDB) CopyBasicFieldsFromDashes_WOP(dashes *models.Dashes_WOP) {
	// insertion point for fields commit

	dashesDB.Name_Data.String = dashes.Name
	dashesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDashesWOP
func (dashesDB *DashesDB) CopyBasicFieldsFromDashesWOP(dashes *DashesWOP) {
	// insertion point for fields commit

	dashesDB.Name_Data.String = dashes.Name
	dashesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDashes
func (dashesDB *DashesDB) CopyBasicFieldsToDashes(dashes *models.Dashes) {
	// insertion point for checkout of basic fields (back repo to stage)
	dashes.Name = dashesDB.Name_Data.String
}

// CopyBasicFieldsToDashes_WOP
func (dashesDB *DashesDB) CopyBasicFieldsToDashes_WOP(dashes *models.Dashes_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	dashes.Name = dashesDB.Name_Data.String
}

// CopyBasicFieldsToDashesWOP
func (dashesDB *DashesDB) CopyBasicFieldsToDashesWOP(dashes *DashesWOP) {
	dashes.ID = int(dashesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	dashes.Name = dashesDB.Name_Data.String
}

// Backup generates a json file from a slice of all DashesDB instances in the backrepo
func (backRepoDashes *BackRepoDashesStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DashesDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DashesDB, 0)
	for _, dashesDB := range backRepoDashes.Map_DashesDBID_DashesDB {
		forBackup = append(forBackup, dashesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Dashes ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Dashes file", err.Error())
	}
}

// Backup generates a json file from a slice of all DashesDB instances in the backrepo
func (backRepoDashes *BackRepoDashesStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DashesDB, 0)
	for _, dashesDB := range backRepoDashes.Map_DashesDBID_DashesDB {
		forBackup = append(forBackup, dashesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Dashes")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Dashes_Fields, -1)
	for _, dashesDB := range forBackup {

		var dashesWOP DashesWOP
		dashesDB.CopyBasicFieldsToDashesWOP(&dashesWOP)

		row := sh.AddRow()
		row.WriteStruct(&dashesWOP, -1)
	}
}

// RestoreXL from the "Dashes" sheet all DashesDB instances
func (backRepoDashes *BackRepoDashesStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDashesid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Dashes"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDashes.rowVisitorDashes)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDashes *BackRepoDashesStruct) rowVisitorDashes(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var dashesWOP DashesWOP
		row.ReadStruct(&dashesWOP)

		// add the unmarshalled struct to the stage
		dashesDB := new(DashesDB)
		dashesDB.CopyBasicFieldsFromDashesWOP(&dashesWOP)

		dashesDB_ID_atBackupTime := dashesDB.ID
		dashesDB.ID = 0
		query := backRepoDashes.db.Create(dashesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDashes.Map_DashesDBID_DashesDB[dashesDB.ID] = dashesDB
		BackRepoDashesid_atBckpTime_newID[dashesDB_ID_atBackupTime] = dashesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DashesDB.json" in dirPath that stores an array
// of DashesDB and stores it in the database
// the map BackRepoDashesid_atBckpTime_newID is updated accordingly
func (backRepoDashes *BackRepoDashesStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDashesid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DashesDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Dashes file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DashesDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DashesDBID_DashesDB
	for _, dashesDB := range forRestore {

		dashesDB_ID_atBackupTime := dashesDB.ID
		dashesDB.ID = 0
		query := backRepoDashes.db.Create(dashesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDashes.Map_DashesDBID_DashesDB[dashesDB.ID] = dashesDB
		BackRepoDashesid_atBckpTime_newID[dashesDB_ID_atBackupTime] = dashesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Dashes file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Dashes>id_atBckpTime_newID
// to compute new index
func (backRepoDashes *BackRepoDashesStruct) RestorePhaseTwo() {

	for _, dashesDB := range backRepoDashes.Map_DashesDBID_DashesDB {

		// next line of code is to avert unused variable compilation error
		_ = dashesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDashes.db.Model(dashesDB).Updates(*dashesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDashes.ResetReversePointers commits all staged instances of Dashes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDashes *BackRepoDashesStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, dashes := range backRepoDashes.Map_DashesDBID_DashesPtr {
		backRepoDashes.ResetReversePointersInstance(backRepo, idx, dashes)
	}

	return
}

func (backRepoDashes *BackRepoDashesStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, dashes *models.Dashes) (Error error) {

	// fetch matching dashesDB
	if dashesDB, ok := backRepoDashes.Map_DashesDBID_DashesDB[idx]; ok {
		_ = dashesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDashesid_atBckpTime_newID map[uint]uint
