// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Glass_sql sql.NullBool
var dummy_Glass_time time.Duration
var dummy_Glass_sort sort.Float64Slice

// GlassAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model glassAPI
type GlassAPI struct {
	gorm.Model

	models.Glass_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GlassPointersEncoding GlassPointersEncoding
}

// GlassPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GlassPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GlassDB describes a glass in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model glassDB
type GlassDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field glassDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GlassPointersEncoding
}

// GlassDBs arrays glassDBs
// swagger:response glassDBsResponse
type GlassDBs []GlassDB

// GlassDBResponse provides response
// swagger:response glassDBResponse
type GlassDBResponse struct {
	GlassDB
}

// GlassWOP is a Glass without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GlassWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Glass_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGlassStruct struct {
	// stores GlassDB according to their gorm ID
	Map_GlassDBID_GlassDB map[uint]*GlassDB

	// stores GlassDB ID according to Glass address
	Map_GlassPtr_GlassDBID map[*models.Glass]uint

	// stores Glass according to their gorm ID
	Map_GlassDBID_GlassPtr map[uint]*models.Glass

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGlass *BackRepoGlassStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGlass.stage
	return
}

func (backRepoGlass *BackRepoGlassStruct) GetDB() *gorm.DB {
	return backRepoGlass.db
}

// GetGlassDBFromGlassPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGlass *BackRepoGlassStruct) GetGlassDBFromGlassPtr(glass *models.Glass) (glassDB *GlassDB) {
	id := backRepoGlass.Map_GlassPtr_GlassDBID[glass]
	glassDB = backRepoGlass.Map_GlassDBID_GlassDB[id]
	return
}

// BackRepoGlass.CommitPhaseOne commits all staged instances of Glass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGlass *BackRepoGlassStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for glass := range stage.Glasss {
		backRepoGlass.CommitPhaseOneInstance(glass)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, glass := range backRepoGlass.Map_GlassDBID_GlassPtr {
		if _, ok := stage.Glasss[glass]; !ok {
			backRepoGlass.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGlass.CommitDeleteInstance commits deletion of Glass to the BackRepo
func (backRepoGlass *BackRepoGlassStruct) CommitDeleteInstance(id uint) (Error error) {

	glass := backRepoGlass.Map_GlassDBID_GlassPtr[id]

	// glass is not staged anymore, remove glassDB
	glassDB := backRepoGlass.Map_GlassDBID_GlassDB[id]
	query := backRepoGlass.db.Unscoped().Delete(&glassDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGlass.Map_GlassPtr_GlassDBID, glass)
	delete(backRepoGlass.Map_GlassDBID_GlassPtr, id)
	delete(backRepoGlass.Map_GlassDBID_GlassDB, id)

	return
}

// BackRepoGlass.CommitPhaseOneInstance commits glass staged instances of Glass to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGlass *BackRepoGlassStruct) CommitPhaseOneInstance(glass *models.Glass) (Error error) {

	// check if the glass is not commited yet
	if _, ok := backRepoGlass.Map_GlassPtr_GlassDBID[glass]; ok {
		return
	}

	// initiate glass
	var glassDB GlassDB
	glassDB.CopyBasicFieldsFromGlass(glass)

	query := backRepoGlass.db.Create(&glassDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGlass.Map_GlassPtr_GlassDBID[glass] = glassDB.ID
	backRepoGlass.Map_GlassDBID_GlassPtr[glassDB.ID] = glass
	backRepoGlass.Map_GlassDBID_GlassDB[glassDB.ID] = &glassDB

	return
}

// BackRepoGlass.CommitPhaseTwo commits all staged instances of Glass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlass *BackRepoGlassStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, glass := range backRepoGlass.Map_GlassDBID_GlassPtr {
		backRepoGlass.CommitPhaseTwoInstance(backRepo, idx, glass)
	}

	return
}

// BackRepoGlass.CommitPhaseTwoInstance commits {{structname }} of models.Glass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlass *BackRepoGlassStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, glass *models.Glass) (Error error) {

	// fetch matching glassDB
	if glassDB, ok := backRepoGlass.Map_GlassDBID_GlassDB[idx]; ok {

		glassDB.CopyBasicFieldsFromGlass(glass)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGlass.db.Save(&glassDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Glass intance %s", glass.Name))
		return err
	}

	return
}

// BackRepoGlass.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGlass *BackRepoGlassStruct) CheckoutPhaseOne() (Error error) {

	glassDBArray := make([]GlassDB, 0)
	query := backRepoGlass.db.Find(&glassDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	glassInstancesToBeRemovedFromTheStage := make(map[*models.Glass]any)
	for key, value := range backRepoGlass.stage.Glasss {
		glassInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, glassDB := range glassDBArray {
		backRepoGlass.CheckoutPhaseOneInstance(&glassDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		glass, ok := backRepoGlass.Map_GlassDBID_GlassPtr[glassDB.ID]
		if ok {
			delete(glassInstancesToBeRemovedFromTheStage, glass)
		}
	}

	// remove from stage and back repo's 3 maps all glasss that are not in the checkout
	for glass := range glassInstancesToBeRemovedFromTheStage {
		glass.Unstage(backRepoGlass.GetStage())

		// remove instance from the back repo 3 maps
		glassID := backRepoGlass.Map_GlassPtr_GlassDBID[glass]
		delete(backRepoGlass.Map_GlassPtr_GlassDBID, glass)
		delete(backRepoGlass.Map_GlassDBID_GlassDB, glassID)
		delete(backRepoGlass.Map_GlassDBID_GlassPtr, glassID)
	}

	return
}

// CheckoutPhaseOneInstance takes a glassDB that has been found in the DB, updates the backRepo and stages the
// models version of the glassDB
func (backRepoGlass *BackRepoGlassStruct) CheckoutPhaseOneInstance(glassDB *GlassDB) (Error error) {

	glass, ok := backRepoGlass.Map_GlassDBID_GlassPtr[glassDB.ID]
	if !ok {
		glass = new(models.Glass)

		backRepoGlass.Map_GlassDBID_GlassPtr[glassDB.ID] = glass
		backRepoGlass.Map_GlassPtr_GlassDBID[glass] = glassDB.ID

		// append model store with the new element
		glass.Name = glassDB.Name_Data.String
		glass.Stage(backRepoGlass.GetStage())
	}
	glassDB.CopyBasicFieldsToGlass(glass)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	glass.Stage(backRepoGlass.GetStage())

	// preserve pointer to glassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GlassDBID_GlassDB)[glassDB hold variable pointers
	glassDB_Data := *glassDB
	preservedPtrToGlass := &glassDB_Data
	backRepoGlass.Map_GlassDBID_GlassDB[glassDB.ID] = preservedPtrToGlass

	return
}

// BackRepoGlass.CheckoutPhaseTwo Checkouts all staged instances of Glass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlass *BackRepoGlassStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, glassDB := range backRepoGlass.Map_GlassDBID_GlassDB {
		backRepoGlass.CheckoutPhaseTwoInstance(backRepo, glassDB)
	}
	return
}

// BackRepoGlass.CheckoutPhaseTwoInstance Checkouts staged instances of Glass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlass *BackRepoGlassStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, glassDB *GlassDB) (Error error) {

	glass := backRepoGlass.Map_GlassDBID_GlassPtr[glassDB.ID]

	glassDB.DecodePointers(backRepo, glass)

	return
}

func (glassDB *GlassDB) DecodePointers(backRepo *BackRepoStruct, glass *models.Glass) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGlass allows commit of a single glass (if already staged)
func (backRepo *BackRepoStruct) CommitGlass(glass *models.Glass) {
	backRepo.BackRepoGlass.CommitPhaseOneInstance(glass)
	if id, ok := backRepo.BackRepoGlass.Map_GlassPtr_GlassDBID[glass]; ok {
		backRepo.BackRepoGlass.CommitPhaseTwoInstance(backRepo, id, glass)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGlass allows checkout of a single glass (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGlass(glass *models.Glass) {
	// check if the glass is staged
	if _, ok := backRepo.BackRepoGlass.Map_GlassPtr_GlassDBID[glass]; ok {

		if id, ok := backRepo.BackRepoGlass.Map_GlassPtr_GlassDBID[glass]; ok {
			var glassDB GlassDB
			glassDB.ID = id

			if err := backRepo.BackRepoGlass.db.First(&glassDB, id).Error; err != nil {
				log.Fatalln("CheckoutGlass : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGlass.CheckoutPhaseOneInstance(&glassDB)
			backRepo.BackRepoGlass.CheckoutPhaseTwoInstance(backRepo, &glassDB)
		}
	}
}

// CopyBasicFieldsFromGlass
func (glassDB *GlassDB) CopyBasicFieldsFromGlass(glass *models.Glass) {
	// insertion point for fields commit

	glassDB.Name_Data.String = glass.Name
	glassDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGlass_WOP
func (glassDB *GlassDB) CopyBasicFieldsFromGlass_WOP(glass *models.Glass_WOP) {
	// insertion point for fields commit

	glassDB.Name_Data.String = glass.Name
	glassDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGlassWOP
func (glassDB *GlassDB) CopyBasicFieldsFromGlassWOP(glass *GlassWOP) {
	// insertion point for fields commit

	glassDB.Name_Data.String = glass.Name
	glassDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGlass
func (glassDB *GlassDB) CopyBasicFieldsToGlass(glass *models.Glass) {
	// insertion point for checkout of basic fields (back repo to stage)
	glass.Name = glassDB.Name_Data.String
}

// CopyBasicFieldsToGlass_WOP
func (glassDB *GlassDB) CopyBasicFieldsToGlass_WOP(glass *models.Glass_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	glass.Name = glassDB.Name_Data.String
}

// CopyBasicFieldsToGlassWOP
func (glassDB *GlassDB) CopyBasicFieldsToGlassWOP(glass *GlassWOP) {
	glass.ID = int(glassDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	glass.Name = glassDB.Name_Data.String
}

// Backup generates a json file from a slice of all GlassDB instances in the backrepo
func (backRepoGlass *BackRepoGlassStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GlassDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GlassDB, 0)
	for _, glassDB := range backRepoGlass.Map_GlassDBID_GlassDB {
		forBackup = append(forBackup, glassDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Glass ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Glass file", err.Error())
	}
}

// Backup generates a json file from a slice of all GlassDB instances in the backrepo
func (backRepoGlass *BackRepoGlassStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GlassDB, 0)
	for _, glassDB := range backRepoGlass.Map_GlassDBID_GlassDB {
		forBackup = append(forBackup, glassDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Glass")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Glass_Fields, -1)
	for _, glassDB := range forBackup {

		var glassWOP GlassWOP
		glassDB.CopyBasicFieldsToGlassWOP(&glassWOP)

		row := sh.AddRow()
		row.WriteStruct(&glassWOP, -1)
	}
}

// RestoreXL from the "Glass" sheet all GlassDB instances
func (backRepoGlass *BackRepoGlassStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGlassid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Glass"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGlass.rowVisitorGlass)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGlass *BackRepoGlassStruct) rowVisitorGlass(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var glassWOP GlassWOP
		row.ReadStruct(&glassWOP)

		// add the unmarshalled struct to the stage
		glassDB := new(GlassDB)
		glassDB.CopyBasicFieldsFromGlassWOP(&glassWOP)

		glassDB_ID_atBackupTime := glassDB.ID
		glassDB.ID = 0
		query := backRepoGlass.db.Create(glassDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGlass.Map_GlassDBID_GlassDB[glassDB.ID] = glassDB
		BackRepoGlassid_atBckpTime_newID[glassDB_ID_atBackupTime] = glassDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GlassDB.json" in dirPath that stores an array
// of GlassDB and stores it in the database
// the map BackRepoGlassid_atBckpTime_newID is updated accordingly
func (backRepoGlass *BackRepoGlassStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGlassid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GlassDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Glass file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GlassDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GlassDBID_GlassDB
	for _, glassDB := range forRestore {

		glassDB_ID_atBackupTime := glassDB.ID
		glassDB.ID = 0
		query := backRepoGlass.db.Create(glassDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGlass.Map_GlassDBID_GlassDB[glassDB.ID] = glassDB
		BackRepoGlassid_atBckpTime_newID[glassDB_ID_atBackupTime] = glassDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Glass file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Glass>id_atBckpTime_newID
// to compute new index
func (backRepoGlass *BackRepoGlassStruct) RestorePhaseTwo() {

	for _, glassDB := range backRepoGlass.Map_GlassDBID_GlassDB {

		// next line of code is to avert unused variable compilation error
		_ = glassDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGlass.db.Model(glassDB).Updates(*glassDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGlass.ResetReversePointers commits all staged instances of Glass to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGlass *BackRepoGlassStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, glass := range backRepoGlass.Map_GlassDBID_GlassPtr {
		backRepoGlass.ResetReversePointersInstance(backRepo, idx, glass)
	}

	return
}

func (backRepoGlass *BackRepoGlassStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, glass *models.Glass) (Error error) {

	// fetch matching glassDB
	if glassDB, ok := backRepoGlass.Map_GlassDBID_GlassDB[idx]; ok {
		_ = glassDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGlassid_atBckpTime_newID map[uint]uint
