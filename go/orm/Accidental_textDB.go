// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Accidental_text_sql sql.NullBool
var dummy_Accidental_text_time time.Duration
var dummy_Accidental_text_sort sort.Float64Slice

// Accidental_textAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model accidental_textAPI
type Accidental_textAPI struct {
	gorm.Model

	models.Accidental_text_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Accidental_textPointersEncoding Accidental_textPointersEncoding
}

// Accidental_textPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Accidental_textPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Accidental_textDB describes a accidental_text in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model accidental_textDB
type Accidental_textDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field accidental_textDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Accidental_textPointersEncoding
}

// Accidental_textDBs arrays accidental_textDBs
// swagger:response accidental_textDBsResponse
type Accidental_textDBs []Accidental_textDB

// Accidental_textDBResponse provides response
// swagger:response accidental_textDBResponse
type Accidental_textDBResponse struct {
	Accidental_textDB
}

// Accidental_textWOP is a Accidental_text without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Accidental_textWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Accidental_text_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAccidental_textStruct struct {
	// stores Accidental_textDB according to their gorm ID
	Map_Accidental_textDBID_Accidental_textDB map[uint]*Accidental_textDB

	// stores Accidental_textDB ID according to Accidental_text address
	Map_Accidental_textPtr_Accidental_textDBID map[*models.Accidental_text]uint

	// stores Accidental_text according to their gorm ID
	Map_Accidental_textDBID_Accidental_textPtr map[uint]*models.Accidental_text

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAccidental_text *BackRepoAccidental_textStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAccidental_text.stage
	return
}

func (backRepoAccidental_text *BackRepoAccidental_textStruct) GetDB() *gorm.DB {
	return backRepoAccidental_text.db
}

// GetAccidental_textDBFromAccidental_textPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAccidental_text *BackRepoAccidental_textStruct) GetAccidental_textDBFromAccidental_textPtr(accidental_text *models.Accidental_text) (accidental_textDB *Accidental_textDB) {
	id := backRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text]
	accidental_textDB = backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[id]
	return
}

// BackRepoAccidental_text.CommitPhaseOne commits all staged instances of Accidental_text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for accidental_text := range stage.Accidental_texts {
		backRepoAccidental_text.CommitPhaseOneInstance(accidental_text)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, accidental_text := range backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr {
		if _, ok := stage.Accidental_texts[accidental_text]; !ok {
			backRepoAccidental_text.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAccidental_text.CommitDeleteInstance commits deletion of Accidental_text to the BackRepo
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CommitDeleteInstance(id uint) (Error error) {

	accidental_text := backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[id]

	// accidental_text is not staged anymore, remove accidental_textDB
	accidental_textDB := backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[id]
	query := backRepoAccidental_text.db.Unscoped().Delete(&accidental_textDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID, accidental_text)
	delete(backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr, id)
	delete(backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB, id)

	return
}

// BackRepoAccidental_text.CommitPhaseOneInstance commits accidental_text staged instances of Accidental_text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CommitPhaseOneInstance(accidental_text *models.Accidental_text) (Error error) {

	// check if the accidental_text is not commited yet
	if _, ok := backRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text]; ok {
		return
	}

	// initiate accidental_text
	var accidental_textDB Accidental_textDB
	accidental_textDB.CopyBasicFieldsFromAccidental_text(accidental_text)

	query := backRepoAccidental_text.db.Create(&accidental_textDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text] = accidental_textDB.ID
	backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[accidental_textDB.ID] = accidental_text
	backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[accidental_textDB.ID] = &accidental_textDB

	return
}

// BackRepoAccidental_text.CommitPhaseTwo commits all staged instances of Accidental_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, accidental_text := range backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr {
		backRepoAccidental_text.CommitPhaseTwoInstance(backRepo, idx, accidental_text)
	}

	return
}

// BackRepoAccidental_text.CommitPhaseTwoInstance commits {{structname }} of models.Accidental_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, accidental_text *models.Accidental_text) (Error error) {

	// fetch matching accidental_textDB
	if accidental_textDB, ok := backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[idx]; ok {

		accidental_textDB.CopyBasicFieldsFromAccidental_text(accidental_text)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoAccidental_text.db.Save(&accidental_textDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Accidental_text intance %s", accidental_text.Name))
		return err
	}

	return
}

// BackRepoAccidental_text.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CheckoutPhaseOne() (Error error) {

	accidental_textDBArray := make([]Accidental_textDB, 0)
	query := backRepoAccidental_text.db.Find(&accidental_textDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	accidental_textInstancesToBeRemovedFromTheStage := make(map[*models.Accidental_text]any)
	for key, value := range backRepoAccidental_text.stage.Accidental_texts {
		accidental_textInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, accidental_textDB := range accidental_textDBArray {
		backRepoAccidental_text.CheckoutPhaseOneInstance(&accidental_textDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		accidental_text, ok := backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[accidental_textDB.ID]
		if ok {
			delete(accidental_textInstancesToBeRemovedFromTheStage, accidental_text)
		}
	}

	// remove from stage and back repo's 3 maps all accidental_texts that are not in the checkout
	for accidental_text := range accidental_textInstancesToBeRemovedFromTheStage {
		accidental_text.Unstage(backRepoAccidental_text.GetStage())

		// remove instance from the back repo 3 maps
		accidental_textID := backRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text]
		delete(backRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID, accidental_text)
		delete(backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB, accidental_textID)
		delete(backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr, accidental_textID)
	}

	return
}

// CheckoutPhaseOneInstance takes a accidental_textDB that has been found in the DB, updates the backRepo and stages the
// models version of the accidental_textDB
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CheckoutPhaseOneInstance(accidental_textDB *Accidental_textDB) (Error error) {

	accidental_text, ok := backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[accidental_textDB.ID]
	if !ok {
		accidental_text = new(models.Accidental_text)

		backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[accidental_textDB.ID] = accidental_text
		backRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text] = accidental_textDB.ID

		// append model store with the new element
		accidental_text.Name = accidental_textDB.Name_Data.String
		accidental_text.Stage(backRepoAccidental_text.GetStage())
	}
	accidental_textDB.CopyBasicFieldsToAccidental_text(accidental_text)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	accidental_text.Stage(backRepoAccidental_text.GetStage())

	// preserve pointer to accidental_textDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Accidental_textDBID_Accidental_textDB)[accidental_textDB hold variable pointers
	accidental_textDB_Data := *accidental_textDB
	preservedPtrToAccidental_text := &accidental_textDB_Data
	backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[accidental_textDB.ID] = preservedPtrToAccidental_text

	return
}

// BackRepoAccidental_text.CheckoutPhaseTwo Checkouts all staged instances of Accidental_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, accidental_textDB := range backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB {
		backRepoAccidental_text.CheckoutPhaseTwoInstance(backRepo, accidental_textDB)
	}
	return
}

// BackRepoAccidental_text.CheckoutPhaseTwoInstance Checkouts staged instances of Accidental_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccidental_text *BackRepoAccidental_textStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, accidental_textDB *Accidental_textDB) (Error error) {

	accidental_text := backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[accidental_textDB.ID]

	accidental_textDB.DecodePointers(backRepo, accidental_text)

	return
}

func (accidental_textDB *Accidental_textDB) DecodePointers(backRepo *BackRepoStruct, accidental_text *models.Accidental_text) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitAccidental_text allows commit of a single accidental_text (if already staged)
func (backRepo *BackRepoStruct) CommitAccidental_text(accidental_text *models.Accidental_text) {
	backRepo.BackRepoAccidental_text.CommitPhaseOneInstance(accidental_text)
	if id, ok := backRepo.BackRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text]; ok {
		backRepo.BackRepoAccidental_text.CommitPhaseTwoInstance(backRepo, id, accidental_text)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAccidental_text allows checkout of a single accidental_text (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAccidental_text(accidental_text *models.Accidental_text) {
	// check if the accidental_text is staged
	if _, ok := backRepo.BackRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text]; ok {

		if id, ok := backRepo.BackRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[accidental_text]; ok {
			var accidental_textDB Accidental_textDB
			accidental_textDB.ID = id

			if err := backRepo.BackRepoAccidental_text.db.First(&accidental_textDB, id).Error; err != nil {
				log.Fatalln("CheckoutAccidental_text : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAccidental_text.CheckoutPhaseOneInstance(&accidental_textDB)
			backRepo.BackRepoAccidental_text.CheckoutPhaseTwoInstance(backRepo, &accidental_textDB)
		}
	}
}

// CopyBasicFieldsFromAccidental_text
func (accidental_textDB *Accidental_textDB) CopyBasicFieldsFromAccidental_text(accidental_text *models.Accidental_text) {
	// insertion point for fields commit

	accidental_textDB.Name_Data.String = accidental_text.Name
	accidental_textDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAccidental_text_WOP
func (accidental_textDB *Accidental_textDB) CopyBasicFieldsFromAccidental_text_WOP(accidental_text *models.Accidental_text_WOP) {
	// insertion point for fields commit

	accidental_textDB.Name_Data.String = accidental_text.Name
	accidental_textDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAccidental_textWOP
func (accidental_textDB *Accidental_textDB) CopyBasicFieldsFromAccidental_textWOP(accidental_text *Accidental_textWOP) {
	// insertion point for fields commit

	accidental_textDB.Name_Data.String = accidental_text.Name
	accidental_textDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAccidental_text
func (accidental_textDB *Accidental_textDB) CopyBasicFieldsToAccidental_text(accidental_text *models.Accidental_text) {
	// insertion point for checkout of basic fields (back repo to stage)
	accidental_text.Name = accidental_textDB.Name_Data.String
}

// CopyBasicFieldsToAccidental_text_WOP
func (accidental_textDB *Accidental_textDB) CopyBasicFieldsToAccidental_text_WOP(accidental_text *models.Accidental_text_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	accidental_text.Name = accidental_textDB.Name_Data.String
}

// CopyBasicFieldsToAccidental_textWOP
func (accidental_textDB *Accidental_textDB) CopyBasicFieldsToAccidental_textWOP(accidental_text *Accidental_textWOP) {
	accidental_text.ID = int(accidental_textDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	accidental_text.Name = accidental_textDB.Name_Data.String
}

// Backup generates a json file from a slice of all Accidental_textDB instances in the backrepo
func (backRepoAccidental_text *BackRepoAccidental_textStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Accidental_textDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Accidental_textDB, 0)
	for _, accidental_textDB := range backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB {
		forBackup = append(forBackup, accidental_textDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Accidental_text ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Accidental_text file", err.Error())
	}
}

// Backup generates a json file from a slice of all Accidental_textDB instances in the backrepo
func (backRepoAccidental_text *BackRepoAccidental_textStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Accidental_textDB, 0)
	for _, accidental_textDB := range backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB {
		forBackup = append(forBackup, accidental_textDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Accidental_text")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Accidental_text_Fields, -1)
	for _, accidental_textDB := range forBackup {

		var accidental_textWOP Accidental_textWOP
		accidental_textDB.CopyBasicFieldsToAccidental_textWOP(&accidental_textWOP)

		row := sh.AddRow()
		row.WriteStruct(&accidental_textWOP, -1)
	}
}

// RestoreXL from the "Accidental_text" sheet all Accidental_textDB instances
func (backRepoAccidental_text *BackRepoAccidental_textStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAccidental_textid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Accidental_text"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAccidental_text.rowVisitorAccidental_text)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAccidental_text *BackRepoAccidental_textStruct) rowVisitorAccidental_text(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var accidental_textWOP Accidental_textWOP
		row.ReadStruct(&accidental_textWOP)

		// add the unmarshalled struct to the stage
		accidental_textDB := new(Accidental_textDB)
		accidental_textDB.CopyBasicFieldsFromAccidental_textWOP(&accidental_textWOP)

		accidental_textDB_ID_atBackupTime := accidental_textDB.ID
		accidental_textDB.ID = 0
		query := backRepoAccidental_text.db.Create(accidental_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[accidental_textDB.ID] = accidental_textDB
		BackRepoAccidental_textid_atBckpTime_newID[accidental_textDB_ID_atBackupTime] = accidental_textDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Accidental_textDB.json" in dirPath that stores an array
// of Accidental_textDB and stores it in the database
// the map BackRepoAccidental_textid_atBckpTime_newID is updated accordingly
func (backRepoAccidental_text *BackRepoAccidental_textStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAccidental_textid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Accidental_textDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Accidental_text file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Accidental_textDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Accidental_textDBID_Accidental_textDB
	for _, accidental_textDB := range forRestore {

		accidental_textDB_ID_atBackupTime := accidental_textDB.ID
		accidental_textDB.ID = 0
		query := backRepoAccidental_text.db.Create(accidental_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[accidental_textDB.ID] = accidental_textDB
		BackRepoAccidental_textid_atBckpTime_newID[accidental_textDB_ID_atBackupTime] = accidental_textDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Accidental_text file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Accidental_text>id_atBckpTime_newID
// to compute new index
func (backRepoAccidental_text *BackRepoAccidental_textStruct) RestorePhaseTwo() {

	for _, accidental_textDB := range backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB {

		// next line of code is to avert unused variable compilation error
		_ = accidental_textDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoAccidental_text.db.Model(accidental_textDB).Updates(*accidental_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAccidental_text.ResetReversePointers commits all staged instances of Accidental_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccidental_text *BackRepoAccidental_textStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, accidental_text := range backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr {
		backRepoAccidental_text.ResetReversePointersInstance(backRepo, idx, accidental_text)
	}

	return
}

func (backRepoAccidental_text *BackRepoAccidental_textStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, accidental_text *models.Accidental_text) (Error error) {

	// fetch matching accidental_textDB
	if accidental_textDB, ok := backRepoAccidental_text.Map_Accidental_textDBID_Accidental_textDB[idx]; ok {
		_ = accidental_textDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAccidental_textid_atBckpTime_newID map[uint]uint
