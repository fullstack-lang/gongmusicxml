// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Wedge_sql sql.NullBool
var dummy_Wedge_time time.Duration
var dummy_Wedge_sort sort.Float64Slice

// WedgeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model wedgeAPI
type WedgeAPI struct {
	gorm.Model

	models.Wedge_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	WedgePointersEncoding WedgePointersEncoding
}

// WedgePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type WedgePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// WedgeDB describes a wedge in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model wedgeDB
type WedgeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field wedgeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	WedgePointersEncoding
}

// WedgeDBs arrays wedgeDBs
// swagger:response wedgeDBsResponse
type WedgeDBs []WedgeDB

// WedgeDBResponse provides response
// swagger:response wedgeDBResponse
type WedgeDBResponse struct {
	WedgeDB
}

// WedgeWOP is a Wedge without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type WedgeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Wedge_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoWedgeStruct struct {
	// stores WedgeDB according to their gorm ID
	Map_WedgeDBID_WedgeDB map[uint]*WedgeDB

	// stores WedgeDB ID according to Wedge address
	Map_WedgePtr_WedgeDBID map[*models.Wedge]uint

	// stores Wedge according to their gorm ID
	Map_WedgeDBID_WedgePtr map[uint]*models.Wedge

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoWedge *BackRepoWedgeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoWedge.stage
	return
}

func (backRepoWedge *BackRepoWedgeStruct) GetDB() *gorm.DB {
	return backRepoWedge.db
}

// GetWedgeDBFromWedgePtr is a handy function to access the back repo instance from the stage instance
func (backRepoWedge *BackRepoWedgeStruct) GetWedgeDBFromWedgePtr(wedge *models.Wedge) (wedgeDB *WedgeDB) {
	id := backRepoWedge.Map_WedgePtr_WedgeDBID[wedge]
	wedgeDB = backRepoWedge.Map_WedgeDBID_WedgeDB[id]
	return
}

// BackRepoWedge.CommitPhaseOne commits all staged instances of Wedge to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWedge *BackRepoWedgeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for wedge := range stage.Wedges {
		backRepoWedge.CommitPhaseOneInstance(wedge)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, wedge := range backRepoWedge.Map_WedgeDBID_WedgePtr {
		if _, ok := stage.Wedges[wedge]; !ok {
			backRepoWedge.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWedge.CommitDeleteInstance commits deletion of Wedge to the BackRepo
func (backRepoWedge *BackRepoWedgeStruct) CommitDeleteInstance(id uint) (Error error) {

	wedge := backRepoWedge.Map_WedgeDBID_WedgePtr[id]

	// wedge is not staged anymore, remove wedgeDB
	wedgeDB := backRepoWedge.Map_WedgeDBID_WedgeDB[id]
	query := backRepoWedge.db.Unscoped().Delete(&wedgeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoWedge.Map_WedgePtr_WedgeDBID, wedge)
	delete(backRepoWedge.Map_WedgeDBID_WedgePtr, id)
	delete(backRepoWedge.Map_WedgeDBID_WedgeDB, id)

	return
}

// BackRepoWedge.CommitPhaseOneInstance commits wedge staged instances of Wedge to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWedge *BackRepoWedgeStruct) CommitPhaseOneInstance(wedge *models.Wedge) (Error error) {

	// check if the wedge is not commited yet
	if _, ok := backRepoWedge.Map_WedgePtr_WedgeDBID[wedge]; ok {
		return
	}

	// initiate wedge
	var wedgeDB WedgeDB
	wedgeDB.CopyBasicFieldsFromWedge(wedge)

	query := backRepoWedge.db.Create(&wedgeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoWedge.Map_WedgePtr_WedgeDBID[wedge] = wedgeDB.ID
	backRepoWedge.Map_WedgeDBID_WedgePtr[wedgeDB.ID] = wedge
	backRepoWedge.Map_WedgeDBID_WedgeDB[wedgeDB.ID] = &wedgeDB

	return
}

// BackRepoWedge.CommitPhaseTwo commits all staged instances of Wedge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWedge *BackRepoWedgeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, wedge := range backRepoWedge.Map_WedgeDBID_WedgePtr {
		backRepoWedge.CommitPhaseTwoInstance(backRepo, idx, wedge)
	}

	return
}

// BackRepoWedge.CommitPhaseTwoInstance commits {{structname }} of models.Wedge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWedge *BackRepoWedgeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, wedge *models.Wedge) (Error error) {

	// fetch matching wedgeDB
	if wedgeDB, ok := backRepoWedge.Map_WedgeDBID_WedgeDB[idx]; ok {

		wedgeDB.CopyBasicFieldsFromWedge(wedge)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoWedge.db.Save(&wedgeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Wedge intance %s", wedge.Name))
		return err
	}

	return
}

// BackRepoWedge.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoWedge *BackRepoWedgeStruct) CheckoutPhaseOne() (Error error) {

	wedgeDBArray := make([]WedgeDB, 0)
	query := backRepoWedge.db.Find(&wedgeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	wedgeInstancesToBeRemovedFromTheStage := make(map[*models.Wedge]any)
	for key, value := range backRepoWedge.stage.Wedges {
		wedgeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, wedgeDB := range wedgeDBArray {
		backRepoWedge.CheckoutPhaseOneInstance(&wedgeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		wedge, ok := backRepoWedge.Map_WedgeDBID_WedgePtr[wedgeDB.ID]
		if ok {
			delete(wedgeInstancesToBeRemovedFromTheStage, wedge)
		}
	}

	// remove from stage and back repo's 3 maps all wedges that are not in the checkout
	for wedge := range wedgeInstancesToBeRemovedFromTheStage {
		wedge.Unstage(backRepoWedge.GetStage())

		// remove instance from the back repo 3 maps
		wedgeID := backRepoWedge.Map_WedgePtr_WedgeDBID[wedge]
		delete(backRepoWedge.Map_WedgePtr_WedgeDBID, wedge)
		delete(backRepoWedge.Map_WedgeDBID_WedgeDB, wedgeID)
		delete(backRepoWedge.Map_WedgeDBID_WedgePtr, wedgeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a wedgeDB that has been found in the DB, updates the backRepo and stages the
// models version of the wedgeDB
func (backRepoWedge *BackRepoWedgeStruct) CheckoutPhaseOneInstance(wedgeDB *WedgeDB) (Error error) {

	wedge, ok := backRepoWedge.Map_WedgeDBID_WedgePtr[wedgeDB.ID]
	if !ok {
		wedge = new(models.Wedge)

		backRepoWedge.Map_WedgeDBID_WedgePtr[wedgeDB.ID] = wedge
		backRepoWedge.Map_WedgePtr_WedgeDBID[wedge] = wedgeDB.ID

		// append model store with the new element
		wedge.Name = wedgeDB.Name_Data.String
		wedge.Stage(backRepoWedge.GetStage())
	}
	wedgeDB.CopyBasicFieldsToWedge(wedge)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	wedge.Stage(backRepoWedge.GetStage())

	// preserve pointer to wedgeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_WedgeDBID_WedgeDB)[wedgeDB hold variable pointers
	wedgeDB_Data := *wedgeDB
	preservedPtrToWedge := &wedgeDB_Data
	backRepoWedge.Map_WedgeDBID_WedgeDB[wedgeDB.ID] = preservedPtrToWedge

	return
}

// BackRepoWedge.CheckoutPhaseTwo Checkouts all staged instances of Wedge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWedge *BackRepoWedgeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, wedgeDB := range backRepoWedge.Map_WedgeDBID_WedgeDB {
		backRepoWedge.CheckoutPhaseTwoInstance(backRepo, wedgeDB)
	}
	return
}

// BackRepoWedge.CheckoutPhaseTwoInstance Checkouts staged instances of Wedge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWedge *BackRepoWedgeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, wedgeDB *WedgeDB) (Error error) {

	wedge := backRepoWedge.Map_WedgeDBID_WedgePtr[wedgeDB.ID]

	wedgeDB.DecodePointers(backRepo, wedge)

	return
}

func (wedgeDB *WedgeDB) DecodePointers(backRepo *BackRepoStruct, wedge *models.Wedge) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitWedge allows commit of a single wedge (if already staged)
func (backRepo *BackRepoStruct) CommitWedge(wedge *models.Wedge) {
	backRepo.BackRepoWedge.CommitPhaseOneInstance(wedge)
	if id, ok := backRepo.BackRepoWedge.Map_WedgePtr_WedgeDBID[wedge]; ok {
		backRepo.BackRepoWedge.CommitPhaseTwoInstance(backRepo, id, wedge)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitWedge allows checkout of a single wedge (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWedge(wedge *models.Wedge) {
	// check if the wedge is staged
	if _, ok := backRepo.BackRepoWedge.Map_WedgePtr_WedgeDBID[wedge]; ok {

		if id, ok := backRepo.BackRepoWedge.Map_WedgePtr_WedgeDBID[wedge]; ok {
			var wedgeDB WedgeDB
			wedgeDB.ID = id

			if err := backRepo.BackRepoWedge.db.First(&wedgeDB, id).Error; err != nil {
				log.Fatalln("CheckoutWedge : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWedge.CheckoutPhaseOneInstance(&wedgeDB)
			backRepo.BackRepoWedge.CheckoutPhaseTwoInstance(backRepo, &wedgeDB)
		}
	}
}

// CopyBasicFieldsFromWedge
func (wedgeDB *WedgeDB) CopyBasicFieldsFromWedge(wedge *models.Wedge) {
	// insertion point for fields commit

	wedgeDB.Name_Data.String = wedge.Name
	wedgeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWedge_WOP
func (wedgeDB *WedgeDB) CopyBasicFieldsFromWedge_WOP(wedge *models.Wedge_WOP) {
	// insertion point for fields commit

	wedgeDB.Name_Data.String = wedge.Name
	wedgeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromWedgeWOP
func (wedgeDB *WedgeDB) CopyBasicFieldsFromWedgeWOP(wedge *WedgeWOP) {
	// insertion point for fields commit

	wedgeDB.Name_Data.String = wedge.Name
	wedgeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToWedge
func (wedgeDB *WedgeDB) CopyBasicFieldsToWedge(wedge *models.Wedge) {
	// insertion point for checkout of basic fields (back repo to stage)
	wedge.Name = wedgeDB.Name_Data.String
}

// CopyBasicFieldsToWedge_WOP
func (wedgeDB *WedgeDB) CopyBasicFieldsToWedge_WOP(wedge *models.Wedge_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	wedge.Name = wedgeDB.Name_Data.String
}

// CopyBasicFieldsToWedgeWOP
func (wedgeDB *WedgeDB) CopyBasicFieldsToWedgeWOP(wedge *WedgeWOP) {
	wedge.ID = int(wedgeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	wedge.Name = wedgeDB.Name_Data.String
}

// Backup generates a json file from a slice of all WedgeDB instances in the backrepo
func (backRepoWedge *BackRepoWedgeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "WedgeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WedgeDB, 0)
	for _, wedgeDB := range backRepoWedge.Map_WedgeDBID_WedgeDB {
		forBackup = append(forBackup, wedgeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Wedge ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Wedge file", err.Error())
	}
}

// Backup generates a json file from a slice of all WedgeDB instances in the backrepo
func (backRepoWedge *BackRepoWedgeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WedgeDB, 0)
	for _, wedgeDB := range backRepoWedge.Map_WedgeDBID_WedgeDB {
		forBackup = append(forBackup, wedgeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Wedge")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Wedge_Fields, -1)
	for _, wedgeDB := range forBackup {

		var wedgeWOP WedgeWOP
		wedgeDB.CopyBasicFieldsToWedgeWOP(&wedgeWOP)

		row := sh.AddRow()
		row.WriteStruct(&wedgeWOP, -1)
	}
}

// RestoreXL from the "Wedge" sheet all WedgeDB instances
func (backRepoWedge *BackRepoWedgeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoWedgeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Wedge"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoWedge.rowVisitorWedge)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoWedge *BackRepoWedgeStruct) rowVisitorWedge(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var wedgeWOP WedgeWOP
		row.ReadStruct(&wedgeWOP)

		// add the unmarshalled struct to the stage
		wedgeDB := new(WedgeDB)
		wedgeDB.CopyBasicFieldsFromWedgeWOP(&wedgeWOP)

		wedgeDB_ID_atBackupTime := wedgeDB.ID
		wedgeDB.ID = 0
		query := backRepoWedge.db.Create(wedgeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWedge.Map_WedgeDBID_WedgeDB[wedgeDB.ID] = wedgeDB
		BackRepoWedgeid_atBckpTime_newID[wedgeDB_ID_atBackupTime] = wedgeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "WedgeDB.json" in dirPath that stores an array
// of WedgeDB and stores it in the database
// the map BackRepoWedgeid_atBckpTime_newID is updated accordingly
func (backRepoWedge *BackRepoWedgeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoWedgeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "WedgeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Wedge file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*WedgeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_WedgeDBID_WedgeDB
	for _, wedgeDB := range forRestore {

		wedgeDB_ID_atBackupTime := wedgeDB.ID
		wedgeDB.ID = 0
		query := backRepoWedge.db.Create(wedgeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWedge.Map_WedgeDBID_WedgeDB[wedgeDB.ID] = wedgeDB
		BackRepoWedgeid_atBckpTime_newID[wedgeDB_ID_atBackupTime] = wedgeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Wedge file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Wedge>id_atBckpTime_newID
// to compute new index
func (backRepoWedge *BackRepoWedgeStruct) RestorePhaseTwo() {

	for _, wedgeDB := range backRepoWedge.Map_WedgeDBID_WedgeDB {

		// next line of code is to avert unused variable compilation error
		_ = wedgeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoWedge.db.Model(wedgeDB).Updates(*wedgeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoWedge.ResetReversePointers commits all staged instances of Wedge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWedge *BackRepoWedgeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, wedge := range backRepoWedge.Map_WedgeDBID_WedgePtr {
		backRepoWedge.ResetReversePointersInstance(backRepo, idx, wedge)
	}

	return
}

func (backRepoWedge *BackRepoWedgeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, wedge *models.Wedge) (Error error) {

	// fetch matching wedgeDB
	if wedgeDB, ok := backRepoWedge.Map_WedgeDBID_WedgeDB[idx]; ok {
		_ = wedgeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoWedgeid_atBckpTime_newID map[uint]uint
