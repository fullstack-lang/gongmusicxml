// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Extend_sql sql.NullBool
var dummy_Extend_time time.Duration
var dummy_Extend_sort sort.Float64Slice

// ExtendAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model extendAPI
type ExtendAPI struct {
	gorm.Model

	models.Extend_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ExtendPointersEncoding ExtendPointersEncoding
}

// ExtendPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ExtendPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ExtendDB describes a extend in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model extendDB
type ExtendDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field extendDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ExtendPointersEncoding
}

// ExtendDBs arrays extendDBs
// swagger:response extendDBsResponse
type ExtendDBs []ExtendDB

// ExtendDBResponse provides response
// swagger:response extendDBResponse
type ExtendDBResponse struct {
	ExtendDB
}

// ExtendWOP is a Extend without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ExtendWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Extend_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoExtendStruct struct {
	// stores ExtendDB according to their gorm ID
	Map_ExtendDBID_ExtendDB map[uint]*ExtendDB

	// stores ExtendDB ID according to Extend address
	Map_ExtendPtr_ExtendDBID map[*models.Extend]uint

	// stores Extend according to their gorm ID
	Map_ExtendDBID_ExtendPtr map[uint]*models.Extend

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoExtend *BackRepoExtendStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoExtend.stage
	return
}

func (backRepoExtend *BackRepoExtendStruct) GetDB() *gorm.DB {
	return backRepoExtend.db
}

// GetExtendDBFromExtendPtr is a handy function to access the back repo instance from the stage instance
func (backRepoExtend *BackRepoExtendStruct) GetExtendDBFromExtendPtr(extend *models.Extend) (extendDB *ExtendDB) {
	id := backRepoExtend.Map_ExtendPtr_ExtendDBID[extend]
	extendDB = backRepoExtend.Map_ExtendDBID_ExtendDB[id]
	return
}

// BackRepoExtend.CommitPhaseOne commits all staged instances of Extend to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoExtend *BackRepoExtendStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for extend := range stage.Extends {
		backRepoExtend.CommitPhaseOneInstance(extend)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, extend := range backRepoExtend.Map_ExtendDBID_ExtendPtr {
		if _, ok := stage.Extends[extend]; !ok {
			backRepoExtend.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoExtend.CommitDeleteInstance commits deletion of Extend to the BackRepo
func (backRepoExtend *BackRepoExtendStruct) CommitDeleteInstance(id uint) (Error error) {

	extend := backRepoExtend.Map_ExtendDBID_ExtendPtr[id]

	// extend is not staged anymore, remove extendDB
	extendDB := backRepoExtend.Map_ExtendDBID_ExtendDB[id]
	query := backRepoExtend.db.Unscoped().Delete(&extendDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoExtend.Map_ExtendPtr_ExtendDBID, extend)
	delete(backRepoExtend.Map_ExtendDBID_ExtendPtr, id)
	delete(backRepoExtend.Map_ExtendDBID_ExtendDB, id)

	return
}

// BackRepoExtend.CommitPhaseOneInstance commits extend staged instances of Extend to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoExtend *BackRepoExtendStruct) CommitPhaseOneInstance(extend *models.Extend) (Error error) {

	// check if the extend is not commited yet
	if _, ok := backRepoExtend.Map_ExtendPtr_ExtendDBID[extend]; ok {
		return
	}

	// initiate extend
	var extendDB ExtendDB
	extendDB.CopyBasicFieldsFromExtend(extend)

	query := backRepoExtend.db.Create(&extendDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoExtend.Map_ExtendPtr_ExtendDBID[extend] = extendDB.ID
	backRepoExtend.Map_ExtendDBID_ExtendPtr[extendDB.ID] = extend
	backRepoExtend.Map_ExtendDBID_ExtendDB[extendDB.ID] = &extendDB

	return
}

// BackRepoExtend.CommitPhaseTwo commits all staged instances of Extend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtend *BackRepoExtendStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, extend := range backRepoExtend.Map_ExtendDBID_ExtendPtr {
		backRepoExtend.CommitPhaseTwoInstance(backRepo, idx, extend)
	}

	return
}

// BackRepoExtend.CommitPhaseTwoInstance commits {{structname }} of models.Extend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtend *BackRepoExtendStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, extend *models.Extend) (Error error) {

	// fetch matching extendDB
	if extendDB, ok := backRepoExtend.Map_ExtendDBID_ExtendDB[idx]; ok {

		extendDB.CopyBasicFieldsFromExtend(extend)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoExtend.db.Save(&extendDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Extend intance %s", extend.Name))
		return err
	}

	return
}

// BackRepoExtend.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoExtend *BackRepoExtendStruct) CheckoutPhaseOne() (Error error) {

	extendDBArray := make([]ExtendDB, 0)
	query := backRepoExtend.db.Find(&extendDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	extendInstancesToBeRemovedFromTheStage := make(map[*models.Extend]any)
	for key, value := range backRepoExtend.stage.Extends {
		extendInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, extendDB := range extendDBArray {
		backRepoExtend.CheckoutPhaseOneInstance(&extendDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		extend, ok := backRepoExtend.Map_ExtendDBID_ExtendPtr[extendDB.ID]
		if ok {
			delete(extendInstancesToBeRemovedFromTheStage, extend)
		}
	}

	// remove from stage and back repo's 3 maps all extends that are not in the checkout
	for extend := range extendInstancesToBeRemovedFromTheStage {
		extend.Unstage(backRepoExtend.GetStage())

		// remove instance from the back repo 3 maps
		extendID := backRepoExtend.Map_ExtendPtr_ExtendDBID[extend]
		delete(backRepoExtend.Map_ExtendPtr_ExtendDBID, extend)
		delete(backRepoExtend.Map_ExtendDBID_ExtendDB, extendID)
		delete(backRepoExtend.Map_ExtendDBID_ExtendPtr, extendID)
	}

	return
}

// CheckoutPhaseOneInstance takes a extendDB that has been found in the DB, updates the backRepo and stages the
// models version of the extendDB
func (backRepoExtend *BackRepoExtendStruct) CheckoutPhaseOneInstance(extendDB *ExtendDB) (Error error) {

	extend, ok := backRepoExtend.Map_ExtendDBID_ExtendPtr[extendDB.ID]
	if !ok {
		extend = new(models.Extend)

		backRepoExtend.Map_ExtendDBID_ExtendPtr[extendDB.ID] = extend
		backRepoExtend.Map_ExtendPtr_ExtendDBID[extend] = extendDB.ID

		// append model store with the new element
		extend.Name = extendDB.Name_Data.String
		extend.Stage(backRepoExtend.GetStage())
	}
	extendDB.CopyBasicFieldsToExtend(extend)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	extend.Stage(backRepoExtend.GetStage())

	// preserve pointer to extendDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ExtendDBID_ExtendDB)[extendDB hold variable pointers
	extendDB_Data := *extendDB
	preservedPtrToExtend := &extendDB_Data
	backRepoExtend.Map_ExtendDBID_ExtendDB[extendDB.ID] = preservedPtrToExtend

	return
}

// BackRepoExtend.CheckoutPhaseTwo Checkouts all staged instances of Extend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtend *BackRepoExtendStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, extendDB := range backRepoExtend.Map_ExtendDBID_ExtendDB {
		backRepoExtend.CheckoutPhaseTwoInstance(backRepo, extendDB)
	}
	return
}

// BackRepoExtend.CheckoutPhaseTwoInstance Checkouts staged instances of Extend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtend *BackRepoExtendStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, extendDB *ExtendDB) (Error error) {

	extend := backRepoExtend.Map_ExtendDBID_ExtendPtr[extendDB.ID]

	extendDB.DecodePointers(backRepo, extend)

	return
}

func (extendDB *ExtendDB) DecodePointers(backRepo *BackRepoStruct, extend *models.Extend) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitExtend allows commit of a single extend (if already staged)
func (backRepo *BackRepoStruct) CommitExtend(extend *models.Extend) {
	backRepo.BackRepoExtend.CommitPhaseOneInstance(extend)
	if id, ok := backRepo.BackRepoExtend.Map_ExtendPtr_ExtendDBID[extend]; ok {
		backRepo.BackRepoExtend.CommitPhaseTwoInstance(backRepo, id, extend)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitExtend allows checkout of a single extend (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutExtend(extend *models.Extend) {
	// check if the extend is staged
	if _, ok := backRepo.BackRepoExtend.Map_ExtendPtr_ExtendDBID[extend]; ok {

		if id, ok := backRepo.BackRepoExtend.Map_ExtendPtr_ExtendDBID[extend]; ok {
			var extendDB ExtendDB
			extendDB.ID = id

			if err := backRepo.BackRepoExtend.db.First(&extendDB, id).Error; err != nil {
				log.Fatalln("CheckoutExtend : Problem with getting object with id:", id)
			}
			backRepo.BackRepoExtend.CheckoutPhaseOneInstance(&extendDB)
			backRepo.BackRepoExtend.CheckoutPhaseTwoInstance(backRepo, &extendDB)
		}
	}
}

// CopyBasicFieldsFromExtend
func (extendDB *ExtendDB) CopyBasicFieldsFromExtend(extend *models.Extend) {
	// insertion point for fields commit

	extendDB.Name_Data.String = extend.Name
	extendDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromExtend_WOP
func (extendDB *ExtendDB) CopyBasicFieldsFromExtend_WOP(extend *models.Extend_WOP) {
	// insertion point for fields commit

	extendDB.Name_Data.String = extend.Name
	extendDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromExtendWOP
func (extendDB *ExtendDB) CopyBasicFieldsFromExtendWOP(extend *ExtendWOP) {
	// insertion point for fields commit

	extendDB.Name_Data.String = extend.Name
	extendDB.Name_Data.Valid = true
}

// CopyBasicFieldsToExtend
func (extendDB *ExtendDB) CopyBasicFieldsToExtend(extend *models.Extend) {
	// insertion point for checkout of basic fields (back repo to stage)
	extend.Name = extendDB.Name_Data.String
}

// CopyBasicFieldsToExtend_WOP
func (extendDB *ExtendDB) CopyBasicFieldsToExtend_WOP(extend *models.Extend_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	extend.Name = extendDB.Name_Data.String
}

// CopyBasicFieldsToExtendWOP
func (extendDB *ExtendDB) CopyBasicFieldsToExtendWOP(extend *ExtendWOP) {
	extend.ID = int(extendDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	extend.Name = extendDB.Name_Data.String
}

// Backup generates a json file from a slice of all ExtendDB instances in the backrepo
func (backRepoExtend *BackRepoExtendStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ExtendDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ExtendDB, 0)
	for _, extendDB := range backRepoExtend.Map_ExtendDBID_ExtendDB {
		forBackup = append(forBackup, extendDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Extend ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Extend file", err.Error())
	}
}

// Backup generates a json file from a slice of all ExtendDB instances in the backrepo
func (backRepoExtend *BackRepoExtendStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ExtendDB, 0)
	for _, extendDB := range backRepoExtend.Map_ExtendDBID_ExtendDB {
		forBackup = append(forBackup, extendDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Extend")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Extend_Fields, -1)
	for _, extendDB := range forBackup {

		var extendWOP ExtendWOP
		extendDB.CopyBasicFieldsToExtendWOP(&extendWOP)

		row := sh.AddRow()
		row.WriteStruct(&extendWOP, -1)
	}
}

// RestoreXL from the "Extend" sheet all ExtendDB instances
func (backRepoExtend *BackRepoExtendStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoExtendid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Extend"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoExtend.rowVisitorExtend)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoExtend *BackRepoExtendStruct) rowVisitorExtend(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var extendWOP ExtendWOP
		row.ReadStruct(&extendWOP)

		// add the unmarshalled struct to the stage
		extendDB := new(ExtendDB)
		extendDB.CopyBasicFieldsFromExtendWOP(&extendWOP)

		extendDB_ID_atBackupTime := extendDB.ID
		extendDB.ID = 0
		query := backRepoExtend.db.Create(extendDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoExtend.Map_ExtendDBID_ExtendDB[extendDB.ID] = extendDB
		BackRepoExtendid_atBckpTime_newID[extendDB_ID_atBackupTime] = extendDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ExtendDB.json" in dirPath that stores an array
// of ExtendDB and stores it in the database
// the map BackRepoExtendid_atBckpTime_newID is updated accordingly
func (backRepoExtend *BackRepoExtendStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoExtendid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ExtendDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Extend file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ExtendDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ExtendDBID_ExtendDB
	for _, extendDB := range forRestore {

		extendDB_ID_atBackupTime := extendDB.ID
		extendDB.ID = 0
		query := backRepoExtend.db.Create(extendDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoExtend.Map_ExtendDBID_ExtendDB[extendDB.ID] = extendDB
		BackRepoExtendid_atBckpTime_newID[extendDB_ID_atBackupTime] = extendDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Extend file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Extend>id_atBckpTime_newID
// to compute new index
func (backRepoExtend *BackRepoExtendStruct) RestorePhaseTwo() {

	for _, extendDB := range backRepoExtend.Map_ExtendDBID_ExtendDB {

		// next line of code is to avert unused variable compilation error
		_ = extendDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoExtend.db.Model(extendDB).Updates(*extendDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoExtend.ResetReversePointers commits all staged instances of Extend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtend *BackRepoExtendStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, extend := range backRepoExtend.Map_ExtendDBID_ExtendPtr {
		backRepoExtend.ResetReversePointersInstance(backRepo, idx, extend)
	}

	return
}

func (backRepoExtend *BackRepoExtendStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, extend *models.Extend) (Error error) {

	// fetch matching extendDB
	if extendDB, ok := backRepoExtend.Map_ExtendDBID_ExtendDB[idx]; ok {
		_ = extendDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoExtendid_atBckpTime_newID map[uint]uint
