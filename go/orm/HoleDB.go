// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Hole_sql sql.NullBool
var dummy_Hole_time time.Duration
var dummy_Hole_sort sort.Float64Slice

// HoleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model holeAPI
type HoleAPI struct {
	gorm.Model

	models.Hole_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	HolePointersEncoding HolePointersEncoding
}

// HolePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type HolePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Hole_closed is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Hole_closedID sql.NullInt64
}

// HoleDB describes a hole in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model holeDB
type HoleDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field holeDB.Name
	Name_Data sql.NullString

	// Declation for basic field holeDB.Hole_type
	Hole_type_Data sql.NullString

	// Declation for basic field holeDB.Hole_shape
	Hole_shape_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	HolePointersEncoding
}

// HoleDBs arrays holeDBs
// swagger:response holeDBsResponse
type HoleDBs []HoleDB

// HoleDBResponse provides response
// swagger:response holeDBResponse
type HoleDBResponse struct {
	HoleDB
}

// HoleWOP is a Hole without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type HoleWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Hole_type string `xlsx:"2"`

	Hole_shape string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Hole_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Hole_type",
	"Hole_shape",
}

type BackRepoHoleStruct struct {
	// stores HoleDB according to their gorm ID
	Map_HoleDBID_HoleDB map[uint]*HoleDB

	// stores HoleDB ID according to Hole address
	Map_HolePtr_HoleDBID map[*models.Hole]uint

	// stores Hole according to their gorm ID
	Map_HoleDBID_HolePtr map[uint]*models.Hole

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHole *BackRepoHoleStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHole.stage
	return
}

func (backRepoHole *BackRepoHoleStruct) GetDB() *gorm.DB {
	return backRepoHole.db
}

// GetHoleDBFromHolePtr is a handy function to access the back repo instance from the stage instance
func (backRepoHole *BackRepoHoleStruct) GetHoleDBFromHolePtr(hole *models.Hole) (holeDB *HoleDB) {
	id := backRepoHole.Map_HolePtr_HoleDBID[hole]
	holeDB = backRepoHole.Map_HoleDBID_HoleDB[id]
	return
}

// BackRepoHole.CommitPhaseOne commits all staged instances of Hole to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHole *BackRepoHoleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for hole := range stage.Holes {
		backRepoHole.CommitPhaseOneInstance(hole)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, hole := range backRepoHole.Map_HoleDBID_HolePtr {
		if _, ok := stage.Holes[hole]; !ok {
			backRepoHole.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHole.CommitDeleteInstance commits deletion of Hole to the BackRepo
func (backRepoHole *BackRepoHoleStruct) CommitDeleteInstance(id uint) (Error error) {

	hole := backRepoHole.Map_HoleDBID_HolePtr[id]

	// hole is not staged anymore, remove holeDB
	holeDB := backRepoHole.Map_HoleDBID_HoleDB[id]
	query := backRepoHole.db.Unscoped().Delete(&holeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHole.Map_HolePtr_HoleDBID, hole)
	delete(backRepoHole.Map_HoleDBID_HolePtr, id)
	delete(backRepoHole.Map_HoleDBID_HoleDB, id)

	return
}

// BackRepoHole.CommitPhaseOneInstance commits hole staged instances of Hole to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHole *BackRepoHoleStruct) CommitPhaseOneInstance(hole *models.Hole) (Error error) {

	// check if the hole is not commited yet
	if _, ok := backRepoHole.Map_HolePtr_HoleDBID[hole]; ok {
		return
	}

	// initiate hole
	var holeDB HoleDB
	holeDB.CopyBasicFieldsFromHole(hole)

	query := backRepoHole.db.Create(&holeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHole.Map_HolePtr_HoleDBID[hole] = holeDB.ID
	backRepoHole.Map_HoleDBID_HolePtr[holeDB.ID] = hole
	backRepoHole.Map_HoleDBID_HoleDB[holeDB.ID] = &holeDB

	return
}

// BackRepoHole.CommitPhaseTwo commits all staged instances of Hole to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole *BackRepoHoleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, hole := range backRepoHole.Map_HoleDBID_HolePtr {
		backRepoHole.CommitPhaseTwoInstance(backRepo, idx, hole)
	}

	return
}

// BackRepoHole.CommitPhaseTwoInstance commits {{structname }} of models.Hole to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole *BackRepoHoleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, hole *models.Hole) (Error error) {

	// fetch matching holeDB
	if holeDB, ok := backRepoHole.Map_HoleDBID_HoleDB[idx]; ok {

		holeDB.CopyBasicFieldsFromHole(hole)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value hole.Hole_closed translates to updating the hole.Hole_closedID
		holeDB.Hole_closedID.Valid = true // allow for a 0 value (nil association)
		if hole.Hole_closed != nil {
			if Hole_closedId, ok := backRepo.BackRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole.Hole_closed]; ok {
				holeDB.Hole_closedID.Int64 = int64(Hole_closedId)
				holeDB.Hole_closedID.Valid = true
			}
		} else {
			holeDB.Hole_closedID.Int64 = 0
			holeDB.Hole_closedID.Valid = true
		}

		query := backRepoHole.db.Save(&holeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Hole intance %s", hole.Name))
		return err
	}

	return
}

// BackRepoHole.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHole *BackRepoHoleStruct) CheckoutPhaseOne() (Error error) {

	holeDBArray := make([]HoleDB, 0)
	query := backRepoHole.db.Find(&holeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	holeInstancesToBeRemovedFromTheStage := make(map[*models.Hole]any)
	for key, value := range backRepoHole.stage.Holes {
		holeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, holeDB := range holeDBArray {
		backRepoHole.CheckoutPhaseOneInstance(&holeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		hole, ok := backRepoHole.Map_HoleDBID_HolePtr[holeDB.ID]
		if ok {
			delete(holeInstancesToBeRemovedFromTheStage, hole)
		}
	}

	// remove from stage and back repo's 3 maps all holes that are not in the checkout
	for hole := range holeInstancesToBeRemovedFromTheStage {
		hole.Unstage(backRepoHole.GetStage())

		// remove instance from the back repo 3 maps
		holeID := backRepoHole.Map_HolePtr_HoleDBID[hole]
		delete(backRepoHole.Map_HolePtr_HoleDBID, hole)
		delete(backRepoHole.Map_HoleDBID_HoleDB, holeID)
		delete(backRepoHole.Map_HoleDBID_HolePtr, holeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a holeDB that has been found in the DB, updates the backRepo and stages the
// models version of the holeDB
func (backRepoHole *BackRepoHoleStruct) CheckoutPhaseOneInstance(holeDB *HoleDB) (Error error) {

	hole, ok := backRepoHole.Map_HoleDBID_HolePtr[holeDB.ID]
	if !ok {
		hole = new(models.Hole)

		backRepoHole.Map_HoleDBID_HolePtr[holeDB.ID] = hole
		backRepoHole.Map_HolePtr_HoleDBID[hole] = holeDB.ID

		// append model store with the new element
		hole.Name = holeDB.Name_Data.String
		hole.Stage(backRepoHole.GetStage())
	}
	holeDB.CopyBasicFieldsToHole(hole)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	hole.Stage(backRepoHole.GetStage())

	// preserve pointer to holeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_HoleDBID_HoleDB)[holeDB hold variable pointers
	holeDB_Data := *holeDB
	preservedPtrToHole := &holeDB_Data
	backRepoHole.Map_HoleDBID_HoleDB[holeDB.ID] = preservedPtrToHole

	return
}

// BackRepoHole.CheckoutPhaseTwo Checkouts all staged instances of Hole to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole *BackRepoHoleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, holeDB := range backRepoHole.Map_HoleDBID_HoleDB {
		backRepoHole.CheckoutPhaseTwoInstance(backRepo, holeDB)
	}
	return
}

// BackRepoHole.CheckoutPhaseTwoInstance Checkouts staged instances of Hole to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole *BackRepoHoleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, holeDB *HoleDB) (Error error) {

	hole := backRepoHole.Map_HoleDBID_HolePtr[holeDB.ID]

	holeDB.DecodePointers(backRepo, hole)

	return
}

func (holeDB *HoleDB) DecodePointers(backRepo *BackRepoStruct, hole *models.Hole) {

	// insertion point for checkout of pointer encoding
	// Hole_closed field
	hole.Hole_closed = nil
	if holeDB.Hole_closedID.Int64 != 0 {
		hole.Hole_closed = backRepo.BackRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr[uint(holeDB.Hole_closedID.Int64)]
	}
	return
}

// CommitHole allows commit of a single hole (if already staged)
func (backRepo *BackRepoStruct) CommitHole(hole *models.Hole) {
	backRepo.BackRepoHole.CommitPhaseOneInstance(hole)
	if id, ok := backRepo.BackRepoHole.Map_HolePtr_HoleDBID[hole]; ok {
		backRepo.BackRepoHole.CommitPhaseTwoInstance(backRepo, id, hole)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHole allows checkout of a single hole (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHole(hole *models.Hole) {
	// check if the hole is staged
	if _, ok := backRepo.BackRepoHole.Map_HolePtr_HoleDBID[hole]; ok {

		if id, ok := backRepo.BackRepoHole.Map_HolePtr_HoleDBID[hole]; ok {
			var holeDB HoleDB
			holeDB.ID = id

			if err := backRepo.BackRepoHole.db.First(&holeDB, id).Error; err != nil {
				log.Fatalln("CheckoutHole : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHole.CheckoutPhaseOneInstance(&holeDB)
			backRepo.BackRepoHole.CheckoutPhaseTwoInstance(backRepo, &holeDB)
		}
	}
}

// CopyBasicFieldsFromHole
func (holeDB *HoleDB) CopyBasicFieldsFromHole(hole *models.Hole) {
	// insertion point for fields commit

	holeDB.Name_Data.String = hole.Name
	holeDB.Name_Data.Valid = true

	holeDB.Hole_type_Data.String = hole.Hole_type
	holeDB.Hole_type_Data.Valid = true

	holeDB.Hole_shape_Data.String = hole.Hole_shape
	holeDB.Hole_shape_Data.Valid = true
}

// CopyBasicFieldsFromHole_WOP
func (holeDB *HoleDB) CopyBasicFieldsFromHole_WOP(hole *models.Hole_WOP) {
	// insertion point for fields commit

	holeDB.Name_Data.String = hole.Name
	holeDB.Name_Data.Valid = true

	holeDB.Hole_type_Data.String = hole.Hole_type
	holeDB.Hole_type_Data.Valid = true

	holeDB.Hole_shape_Data.String = hole.Hole_shape
	holeDB.Hole_shape_Data.Valid = true
}

// CopyBasicFieldsFromHoleWOP
func (holeDB *HoleDB) CopyBasicFieldsFromHoleWOP(hole *HoleWOP) {
	// insertion point for fields commit

	holeDB.Name_Data.String = hole.Name
	holeDB.Name_Data.Valid = true

	holeDB.Hole_type_Data.String = hole.Hole_type
	holeDB.Hole_type_Data.Valid = true

	holeDB.Hole_shape_Data.String = hole.Hole_shape
	holeDB.Hole_shape_Data.Valid = true
}

// CopyBasicFieldsToHole
func (holeDB *HoleDB) CopyBasicFieldsToHole(hole *models.Hole) {
	// insertion point for checkout of basic fields (back repo to stage)
	hole.Name = holeDB.Name_Data.String
	hole.Hole_type = holeDB.Hole_type_Data.String
	hole.Hole_shape = holeDB.Hole_shape_Data.String
}

// CopyBasicFieldsToHole_WOP
func (holeDB *HoleDB) CopyBasicFieldsToHole_WOP(hole *models.Hole_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	hole.Name = holeDB.Name_Data.String
	hole.Hole_type = holeDB.Hole_type_Data.String
	hole.Hole_shape = holeDB.Hole_shape_Data.String
}

// CopyBasicFieldsToHoleWOP
func (holeDB *HoleDB) CopyBasicFieldsToHoleWOP(hole *HoleWOP) {
	hole.ID = int(holeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	hole.Name = holeDB.Name_Data.String
	hole.Hole_type = holeDB.Hole_type_Data.String
	hole.Hole_shape = holeDB.Hole_shape_Data.String
}

// Backup generates a json file from a slice of all HoleDB instances in the backrepo
func (backRepoHole *BackRepoHoleStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "HoleDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HoleDB, 0)
	for _, holeDB := range backRepoHole.Map_HoleDBID_HoleDB {
		forBackup = append(forBackup, holeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Hole ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Hole file", err.Error())
	}
}

// Backup generates a json file from a slice of all HoleDB instances in the backrepo
func (backRepoHole *BackRepoHoleStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HoleDB, 0)
	for _, holeDB := range backRepoHole.Map_HoleDBID_HoleDB {
		forBackup = append(forBackup, holeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Hole")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Hole_Fields, -1)
	for _, holeDB := range forBackup {

		var holeWOP HoleWOP
		holeDB.CopyBasicFieldsToHoleWOP(&holeWOP)

		row := sh.AddRow()
		row.WriteStruct(&holeWOP, -1)
	}
}

// RestoreXL from the "Hole" sheet all HoleDB instances
func (backRepoHole *BackRepoHoleStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHoleid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Hole"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHole.rowVisitorHole)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHole *BackRepoHoleStruct) rowVisitorHole(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var holeWOP HoleWOP
		row.ReadStruct(&holeWOP)

		// add the unmarshalled struct to the stage
		holeDB := new(HoleDB)
		holeDB.CopyBasicFieldsFromHoleWOP(&holeWOP)

		holeDB_ID_atBackupTime := holeDB.ID
		holeDB.ID = 0
		query := backRepoHole.db.Create(holeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHole.Map_HoleDBID_HoleDB[holeDB.ID] = holeDB
		BackRepoHoleid_atBckpTime_newID[holeDB_ID_atBackupTime] = holeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "HoleDB.json" in dirPath that stores an array
// of HoleDB and stores it in the database
// the map BackRepoHoleid_atBckpTime_newID is updated accordingly
func (backRepoHole *BackRepoHoleStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHoleid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "HoleDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Hole file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*HoleDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_HoleDBID_HoleDB
	for _, holeDB := range forRestore {

		holeDB_ID_atBackupTime := holeDB.ID
		holeDB.ID = 0
		query := backRepoHole.db.Create(holeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHole.Map_HoleDBID_HoleDB[holeDB.ID] = holeDB
		BackRepoHoleid_atBckpTime_newID[holeDB_ID_atBackupTime] = holeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Hole file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Hole>id_atBckpTime_newID
// to compute new index
func (backRepoHole *BackRepoHoleStruct) RestorePhaseTwo() {

	for _, holeDB := range backRepoHole.Map_HoleDBID_HoleDB {

		// next line of code is to avert unused variable compilation error
		_ = holeDB

		// insertion point for reindexing pointers encoding
		// reindexing Hole_closed field
		if holeDB.Hole_closedID.Int64 != 0 {
			holeDB.Hole_closedID.Int64 = int64(BackRepoHole_closedid_atBckpTime_newID[uint(holeDB.Hole_closedID.Int64)])
			holeDB.Hole_closedID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoHole.db.Model(holeDB).Updates(*holeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHole.ResetReversePointers commits all staged instances of Hole to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole *BackRepoHoleStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, hole := range backRepoHole.Map_HoleDBID_HolePtr {
		backRepoHole.ResetReversePointersInstance(backRepo, idx, hole)
	}

	return
}

func (backRepoHole *BackRepoHoleStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, hole *models.Hole) (Error error) {

	// fetch matching holeDB
	if holeDB, ok := backRepoHole.Map_HoleDBID_HoleDB[idx]; ok {
		_ = holeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHoleid_atBckpTime_newID map[uint]uint
