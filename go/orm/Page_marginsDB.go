// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Page_margins_sql sql.NullBool
var dummy_Page_margins_time time.Duration
var dummy_Page_margins_sort sort.Float64Slice

// Page_marginsAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model page_marginsAPI
type Page_marginsAPI struct {
	gorm.Model

	models.Page_margins_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Page_marginsPointersEncoding Page_marginsPointersEncoding
}

// Page_marginsPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Page_marginsPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Page_marginsDB describes a page_margins in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model page_marginsDB
type Page_marginsDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field page_marginsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Page_marginsPointersEncoding
}

// Page_marginsDBs arrays page_marginsDBs
// swagger:response page_marginsDBsResponse
type Page_marginsDBs []Page_marginsDB

// Page_marginsDBResponse provides response
// swagger:response page_marginsDBResponse
type Page_marginsDBResponse struct {
	Page_marginsDB
}

// Page_marginsWOP is a Page_margins without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Page_marginsWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Page_margins_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPage_marginsStruct struct {
	// stores Page_marginsDB according to their gorm ID
	Map_Page_marginsDBID_Page_marginsDB map[uint]*Page_marginsDB

	// stores Page_marginsDB ID according to Page_margins address
	Map_Page_marginsPtr_Page_marginsDBID map[*models.Page_margins]uint

	// stores Page_margins according to their gorm ID
	Map_Page_marginsDBID_Page_marginsPtr map[uint]*models.Page_margins

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPage_margins *BackRepoPage_marginsStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPage_margins.stage
	return
}

func (backRepoPage_margins *BackRepoPage_marginsStruct) GetDB() *gorm.DB {
	return backRepoPage_margins.db
}

// GetPage_marginsDBFromPage_marginsPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPage_margins *BackRepoPage_marginsStruct) GetPage_marginsDBFromPage_marginsPtr(page_margins *models.Page_margins) (page_marginsDB *Page_marginsDB) {
	id := backRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins]
	page_marginsDB = backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[id]
	return
}

// BackRepoPage_margins.CommitPhaseOne commits all staged instances of Page_margins to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPage_margins *BackRepoPage_marginsStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for page_margins := range stage.Page_marginss {
		backRepoPage_margins.CommitPhaseOneInstance(page_margins)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, page_margins := range backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr {
		if _, ok := stage.Page_marginss[page_margins]; !ok {
			backRepoPage_margins.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPage_margins.CommitDeleteInstance commits deletion of Page_margins to the BackRepo
func (backRepoPage_margins *BackRepoPage_marginsStruct) CommitDeleteInstance(id uint) (Error error) {

	page_margins := backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr[id]

	// page_margins is not staged anymore, remove page_marginsDB
	page_marginsDB := backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[id]
	query := backRepoPage_margins.db.Unscoped().Delete(&page_marginsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID, page_margins)
	delete(backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr, id)
	delete(backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB, id)

	return
}

// BackRepoPage_margins.CommitPhaseOneInstance commits page_margins staged instances of Page_margins to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPage_margins *BackRepoPage_marginsStruct) CommitPhaseOneInstance(page_margins *models.Page_margins) (Error error) {

	// check if the page_margins is not commited yet
	if _, ok := backRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins]; ok {
		return
	}

	// initiate page_margins
	var page_marginsDB Page_marginsDB
	page_marginsDB.CopyBasicFieldsFromPage_margins(page_margins)

	query := backRepoPage_margins.db.Create(&page_marginsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins] = page_marginsDB.ID
	backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr[page_marginsDB.ID] = page_margins
	backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[page_marginsDB.ID] = &page_marginsDB

	return
}

// BackRepoPage_margins.CommitPhaseTwo commits all staged instances of Page_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_margins *BackRepoPage_marginsStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, page_margins := range backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr {
		backRepoPage_margins.CommitPhaseTwoInstance(backRepo, idx, page_margins)
	}

	return
}

// BackRepoPage_margins.CommitPhaseTwoInstance commits {{structname }} of models.Page_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_margins *BackRepoPage_marginsStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, page_margins *models.Page_margins) (Error error) {

	// fetch matching page_marginsDB
	if page_marginsDB, ok := backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[idx]; ok {

		page_marginsDB.CopyBasicFieldsFromPage_margins(page_margins)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPage_margins.db.Save(&page_marginsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Page_margins intance %s", page_margins.Name))
		return err
	}

	return
}

// BackRepoPage_margins.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPage_margins *BackRepoPage_marginsStruct) CheckoutPhaseOne() (Error error) {

	page_marginsDBArray := make([]Page_marginsDB, 0)
	query := backRepoPage_margins.db.Find(&page_marginsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	page_marginsInstancesToBeRemovedFromTheStage := make(map[*models.Page_margins]any)
	for key, value := range backRepoPage_margins.stage.Page_marginss {
		page_marginsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, page_marginsDB := range page_marginsDBArray {
		backRepoPage_margins.CheckoutPhaseOneInstance(&page_marginsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		page_margins, ok := backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr[page_marginsDB.ID]
		if ok {
			delete(page_marginsInstancesToBeRemovedFromTheStage, page_margins)
		}
	}

	// remove from stage and back repo's 3 maps all page_marginss that are not in the checkout
	for page_margins := range page_marginsInstancesToBeRemovedFromTheStage {
		page_margins.Unstage(backRepoPage_margins.GetStage())

		// remove instance from the back repo 3 maps
		page_marginsID := backRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins]
		delete(backRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID, page_margins)
		delete(backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB, page_marginsID)
		delete(backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr, page_marginsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a page_marginsDB that has been found in the DB, updates the backRepo and stages the
// models version of the page_marginsDB
func (backRepoPage_margins *BackRepoPage_marginsStruct) CheckoutPhaseOneInstance(page_marginsDB *Page_marginsDB) (Error error) {

	page_margins, ok := backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr[page_marginsDB.ID]
	if !ok {
		page_margins = new(models.Page_margins)

		backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr[page_marginsDB.ID] = page_margins
		backRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins] = page_marginsDB.ID

		// append model store with the new element
		page_margins.Name = page_marginsDB.Name_Data.String
		page_margins.Stage(backRepoPage_margins.GetStage())
	}
	page_marginsDB.CopyBasicFieldsToPage_margins(page_margins)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	page_margins.Stage(backRepoPage_margins.GetStage())

	// preserve pointer to page_marginsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Page_marginsDBID_Page_marginsDB)[page_marginsDB hold variable pointers
	page_marginsDB_Data := *page_marginsDB
	preservedPtrToPage_margins := &page_marginsDB_Data
	backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[page_marginsDB.ID] = preservedPtrToPage_margins

	return
}

// BackRepoPage_margins.CheckoutPhaseTwo Checkouts all staged instances of Page_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_margins *BackRepoPage_marginsStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, page_marginsDB := range backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB {
		backRepoPage_margins.CheckoutPhaseTwoInstance(backRepo, page_marginsDB)
	}
	return
}

// BackRepoPage_margins.CheckoutPhaseTwoInstance Checkouts staged instances of Page_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_margins *BackRepoPage_marginsStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, page_marginsDB *Page_marginsDB) (Error error) {

	page_margins := backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr[page_marginsDB.ID]

	page_marginsDB.DecodePointers(backRepo, page_margins)

	return
}

func (page_marginsDB *Page_marginsDB) DecodePointers(backRepo *BackRepoStruct, page_margins *models.Page_margins) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPage_margins allows commit of a single page_margins (if already staged)
func (backRepo *BackRepoStruct) CommitPage_margins(page_margins *models.Page_margins) {
	backRepo.BackRepoPage_margins.CommitPhaseOneInstance(page_margins)
	if id, ok := backRepo.BackRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins]; ok {
		backRepo.BackRepoPage_margins.CommitPhaseTwoInstance(backRepo, id, page_margins)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPage_margins allows checkout of a single page_margins (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPage_margins(page_margins *models.Page_margins) {
	// check if the page_margins is staged
	if _, ok := backRepo.BackRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins]; ok {

		if id, ok := backRepo.BackRepoPage_margins.Map_Page_marginsPtr_Page_marginsDBID[page_margins]; ok {
			var page_marginsDB Page_marginsDB
			page_marginsDB.ID = id

			if err := backRepo.BackRepoPage_margins.db.First(&page_marginsDB, id).Error; err != nil {
				log.Fatalln("CheckoutPage_margins : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPage_margins.CheckoutPhaseOneInstance(&page_marginsDB)
			backRepo.BackRepoPage_margins.CheckoutPhaseTwoInstance(backRepo, &page_marginsDB)
		}
	}
}

// CopyBasicFieldsFromPage_margins
func (page_marginsDB *Page_marginsDB) CopyBasicFieldsFromPage_margins(page_margins *models.Page_margins) {
	// insertion point for fields commit

	page_marginsDB.Name_Data.String = page_margins.Name
	page_marginsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPage_margins_WOP
func (page_marginsDB *Page_marginsDB) CopyBasicFieldsFromPage_margins_WOP(page_margins *models.Page_margins_WOP) {
	// insertion point for fields commit

	page_marginsDB.Name_Data.String = page_margins.Name
	page_marginsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPage_marginsWOP
func (page_marginsDB *Page_marginsDB) CopyBasicFieldsFromPage_marginsWOP(page_margins *Page_marginsWOP) {
	// insertion point for fields commit

	page_marginsDB.Name_Data.String = page_margins.Name
	page_marginsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPage_margins
func (page_marginsDB *Page_marginsDB) CopyBasicFieldsToPage_margins(page_margins *models.Page_margins) {
	// insertion point for checkout of basic fields (back repo to stage)
	page_margins.Name = page_marginsDB.Name_Data.String
}

// CopyBasicFieldsToPage_margins_WOP
func (page_marginsDB *Page_marginsDB) CopyBasicFieldsToPage_margins_WOP(page_margins *models.Page_margins_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	page_margins.Name = page_marginsDB.Name_Data.String
}

// CopyBasicFieldsToPage_marginsWOP
func (page_marginsDB *Page_marginsDB) CopyBasicFieldsToPage_marginsWOP(page_margins *Page_marginsWOP) {
	page_margins.ID = int(page_marginsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	page_margins.Name = page_marginsDB.Name_Data.String
}

// Backup generates a json file from a slice of all Page_marginsDB instances in the backrepo
func (backRepoPage_margins *BackRepoPage_marginsStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Page_marginsDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Page_marginsDB, 0)
	for _, page_marginsDB := range backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB {
		forBackup = append(forBackup, page_marginsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Page_margins ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Page_margins file", err.Error())
	}
}

// Backup generates a json file from a slice of all Page_marginsDB instances in the backrepo
func (backRepoPage_margins *BackRepoPage_marginsStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Page_marginsDB, 0)
	for _, page_marginsDB := range backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB {
		forBackup = append(forBackup, page_marginsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Page_margins")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Page_margins_Fields, -1)
	for _, page_marginsDB := range forBackup {

		var page_marginsWOP Page_marginsWOP
		page_marginsDB.CopyBasicFieldsToPage_marginsWOP(&page_marginsWOP)

		row := sh.AddRow()
		row.WriteStruct(&page_marginsWOP, -1)
	}
}

// RestoreXL from the "Page_margins" sheet all Page_marginsDB instances
func (backRepoPage_margins *BackRepoPage_marginsStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPage_marginsid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Page_margins"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPage_margins.rowVisitorPage_margins)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPage_margins *BackRepoPage_marginsStruct) rowVisitorPage_margins(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var page_marginsWOP Page_marginsWOP
		row.ReadStruct(&page_marginsWOP)

		// add the unmarshalled struct to the stage
		page_marginsDB := new(Page_marginsDB)
		page_marginsDB.CopyBasicFieldsFromPage_marginsWOP(&page_marginsWOP)

		page_marginsDB_ID_atBackupTime := page_marginsDB.ID
		page_marginsDB.ID = 0
		query := backRepoPage_margins.db.Create(page_marginsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[page_marginsDB.ID] = page_marginsDB
		BackRepoPage_marginsid_atBckpTime_newID[page_marginsDB_ID_atBackupTime] = page_marginsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Page_marginsDB.json" in dirPath that stores an array
// of Page_marginsDB and stores it in the database
// the map BackRepoPage_marginsid_atBckpTime_newID is updated accordingly
func (backRepoPage_margins *BackRepoPage_marginsStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPage_marginsid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Page_marginsDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Page_margins file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Page_marginsDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Page_marginsDBID_Page_marginsDB
	for _, page_marginsDB := range forRestore {

		page_marginsDB_ID_atBackupTime := page_marginsDB.ID
		page_marginsDB.ID = 0
		query := backRepoPage_margins.db.Create(page_marginsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[page_marginsDB.ID] = page_marginsDB
		BackRepoPage_marginsid_atBckpTime_newID[page_marginsDB_ID_atBackupTime] = page_marginsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Page_margins file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Page_margins>id_atBckpTime_newID
// to compute new index
func (backRepoPage_margins *BackRepoPage_marginsStruct) RestorePhaseTwo() {

	for _, page_marginsDB := range backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB {

		// next line of code is to avert unused variable compilation error
		_ = page_marginsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPage_margins.db.Model(page_marginsDB).Updates(*page_marginsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPage_margins.ResetReversePointers commits all staged instances of Page_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPage_margins *BackRepoPage_marginsStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, page_margins := range backRepoPage_margins.Map_Page_marginsDBID_Page_marginsPtr {
		backRepoPage_margins.ResetReversePointersInstance(backRepo, idx, page_margins)
	}

	return
}

func (backRepoPage_margins *BackRepoPage_marginsStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, page_margins *models.Page_margins) (Error error) {

	// fetch matching page_marginsDB
	if page_marginsDB, ok := backRepoPage_margins.Map_Page_marginsDBID_Page_marginsDB[idx]; ok {
		_ = page_marginsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPage_marginsid_atBckpTime_newID map[uint]uint
