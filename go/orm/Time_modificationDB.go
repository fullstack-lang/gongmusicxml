// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Time_modification_sql sql.NullBool
var dummy_Time_modification_time time.Duration
var dummy_Time_modification_sort sort.Float64Slice

// Time_modificationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model time_modificationAPI
type Time_modificationAPI struct {
	gorm.Model

	models.Time_modification_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Time_modificationPointersEncoding Time_modificationPointersEncoding
}

// Time_modificationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Time_modificationPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Time_modificationDB describes a time_modification in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model time_modificationDB
type Time_modificationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field time_modificationDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Time_modificationPointersEncoding
}

// Time_modificationDBs arrays time_modificationDBs
// swagger:response time_modificationDBsResponse
type Time_modificationDBs []Time_modificationDB

// Time_modificationDBResponse provides response
// swagger:response time_modificationDBResponse
type Time_modificationDBResponse struct {
	Time_modificationDB
}

// Time_modificationWOP is a Time_modification without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Time_modificationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Time_modification_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTime_modificationStruct struct {
	// stores Time_modificationDB according to their gorm ID
	Map_Time_modificationDBID_Time_modificationDB map[uint]*Time_modificationDB

	// stores Time_modificationDB ID according to Time_modification address
	Map_Time_modificationPtr_Time_modificationDBID map[*models.Time_modification]uint

	// stores Time_modification according to their gorm ID
	Map_Time_modificationDBID_Time_modificationPtr map[uint]*models.Time_modification

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTime_modification *BackRepoTime_modificationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTime_modification.stage
	return
}

func (backRepoTime_modification *BackRepoTime_modificationStruct) GetDB() *gorm.DB {
	return backRepoTime_modification.db
}

// GetTime_modificationDBFromTime_modificationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTime_modification *BackRepoTime_modificationStruct) GetTime_modificationDBFromTime_modificationPtr(time_modification *models.Time_modification) (time_modificationDB *Time_modificationDB) {
	id := backRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification]
	time_modificationDB = backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[id]
	return
}

// BackRepoTime_modification.CommitPhaseOne commits all staged instances of Time_modification to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTime_modification *BackRepoTime_modificationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for time_modification := range stage.Time_modifications {
		backRepoTime_modification.CommitPhaseOneInstance(time_modification)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, time_modification := range backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr {
		if _, ok := stage.Time_modifications[time_modification]; !ok {
			backRepoTime_modification.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTime_modification.CommitDeleteInstance commits deletion of Time_modification to the BackRepo
func (backRepoTime_modification *BackRepoTime_modificationStruct) CommitDeleteInstance(id uint) (Error error) {

	time_modification := backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr[id]

	// time_modification is not staged anymore, remove time_modificationDB
	time_modificationDB := backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[id]
	query := backRepoTime_modification.db.Unscoped().Delete(&time_modificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID, time_modification)
	delete(backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr, id)
	delete(backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB, id)

	return
}

// BackRepoTime_modification.CommitPhaseOneInstance commits time_modification staged instances of Time_modification to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTime_modification *BackRepoTime_modificationStruct) CommitPhaseOneInstance(time_modification *models.Time_modification) (Error error) {

	// check if the time_modification is not commited yet
	if _, ok := backRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification]; ok {
		return
	}

	// initiate time_modification
	var time_modificationDB Time_modificationDB
	time_modificationDB.CopyBasicFieldsFromTime_modification(time_modification)

	query := backRepoTime_modification.db.Create(&time_modificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification] = time_modificationDB.ID
	backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr[time_modificationDB.ID] = time_modification
	backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[time_modificationDB.ID] = &time_modificationDB

	return
}

// BackRepoTime_modification.CommitPhaseTwo commits all staged instances of Time_modification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime_modification *BackRepoTime_modificationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, time_modification := range backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr {
		backRepoTime_modification.CommitPhaseTwoInstance(backRepo, idx, time_modification)
	}

	return
}

// BackRepoTime_modification.CommitPhaseTwoInstance commits {{structname }} of models.Time_modification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime_modification *BackRepoTime_modificationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, time_modification *models.Time_modification) (Error error) {

	// fetch matching time_modificationDB
	if time_modificationDB, ok := backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[idx]; ok {

		time_modificationDB.CopyBasicFieldsFromTime_modification(time_modification)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTime_modification.db.Save(&time_modificationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Time_modification intance %s", time_modification.Name))
		return err
	}

	return
}

// BackRepoTime_modification.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTime_modification *BackRepoTime_modificationStruct) CheckoutPhaseOne() (Error error) {

	time_modificationDBArray := make([]Time_modificationDB, 0)
	query := backRepoTime_modification.db.Find(&time_modificationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	time_modificationInstancesToBeRemovedFromTheStage := make(map[*models.Time_modification]any)
	for key, value := range backRepoTime_modification.stage.Time_modifications {
		time_modificationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, time_modificationDB := range time_modificationDBArray {
		backRepoTime_modification.CheckoutPhaseOneInstance(&time_modificationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		time_modification, ok := backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr[time_modificationDB.ID]
		if ok {
			delete(time_modificationInstancesToBeRemovedFromTheStage, time_modification)
		}
	}

	// remove from stage and back repo's 3 maps all time_modifications that are not in the checkout
	for time_modification := range time_modificationInstancesToBeRemovedFromTheStage {
		time_modification.Unstage(backRepoTime_modification.GetStage())

		// remove instance from the back repo 3 maps
		time_modificationID := backRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification]
		delete(backRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID, time_modification)
		delete(backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB, time_modificationID)
		delete(backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr, time_modificationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a time_modificationDB that has been found in the DB, updates the backRepo and stages the
// models version of the time_modificationDB
func (backRepoTime_modification *BackRepoTime_modificationStruct) CheckoutPhaseOneInstance(time_modificationDB *Time_modificationDB) (Error error) {

	time_modification, ok := backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr[time_modificationDB.ID]
	if !ok {
		time_modification = new(models.Time_modification)

		backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr[time_modificationDB.ID] = time_modification
		backRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification] = time_modificationDB.ID

		// append model store with the new element
		time_modification.Name = time_modificationDB.Name_Data.String
		time_modification.Stage(backRepoTime_modification.GetStage())
	}
	time_modificationDB.CopyBasicFieldsToTime_modification(time_modification)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	time_modification.Stage(backRepoTime_modification.GetStage())

	// preserve pointer to time_modificationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Time_modificationDBID_Time_modificationDB)[time_modificationDB hold variable pointers
	time_modificationDB_Data := *time_modificationDB
	preservedPtrToTime_modification := &time_modificationDB_Data
	backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[time_modificationDB.ID] = preservedPtrToTime_modification

	return
}

// BackRepoTime_modification.CheckoutPhaseTwo Checkouts all staged instances of Time_modification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime_modification *BackRepoTime_modificationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, time_modificationDB := range backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB {
		backRepoTime_modification.CheckoutPhaseTwoInstance(backRepo, time_modificationDB)
	}
	return
}

// BackRepoTime_modification.CheckoutPhaseTwoInstance Checkouts staged instances of Time_modification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime_modification *BackRepoTime_modificationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, time_modificationDB *Time_modificationDB) (Error error) {

	time_modification := backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr[time_modificationDB.ID]

	time_modificationDB.DecodePointers(backRepo, time_modification)

	return
}

func (time_modificationDB *Time_modificationDB) DecodePointers(backRepo *BackRepoStruct, time_modification *models.Time_modification) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTime_modification allows commit of a single time_modification (if already staged)
func (backRepo *BackRepoStruct) CommitTime_modification(time_modification *models.Time_modification) {
	backRepo.BackRepoTime_modification.CommitPhaseOneInstance(time_modification)
	if id, ok := backRepo.BackRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification]; ok {
		backRepo.BackRepoTime_modification.CommitPhaseTwoInstance(backRepo, id, time_modification)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTime_modification allows checkout of a single time_modification (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTime_modification(time_modification *models.Time_modification) {
	// check if the time_modification is staged
	if _, ok := backRepo.BackRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification]; ok {

		if id, ok := backRepo.BackRepoTime_modification.Map_Time_modificationPtr_Time_modificationDBID[time_modification]; ok {
			var time_modificationDB Time_modificationDB
			time_modificationDB.ID = id

			if err := backRepo.BackRepoTime_modification.db.First(&time_modificationDB, id).Error; err != nil {
				log.Fatalln("CheckoutTime_modification : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTime_modification.CheckoutPhaseOneInstance(&time_modificationDB)
			backRepo.BackRepoTime_modification.CheckoutPhaseTwoInstance(backRepo, &time_modificationDB)
		}
	}
}

// CopyBasicFieldsFromTime_modification
func (time_modificationDB *Time_modificationDB) CopyBasicFieldsFromTime_modification(time_modification *models.Time_modification) {
	// insertion point for fields commit

	time_modificationDB.Name_Data.String = time_modification.Name
	time_modificationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTime_modification_WOP
func (time_modificationDB *Time_modificationDB) CopyBasicFieldsFromTime_modification_WOP(time_modification *models.Time_modification_WOP) {
	// insertion point for fields commit

	time_modificationDB.Name_Data.String = time_modification.Name
	time_modificationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTime_modificationWOP
func (time_modificationDB *Time_modificationDB) CopyBasicFieldsFromTime_modificationWOP(time_modification *Time_modificationWOP) {
	// insertion point for fields commit

	time_modificationDB.Name_Data.String = time_modification.Name
	time_modificationDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTime_modification
func (time_modificationDB *Time_modificationDB) CopyBasicFieldsToTime_modification(time_modification *models.Time_modification) {
	// insertion point for checkout of basic fields (back repo to stage)
	time_modification.Name = time_modificationDB.Name_Data.String
}

// CopyBasicFieldsToTime_modification_WOP
func (time_modificationDB *Time_modificationDB) CopyBasicFieldsToTime_modification_WOP(time_modification *models.Time_modification_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	time_modification.Name = time_modificationDB.Name_Data.String
}

// CopyBasicFieldsToTime_modificationWOP
func (time_modificationDB *Time_modificationDB) CopyBasicFieldsToTime_modificationWOP(time_modification *Time_modificationWOP) {
	time_modification.ID = int(time_modificationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	time_modification.Name = time_modificationDB.Name_Data.String
}

// Backup generates a json file from a slice of all Time_modificationDB instances in the backrepo
func (backRepoTime_modification *BackRepoTime_modificationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Time_modificationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Time_modificationDB, 0)
	for _, time_modificationDB := range backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB {
		forBackup = append(forBackup, time_modificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Time_modification ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Time_modification file", err.Error())
	}
}

// Backup generates a json file from a slice of all Time_modificationDB instances in the backrepo
func (backRepoTime_modification *BackRepoTime_modificationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Time_modificationDB, 0)
	for _, time_modificationDB := range backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB {
		forBackup = append(forBackup, time_modificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Time_modification")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Time_modification_Fields, -1)
	for _, time_modificationDB := range forBackup {

		var time_modificationWOP Time_modificationWOP
		time_modificationDB.CopyBasicFieldsToTime_modificationWOP(&time_modificationWOP)

		row := sh.AddRow()
		row.WriteStruct(&time_modificationWOP, -1)
	}
}

// RestoreXL from the "Time_modification" sheet all Time_modificationDB instances
func (backRepoTime_modification *BackRepoTime_modificationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTime_modificationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Time_modification"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTime_modification.rowVisitorTime_modification)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTime_modification *BackRepoTime_modificationStruct) rowVisitorTime_modification(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var time_modificationWOP Time_modificationWOP
		row.ReadStruct(&time_modificationWOP)

		// add the unmarshalled struct to the stage
		time_modificationDB := new(Time_modificationDB)
		time_modificationDB.CopyBasicFieldsFromTime_modificationWOP(&time_modificationWOP)

		time_modificationDB_ID_atBackupTime := time_modificationDB.ID
		time_modificationDB.ID = 0
		query := backRepoTime_modification.db.Create(time_modificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[time_modificationDB.ID] = time_modificationDB
		BackRepoTime_modificationid_atBckpTime_newID[time_modificationDB_ID_atBackupTime] = time_modificationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Time_modificationDB.json" in dirPath that stores an array
// of Time_modificationDB and stores it in the database
// the map BackRepoTime_modificationid_atBckpTime_newID is updated accordingly
func (backRepoTime_modification *BackRepoTime_modificationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTime_modificationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Time_modificationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Time_modification file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Time_modificationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Time_modificationDBID_Time_modificationDB
	for _, time_modificationDB := range forRestore {

		time_modificationDB_ID_atBackupTime := time_modificationDB.ID
		time_modificationDB.ID = 0
		query := backRepoTime_modification.db.Create(time_modificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[time_modificationDB.ID] = time_modificationDB
		BackRepoTime_modificationid_atBckpTime_newID[time_modificationDB_ID_atBackupTime] = time_modificationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Time_modification file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Time_modification>id_atBckpTime_newID
// to compute new index
func (backRepoTime_modification *BackRepoTime_modificationStruct) RestorePhaseTwo() {

	for _, time_modificationDB := range backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB {

		// next line of code is to avert unused variable compilation error
		_ = time_modificationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTime_modification.db.Model(time_modificationDB).Updates(*time_modificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTime_modification.ResetReversePointers commits all staged instances of Time_modification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTime_modification *BackRepoTime_modificationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, time_modification := range backRepoTime_modification.Map_Time_modificationDBID_Time_modificationPtr {
		backRepoTime_modification.ResetReversePointersInstance(backRepo, idx, time_modification)
	}

	return
}

func (backRepoTime_modification *BackRepoTime_modificationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, time_modification *models.Time_modification) (Error error) {

	// fetch matching time_modificationDB
	if time_modificationDB, ok := backRepoTime_modification.Map_Time_modificationDBID_Time_modificationDB[idx]; ok {
		_ = time_modificationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTime_modificationid_atBckpTime_newID map[uint]uint
