// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Print_sql sql.NullBool
var dummy_Print_time time.Duration
var dummy_Print_sort sort.Float64Slice

// PrintAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model printAPI
type PrintAPI struct {
	gorm.Model

	models.Print_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PrintPointersEncoding PrintPointersEncoding
}

// PrintPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PrintPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Measure_layout is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Measure_layoutID sql.NullInt64

	// field Measure_numbering is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Measure_numberingID sql.NullInt64

	// field Part_name_display is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Part_name_displayID sql.NullInt64

	// field Part_abbreviation_display is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Part_abbreviation_displayID sql.NullInt64
}

// PrintDB describes a print in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model printDB
type PrintDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field printDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PrintPointersEncoding
}

// PrintDBs arrays printDBs
// swagger:response printDBsResponse
type PrintDBs []PrintDB

// PrintDBResponse provides response
// swagger:response printDBResponse
type PrintDBResponse struct {
	PrintDB
}

// PrintWOP is a Print without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PrintWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Print_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPrintStruct struct {
	// stores PrintDB according to their gorm ID
	Map_PrintDBID_PrintDB map[uint]*PrintDB

	// stores PrintDB ID according to Print address
	Map_PrintPtr_PrintDBID map[*models.Print]uint

	// stores Print according to their gorm ID
	Map_PrintDBID_PrintPtr map[uint]*models.Print

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPrint *BackRepoPrintStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPrint.stage
	return
}

func (backRepoPrint *BackRepoPrintStruct) GetDB() *gorm.DB {
	return backRepoPrint.db
}

// GetPrintDBFromPrintPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPrint *BackRepoPrintStruct) GetPrintDBFromPrintPtr(print *models.Print) (printDB *PrintDB) {
	id := backRepoPrint.Map_PrintPtr_PrintDBID[print]
	printDB = backRepoPrint.Map_PrintDBID_PrintDB[id]
	return
}

// BackRepoPrint.CommitPhaseOne commits all staged instances of Print to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPrint *BackRepoPrintStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for print := range stage.Prints {
		backRepoPrint.CommitPhaseOneInstance(print)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, print := range backRepoPrint.Map_PrintDBID_PrintPtr {
		if _, ok := stage.Prints[print]; !ok {
			backRepoPrint.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPrint.CommitDeleteInstance commits deletion of Print to the BackRepo
func (backRepoPrint *BackRepoPrintStruct) CommitDeleteInstance(id uint) (Error error) {

	print := backRepoPrint.Map_PrintDBID_PrintPtr[id]

	// print is not staged anymore, remove printDB
	printDB := backRepoPrint.Map_PrintDBID_PrintDB[id]
	query := backRepoPrint.db.Unscoped().Delete(&printDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPrint.Map_PrintPtr_PrintDBID, print)
	delete(backRepoPrint.Map_PrintDBID_PrintPtr, id)
	delete(backRepoPrint.Map_PrintDBID_PrintDB, id)

	return
}

// BackRepoPrint.CommitPhaseOneInstance commits print staged instances of Print to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPrint *BackRepoPrintStruct) CommitPhaseOneInstance(print *models.Print) (Error error) {

	// check if the print is not commited yet
	if _, ok := backRepoPrint.Map_PrintPtr_PrintDBID[print]; ok {
		return
	}

	// initiate print
	var printDB PrintDB
	printDB.CopyBasicFieldsFromPrint(print)

	query := backRepoPrint.db.Create(&printDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPrint.Map_PrintPtr_PrintDBID[print] = printDB.ID
	backRepoPrint.Map_PrintDBID_PrintPtr[printDB.ID] = print
	backRepoPrint.Map_PrintDBID_PrintDB[printDB.ID] = &printDB

	return
}

// BackRepoPrint.CommitPhaseTwo commits all staged instances of Print to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrint *BackRepoPrintStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, print := range backRepoPrint.Map_PrintDBID_PrintPtr {
		backRepoPrint.CommitPhaseTwoInstance(backRepo, idx, print)
	}

	return
}

// BackRepoPrint.CommitPhaseTwoInstance commits {{structname }} of models.Print to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrint *BackRepoPrintStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, print *models.Print) (Error error) {

	// fetch matching printDB
	if printDB, ok := backRepoPrint.Map_PrintDBID_PrintDB[idx]; ok {

		printDB.CopyBasicFieldsFromPrint(print)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value print.Measure_layout translates to updating the print.Measure_layoutID
		printDB.Measure_layoutID.Valid = true // allow for a 0 value (nil association)
		if print.Measure_layout != nil {
			if Measure_layoutId, ok := backRepo.BackRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[print.Measure_layout]; ok {
				printDB.Measure_layoutID.Int64 = int64(Measure_layoutId)
				printDB.Measure_layoutID.Valid = true
			}
		} else {
			printDB.Measure_layoutID.Int64 = 0
			printDB.Measure_layoutID.Valid = true
		}

		// commit pointer value print.Measure_numbering translates to updating the print.Measure_numberingID
		printDB.Measure_numberingID.Valid = true // allow for a 0 value (nil association)
		if print.Measure_numbering != nil {
			if Measure_numberingId, ok := backRepo.BackRepoMeasure_numbering.Map_Measure_numberingPtr_Measure_numberingDBID[print.Measure_numbering]; ok {
				printDB.Measure_numberingID.Int64 = int64(Measure_numberingId)
				printDB.Measure_numberingID.Valid = true
			}
		} else {
			printDB.Measure_numberingID.Int64 = 0
			printDB.Measure_numberingID.Valid = true
		}

		// commit pointer value print.Part_name_display translates to updating the print.Part_name_displayID
		printDB.Part_name_displayID.Valid = true // allow for a 0 value (nil association)
		if print.Part_name_display != nil {
			if Part_name_displayId, ok := backRepo.BackRepoName_display.Map_Name_displayPtr_Name_displayDBID[print.Part_name_display]; ok {
				printDB.Part_name_displayID.Int64 = int64(Part_name_displayId)
				printDB.Part_name_displayID.Valid = true
			}
		} else {
			printDB.Part_name_displayID.Int64 = 0
			printDB.Part_name_displayID.Valid = true
		}

		// commit pointer value print.Part_abbreviation_display translates to updating the print.Part_abbreviation_displayID
		printDB.Part_abbreviation_displayID.Valid = true // allow for a 0 value (nil association)
		if print.Part_abbreviation_display != nil {
			if Part_abbreviation_displayId, ok := backRepo.BackRepoName_display.Map_Name_displayPtr_Name_displayDBID[print.Part_abbreviation_display]; ok {
				printDB.Part_abbreviation_displayID.Int64 = int64(Part_abbreviation_displayId)
				printDB.Part_abbreviation_displayID.Valid = true
			}
		} else {
			printDB.Part_abbreviation_displayID.Int64 = 0
			printDB.Part_abbreviation_displayID.Valid = true
		}

		query := backRepoPrint.db.Save(&printDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Print intance %s", print.Name))
		return err
	}

	return
}

// BackRepoPrint.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPrint *BackRepoPrintStruct) CheckoutPhaseOne() (Error error) {

	printDBArray := make([]PrintDB, 0)
	query := backRepoPrint.db.Find(&printDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	printInstancesToBeRemovedFromTheStage := make(map[*models.Print]any)
	for key, value := range backRepoPrint.stage.Prints {
		printInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, printDB := range printDBArray {
		backRepoPrint.CheckoutPhaseOneInstance(&printDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		print, ok := backRepoPrint.Map_PrintDBID_PrintPtr[printDB.ID]
		if ok {
			delete(printInstancesToBeRemovedFromTheStage, print)
		}
	}

	// remove from stage and back repo's 3 maps all prints that are not in the checkout
	for print := range printInstancesToBeRemovedFromTheStage {
		print.Unstage(backRepoPrint.GetStage())

		// remove instance from the back repo 3 maps
		printID := backRepoPrint.Map_PrintPtr_PrintDBID[print]
		delete(backRepoPrint.Map_PrintPtr_PrintDBID, print)
		delete(backRepoPrint.Map_PrintDBID_PrintDB, printID)
		delete(backRepoPrint.Map_PrintDBID_PrintPtr, printID)
	}

	return
}

// CheckoutPhaseOneInstance takes a printDB that has been found in the DB, updates the backRepo and stages the
// models version of the printDB
func (backRepoPrint *BackRepoPrintStruct) CheckoutPhaseOneInstance(printDB *PrintDB) (Error error) {

	print, ok := backRepoPrint.Map_PrintDBID_PrintPtr[printDB.ID]
	if !ok {
		print = new(models.Print)

		backRepoPrint.Map_PrintDBID_PrintPtr[printDB.ID] = print
		backRepoPrint.Map_PrintPtr_PrintDBID[print] = printDB.ID

		// append model store with the new element
		print.Name = printDB.Name_Data.String
		print.Stage(backRepoPrint.GetStage())
	}
	printDB.CopyBasicFieldsToPrint(print)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	print.Stage(backRepoPrint.GetStage())

	// preserve pointer to printDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PrintDBID_PrintDB)[printDB hold variable pointers
	printDB_Data := *printDB
	preservedPtrToPrint := &printDB_Data
	backRepoPrint.Map_PrintDBID_PrintDB[printDB.ID] = preservedPtrToPrint

	return
}

// BackRepoPrint.CheckoutPhaseTwo Checkouts all staged instances of Print to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrint *BackRepoPrintStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, printDB := range backRepoPrint.Map_PrintDBID_PrintDB {
		backRepoPrint.CheckoutPhaseTwoInstance(backRepo, printDB)
	}
	return
}

// BackRepoPrint.CheckoutPhaseTwoInstance Checkouts staged instances of Print to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrint *BackRepoPrintStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, printDB *PrintDB) (Error error) {

	print := backRepoPrint.Map_PrintDBID_PrintPtr[printDB.ID]

	printDB.DecodePointers(backRepo, print)

	return
}

func (printDB *PrintDB) DecodePointers(backRepo *BackRepoStruct, print *models.Print) {

	// insertion point for checkout of pointer encoding
	// Measure_layout field
	print.Measure_layout = nil
	if printDB.Measure_layoutID.Int64 != 0 {
		print.Measure_layout = backRepo.BackRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr[uint(printDB.Measure_layoutID.Int64)]
	}
	// Measure_numbering field
	print.Measure_numbering = nil
	if printDB.Measure_numberingID.Int64 != 0 {
		print.Measure_numbering = backRepo.BackRepoMeasure_numbering.Map_Measure_numberingDBID_Measure_numberingPtr[uint(printDB.Measure_numberingID.Int64)]
	}
	// Part_name_display field
	print.Part_name_display = nil
	if printDB.Part_name_displayID.Int64 != 0 {
		print.Part_name_display = backRepo.BackRepoName_display.Map_Name_displayDBID_Name_displayPtr[uint(printDB.Part_name_displayID.Int64)]
	}
	// Part_abbreviation_display field
	print.Part_abbreviation_display = nil
	if printDB.Part_abbreviation_displayID.Int64 != 0 {
		print.Part_abbreviation_display = backRepo.BackRepoName_display.Map_Name_displayDBID_Name_displayPtr[uint(printDB.Part_abbreviation_displayID.Int64)]
	}
	return
}

// CommitPrint allows commit of a single print (if already staged)
func (backRepo *BackRepoStruct) CommitPrint(print *models.Print) {
	backRepo.BackRepoPrint.CommitPhaseOneInstance(print)
	if id, ok := backRepo.BackRepoPrint.Map_PrintPtr_PrintDBID[print]; ok {
		backRepo.BackRepoPrint.CommitPhaseTwoInstance(backRepo, id, print)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPrint allows checkout of a single print (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPrint(print *models.Print) {
	// check if the print is staged
	if _, ok := backRepo.BackRepoPrint.Map_PrintPtr_PrintDBID[print]; ok {

		if id, ok := backRepo.BackRepoPrint.Map_PrintPtr_PrintDBID[print]; ok {
			var printDB PrintDB
			printDB.ID = id

			if err := backRepo.BackRepoPrint.db.First(&printDB, id).Error; err != nil {
				log.Fatalln("CheckoutPrint : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPrint.CheckoutPhaseOneInstance(&printDB)
			backRepo.BackRepoPrint.CheckoutPhaseTwoInstance(backRepo, &printDB)
		}
	}
}

// CopyBasicFieldsFromPrint
func (printDB *PrintDB) CopyBasicFieldsFromPrint(print *models.Print) {
	// insertion point for fields commit

	printDB.Name_Data.String = print.Name
	printDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPrint_WOP
func (printDB *PrintDB) CopyBasicFieldsFromPrint_WOP(print *models.Print_WOP) {
	// insertion point for fields commit

	printDB.Name_Data.String = print.Name
	printDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPrintWOP
func (printDB *PrintDB) CopyBasicFieldsFromPrintWOP(print *PrintWOP) {
	// insertion point for fields commit

	printDB.Name_Data.String = print.Name
	printDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPrint
func (printDB *PrintDB) CopyBasicFieldsToPrint(print *models.Print) {
	// insertion point for checkout of basic fields (back repo to stage)
	print.Name = printDB.Name_Data.String
}

// CopyBasicFieldsToPrint_WOP
func (printDB *PrintDB) CopyBasicFieldsToPrint_WOP(print *models.Print_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	print.Name = printDB.Name_Data.String
}

// CopyBasicFieldsToPrintWOP
func (printDB *PrintDB) CopyBasicFieldsToPrintWOP(print *PrintWOP) {
	print.ID = int(printDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	print.Name = printDB.Name_Data.String
}

// Backup generates a json file from a slice of all PrintDB instances in the backrepo
func (backRepoPrint *BackRepoPrintStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PrintDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PrintDB, 0)
	for _, printDB := range backRepoPrint.Map_PrintDBID_PrintDB {
		forBackup = append(forBackup, printDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Print ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Print file", err.Error())
	}
}

// Backup generates a json file from a slice of all PrintDB instances in the backrepo
func (backRepoPrint *BackRepoPrintStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PrintDB, 0)
	for _, printDB := range backRepoPrint.Map_PrintDBID_PrintDB {
		forBackup = append(forBackup, printDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Print")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Print_Fields, -1)
	for _, printDB := range forBackup {

		var printWOP PrintWOP
		printDB.CopyBasicFieldsToPrintWOP(&printWOP)

		row := sh.AddRow()
		row.WriteStruct(&printWOP, -1)
	}
}

// RestoreXL from the "Print" sheet all PrintDB instances
func (backRepoPrint *BackRepoPrintStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPrintid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Print"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPrint.rowVisitorPrint)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPrint *BackRepoPrintStruct) rowVisitorPrint(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var printWOP PrintWOP
		row.ReadStruct(&printWOP)

		// add the unmarshalled struct to the stage
		printDB := new(PrintDB)
		printDB.CopyBasicFieldsFromPrintWOP(&printWOP)

		printDB_ID_atBackupTime := printDB.ID
		printDB.ID = 0
		query := backRepoPrint.db.Create(printDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPrint.Map_PrintDBID_PrintDB[printDB.ID] = printDB
		BackRepoPrintid_atBckpTime_newID[printDB_ID_atBackupTime] = printDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PrintDB.json" in dirPath that stores an array
// of PrintDB and stores it in the database
// the map BackRepoPrintid_atBckpTime_newID is updated accordingly
func (backRepoPrint *BackRepoPrintStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPrintid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PrintDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Print file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PrintDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PrintDBID_PrintDB
	for _, printDB := range forRestore {

		printDB_ID_atBackupTime := printDB.ID
		printDB.ID = 0
		query := backRepoPrint.db.Create(printDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPrint.Map_PrintDBID_PrintDB[printDB.ID] = printDB
		BackRepoPrintid_atBckpTime_newID[printDB_ID_atBackupTime] = printDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Print file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Print>id_atBckpTime_newID
// to compute new index
func (backRepoPrint *BackRepoPrintStruct) RestorePhaseTwo() {

	for _, printDB := range backRepoPrint.Map_PrintDBID_PrintDB {

		// next line of code is to avert unused variable compilation error
		_ = printDB

		// insertion point for reindexing pointers encoding
		// reindexing Measure_layout field
		if printDB.Measure_layoutID.Int64 != 0 {
			printDB.Measure_layoutID.Int64 = int64(BackRepoMeasure_layoutid_atBckpTime_newID[uint(printDB.Measure_layoutID.Int64)])
			printDB.Measure_layoutID.Valid = true
		}

		// reindexing Measure_numbering field
		if printDB.Measure_numberingID.Int64 != 0 {
			printDB.Measure_numberingID.Int64 = int64(BackRepoMeasure_numberingid_atBckpTime_newID[uint(printDB.Measure_numberingID.Int64)])
			printDB.Measure_numberingID.Valid = true
		}

		// reindexing Part_name_display field
		if printDB.Part_name_displayID.Int64 != 0 {
			printDB.Part_name_displayID.Int64 = int64(BackRepoName_displayid_atBckpTime_newID[uint(printDB.Part_name_displayID.Int64)])
			printDB.Part_name_displayID.Valid = true
		}

		// reindexing Part_abbreviation_display field
		if printDB.Part_abbreviation_displayID.Int64 != 0 {
			printDB.Part_abbreviation_displayID.Int64 = int64(BackRepoName_displayid_atBckpTime_newID[uint(printDB.Part_abbreviation_displayID.Int64)])
			printDB.Part_abbreviation_displayID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoPrint.db.Model(printDB).Updates(*printDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPrint.ResetReversePointers commits all staged instances of Print to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPrint *BackRepoPrintStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, print := range backRepoPrint.Map_PrintDBID_PrintPtr {
		backRepoPrint.ResetReversePointersInstance(backRepo, idx, print)
	}

	return
}

func (backRepoPrint *BackRepoPrintStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, print *models.Print) (Error error) {

	// fetch matching printDB
	if printDB, ok := backRepoPrint.Map_PrintDBID_PrintDB[idx]; ok {
		_ = printDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPrintid_atBckpTime_newID map[uint]uint
