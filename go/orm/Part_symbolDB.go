// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Part_symbol_sql sql.NullBool
var dummy_Part_symbol_time time.Duration
var dummy_Part_symbol_sort sort.Float64Slice

// Part_symbolAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model part_symbolAPI
type Part_symbolAPI struct {
	gorm.Model

	models.Part_symbol_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Part_symbolPointersEncoding Part_symbolPointersEncoding
}

// Part_symbolPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Part_symbolPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Part_symbolDB describes a part_symbol in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model part_symbolDB
type Part_symbolDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field part_symbolDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Part_symbolPointersEncoding
}

// Part_symbolDBs arrays part_symbolDBs
// swagger:response part_symbolDBsResponse
type Part_symbolDBs []Part_symbolDB

// Part_symbolDBResponse provides response
// swagger:response part_symbolDBResponse
type Part_symbolDBResponse struct {
	Part_symbolDB
}

// Part_symbolWOP is a Part_symbol without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Part_symbolWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Part_symbol_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPart_symbolStruct struct {
	// stores Part_symbolDB according to their gorm ID
	Map_Part_symbolDBID_Part_symbolDB map[uint]*Part_symbolDB

	// stores Part_symbolDB ID according to Part_symbol address
	Map_Part_symbolPtr_Part_symbolDBID map[*models.Part_symbol]uint

	// stores Part_symbol according to their gorm ID
	Map_Part_symbolDBID_Part_symbolPtr map[uint]*models.Part_symbol

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPart_symbol *BackRepoPart_symbolStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPart_symbol.stage
	return
}

func (backRepoPart_symbol *BackRepoPart_symbolStruct) GetDB() *gorm.DB {
	return backRepoPart_symbol.db
}

// GetPart_symbolDBFromPart_symbolPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPart_symbol *BackRepoPart_symbolStruct) GetPart_symbolDBFromPart_symbolPtr(part_symbol *models.Part_symbol) (part_symbolDB *Part_symbolDB) {
	id := backRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol]
	part_symbolDB = backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[id]
	return
}

// BackRepoPart_symbol.CommitPhaseOne commits all staged instances of Part_symbol to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for part_symbol := range stage.Part_symbols {
		backRepoPart_symbol.CommitPhaseOneInstance(part_symbol)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, part_symbol := range backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr {
		if _, ok := stage.Part_symbols[part_symbol]; !ok {
			backRepoPart_symbol.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPart_symbol.CommitDeleteInstance commits deletion of Part_symbol to the BackRepo
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CommitDeleteInstance(id uint) (Error error) {

	part_symbol := backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr[id]

	// part_symbol is not staged anymore, remove part_symbolDB
	part_symbolDB := backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[id]
	query := backRepoPart_symbol.db.Unscoped().Delete(&part_symbolDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID, part_symbol)
	delete(backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr, id)
	delete(backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB, id)

	return
}

// BackRepoPart_symbol.CommitPhaseOneInstance commits part_symbol staged instances of Part_symbol to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CommitPhaseOneInstance(part_symbol *models.Part_symbol) (Error error) {

	// check if the part_symbol is not commited yet
	if _, ok := backRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol]; ok {
		return
	}

	// initiate part_symbol
	var part_symbolDB Part_symbolDB
	part_symbolDB.CopyBasicFieldsFromPart_symbol(part_symbol)

	query := backRepoPart_symbol.db.Create(&part_symbolDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol] = part_symbolDB.ID
	backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr[part_symbolDB.ID] = part_symbol
	backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[part_symbolDB.ID] = &part_symbolDB

	return
}

// BackRepoPart_symbol.CommitPhaseTwo commits all staged instances of Part_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, part_symbol := range backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr {
		backRepoPart_symbol.CommitPhaseTwoInstance(backRepo, idx, part_symbol)
	}

	return
}

// BackRepoPart_symbol.CommitPhaseTwoInstance commits {{structname }} of models.Part_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, part_symbol *models.Part_symbol) (Error error) {

	// fetch matching part_symbolDB
	if part_symbolDB, ok := backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[idx]; ok {

		part_symbolDB.CopyBasicFieldsFromPart_symbol(part_symbol)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPart_symbol.db.Save(&part_symbolDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Part_symbol intance %s", part_symbol.Name))
		return err
	}

	return
}

// BackRepoPart_symbol.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CheckoutPhaseOne() (Error error) {

	part_symbolDBArray := make([]Part_symbolDB, 0)
	query := backRepoPart_symbol.db.Find(&part_symbolDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	part_symbolInstancesToBeRemovedFromTheStage := make(map[*models.Part_symbol]any)
	for key, value := range backRepoPart_symbol.stage.Part_symbols {
		part_symbolInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, part_symbolDB := range part_symbolDBArray {
		backRepoPart_symbol.CheckoutPhaseOneInstance(&part_symbolDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		part_symbol, ok := backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr[part_symbolDB.ID]
		if ok {
			delete(part_symbolInstancesToBeRemovedFromTheStage, part_symbol)
		}
	}

	// remove from stage and back repo's 3 maps all part_symbols that are not in the checkout
	for part_symbol := range part_symbolInstancesToBeRemovedFromTheStage {
		part_symbol.Unstage(backRepoPart_symbol.GetStage())

		// remove instance from the back repo 3 maps
		part_symbolID := backRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol]
		delete(backRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID, part_symbol)
		delete(backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB, part_symbolID)
		delete(backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr, part_symbolID)
	}

	return
}

// CheckoutPhaseOneInstance takes a part_symbolDB that has been found in the DB, updates the backRepo and stages the
// models version of the part_symbolDB
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CheckoutPhaseOneInstance(part_symbolDB *Part_symbolDB) (Error error) {

	part_symbol, ok := backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr[part_symbolDB.ID]
	if !ok {
		part_symbol = new(models.Part_symbol)

		backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr[part_symbolDB.ID] = part_symbol
		backRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol] = part_symbolDB.ID

		// append model store with the new element
		part_symbol.Name = part_symbolDB.Name_Data.String
		part_symbol.Stage(backRepoPart_symbol.GetStage())
	}
	part_symbolDB.CopyBasicFieldsToPart_symbol(part_symbol)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	part_symbol.Stage(backRepoPart_symbol.GetStage())

	// preserve pointer to part_symbolDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Part_symbolDBID_Part_symbolDB)[part_symbolDB hold variable pointers
	part_symbolDB_Data := *part_symbolDB
	preservedPtrToPart_symbol := &part_symbolDB_Data
	backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[part_symbolDB.ID] = preservedPtrToPart_symbol

	return
}

// BackRepoPart_symbol.CheckoutPhaseTwo Checkouts all staged instances of Part_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, part_symbolDB := range backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB {
		backRepoPart_symbol.CheckoutPhaseTwoInstance(backRepo, part_symbolDB)
	}
	return
}

// BackRepoPart_symbol.CheckoutPhaseTwoInstance Checkouts staged instances of Part_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_symbol *BackRepoPart_symbolStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, part_symbolDB *Part_symbolDB) (Error error) {

	part_symbol := backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr[part_symbolDB.ID]

	part_symbolDB.DecodePointers(backRepo, part_symbol)

	return
}

func (part_symbolDB *Part_symbolDB) DecodePointers(backRepo *BackRepoStruct, part_symbol *models.Part_symbol) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPart_symbol allows commit of a single part_symbol (if already staged)
func (backRepo *BackRepoStruct) CommitPart_symbol(part_symbol *models.Part_symbol) {
	backRepo.BackRepoPart_symbol.CommitPhaseOneInstance(part_symbol)
	if id, ok := backRepo.BackRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol]; ok {
		backRepo.BackRepoPart_symbol.CommitPhaseTwoInstance(backRepo, id, part_symbol)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPart_symbol allows checkout of a single part_symbol (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPart_symbol(part_symbol *models.Part_symbol) {
	// check if the part_symbol is staged
	if _, ok := backRepo.BackRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol]; ok {

		if id, ok := backRepo.BackRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[part_symbol]; ok {
			var part_symbolDB Part_symbolDB
			part_symbolDB.ID = id

			if err := backRepo.BackRepoPart_symbol.db.First(&part_symbolDB, id).Error; err != nil {
				log.Fatalln("CheckoutPart_symbol : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPart_symbol.CheckoutPhaseOneInstance(&part_symbolDB)
			backRepo.BackRepoPart_symbol.CheckoutPhaseTwoInstance(backRepo, &part_symbolDB)
		}
	}
}

// CopyBasicFieldsFromPart_symbol
func (part_symbolDB *Part_symbolDB) CopyBasicFieldsFromPart_symbol(part_symbol *models.Part_symbol) {
	// insertion point for fields commit

	part_symbolDB.Name_Data.String = part_symbol.Name
	part_symbolDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_symbol_WOP
func (part_symbolDB *Part_symbolDB) CopyBasicFieldsFromPart_symbol_WOP(part_symbol *models.Part_symbol_WOP) {
	// insertion point for fields commit

	part_symbolDB.Name_Data.String = part_symbol.Name
	part_symbolDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPart_symbolWOP
func (part_symbolDB *Part_symbolDB) CopyBasicFieldsFromPart_symbolWOP(part_symbol *Part_symbolWOP) {
	// insertion point for fields commit

	part_symbolDB.Name_Data.String = part_symbol.Name
	part_symbolDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPart_symbol
func (part_symbolDB *Part_symbolDB) CopyBasicFieldsToPart_symbol(part_symbol *models.Part_symbol) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_symbol.Name = part_symbolDB.Name_Data.String
}

// CopyBasicFieldsToPart_symbol_WOP
func (part_symbolDB *Part_symbolDB) CopyBasicFieldsToPart_symbol_WOP(part_symbol *models.Part_symbol_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	part_symbol.Name = part_symbolDB.Name_Data.String
}

// CopyBasicFieldsToPart_symbolWOP
func (part_symbolDB *Part_symbolDB) CopyBasicFieldsToPart_symbolWOP(part_symbol *Part_symbolWOP) {
	part_symbol.ID = int(part_symbolDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	part_symbol.Name = part_symbolDB.Name_Data.String
}

// Backup generates a json file from a slice of all Part_symbolDB instances in the backrepo
func (backRepoPart_symbol *BackRepoPart_symbolStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Part_symbolDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_symbolDB, 0)
	for _, part_symbolDB := range backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB {
		forBackup = append(forBackup, part_symbolDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Part_symbol ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Part_symbol file", err.Error())
	}
}

// Backup generates a json file from a slice of all Part_symbolDB instances in the backrepo
func (backRepoPart_symbol *BackRepoPart_symbolStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Part_symbolDB, 0)
	for _, part_symbolDB := range backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB {
		forBackup = append(forBackup, part_symbolDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Part_symbol")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Part_symbol_Fields, -1)
	for _, part_symbolDB := range forBackup {

		var part_symbolWOP Part_symbolWOP
		part_symbolDB.CopyBasicFieldsToPart_symbolWOP(&part_symbolWOP)

		row := sh.AddRow()
		row.WriteStruct(&part_symbolWOP, -1)
	}
}

// RestoreXL from the "Part_symbol" sheet all Part_symbolDB instances
func (backRepoPart_symbol *BackRepoPart_symbolStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPart_symbolid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Part_symbol"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPart_symbol.rowVisitorPart_symbol)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPart_symbol *BackRepoPart_symbolStruct) rowVisitorPart_symbol(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var part_symbolWOP Part_symbolWOP
		row.ReadStruct(&part_symbolWOP)

		// add the unmarshalled struct to the stage
		part_symbolDB := new(Part_symbolDB)
		part_symbolDB.CopyBasicFieldsFromPart_symbolWOP(&part_symbolWOP)

		part_symbolDB_ID_atBackupTime := part_symbolDB.ID
		part_symbolDB.ID = 0
		query := backRepoPart_symbol.db.Create(part_symbolDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[part_symbolDB.ID] = part_symbolDB
		BackRepoPart_symbolid_atBckpTime_newID[part_symbolDB_ID_atBackupTime] = part_symbolDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Part_symbolDB.json" in dirPath that stores an array
// of Part_symbolDB and stores it in the database
// the map BackRepoPart_symbolid_atBckpTime_newID is updated accordingly
func (backRepoPart_symbol *BackRepoPart_symbolStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPart_symbolid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Part_symbolDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Part_symbol file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Part_symbolDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Part_symbolDBID_Part_symbolDB
	for _, part_symbolDB := range forRestore {

		part_symbolDB_ID_atBackupTime := part_symbolDB.ID
		part_symbolDB.ID = 0
		query := backRepoPart_symbol.db.Create(part_symbolDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[part_symbolDB.ID] = part_symbolDB
		BackRepoPart_symbolid_atBckpTime_newID[part_symbolDB_ID_atBackupTime] = part_symbolDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Part_symbol file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Part_symbol>id_atBckpTime_newID
// to compute new index
func (backRepoPart_symbol *BackRepoPart_symbolStruct) RestorePhaseTwo() {

	for _, part_symbolDB := range backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB {

		// next line of code is to avert unused variable compilation error
		_ = part_symbolDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPart_symbol.db.Model(part_symbolDB).Updates(*part_symbolDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPart_symbol.ResetReversePointers commits all staged instances of Part_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPart_symbol *BackRepoPart_symbolStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, part_symbol := range backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr {
		backRepoPart_symbol.ResetReversePointersInstance(backRepo, idx, part_symbol)
	}

	return
}

func (backRepoPart_symbol *BackRepoPart_symbolStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, part_symbol *models.Part_symbol) (Error error) {

	// fetch matching part_symbolDB
	if part_symbolDB, ok := backRepoPart_symbol.Map_Part_symbolDBID_Part_symbolDB[idx]; ok {
		_ = part_symbolDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPart_symbolid_atBckpTime_newID map[uint]uint
