// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tied_sql sql.NullBool
var dummy_Tied_time time.Duration
var dummy_Tied_sort sort.Float64Slice

// TiedAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tiedAPI
type TiedAPI struct {
	gorm.Model

	models.Tied_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TiedPointersEncoding TiedPointersEncoding
}

// TiedPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TiedPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// TiedDB describes a tied in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tiedDB
type TiedDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tiedDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TiedPointersEncoding
}

// TiedDBs arrays tiedDBs
// swagger:response tiedDBsResponse
type TiedDBs []TiedDB

// TiedDBResponse provides response
// swagger:response tiedDBResponse
type TiedDBResponse struct {
	TiedDB
}

// TiedWOP is a Tied without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TiedWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Tied_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTiedStruct struct {
	// stores TiedDB according to their gorm ID
	Map_TiedDBID_TiedDB map[uint]*TiedDB

	// stores TiedDB ID according to Tied address
	Map_TiedPtr_TiedDBID map[*models.Tied]uint

	// stores Tied according to their gorm ID
	Map_TiedDBID_TiedPtr map[uint]*models.Tied

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTied *BackRepoTiedStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTied.stage
	return
}

func (backRepoTied *BackRepoTiedStruct) GetDB() *gorm.DB {
	return backRepoTied.db
}

// GetTiedDBFromTiedPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTied *BackRepoTiedStruct) GetTiedDBFromTiedPtr(tied *models.Tied) (tiedDB *TiedDB) {
	id := backRepoTied.Map_TiedPtr_TiedDBID[tied]
	tiedDB = backRepoTied.Map_TiedDBID_TiedDB[id]
	return
}

// BackRepoTied.CommitPhaseOne commits all staged instances of Tied to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTied *BackRepoTiedStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tied := range stage.Tieds {
		backRepoTied.CommitPhaseOneInstance(tied)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tied := range backRepoTied.Map_TiedDBID_TiedPtr {
		if _, ok := stage.Tieds[tied]; !ok {
			backRepoTied.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTied.CommitDeleteInstance commits deletion of Tied to the BackRepo
func (backRepoTied *BackRepoTiedStruct) CommitDeleteInstance(id uint) (Error error) {

	tied := backRepoTied.Map_TiedDBID_TiedPtr[id]

	// tied is not staged anymore, remove tiedDB
	tiedDB := backRepoTied.Map_TiedDBID_TiedDB[id]
	query := backRepoTied.db.Unscoped().Delete(&tiedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTied.Map_TiedPtr_TiedDBID, tied)
	delete(backRepoTied.Map_TiedDBID_TiedPtr, id)
	delete(backRepoTied.Map_TiedDBID_TiedDB, id)

	return
}

// BackRepoTied.CommitPhaseOneInstance commits tied staged instances of Tied to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTied *BackRepoTiedStruct) CommitPhaseOneInstance(tied *models.Tied) (Error error) {

	// check if the tied is not commited yet
	if _, ok := backRepoTied.Map_TiedPtr_TiedDBID[tied]; ok {
		return
	}

	// initiate tied
	var tiedDB TiedDB
	tiedDB.CopyBasicFieldsFromTied(tied)

	query := backRepoTied.db.Create(&tiedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTied.Map_TiedPtr_TiedDBID[tied] = tiedDB.ID
	backRepoTied.Map_TiedDBID_TiedPtr[tiedDB.ID] = tied
	backRepoTied.Map_TiedDBID_TiedDB[tiedDB.ID] = &tiedDB

	return
}

// BackRepoTied.CommitPhaseTwo commits all staged instances of Tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTied *BackRepoTiedStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tied := range backRepoTied.Map_TiedDBID_TiedPtr {
		backRepoTied.CommitPhaseTwoInstance(backRepo, idx, tied)
	}

	return
}

// BackRepoTied.CommitPhaseTwoInstance commits {{structname }} of models.Tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTied *BackRepoTiedStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tied *models.Tied) (Error error) {

	// fetch matching tiedDB
	if tiedDB, ok := backRepoTied.Map_TiedDBID_TiedDB[idx]; ok {

		tiedDB.CopyBasicFieldsFromTied(tied)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTied.db.Save(&tiedDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tied intance %s", tied.Name))
		return err
	}

	return
}

// BackRepoTied.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTied *BackRepoTiedStruct) CheckoutPhaseOne() (Error error) {

	tiedDBArray := make([]TiedDB, 0)
	query := backRepoTied.db.Find(&tiedDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tiedInstancesToBeRemovedFromTheStage := make(map[*models.Tied]any)
	for key, value := range backRepoTied.stage.Tieds {
		tiedInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tiedDB := range tiedDBArray {
		backRepoTied.CheckoutPhaseOneInstance(&tiedDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tied, ok := backRepoTied.Map_TiedDBID_TiedPtr[tiedDB.ID]
		if ok {
			delete(tiedInstancesToBeRemovedFromTheStage, tied)
		}
	}

	// remove from stage and back repo's 3 maps all tieds that are not in the checkout
	for tied := range tiedInstancesToBeRemovedFromTheStage {
		tied.Unstage(backRepoTied.GetStage())

		// remove instance from the back repo 3 maps
		tiedID := backRepoTied.Map_TiedPtr_TiedDBID[tied]
		delete(backRepoTied.Map_TiedPtr_TiedDBID, tied)
		delete(backRepoTied.Map_TiedDBID_TiedDB, tiedID)
		delete(backRepoTied.Map_TiedDBID_TiedPtr, tiedID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tiedDB that has been found in the DB, updates the backRepo and stages the
// models version of the tiedDB
func (backRepoTied *BackRepoTiedStruct) CheckoutPhaseOneInstance(tiedDB *TiedDB) (Error error) {

	tied, ok := backRepoTied.Map_TiedDBID_TiedPtr[tiedDB.ID]
	if !ok {
		tied = new(models.Tied)

		backRepoTied.Map_TiedDBID_TiedPtr[tiedDB.ID] = tied
		backRepoTied.Map_TiedPtr_TiedDBID[tied] = tiedDB.ID

		// append model store with the new element
		tied.Name = tiedDB.Name_Data.String
		tied.Stage(backRepoTied.GetStage())
	}
	tiedDB.CopyBasicFieldsToTied(tied)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tied.Stage(backRepoTied.GetStage())

	// preserve pointer to tiedDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TiedDBID_TiedDB)[tiedDB hold variable pointers
	tiedDB_Data := *tiedDB
	preservedPtrToTied := &tiedDB_Data
	backRepoTied.Map_TiedDBID_TiedDB[tiedDB.ID] = preservedPtrToTied

	return
}

// BackRepoTied.CheckoutPhaseTwo Checkouts all staged instances of Tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTied *BackRepoTiedStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tiedDB := range backRepoTied.Map_TiedDBID_TiedDB {
		backRepoTied.CheckoutPhaseTwoInstance(backRepo, tiedDB)
	}
	return
}

// BackRepoTied.CheckoutPhaseTwoInstance Checkouts staged instances of Tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTied *BackRepoTiedStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tiedDB *TiedDB) (Error error) {

	tied := backRepoTied.Map_TiedDBID_TiedPtr[tiedDB.ID]

	tiedDB.DecodePointers(backRepo, tied)

	return
}

func (tiedDB *TiedDB) DecodePointers(backRepo *BackRepoStruct, tied *models.Tied) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTied allows commit of a single tied (if already staged)
func (backRepo *BackRepoStruct) CommitTied(tied *models.Tied) {
	backRepo.BackRepoTied.CommitPhaseOneInstance(tied)
	if id, ok := backRepo.BackRepoTied.Map_TiedPtr_TiedDBID[tied]; ok {
		backRepo.BackRepoTied.CommitPhaseTwoInstance(backRepo, id, tied)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTied allows checkout of a single tied (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTied(tied *models.Tied) {
	// check if the tied is staged
	if _, ok := backRepo.BackRepoTied.Map_TiedPtr_TiedDBID[tied]; ok {

		if id, ok := backRepo.BackRepoTied.Map_TiedPtr_TiedDBID[tied]; ok {
			var tiedDB TiedDB
			tiedDB.ID = id

			if err := backRepo.BackRepoTied.db.First(&tiedDB, id).Error; err != nil {
				log.Fatalln("CheckoutTied : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTied.CheckoutPhaseOneInstance(&tiedDB)
			backRepo.BackRepoTied.CheckoutPhaseTwoInstance(backRepo, &tiedDB)
		}
	}
}

// CopyBasicFieldsFromTied
func (tiedDB *TiedDB) CopyBasicFieldsFromTied(tied *models.Tied) {
	// insertion point for fields commit

	tiedDB.Name_Data.String = tied.Name
	tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTied_WOP
func (tiedDB *TiedDB) CopyBasicFieldsFromTied_WOP(tied *models.Tied_WOP) {
	// insertion point for fields commit

	tiedDB.Name_Data.String = tied.Name
	tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTiedWOP
func (tiedDB *TiedDB) CopyBasicFieldsFromTiedWOP(tied *TiedWOP) {
	// insertion point for fields commit

	tiedDB.Name_Data.String = tied.Name
	tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTied
func (tiedDB *TiedDB) CopyBasicFieldsToTied(tied *models.Tied) {
	// insertion point for checkout of basic fields (back repo to stage)
	tied.Name = tiedDB.Name_Data.String
}

// CopyBasicFieldsToTied_WOP
func (tiedDB *TiedDB) CopyBasicFieldsToTied_WOP(tied *models.Tied_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tied.Name = tiedDB.Name_Data.String
}

// CopyBasicFieldsToTiedWOP
func (tiedDB *TiedDB) CopyBasicFieldsToTiedWOP(tied *TiedWOP) {
	tied.ID = int(tiedDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tied.Name = tiedDB.Name_Data.String
}

// Backup generates a json file from a slice of all TiedDB instances in the backrepo
func (backRepoTied *BackRepoTiedStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TiedDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TiedDB, 0)
	for _, tiedDB := range backRepoTied.Map_TiedDBID_TiedDB {
		forBackup = append(forBackup, tiedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tied ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tied file", err.Error())
	}
}

// Backup generates a json file from a slice of all TiedDB instances in the backrepo
func (backRepoTied *BackRepoTiedStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TiedDB, 0)
	for _, tiedDB := range backRepoTied.Map_TiedDBID_TiedDB {
		forBackup = append(forBackup, tiedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tied")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tied_Fields, -1)
	for _, tiedDB := range forBackup {

		var tiedWOP TiedWOP
		tiedDB.CopyBasicFieldsToTiedWOP(&tiedWOP)

		row := sh.AddRow()
		row.WriteStruct(&tiedWOP, -1)
	}
}

// RestoreXL from the "Tied" sheet all TiedDB instances
func (backRepoTied *BackRepoTiedStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTiedid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tied"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTied.rowVisitorTied)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTied *BackRepoTiedStruct) rowVisitorTied(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tiedWOP TiedWOP
		row.ReadStruct(&tiedWOP)

		// add the unmarshalled struct to the stage
		tiedDB := new(TiedDB)
		tiedDB.CopyBasicFieldsFromTiedWOP(&tiedWOP)

		tiedDB_ID_atBackupTime := tiedDB.ID
		tiedDB.ID = 0
		query := backRepoTied.db.Create(tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTied.Map_TiedDBID_TiedDB[tiedDB.ID] = tiedDB
		BackRepoTiedid_atBckpTime_newID[tiedDB_ID_atBackupTime] = tiedDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TiedDB.json" in dirPath that stores an array
// of TiedDB and stores it in the database
// the map BackRepoTiedid_atBckpTime_newID is updated accordingly
func (backRepoTied *BackRepoTiedStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTiedid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TiedDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tied file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TiedDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TiedDBID_TiedDB
	for _, tiedDB := range forRestore {

		tiedDB_ID_atBackupTime := tiedDB.ID
		tiedDB.ID = 0
		query := backRepoTied.db.Create(tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTied.Map_TiedDBID_TiedDB[tiedDB.ID] = tiedDB
		BackRepoTiedid_atBckpTime_newID[tiedDB_ID_atBackupTime] = tiedDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tied file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tied>id_atBckpTime_newID
// to compute new index
func (backRepoTied *BackRepoTiedStruct) RestorePhaseTwo() {

	for _, tiedDB := range backRepoTied.Map_TiedDBID_TiedDB {

		// next line of code is to avert unused variable compilation error
		_ = tiedDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTied.db.Model(tiedDB).Updates(*tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTied.ResetReversePointers commits all staged instances of Tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTied *BackRepoTiedStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tied := range backRepoTied.Map_TiedDBID_TiedPtr {
		backRepoTied.ResetReversePointersInstance(backRepo, idx, tied)
	}

	return
}

func (backRepoTied *BackRepoTiedStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tied *models.Tied) (Error error) {

	// fetch matching tiedDB
	if tiedDB, ok := backRepoTied.Map_TiedDBID_TiedDB[idx]; ok {
		_ = tiedDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTiedid_atBckpTime_newID map[uint]uint
