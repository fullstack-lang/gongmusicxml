// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Metal_sql sql.NullBool
var dummy_Metal_time time.Duration
var dummy_Metal_sort sort.Float64Slice

// MetalAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model metalAPI
type MetalAPI struct {
	gorm.Model

	models.Metal_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MetalPointersEncoding MetalPointersEncoding
}

// MetalPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MetalPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// MetalDB describes a metal in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model metalDB
type MetalDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field metalDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MetalPointersEncoding
}

// MetalDBs arrays metalDBs
// swagger:response metalDBsResponse
type MetalDBs []MetalDB

// MetalDBResponse provides response
// swagger:response metalDBResponse
type MetalDBResponse struct {
	MetalDB
}

// MetalWOP is a Metal without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MetalWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Metal_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMetalStruct struct {
	// stores MetalDB according to their gorm ID
	Map_MetalDBID_MetalDB map[uint]*MetalDB

	// stores MetalDB ID according to Metal address
	Map_MetalPtr_MetalDBID map[*models.Metal]uint

	// stores Metal according to their gorm ID
	Map_MetalDBID_MetalPtr map[uint]*models.Metal

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMetal *BackRepoMetalStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMetal.stage
	return
}

func (backRepoMetal *BackRepoMetalStruct) GetDB() *gorm.DB {
	return backRepoMetal.db
}

// GetMetalDBFromMetalPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMetal *BackRepoMetalStruct) GetMetalDBFromMetalPtr(metal *models.Metal) (metalDB *MetalDB) {
	id := backRepoMetal.Map_MetalPtr_MetalDBID[metal]
	metalDB = backRepoMetal.Map_MetalDBID_MetalDB[id]
	return
}

// BackRepoMetal.CommitPhaseOne commits all staged instances of Metal to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetal *BackRepoMetalStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for metal := range stage.Metals {
		backRepoMetal.CommitPhaseOneInstance(metal)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, metal := range backRepoMetal.Map_MetalDBID_MetalPtr {
		if _, ok := stage.Metals[metal]; !ok {
			backRepoMetal.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMetal.CommitDeleteInstance commits deletion of Metal to the BackRepo
func (backRepoMetal *BackRepoMetalStruct) CommitDeleteInstance(id uint) (Error error) {

	metal := backRepoMetal.Map_MetalDBID_MetalPtr[id]

	// metal is not staged anymore, remove metalDB
	metalDB := backRepoMetal.Map_MetalDBID_MetalDB[id]
	query := backRepoMetal.db.Unscoped().Delete(&metalDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMetal.Map_MetalPtr_MetalDBID, metal)
	delete(backRepoMetal.Map_MetalDBID_MetalPtr, id)
	delete(backRepoMetal.Map_MetalDBID_MetalDB, id)

	return
}

// BackRepoMetal.CommitPhaseOneInstance commits metal staged instances of Metal to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetal *BackRepoMetalStruct) CommitPhaseOneInstance(metal *models.Metal) (Error error) {

	// check if the metal is not commited yet
	if _, ok := backRepoMetal.Map_MetalPtr_MetalDBID[metal]; ok {
		return
	}

	// initiate metal
	var metalDB MetalDB
	metalDB.CopyBasicFieldsFromMetal(metal)

	query := backRepoMetal.db.Create(&metalDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMetal.Map_MetalPtr_MetalDBID[metal] = metalDB.ID
	backRepoMetal.Map_MetalDBID_MetalPtr[metalDB.ID] = metal
	backRepoMetal.Map_MetalDBID_MetalDB[metalDB.ID] = &metalDB

	return
}

// BackRepoMetal.CommitPhaseTwo commits all staged instances of Metal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetal *BackRepoMetalStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, metal := range backRepoMetal.Map_MetalDBID_MetalPtr {
		backRepoMetal.CommitPhaseTwoInstance(backRepo, idx, metal)
	}

	return
}

// BackRepoMetal.CommitPhaseTwoInstance commits {{structname }} of models.Metal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetal *BackRepoMetalStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, metal *models.Metal) (Error error) {

	// fetch matching metalDB
	if metalDB, ok := backRepoMetal.Map_MetalDBID_MetalDB[idx]; ok {

		metalDB.CopyBasicFieldsFromMetal(metal)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMetal.db.Save(&metalDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Metal intance %s", metal.Name))
		return err
	}

	return
}

// BackRepoMetal.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMetal *BackRepoMetalStruct) CheckoutPhaseOne() (Error error) {

	metalDBArray := make([]MetalDB, 0)
	query := backRepoMetal.db.Find(&metalDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	metalInstancesToBeRemovedFromTheStage := make(map[*models.Metal]any)
	for key, value := range backRepoMetal.stage.Metals {
		metalInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, metalDB := range metalDBArray {
		backRepoMetal.CheckoutPhaseOneInstance(&metalDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		metal, ok := backRepoMetal.Map_MetalDBID_MetalPtr[metalDB.ID]
		if ok {
			delete(metalInstancesToBeRemovedFromTheStage, metal)
		}
	}

	// remove from stage and back repo's 3 maps all metals that are not in the checkout
	for metal := range metalInstancesToBeRemovedFromTheStage {
		metal.Unstage(backRepoMetal.GetStage())

		// remove instance from the back repo 3 maps
		metalID := backRepoMetal.Map_MetalPtr_MetalDBID[metal]
		delete(backRepoMetal.Map_MetalPtr_MetalDBID, metal)
		delete(backRepoMetal.Map_MetalDBID_MetalDB, metalID)
		delete(backRepoMetal.Map_MetalDBID_MetalPtr, metalID)
	}

	return
}

// CheckoutPhaseOneInstance takes a metalDB that has been found in the DB, updates the backRepo and stages the
// models version of the metalDB
func (backRepoMetal *BackRepoMetalStruct) CheckoutPhaseOneInstance(metalDB *MetalDB) (Error error) {

	metal, ok := backRepoMetal.Map_MetalDBID_MetalPtr[metalDB.ID]
	if !ok {
		metal = new(models.Metal)

		backRepoMetal.Map_MetalDBID_MetalPtr[metalDB.ID] = metal
		backRepoMetal.Map_MetalPtr_MetalDBID[metal] = metalDB.ID

		// append model store with the new element
		metal.Name = metalDB.Name_Data.String
		metal.Stage(backRepoMetal.GetStage())
	}
	metalDB.CopyBasicFieldsToMetal(metal)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	metal.Stage(backRepoMetal.GetStage())

	// preserve pointer to metalDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MetalDBID_MetalDB)[metalDB hold variable pointers
	metalDB_Data := *metalDB
	preservedPtrToMetal := &metalDB_Data
	backRepoMetal.Map_MetalDBID_MetalDB[metalDB.ID] = preservedPtrToMetal

	return
}

// BackRepoMetal.CheckoutPhaseTwo Checkouts all staged instances of Metal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetal *BackRepoMetalStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, metalDB := range backRepoMetal.Map_MetalDBID_MetalDB {
		backRepoMetal.CheckoutPhaseTwoInstance(backRepo, metalDB)
	}
	return
}

// BackRepoMetal.CheckoutPhaseTwoInstance Checkouts staged instances of Metal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetal *BackRepoMetalStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, metalDB *MetalDB) (Error error) {

	metal := backRepoMetal.Map_MetalDBID_MetalPtr[metalDB.ID]

	metalDB.DecodePointers(backRepo, metal)

	return
}

func (metalDB *MetalDB) DecodePointers(backRepo *BackRepoStruct, metal *models.Metal) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMetal allows commit of a single metal (if already staged)
func (backRepo *BackRepoStruct) CommitMetal(metal *models.Metal) {
	backRepo.BackRepoMetal.CommitPhaseOneInstance(metal)
	if id, ok := backRepo.BackRepoMetal.Map_MetalPtr_MetalDBID[metal]; ok {
		backRepo.BackRepoMetal.CommitPhaseTwoInstance(backRepo, id, metal)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMetal allows checkout of a single metal (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMetal(metal *models.Metal) {
	// check if the metal is staged
	if _, ok := backRepo.BackRepoMetal.Map_MetalPtr_MetalDBID[metal]; ok {

		if id, ok := backRepo.BackRepoMetal.Map_MetalPtr_MetalDBID[metal]; ok {
			var metalDB MetalDB
			metalDB.ID = id

			if err := backRepo.BackRepoMetal.db.First(&metalDB, id).Error; err != nil {
				log.Fatalln("CheckoutMetal : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMetal.CheckoutPhaseOneInstance(&metalDB)
			backRepo.BackRepoMetal.CheckoutPhaseTwoInstance(backRepo, &metalDB)
		}
	}
}

// CopyBasicFieldsFromMetal
func (metalDB *MetalDB) CopyBasicFieldsFromMetal(metal *models.Metal) {
	// insertion point for fields commit

	metalDB.Name_Data.String = metal.Name
	metalDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetal_WOP
func (metalDB *MetalDB) CopyBasicFieldsFromMetal_WOP(metal *models.Metal_WOP) {
	// insertion point for fields commit

	metalDB.Name_Data.String = metal.Name
	metalDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetalWOP
func (metalDB *MetalDB) CopyBasicFieldsFromMetalWOP(metal *MetalWOP) {
	// insertion point for fields commit

	metalDB.Name_Data.String = metal.Name
	metalDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMetal
func (metalDB *MetalDB) CopyBasicFieldsToMetal(metal *models.Metal) {
	// insertion point for checkout of basic fields (back repo to stage)
	metal.Name = metalDB.Name_Data.String
}

// CopyBasicFieldsToMetal_WOP
func (metalDB *MetalDB) CopyBasicFieldsToMetal_WOP(metal *models.Metal_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	metal.Name = metalDB.Name_Data.String
}

// CopyBasicFieldsToMetalWOP
func (metalDB *MetalDB) CopyBasicFieldsToMetalWOP(metal *MetalWOP) {
	metal.ID = int(metalDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	metal.Name = metalDB.Name_Data.String
}

// Backup generates a json file from a slice of all MetalDB instances in the backrepo
func (backRepoMetal *BackRepoMetalStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MetalDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MetalDB, 0)
	for _, metalDB := range backRepoMetal.Map_MetalDBID_MetalDB {
		forBackup = append(forBackup, metalDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Metal ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Metal file", err.Error())
	}
}

// Backup generates a json file from a slice of all MetalDB instances in the backrepo
func (backRepoMetal *BackRepoMetalStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MetalDB, 0)
	for _, metalDB := range backRepoMetal.Map_MetalDBID_MetalDB {
		forBackup = append(forBackup, metalDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Metal")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Metal_Fields, -1)
	for _, metalDB := range forBackup {

		var metalWOP MetalWOP
		metalDB.CopyBasicFieldsToMetalWOP(&metalWOP)

		row := sh.AddRow()
		row.WriteStruct(&metalWOP, -1)
	}
}

// RestoreXL from the "Metal" sheet all MetalDB instances
func (backRepoMetal *BackRepoMetalStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMetalid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Metal"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMetal.rowVisitorMetal)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMetal *BackRepoMetalStruct) rowVisitorMetal(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var metalWOP MetalWOP
		row.ReadStruct(&metalWOP)

		// add the unmarshalled struct to the stage
		metalDB := new(MetalDB)
		metalDB.CopyBasicFieldsFromMetalWOP(&metalWOP)

		metalDB_ID_atBackupTime := metalDB.ID
		metalDB.ID = 0
		query := backRepoMetal.db.Create(metalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetal.Map_MetalDBID_MetalDB[metalDB.ID] = metalDB
		BackRepoMetalid_atBckpTime_newID[metalDB_ID_atBackupTime] = metalDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MetalDB.json" in dirPath that stores an array
// of MetalDB and stores it in the database
// the map BackRepoMetalid_atBckpTime_newID is updated accordingly
func (backRepoMetal *BackRepoMetalStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMetalid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MetalDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Metal file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MetalDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MetalDBID_MetalDB
	for _, metalDB := range forRestore {

		metalDB_ID_atBackupTime := metalDB.ID
		metalDB.ID = 0
		query := backRepoMetal.db.Create(metalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetal.Map_MetalDBID_MetalDB[metalDB.ID] = metalDB
		BackRepoMetalid_atBckpTime_newID[metalDB_ID_atBackupTime] = metalDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Metal file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Metal>id_atBckpTime_newID
// to compute new index
func (backRepoMetal *BackRepoMetalStruct) RestorePhaseTwo() {

	for _, metalDB := range backRepoMetal.Map_MetalDBID_MetalDB {

		// next line of code is to avert unused variable compilation error
		_ = metalDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMetal.db.Model(metalDB).Updates(*metalDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMetal.ResetReversePointers commits all staged instances of Metal to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetal *BackRepoMetalStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, metal := range backRepoMetal.Map_MetalDBID_MetalPtr {
		backRepoMetal.ResetReversePointersInstance(backRepo, idx, metal)
	}

	return
}

func (backRepoMetal *BackRepoMetalStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, metal *models.Metal) (Error error) {

	// fetch matching metalDB
	if metalDB, ok := backRepoMetal.Map_MetalDBID_MetalDB[idx]; ok {
		_ = metalDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMetalid_atBckpTime_newID map[uint]uint
