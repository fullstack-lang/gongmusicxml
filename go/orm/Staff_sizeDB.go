// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Staff_size_sql sql.NullBool
var dummy_Staff_size_time time.Duration
var dummy_Staff_size_sort sort.Float64Slice

// Staff_sizeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staff_sizeAPI
type Staff_sizeAPI struct {
	gorm.Model

	models.Staff_size_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Staff_sizePointersEncoding Staff_sizePointersEncoding
}

// Staff_sizePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Staff_sizePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Staff_sizeDB describes a staff_size in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staff_sizeDB
type Staff_sizeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staff_sizeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Staff_sizePointersEncoding
}

// Staff_sizeDBs arrays staff_sizeDBs
// swagger:response staff_sizeDBsResponse
type Staff_sizeDBs []Staff_sizeDB

// Staff_sizeDBResponse provides response
// swagger:response staff_sizeDBResponse
type Staff_sizeDBResponse struct {
	Staff_sizeDB
}

// Staff_sizeWOP is a Staff_size without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Staff_sizeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Staff_size_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoStaff_sizeStruct struct {
	// stores Staff_sizeDB according to their gorm ID
	Map_Staff_sizeDBID_Staff_sizeDB map[uint]*Staff_sizeDB

	// stores Staff_sizeDB ID according to Staff_size address
	Map_Staff_sizePtr_Staff_sizeDBID map[*models.Staff_size]uint

	// stores Staff_size according to their gorm ID
	Map_Staff_sizeDBID_Staff_sizePtr map[uint]*models.Staff_size

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoStaff_size *BackRepoStaff_sizeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoStaff_size.stage
	return
}

func (backRepoStaff_size *BackRepoStaff_sizeStruct) GetDB() *gorm.DB {
	return backRepoStaff_size.db
}

// GetStaff_sizeDBFromStaff_sizePtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaff_size *BackRepoStaff_sizeStruct) GetStaff_sizeDBFromStaff_sizePtr(staff_size *models.Staff_size) (staff_sizeDB *Staff_sizeDB) {
	id := backRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size]
	staff_sizeDB = backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[id]
	return
}

// BackRepoStaff_size.CommitPhaseOne commits all staged instances of Staff_size to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for staff_size := range stage.Staff_sizes {
		backRepoStaff_size.CommitPhaseOneInstance(staff_size)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staff_size := range backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr {
		if _, ok := stage.Staff_sizes[staff_size]; !ok {
			backRepoStaff_size.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaff_size.CommitDeleteInstance commits deletion of Staff_size to the BackRepo
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CommitDeleteInstance(id uint) (Error error) {

	staff_size := backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr[id]

	// staff_size is not staged anymore, remove staff_sizeDB
	staff_sizeDB := backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[id]
	query := backRepoStaff_size.db.Unscoped().Delete(&staff_sizeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID, staff_size)
	delete(backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr, id)
	delete(backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB, id)

	return
}

// BackRepoStaff_size.CommitPhaseOneInstance commits staff_size staged instances of Staff_size to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CommitPhaseOneInstance(staff_size *models.Staff_size) (Error error) {

	// check if the staff_size is not commited yet
	if _, ok := backRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size]; ok {
		return
	}

	// initiate staff_size
	var staff_sizeDB Staff_sizeDB
	staff_sizeDB.CopyBasicFieldsFromStaff_size(staff_size)

	query := backRepoStaff_size.db.Create(&staff_sizeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size] = staff_sizeDB.ID
	backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr[staff_sizeDB.ID] = staff_size
	backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[staff_sizeDB.ID] = &staff_sizeDB

	return
}

// BackRepoStaff_size.CommitPhaseTwo commits all staged instances of Staff_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_size := range backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr {
		backRepoStaff_size.CommitPhaseTwoInstance(backRepo, idx, staff_size)
	}

	return
}

// BackRepoStaff_size.CommitPhaseTwoInstance commits {{structname }} of models.Staff_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staff_size *models.Staff_size) (Error error) {

	// fetch matching staff_sizeDB
	if staff_sizeDB, ok := backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[idx]; ok {

		staff_sizeDB.CopyBasicFieldsFromStaff_size(staff_size)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoStaff_size.db.Save(&staff_sizeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Staff_size intance %s", staff_size.Name))
		return err
	}

	return
}

// BackRepoStaff_size.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CheckoutPhaseOne() (Error error) {

	staff_sizeDBArray := make([]Staff_sizeDB, 0)
	query := backRepoStaff_size.db.Find(&staff_sizeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staff_sizeInstancesToBeRemovedFromTheStage := make(map[*models.Staff_size]any)
	for key, value := range backRepoStaff_size.stage.Staff_sizes {
		staff_sizeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staff_sizeDB := range staff_sizeDBArray {
		backRepoStaff_size.CheckoutPhaseOneInstance(&staff_sizeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staff_size, ok := backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr[staff_sizeDB.ID]
		if ok {
			delete(staff_sizeInstancesToBeRemovedFromTheStage, staff_size)
		}
	}

	// remove from stage and back repo's 3 maps all staff_sizes that are not in the checkout
	for staff_size := range staff_sizeInstancesToBeRemovedFromTheStage {
		staff_size.Unstage(backRepoStaff_size.GetStage())

		// remove instance from the back repo 3 maps
		staff_sizeID := backRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size]
		delete(backRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID, staff_size)
		delete(backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB, staff_sizeID)
		delete(backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr, staff_sizeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staff_sizeDB that has been found in the DB, updates the backRepo and stages the
// models version of the staff_sizeDB
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CheckoutPhaseOneInstance(staff_sizeDB *Staff_sizeDB) (Error error) {

	staff_size, ok := backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr[staff_sizeDB.ID]
	if !ok {
		staff_size = new(models.Staff_size)

		backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr[staff_sizeDB.ID] = staff_size
		backRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size] = staff_sizeDB.ID

		// append model store with the new element
		staff_size.Name = staff_sizeDB.Name_Data.String
		staff_size.Stage(backRepoStaff_size.GetStage())
	}
	staff_sizeDB.CopyBasicFieldsToStaff_size(staff_size)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staff_size.Stage(backRepoStaff_size.GetStage())

	// preserve pointer to staff_sizeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Staff_sizeDBID_Staff_sizeDB)[staff_sizeDB hold variable pointers
	staff_sizeDB_Data := *staff_sizeDB
	preservedPtrToStaff_size := &staff_sizeDB_Data
	backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[staff_sizeDB.ID] = preservedPtrToStaff_size

	return
}

// BackRepoStaff_size.CheckoutPhaseTwo Checkouts all staged instances of Staff_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staff_sizeDB := range backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB {
		backRepoStaff_size.CheckoutPhaseTwoInstance(backRepo, staff_sizeDB)
	}
	return
}

// BackRepoStaff_size.CheckoutPhaseTwoInstance Checkouts staged instances of Staff_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_size *BackRepoStaff_sizeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staff_sizeDB *Staff_sizeDB) (Error error) {

	staff_size := backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr[staff_sizeDB.ID]

	staff_sizeDB.DecodePointers(backRepo, staff_size)

	return
}

func (staff_sizeDB *Staff_sizeDB) DecodePointers(backRepo *BackRepoStruct, staff_size *models.Staff_size) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStaff_size allows commit of a single staff_size (if already staged)
func (backRepo *BackRepoStruct) CommitStaff_size(staff_size *models.Staff_size) {
	backRepo.BackRepoStaff_size.CommitPhaseOneInstance(staff_size)
	if id, ok := backRepo.BackRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size]; ok {
		backRepo.BackRepoStaff_size.CommitPhaseTwoInstance(backRepo, id, staff_size)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaff_size allows checkout of a single staff_size (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaff_size(staff_size *models.Staff_size) {
	// check if the staff_size is staged
	if _, ok := backRepo.BackRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size]; ok {

		if id, ok := backRepo.BackRepoStaff_size.Map_Staff_sizePtr_Staff_sizeDBID[staff_size]; ok {
			var staff_sizeDB Staff_sizeDB
			staff_sizeDB.ID = id

			if err := backRepo.BackRepoStaff_size.db.First(&staff_sizeDB, id).Error; err != nil {
				log.Fatalln("CheckoutStaff_size : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaff_size.CheckoutPhaseOneInstance(&staff_sizeDB)
			backRepo.BackRepoStaff_size.CheckoutPhaseTwoInstance(backRepo, &staff_sizeDB)
		}
	}
}

// CopyBasicFieldsFromStaff_size
func (staff_sizeDB *Staff_sizeDB) CopyBasicFieldsFromStaff_size(staff_size *models.Staff_size) {
	// insertion point for fields commit

	staff_sizeDB.Name_Data.String = staff_size.Name
	staff_sizeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_size_WOP
func (staff_sizeDB *Staff_sizeDB) CopyBasicFieldsFromStaff_size_WOP(staff_size *models.Staff_size_WOP) {
	// insertion point for fields commit

	staff_sizeDB.Name_Data.String = staff_size.Name
	staff_sizeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_sizeWOP
func (staff_sizeDB *Staff_sizeDB) CopyBasicFieldsFromStaff_sizeWOP(staff_size *Staff_sizeWOP) {
	// insertion point for fields commit

	staff_sizeDB.Name_Data.String = staff_size.Name
	staff_sizeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToStaff_size
func (staff_sizeDB *Staff_sizeDB) CopyBasicFieldsToStaff_size(staff_size *models.Staff_size) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_size.Name = staff_sizeDB.Name_Data.String
}

// CopyBasicFieldsToStaff_size_WOP
func (staff_sizeDB *Staff_sizeDB) CopyBasicFieldsToStaff_size_WOP(staff_size *models.Staff_size_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_size.Name = staff_sizeDB.Name_Data.String
}

// CopyBasicFieldsToStaff_sizeWOP
func (staff_sizeDB *Staff_sizeDB) CopyBasicFieldsToStaff_sizeWOP(staff_size *Staff_sizeWOP) {
	staff_size.ID = int(staff_sizeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staff_size.Name = staff_sizeDB.Name_Data.String
}

// Backup generates a json file from a slice of all Staff_sizeDB instances in the backrepo
func (backRepoStaff_size *BackRepoStaff_sizeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Staff_sizeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_sizeDB, 0)
	for _, staff_sizeDB := range backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB {
		forBackup = append(forBackup, staff_sizeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Staff_size ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Staff_size file", err.Error())
	}
}

// Backup generates a json file from a slice of all Staff_sizeDB instances in the backrepo
func (backRepoStaff_size *BackRepoStaff_sizeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_sizeDB, 0)
	for _, staff_sizeDB := range backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB {
		forBackup = append(forBackup, staff_sizeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Staff_size")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Staff_size_Fields, -1)
	for _, staff_sizeDB := range forBackup {

		var staff_sizeWOP Staff_sizeWOP
		staff_sizeDB.CopyBasicFieldsToStaff_sizeWOP(&staff_sizeWOP)

		row := sh.AddRow()
		row.WriteStruct(&staff_sizeWOP, -1)
	}
}

// RestoreXL from the "Staff_size" sheet all Staff_sizeDB instances
func (backRepoStaff_size *BackRepoStaff_sizeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaff_sizeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Staff_size"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaff_size.rowVisitorStaff_size)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaff_size *BackRepoStaff_sizeStruct) rowVisitorStaff_size(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staff_sizeWOP Staff_sizeWOP
		row.ReadStruct(&staff_sizeWOP)

		// add the unmarshalled struct to the stage
		staff_sizeDB := new(Staff_sizeDB)
		staff_sizeDB.CopyBasicFieldsFromStaff_sizeWOP(&staff_sizeWOP)

		staff_sizeDB_ID_atBackupTime := staff_sizeDB.ID
		staff_sizeDB.ID = 0
		query := backRepoStaff_size.db.Create(staff_sizeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[staff_sizeDB.ID] = staff_sizeDB
		BackRepoStaff_sizeid_atBckpTime_newID[staff_sizeDB_ID_atBackupTime] = staff_sizeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Staff_sizeDB.json" in dirPath that stores an array
// of Staff_sizeDB and stores it in the database
// the map BackRepoStaff_sizeid_atBckpTime_newID is updated accordingly
func (backRepoStaff_size *BackRepoStaff_sizeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaff_sizeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Staff_sizeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Staff_size file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Staff_sizeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Staff_sizeDBID_Staff_sizeDB
	for _, staff_sizeDB := range forRestore {

		staff_sizeDB_ID_atBackupTime := staff_sizeDB.ID
		staff_sizeDB.ID = 0
		query := backRepoStaff_size.db.Create(staff_sizeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[staff_sizeDB.ID] = staff_sizeDB
		BackRepoStaff_sizeid_atBckpTime_newID[staff_sizeDB_ID_atBackupTime] = staff_sizeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Staff_size file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Staff_size>id_atBckpTime_newID
// to compute new index
func (backRepoStaff_size *BackRepoStaff_sizeStruct) RestorePhaseTwo() {

	for _, staff_sizeDB := range backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB {

		// next line of code is to avert unused variable compilation error
		_ = staff_sizeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoStaff_size.db.Model(staff_sizeDB).Updates(*staff_sizeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoStaff_size.ResetReversePointers commits all staged instances of Staff_size to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_size *BackRepoStaff_sizeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_size := range backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizePtr {
		backRepoStaff_size.ResetReversePointersInstance(backRepo, idx, staff_size)
	}

	return
}

func (backRepoStaff_size *BackRepoStaff_sizeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staff_size *models.Staff_size) (Error error) {

	// fetch matching staff_sizeDB
	if staff_sizeDB, ok := backRepoStaff_size.Map_Staff_sizeDBID_Staff_sizeDB[idx]; ok {
		_ = staff_sizeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaff_sizeid_atBckpTime_newID map[uint]uint
