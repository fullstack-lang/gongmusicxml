// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Miscellaneous_field_sql sql.NullBool
var dummy_Miscellaneous_field_time time.Duration
var dummy_Miscellaneous_field_sort sort.Float64Slice

// Miscellaneous_fieldAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model miscellaneous_fieldAPI
type Miscellaneous_fieldAPI struct {
	gorm.Model

	models.Miscellaneous_field_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Miscellaneous_fieldPointersEncoding Miscellaneous_fieldPointersEncoding
}

// Miscellaneous_fieldPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Miscellaneous_fieldPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Miscellaneous_fieldDB describes a miscellaneous_field in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model miscellaneous_fieldDB
type Miscellaneous_fieldDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field miscellaneous_fieldDB.Value
	Value_Data sql.NullString

	// Declation for basic field miscellaneous_fieldDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Miscellaneous_fieldPointersEncoding
}

// Miscellaneous_fieldDBs arrays miscellaneous_fieldDBs
// swagger:response miscellaneous_fieldDBsResponse
type Miscellaneous_fieldDBs []Miscellaneous_fieldDB

// Miscellaneous_fieldDBResponse provides response
// swagger:response miscellaneous_fieldDBResponse
type Miscellaneous_fieldDBResponse struct {
	Miscellaneous_fieldDB
}

// Miscellaneous_fieldWOP is a Miscellaneous_field without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Miscellaneous_fieldWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Value string `xlsx:"1"`

	Name string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Miscellaneous_field_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Value",
	"Name",
}

type BackRepoMiscellaneous_fieldStruct struct {
	// stores Miscellaneous_fieldDB according to their gorm ID
	Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB map[uint]*Miscellaneous_fieldDB

	// stores Miscellaneous_fieldDB ID according to Miscellaneous_field address
	Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID map[*models.Miscellaneous_field]uint

	// stores Miscellaneous_field according to their gorm ID
	Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr map[uint]*models.Miscellaneous_field

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMiscellaneous_field.stage
	return
}

func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) GetDB() *gorm.DB {
	return backRepoMiscellaneous_field.db
}

// GetMiscellaneous_fieldDBFromMiscellaneous_fieldPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) GetMiscellaneous_fieldDBFromMiscellaneous_fieldPtr(miscellaneous_field *models.Miscellaneous_field) (miscellaneous_fieldDB *Miscellaneous_fieldDB) {
	id := backRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field]
	miscellaneous_fieldDB = backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[id]
	return
}

// BackRepoMiscellaneous_field.CommitPhaseOne commits all staged instances of Miscellaneous_field to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for miscellaneous_field := range stage.Miscellaneous_fields {
		backRepoMiscellaneous_field.CommitPhaseOneInstance(miscellaneous_field)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, miscellaneous_field := range backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr {
		if _, ok := stage.Miscellaneous_fields[miscellaneous_field]; !ok {
			backRepoMiscellaneous_field.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMiscellaneous_field.CommitDeleteInstance commits deletion of Miscellaneous_field to the BackRepo
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CommitDeleteInstance(id uint) (Error error) {

	miscellaneous_field := backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr[id]

	// miscellaneous_field is not staged anymore, remove miscellaneous_fieldDB
	miscellaneous_fieldDB := backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[id]
	query := backRepoMiscellaneous_field.db.Unscoped().Delete(&miscellaneous_fieldDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID, miscellaneous_field)
	delete(backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr, id)
	delete(backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB, id)

	return
}

// BackRepoMiscellaneous_field.CommitPhaseOneInstance commits miscellaneous_field staged instances of Miscellaneous_field to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CommitPhaseOneInstance(miscellaneous_field *models.Miscellaneous_field) (Error error) {

	// check if the miscellaneous_field is not commited yet
	if _, ok := backRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field]; ok {
		return
	}

	// initiate miscellaneous_field
	var miscellaneous_fieldDB Miscellaneous_fieldDB
	miscellaneous_fieldDB.CopyBasicFieldsFromMiscellaneous_field(miscellaneous_field)

	query := backRepoMiscellaneous_field.db.Create(&miscellaneous_fieldDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field] = miscellaneous_fieldDB.ID
	backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr[miscellaneous_fieldDB.ID] = miscellaneous_field
	backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[miscellaneous_fieldDB.ID] = &miscellaneous_fieldDB

	return
}

// BackRepoMiscellaneous_field.CommitPhaseTwo commits all staged instances of Miscellaneous_field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, miscellaneous_field := range backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr {
		backRepoMiscellaneous_field.CommitPhaseTwoInstance(backRepo, idx, miscellaneous_field)
	}

	return
}

// BackRepoMiscellaneous_field.CommitPhaseTwoInstance commits {{structname }} of models.Miscellaneous_field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, miscellaneous_field *models.Miscellaneous_field) (Error error) {

	// fetch matching miscellaneous_fieldDB
	if miscellaneous_fieldDB, ok := backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[idx]; ok {

		miscellaneous_fieldDB.CopyBasicFieldsFromMiscellaneous_field(miscellaneous_field)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMiscellaneous_field.db.Save(&miscellaneous_fieldDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Miscellaneous_field intance %s", miscellaneous_field.Name))
		return err
	}

	return
}

// BackRepoMiscellaneous_field.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CheckoutPhaseOne() (Error error) {

	miscellaneous_fieldDBArray := make([]Miscellaneous_fieldDB, 0)
	query := backRepoMiscellaneous_field.db.Find(&miscellaneous_fieldDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	miscellaneous_fieldInstancesToBeRemovedFromTheStage := make(map[*models.Miscellaneous_field]any)
	for key, value := range backRepoMiscellaneous_field.stage.Miscellaneous_fields {
		miscellaneous_fieldInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, miscellaneous_fieldDB := range miscellaneous_fieldDBArray {
		backRepoMiscellaneous_field.CheckoutPhaseOneInstance(&miscellaneous_fieldDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		miscellaneous_field, ok := backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr[miscellaneous_fieldDB.ID]
		if ok {
			delete(miscellaneous_fieldInstancesToBeRemovedFromTheStage, miscellaneous_field)
		}
	}

	// remove from stage and back repo's 3 maps all miscellaneous_fields that are not in the checkout
	for miscellaneous_field := range miscellaneous_fieldInstancesToBeRemovedFromTheStage {
		miscellaneous_field.Unstage(backRepoMiscellaneous_field.GetStage())

		// remove instance from the back repo 3 maps
		miscellaneous_fieldID := backRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field]
		delete(backRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID, miscellaneous_field)
		delete(backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB, miscellaneous_fieldID)
		delete(backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr, miscellaneous_fieldID)
	}

	return
}

// CheckoutPhaseOneInstance takes a miscellaneous_fieldDB that has been found in the DB, updates the backRepo and stages the
// models version of the miscellaneous_fieldDB
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CheckoutPhaseOneInstance(miscellaneous_fieldDB *Miscellaneous_fieldDB) (Error error) {

	miscellaneous_field, ok := backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr[miscellaneous_fieldDB.ID]
	if !ok {
		miscellaneous_field = new(models.Miscellaneous_field)

		backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr[miscellaneous_fieldDB.ID] = miscellaneous_field
		backRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field] = miscellaneous_fieldDB.ID

		// append model store with the new element
		miscellaneous_field.Name = miscellaneous_fieldDB.Name_Data.String
		miscellaneous_field.Stage(backRepoMiscellaneous_field.GetStage())
	}
	miscellaneous_fieldDB.CopyBasicFieldsToMiscellaneous_field(miscellaneous_field)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	miscellaneous_field.Stage(backRepoMiscellaneous_field.GetStage())

	// preserve pointer to miscellaneous_fieldDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB)[miscellaneous_fieldDB hold variable pointers
	miscellaneous_fieldDB_Data := *miscellaneous_fieldDB
	preservedPtrToMiscellaneous_field := &miscellaneous_fieldDB_Data
	backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[miscellaneous_fieldDB.ID] = preservedPtrToMiscellaneous_field

	return
}

// BackRepoMiscellaneous_field.CheckoutPhaseTwo Checkouts all staged instances of Miscellaneous_field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, miscellaneous_fieldDB := range backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB {
		backRepoMiscellaneous_field.CheckoutPhaseTwoInstance(backRepo, miscellaneous_fieldDB)
	}
	return
}

// BackRepoMiscellaneous_field.CheckoutPhaseTwoInstance Checkouts staged instances of Miscellaneous_field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, miscellaneous_fieldDB *Miscellaneous_fieldDB) (Error error) {

	miscellaneous_field := backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr[miscellaneous_fieldDB.ID]

	miscellaneous_fieldDB.DecodePointers(backRepo, miscellaneous_field)

	return
}

func (miscellaneous_fieldDB *Miscellaneous_fieldDB) DecodePointers(backRepo *BackRepoStruct, miscellaneous_field *models.Miscellaneous_field) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMiscellaneous_field allows commit of a single miscellaneous_field (if already staged)
func (backRepo *BackRepoStruct) CommitMiscellaneous_field(miscellaneous_field *models.Miscellaneous_field) {
	backRepo.BackRepoMiscellaneous_field.CommitPhaseOneInstance(miscellaneous_field)
	if id, ok := backRepo.BackRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field]; ok {
		backRepo.BackRepoMiscellaneous_field.CommitPhaseTwoInstance(backRepo, id, miscellaneous_field)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMiscellaneous_field allows checkout of a single miscellaneous_field (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMiscellaneous_field(miscellaneous_field *models.Miscellaneous_field) {
	// check if the miscellaneous_field is staged
	if _, ok := backRepo.BackRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field]; ok {

		if id, ok := backRepo.BackRepoMiscellaneous_field.Map_Miscellaneous_fieldPtr_Miscellaneous_fieldDBID[miscellaneous_field]; ok {
			var miscellaneous_fieldDB Miscellaneous_fieldDB
			miscellaneous_fieldDB.ID = id

			if err := backRepo.BackRepoMiscellaneous_field.db.First(&miscellaneous_fieldDB, id).Error; err != nil {
				log.Fatalln("CheckoutMiscellaneous_field : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMiscellaneous_field.CheckoutPhaseOneInstance(&miscellaneous_fieldDB)
			backRepo.BackRepoMiscellaneous_field.CheckoutPhaseTwoInstance(backRepo, &miscellaneous_fieldDB)
		}
	}
}

// CopyBasicFieldsFromMiscellaneous_field
func (miscellaneous_fieldDB *Miscellaneous_fieldDB) CopyBasicFieldsFromMiscellaneous_field(miscellaneous_field *models.Miscellaneous_field) {
	// insertion point for fields commit

	miscellaneous_fieldDB.Value_Data.String = miscellaneous_field.Value
	miscellaneous_fieldDB.Value_Data.Valid = true

	miscellaneous_fieldDB.Name_Data.String = miscellaneous_field.Name
	miscellaneous_fieldDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMiscellaneous_field_WOP
func (miscellaneous_fieldDB *Miscellaneous_fieldDB) CopyBasicFieldsFromMiscellaneous_field_WOP(miscellaneous_field *models.Miscellaneous_field_WOP) {
	// insertion point for fields commit

	miscellaneous_fieldDB.Value_Data.String = miscellaneous_field.Value
	miscellaneous_fieldDB.Value_Data.Valid = true

	miscellaneous_fieldDB.Name_Data.String = miscellaneous_field.Name
	miscellaneous_fieldDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMiscellaneous_fieldWOP
func (miscellaneous_fieldDB *Miscellaneous_fieldDB) CopyBasicFieldsFromMiscellaneous_fieldWOP(miscellaneous_field *Miscellaneous_fieldWOP) {
	// insertion point for fields commit

	miscellaneous_fieldDB.Value_Data.String = miscellaneous_field.Value
	miscellaneous_fieldDB.Value_Data.Valid = true

	miscellaneous_fieldDB.Name_Data.String = miscellaneous_field.Name
	miscellaneous_fieldDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMiscellaneous_field
func (miscellaneous_fieldDB *Miscellaneous_fieldDB) CopyBasicFieldsToMiscellaneous_field(miscellaneous_field *models.Miscellaneous_field) {
	// insertion point for checkout of basic fields (back repo to stage)
	miscellaneous_field.Value = miscellaneous_fieldDB.Value_Data.String
	miscellaneous_field.Name = miscellaneous_fieldDB.Name_Data.String
}

// CopyBasicFieldsToMiscellaneous_field_WOP
func (miscellaneous_fieldDB *Miscellaneous_fieldDB) CopyBasicFieldsToMiscellaneous_field_WOP(miscellaneous_field *models.Miscellaneous_field_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	miscellaneous_field.Value = miscellaneous_fieldDB.Value_Data.String
	miscellaneous_field.Name = miscellaneous_fieldDB.Name_Data.String
}

// CopyBasicFieldsToMiscellaneous_fieldWOP
func (miscellaneous_fieldDB *Miscellaneous_fieldDB) CopyBasicFieldsToMiscellaneous_fieldWOP(miscellaneous_field *Miscellaneous_fieldWOP) {
	miscellaneous_field.ID = int(miscellaneous_fieldDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	miscellaneous_field.Value = miscellaneous_fieldDB.Value_Data.String
	miscellaneous_field.Name = miscellaneous_fieldDB.Name_Data.String
}

// Backup generates a json file from a slice of all Miscellaneous_fieldDB instances in the backrepo
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Miscellaneous_fieldDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Miscellaneous_fieldDB, 0)
	for _, miscellaneous_fieldDB := range backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB {
		forBackup = append(forBackup, miscellaneous_fieldDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Miscellaneous_field ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Miscellaneous_field file", err.Error())
	}
}

// Backup generates a json file from a slice of all Miscellaneous_fieldDB instances in the backrepo
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Miscellaneous_fieldDB, 0)
	for _, miscellaneous_fieldDB := range backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB {
		forBackup = append(forBackup, miscellaneous_fieldDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Miscellaneous_field")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Miscellaneous_field_Fields, -1)
	for _, miscellaneous_fieldDB := range forBackup {

		var miscellaneous_fieldWOP Miscellaneous_fieldWOP
		miscellaneous_fieldDB.CopyBasicFieldsToMiscellaneous_fieldWOP(&miscellaneous_fieldWOP)

		row := sh.AddRow()
		row.WriteStruct(&miscellaneous_fieldWOP, -1)
	}
}

// RestoreXL from the "Miscellaneous_field" sheet all Miscellaneous_fieldDB instances
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMiscellaneous_fieldid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Miscellaneous_field"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMiscellaneous_field.rowVisitorMiscellaneous_field)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) rowVisitorMiscellaneous_field(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var miscellaneous_fieldWOP Miscellaneous_fieldWOP
		row.ReadStruct(&miscellaneous_fieldWOP)

		// add the unmarshalled struct to the stage
		miscellaneous_fieldDB := new(Miscellaneous_fieldDB)
		miscellaneous_fieldDB.CopyBasicFieldsFromMiscellaneous_fieldWOP(&miscellaneous_fieldWOP)

		miscellaneous_fieldDB_ID_atBackupTime := miscellaneous_fieldDB.ID
		miscellaneous_fieldDB.ID = 0
		query := backRepoMiscellaneous_field.db.Create(miscellaneous_fieldDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[miscellaneous_fieldDB.ID] = miscellaneous_fieldDB
		BackRepoMiscellaneous_fieldid_atBckpTime_newID[miscellaneous_fieldDB_ID_atBackupTime] = miscellaneous_fieldDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Miscellaneous_fieldDB.json" in dirPath that stores an array
// of Miscellaneous_fieldDB and stores it in the database
// the map BackRepoMiscellaneous_fieldid_atBckpTime_newID is updated accordingly
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMiscellaneous_fieldid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Miscellaneous_fieldDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Miscellaneous_field file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Miscellaneous_fieldDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB
	for _, miscellaneous_fieldDB := range forRestore {

		miscellaneous_fieldDB_ID_atBackupTime := miscellaneous_fieldDB.ID
		miscellaneous_fieldDB.ID = 0
		query := backRepoMiscellaneous_field.db.Create(miscellaneous_fieldDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[miscellaneous_fieldDB.ID] = miscellaneous_fieldDB
		BackRepoMiscellaneous_fieldid_atBckpTime_newID[miscellaneous_fieldDB_ID_atBackupTime] = miscellaneous_fieldDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Miscellaneous_field file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Miscellaneous_field>id_atBckpTime_newID
// to compute new index
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) RestorePhaseTwo() {

	for _, miscellaneous_fieldDB := range backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB {

		// next line of code is to avert unused variable compilation error
		_ = miscellaneous_fieldDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMiscellaneous_field.db.Model(miscellaneous_fieldDB).Updates(*miscellaneous_fieldDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMiscellaneous_field.ResetReversePointers commits all staged instances of Miscellaneous_field to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, miscellaneous_field := range backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldPtr {
		backRepoMiscellaneous_field.ResetReversePointersInstance(backRepo, idx, miscellaneous_field)
	}

	return
}

func (backRepoMiscellaneous_field *BackRepoMiscellaneous_fieldStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, miscellaneous_field *models.Miscellaneous_field) (Error error) {

	// fetch matching miscellaneous_fieldDB
	if miscellaneous_fieldDB, ok := backRepoMiscellaneous_field.Map_Miscellaneous_fieldDBID_Miscellaneous_fieldDB[idx]; ok {
		_ = miscellaneous_fieldDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMiscellaneous_fieldid_atBckpTime_newID map[uint]uint
