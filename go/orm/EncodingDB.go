// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Encoding_sql sql.NullBool
var dummy_Encoding_time time.Duration
var dummy_Encoding_sort sort.Float64Slice

// EncodingAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model encodingAPI
type EncodingAPI struct {
	gorm.Model

	models.Encoding_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EncodingPointersEncoding EncodingPointersEncoding
}

// EncodingPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EncodingPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Encoder is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EncoderID sql.NullInt64

	// field Supports is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SupportsID sql.NullInt64
}

// EncodingDB describes a encoding in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model encodingDB
type EncodingDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field encodingDB.Name
	Name_Data sql.NullString

	// Declation for basic field encodingDB.Software
	Software_Data sql.NullString

	// Declation for basic field encodingDB.Encoding_description
	Encoding_description_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EncodingPointersEncoding
}

// EncodingDBs arrays encodingDBs
// swagger:response encodingDBsResponse
type EncodingDBs []EncodingDB

// EncodingDBResponse provides response
// swagger:response encodingDBResponse
type EncodingDBResponse struct {
	EncodingDB
}

// EncodingWOP is a Encoding without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EncodingWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Software string `xlsx:"2"`

	Encoding_description string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Encoding_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Software",
	"Encoding_description",
}

type BackRepoEncodingStruct struct {
	// stores EncodingDB according to their gorm ID
	Map_EncodingDBID_EncodingDB map[uint]*EncodingDB

	// stores EncodingDB ID according to Encoding address
	Map_EncodingPtr_EncodingDBID map[*models.Encoding]uint

	// stores Encoding according to their gorm ID
	Map_EncodingDBID_EncodingPtr map[uint]*models.Encoding

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEncoding *BackRepoEncodingStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEncoding.stage
	return
}

func (backRepoEncoding *BackRepoEncodingStruct) GetDB() *gorm.DB {
	return backRepoEncoding.db
}

// GetEncodingDBFromEncodingPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEncoding *BackRepoEncodingStruct) GetEncodingDBFromEncodingPtr(encoding *models.Encoding) (encodingDB *EncodingDB) {
	id := backRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding]
	encodingDB = backRepoEncoding.Map_EncodingDBID_EncodingDB[id]
	return
}

// BackRepoEncoding.CommitPhaseOne commits all staged instances of Encoding to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEncoding *BackRepoEncodingStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for encoding := range stage.Encodings {
		backRepoEncoding.CommitPhaseOneInstance(encoding)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, encoding := range backRepoEncoding.Map_EncodingDBID_EncodingPtr {
		if _, ok := stage.Encodings[encoding]; !ok {
			backRepoEncoding.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEncoding.CommitDeleteInstance commits deletion of Encoding to the BackRepo
func (backRepoEncoding *BackRepoEncodingStruct) CommitDeleteInstance(id uint) (Error error) {

	encoding := backRepoEncoding.Map_EncodingDBID_EncodingPtr[id]

	// encoding is not staged anymore, remove encodingDB
	encodingDB := backRepoEncoding.Map_EncodingDBID_EncodingDB[id]
	query := backRepoEncoding.db.Unscoped().Delete(&encodingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEncoding.Map_EncodingPtr_EncodingDBID, encoding)
	delete(backRepoEncoding.Map_EncodingDBID_EncodingPtr, id)
	delete(backRepoEncoding.Map_EncodingDBID_EncodingDB, id)

	return
}

// BackRepoEncoding.CommitPhaseOneInstance commits encoding staged instances of Encoding to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEncoding *BackRepoEncodingStruct) CommitPhaseOneInstance(encoding *models.Encoding) (Error error) {

	// check if the encoding is not commited yet
	if _, ok := backRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding]; ok {
		return
	}

	// initiate encoding
	var encodingDB EncodingDB
	encodingDB.CopyBasicFieldsFromEncoding(encoding)

	query := backRepoEncoding.db.Create(&encodingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding] = encodingDB.ID
	backRepoEncoding.Map_EncodingDBID_EncodingPtr[encodingDB.ID] = encoding
	backRepoEncoding.Map_EncodingDBID_EncodingDB[encodingDB.ID] = &encodingDB

	return
}

// BackRepoEncoding.CommitPhaseTwo commits all staged instances of Encoding to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEncoding *BackRepoEncodingStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, encoding := range backRepoEncoding.Map_EncodingDBID_EncodingPtr {
		backRepoEncoding.CommitPhaseTwoInstance(backRepo, idx, encoding)
	}

	return
}

// BackRepoEncoding.CommitPhaseTwoInstance commits {{structname }} of models.Encoding to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEncoding *BackRepoEncodingStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, encoding *models.Encoding) (Error error) {

	// fetch matching encodingDB
	if encodingDB, ok := backRepoEncoding.Map_EncodingDBID_EncodingDB[idx]; ok {

		encodingDB.CopyBasicFieldsFromEncoding(encoding)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value encoding.Encoder translates to updating the encoding.EncoderID
		encodingDB.EncoderID.Valid = true // allow for a 0 value (nil association)
		if encoding.Encoder != nil {
			if EncoderId, ok := backRepo.BackRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[encoding.Encoder]; ok {
				encodingDB.EncoderID.Int64 = int64(EncoderId)
				encodingDB.EncoderID.Valid = true
			}
		} else {
			encodingDB.EncoderID.Int64 = 0
			encodingDB.EncoderID.Valid = true
		}

		// commit pointer value encoding.Supports translates to updating the encoding.SupportsID
		encodingDB.SupportsID.Valid = true // allow for a 0 value (nil association)
		if encoding.Supports != nil {
			if SupportsId, ok := backRepo.BackRepoSupports.Map_SupportsPtr_SupportsDBID[encoding.Supports]; ok {
				encodingDB.SupportsID.Int64 = int64(SupportsId)
				encodingDB.SupportsID.Valid = true
			}
		} else {
			encodingDB.SupportsID.Int64 = 0
			encodingDB.SupportsID.Valid = true
		}

		query := backRepoEncoding.db.Save(&encodingDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Encoding intance %s", encoding.Name))
		return err
	}

	return
}

// BackRepoEncoding.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEncoding *BackRepoEncodingStruct) CheckoutPhaseOne() (Error error) {

	encodingDBArray := make([]EncodingDB, 0)
	query := backRepoEncoding.db.Find(&encodingDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	encodingInstancesToBeRemovedFromTheStage := make(map[*models.Encoding]any)
	for key, value := range backRepoEncoding.stage.Encodings {
		encodingInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, encodingDB := range encodingDBArray {
		backRepoEncoding.CheckoutPhaseOneInstance(&encodingDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		encoding, ok := backRepoEncoding.Map_EncodingDBID_EncodingPtr[encodingDB.ID]
		if ok {
			delete(encodingInstancesToBeRemovedFromTheStage, encoding)
		}
	}

	// remove from stage and back repo's 3 maps all encodings that are not in the checkout
	for encoding := range encodingInstancesToBeRemovedFromTheStage {
		encoding.Unstage(backRepoEncoding.GetStage())

		// remove instance from the back repo 3 maps
		encodingID := backRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding]
		delete(backRepoEncoding.Map_EncodingPtr_EncodingDBID, encoding)
		delete(backRepoEncoding.Map_EncodingDBID_EncodingDB, encodingID)
		delete(backRepoEncoding.Map_EncodingDBID_EncodingPtr, encodingID)
	}

	return
}

// CheckoutPhaseOneInstance takes a encodingDB that has been found in the DB, updates the backRepo and stages the
// models version of the encodingDB
func (backRepoEncoding *BackRepoEncodingStruct) CheckoutPhaseOneInstance(encodingDB *EncodingDB) (Error error) {

	encoding, ok := backRepoEncoding.Map_EncodingDBID_EncodingPtr[encodingDB.ID]
	if !ok {
		encoding = new(models.Encoding)

		backRepoEncoding.Map_EncodingDBID_EncodingPtr[encodingDB.ID] = encoding
		backRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding] = encodingDB.ID

		// append model store with the new element
		encoding.Name = encodingDB.Name_Data.String
		encoding.Stage(backRepoEncoding.GetStage())
	}
	encodingDB.CopyBasicFieldsToEncoding(encoding)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	encoding.Stage(backRepoEncoding.GetStage())

	// preserve pointer to encodingDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EncodingDBID_EncodingDB)[encodingDB hold variable pointers
	encodingDB_Data := *encodingDB
	preservedPtrToEncoding := &encodingDB_Data
	backRepoEncoding.Map_EncodingDBID_EncodingDB[encodingDB.ID] = preservedPtrToEncoding

	return
}

// BackRepoEncoding.CheckoutPhaseTwo Checkouts all staged instances of Encoding to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEncoding *BackRepoEncodingStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, encodingDB := range backRepoEncoding.Map_EncodingDBID_EncodingDB {
		backRepoEncoding.CheckoutPhaseTwoInstance(backRepo, encodingDB)
	}
	return
}

// BackRepoEncoding.CheckoutPhaseTwoInstance Checkouts staged instances of Encoding to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEncoding *BackRepoEncodingStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, encodingDB *EncodingDB) (Error error) {

	encoding := backRepoEncoding.Map_EncodingDBID_EncodingPtr[encodingDB.ID]

	encodingDB.DecodePointers(backRepo, encoding)

	return
}

func (encodingDB *EncodingDB) DecodePointers(backRepo *BackRepoStruct, encoding *models.Encoding) {

	// insertion point for checkout of pointer encoding
	// Encoder field
	encoding.Encoder = nil
	if encodingDB.EncoderID.Int64 != 0 {
		encoding.Encoder = backRepo.BackRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[uint(encodingDB.EncoderID.Int64)]
	}
	// Supports field
	encoding.Supports = nil
	if encodingDB.SupportsID.Int64 != 0 {
		encoding.Supports = backRepo.BackRepoSupports.Map_SupportsDBID_SupportsPtr[uint(encodingDB.SupportsID.Int64)]
	}
	return
}

// CommitEncoding allows commit of a single encoding (if already staged)
func (backRepo *BackRepoStruct) CommitEncoding(encoding *models.Encoding) {
	backRepo.BackRepoEncoding.CommitPhaseOneInstance(encoding)
	if id, ok := backRepo.BackRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding]; ok {
		backRepo.BackRepoEncoding.CommitPhaseTwoInstance(backRepo, id, encoding)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEncoding allows checkout of a single encoding (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEncoding(encoding *models.Encoding) {
	// check if the encoding is staged
	if _, ok := backRepo.BackRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding]; ok {

		if id, ok := backRepo.BackRepoEncoding.Map_EncodingPtr_EncodingDBID[encoding]; ok {
			var encodingDB EncodingDB
			encodingDB.ID = id

			if err := backRepo.BackRepoEncoding.db.First(&encodingDB, id).Error; err != nil {
				log.Fatalln("CheckoutEncoding : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEncoding.CheckoutPhaseOneInstance(&encodingDB)
			backRepo.BackRepoEncoding.CheckoutPhaseTwoInstance(backRepo, &encodingDB)
		}
	}
}

// CopyBasicFieldsFromEncoding
func (encodingDB *EncodingDB) CopyBasicFieldsFromEncoding(encoding *models.Encoding) {
	// insertion point for fields commit

	encodingDB.Name_Data.String = encoding.Name
	encodingDB.Name_Data.Valid = true

	encodingDB.Software_Data.String = encoding.Software
	encodingDB.Software_Data.Valid = true

	encodingDB.Encoding_description_Data.String = encoding.Encoding_description
	encodingDB.Encoding_description_Data.Valid = true
}

// CopyBasicFieldsFromEncoding_WOP
func (encodingDB *EncodingDB) CopyBasicFieldsFromEncoding_WOP(encoding *models.Encoding_WOP) {
	// insertion point for fields commit

	encodingDB.Name_Data.String = encoding.Name
	encodingDB.Name_Data.Valid = true

	encodingDB.Software_Data.String = encoding.Software
	encodingDB.Software_Data.Valid = true

	encodingDB.Encoding_description_Data.String = encoding.Encoding_description
	encodingDB.Encoding_description_Data.Valid = true
}

// CopyBasicFieldsFromEncodingWOP
func (encodingDB *EncodingDB) CopyBasicFieldsFromEncodingWOP(encoding *EncodingWOP) {
	// insertion point for fields commit

	encodingDB.Name_Data.String = encoding.Name
	encodingDB.Name_Data.Valid = true

	encodingDB.Software_Data.String = encoding.Software
	encodingDB.Software_Data.Valid = true

	encodingDB.Encoding_description_Data.String = encoding.Encoding_description
	encodingDB.Encoding_description_Data.Valid = true
}

// CopyBasicFieldsToEncoding
func (encodingDB *EncodingDB) CopyBasicFieldsToEncoding(encoding *models.Encoding) {
	// insertion point for checkout of basic fields (back repo to stage)
	encoding.Name = encodingDB.Name_Data.String
	encoding.Software = encodingDB.Software_Data.String
	encoding.Encoding_description = encodingDB.Encoding_description_Data.String
}

// CopyBasicFieldsToEncoding_WOP
func (encodingDB *EncodingDB) CopyBasicFieldsToEncoding_WOP(encoding *models.Encoding_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	encoding.Name = encodingDB.Name_Data.String
	encoding.Software = encodingDB.Software_Data.String
	encoding.Encoding_description = encodingDB.Encoding_description_Data.String
}

// CopyBasicFieldsToEncodingWOP
func (encodingDB *EncodingDB) CopyBasicFieldsToEncodingWOP(encoding *EncodingWOP) {
	encoding.ID = int(encodingDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	encoding.Name = encodingDB.Name_Data.String
	encoding.Software = encodingDB.Software_Data.String
	encoding.Encoding_description = encodingDB.Encoding_description_Data.String
}

// Backup generates a json file from a slice of all EncodingDB instances in the backrepo
func (backRepoEncoding *BackRepoEncodingStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EncodingDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EncodingDB, 0)
	for _, encodingDB := range backRepoEncoding.Map_EncodingDBID_EncodingDB {
		forBackup = append(forBackup, encodingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Encoding ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Encoding file", err.Error())
	}
}

// Backup generates a json file from a slice of all EncodingDB instances in the backrepo
func (backRepoEncoding *BackRepoEncodingStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EncodingDB, 0)
	for _, encodingDB := range backRepoEncoding.Map_EncodingDBID_EncodingDB {
		forBackup = append(forBackup, encodingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Encoding")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Encoding_Fields, -1)
	for _, encodingDB := range forBackup {

		var encodingWOP EncodingWOP
		encodingDB.CopyBasicFieldsToEncodingWOP(&encodingWOP)

		row := sh.AddRow()
		row.WriteStruct(&encodingWOP, -1)
	}
}

// RestoreXL from the "Encoding" sheet all EncodingDB instances
func (backRepoEncoding *BackRepoEncodingStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEncodingid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Encoding"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEncoding.rowVisitorEncoding)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEncoding *BackRepoEncodingStruct) rowVisitorEncoding(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var encodingWOP EncodingWOP
		row.ReadStruct(&encodingWOP)

		// add the unmarshalled struct to the stage
		encodingDB := new(EncodingDB)
		encodingDB.CopyBasicFieldsFromEncodingWOP(&encodingWOP)

		encodingDB_ID_atBackupTime := encodingDB.ID
		encodingDB.ID = 0
		query := backRepoEncoding.db.Create(encodingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEncoding.Map_EncodingDBID_EncodingDB[encodingDB.ID] = encodingDB
		BackRepoEncodingid_atBckpTime_newID[encodingDB_ID_atBackupTime] = encodingDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EncodingDB.json" in dirPath that stores an array
// of EncodingDB and stores it in the database
// the map BackRepoEncodingid_atBckpTime_newID is updated accordingly
func (backRepoEncoding *BackRepoEncodingStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEncodingid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EncodingDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Encoding file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EncodingDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EncodingDBID_EncodingDB
	for _, encodingDB := range forRestore {

		encodingDB_ID_atBackupTime := encodingDB.ID
		encodingDB.ID = 0
		query := backRepoEncoding.db.Create(encodingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEncoding.Map_EncodingDBID_EncodingDB[encodingDB.ID] = encodingDB
		BackRepoEncodingid_atBckpTime_newID[encodingDB_ID_atBackupTime] = encodingDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Encoding file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Encoding>id_atBckpTime_newID
// to compute new index
func (backRepoEncoding *BackRepoEncodingStruct) RestorePhaseTwo() {

	for _, encodingDB := range backRepoEncoding.Map_EncodingDBID_EncodingDB {

		// next line of code is to avert unused variable compilation error
		_ = encodingDB

		// insertion point for reindexing pointers encoding
		// reindexing Encoder field
		if encodingDB.EncoderID.Int64 != 0 {
			encodingDB.EncoderID.Int64 = int64(BackRepoTyped_textid_atBckpTime_newID[uint(encodingDB.EncoderID.Int64)])
			encodingDB.EncoderID.Valid = true
		}

		// reindexing Supports field
		if encodingDB.SupportsID.Int64 != 0 {
			encodingDB.SupportsID.Int64 = int64(BackRepoSupportsid_atBckpTime_newID[uint(encodingDB.SupportsID.Int64)])
			encodingDB.SupportsID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoEncoding.db.Model(encodingDB).Updates(*encodingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEncoding.ResetReversePointers commits all staged instances of Encoding to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEncoding *BackRepoEncodingStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, encoding := range backRepoEncoding.Map_EncodingDBID_EncodingPtr {
		backRepoEncoding.ResetReversePointersInstance(backRepo, idx, encoding)
	}

	return
}

func (backRepoEncoding *BackRepoEncodingStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, encoding *models.Encoding) (Error error) {

	// fetch matching encodingDB
	if encodingDB, ok := backRepoEncoding.Map_EncodingDBID_EncodingDB[idx]; ok {
		_ = encodingDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEncodingid_atBckpTime_newID map[uint]uint
