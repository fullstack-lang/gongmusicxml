// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Pitched_sql sql.NullBool
var dummy_Pitched_time time.Duration
var dummy_Pitched_sort sort.Float64Slice

// PitchedAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pitchedAPI
type PitchedAPI struct {
	gorm.Model

	models.Pitched_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PitchedPointersEncoding PitchedPointersEncoding
}

// PitchedPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PitchedPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// PitchedDB describes a pitched in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pitchedDB
type PitchedDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pitchedDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PitchedPointersEncoding
}

// PitchedDBs arrays pitchedDBs
// swagger:response pitchedDBsResponse
type PitchedDBs []PitchedDB

// PitchedDBResponse provides response
// swagger:response pitchedDBResponse
type PitchedDBResponse struct {
	PitchedDB
}

// PitchedWOP is a Pitched without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PitchedWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Pitched_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoPitchedStruct struct {
	// stores PitchedDB according to their gorm ID
	Map_PitchedDBID_PitchedDB map[uint]*PitchedDB

	// stores PitchedDB ID according to Pitched address
	Map_PitchedPtr_PitchedDBID map[*models.Pitched]uint

	// stores Pitched according to their gorm ID
	Map_PitchedDBID_PitchedPtr map[uint]*models.Pitched

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoPitched *BackRepoPitchedStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPitched.stage
	return
}

func (backRepoPitched *BackRepoPitchedStruct) GetDB() *gorm.DB {
	return backRepoPitched.db
}

// GetPitchedDBFromPitchedPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPitched *BackRepoPitchedStruct) GetPitchedDBFromPitchedPtr(pitched *models.Pitched) (pitchedDB *PitchedDB) {
	id := backRepoPitched.Map_PitchedPtr_PitchedDBID[pitched]
	pitchedDB = backRepoPitched.Map_PitchedDBID_PitchedDB[id]
	return
}

// BackRepoPitched.CommitPhaseOne commits all staged instances of Pitched to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPitched *BackRepoPitchedStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pitched := range stage.Pitcheds {
		backRepoPitched.CommitPhaseOneInstance(pitched)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pitched := range backRepoPitched.Map_PitchedDBID_PitchedPtr {
		if _, ok := stage.Pitcheds[pitched]; !ok {
			backRepoPitched.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPitched.CommitDeleteInstance commits deletion of Pitched to the BackRepo
func (backRepoPitched *BackRepoPitchedStruct) CommitDeleteInstance(id uint) (Error error) {

	pitched := backRepoPitched.Map_PitchedDBID_PitchedPtr[id]

	// pitched is not staged anymore, remove pitchedDB
	pitchedDB := backRepoPitched.Map_PitchedDBID_PitchedDB[id]
	query := backRepoPitched.db.Unscoped().Delete(&pitchedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoPitched.Map_PitchedPtr_PitchedDBID, pitched)
	delete(backRepoPitched.Map_PitchedDBID_PitchedPtr, id)
	delete(backRepoPitched.Map_PitchedDBID_PitchedDB, id)

	return
}

// BackRepoPitched.CommitPhaseOneInstance commits pitched staged instances of Pitched to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPitched *BackRepoPitchedStruct) CommitPhaseOneInstance(pitched *models.Pitched) (Error error) {

	// check if the pitched is not commited yet
	if _, ok := backRepoPitched.Map_PitchedPtr_PitchedDBID[pitched]; ok {
		return
	}

	// initiate pitched
	var pitchedDB PitchedDB
	pitchedDB.CopyBasicFieldsFromPitched(pitched)

	query := backRepoPitched.db.Create(&pitchedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoPitched.Map_PitchedPtr_PitchedDBID[pitched] = pitchedDB.ID
	backRepoPitched.Map_PitchedDBID_PitchedPtr[pitchedDB.ID] = pitched
	backRepoPitched.Map_PitchedDBID_PitchedDB[pitchedDB.ID] = &pitchedDB

	return
}

// BackRepoPitched.CommitPhaseTwo commits all staged instances of Pitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitched *BackRepoPitchedStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pitched := range backRepoPitched.Map_PitchedDBID_PitchedPtr {
		backRepoPitched.CommitPhaseTwoInstance(backRepo, idx, pitched)
	}

	return
}

// BackRepoPitched.CommitPhaseTwoInstance commits {{structname }} of models.Pitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitched *BackRepoPitchedStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pitched *models.Pitched) (Error error) {

	// fetch matching pitchedDB
	if pitchedDB, ok := backRepoPitched.Map_PitchedDBID_PitchedDB[idx]; ok {

		pitchedDB.CopyBasicFieldsFromPitched(pitched)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoPitched.db.Save(&pitchedDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pitched intance %s", pitched.Name))
		return err
	}

	return
}

// BackRepoPitched.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPitched *BackRepoPitchedStruct) CheckoutPhaseOne() (Error error) {

	pitchedDBArray := make([]PitchedDB, 0)
	query := backRepoPitched.db.Find(&pitchedDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pitchedInstancesToBeRemovedFromTheStage := make(map[*models.Pitched]any)
	for key, value := range backRepoPitched.stage.Pitcheds {
		pitchedInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pitchedDB := range pitchedDBArray {
		backRepoPitched.CheckoutPhaseOneInstance(&pitchedDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pitched, ok := backRepoPitched.Map_PitchedDBID_PitchedPtr[pitchedDB.ID]
		if ok {
			delete(pitchedInstancesToBeRemovedFromTheStage, pitched)
		}
	}

	// remove from stage and back repo's 3 maps all pitcheds that are not in the checkout
	for pitched := range pitchedInstancesToBeRemovedFromTheStage {
		pitched.Unstage(backRepoPitched.GetStage())

		// remove instance from the back repo 3 maps
		pitchedID := backRepoPitched.Map_PitchedPtr_PitchedDBID[pitched]
		delete(backRepoPitched.Map_PitchedPtr_PitchedDBID, pitched)
		delete(backRepoPitched.Map_PitchedDBID_PitchedDB, pitchedID)
		delete(backRepoPitched.Map_PitchedDBID_PitchedPtr, pitchedID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pitchedDB that has been found in the DB, updates the backRepo and stages the
// models version of the pitchedDB
func (backRepoPitched *BackRepoPitchedStruct) CheckoutPhaseOneInstance(pitchedDB *PitchedDB) (Error error) {

	pitched, ok := backRepoPitched.Map_PitchedDBID_PitchedPtr[pitchedDB.ID]
	if !ok {
		pitched = new(models.Pitched)

		backRepoPitched.Map_PitchedDBID_PitchedPtr[pitchedDB.ID] = pitched
		backRepoPitched.Map_PitchedPtr_PitchedDBID[pitched] = pitchedDB.ID

		// append model store with the new element
		pitched.Name = pitchedDB.Name_Data.String
		pitched.Stage(backRepoPitched.GetStage())
	}
	pitchedDB.CopyBasicFieldsToPitched(pitched)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	pitched.Stage(backRepoPitched.GetStage())

	// preserve pointer to pitchedDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PitchedDBID_PitchedDB)[pitchedDB hold variable pointers
	pitchedDB_Data := *pitchedDB
	preservedPtrToPitched := &pitchedDB_Data
	backRepoPitched.Map_PitchedDBID_PitchedDB[pitchedDB.ID] = preservedPtrToPitched

	return
}

// BackRepoPitched.CheckoutPhaseTwo Checkouts all staged instances of Pitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitched *BackRepoPitchedStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pitchedDB := range backRepoPitched.Map_PitchedDBID_PitchedDB {
		backRepoPitched.CheckoutPhaseTwoInstance(backRepo, pitchedDB)
	}
	return
}

// BackRepoPitched.CheckoutPhaseTwoInstance Checkouts staged instances of Pitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitched *BackRepoPitchedStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pitchedDB *PitchedDB) (Error error) {

	pitched := backRepoPitched.Map_PitchedDBID_PitchedPtr[pitchedDB.ID]

	pitchedDB.DecodePointers(backRepo, pitched)

	return
}

func (pitchedDB *PitchedDB) DecodePointers(backRepo *BackRepoStruct, pitched *models.Pitched) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitPitched allows commit of a single pitched (if already staged)
func (backRepo *BackRepoStruct) CommitPitched(pitched *models.Pitched) {
	backRepo.BackRepoPitched.CommitPhaseOneInstance(pitched)
	if id, ok := backRepo.BackRepoPitched.Map_PitchedPtr_PitchedDBID[pitched]; ok {
		backRepo.BackRepoPitched.CommitPhaseTwoInstance(backRepo, id, pitched)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPitched allows checkout of a single pitched (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPitched(pitched *models.Pitched) {
	// check if the pitched is staged
	if _, ok := backRepo.BackRepoPitched.Map_PitchedPtr_PitchedDBID[pitched]; ok {

		if id, ok := backRepo.BackRepoPitched.Map_PitchedPtr_PitchedDBID[pitched]; ok {
			var pitchedDB PitchedDB
			pitchedDB.ID = id

			if err := backRepo.BackRepoPitched.db.First(&pitchedDB, id).Error; err != nil {
				log.Fatalln("CheckoutPitched : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPitched.CheckoutPhaseOneInstance(&pitchedDB)
			backRepo.BackRepoPitched.CheckoutPhaseTwoInstance(backRepo, &pitchedDB)
		}
	}
}

// CopyBasicFieldsFromPitched
func (pitchedDB *PitchedDB) CopyBasicFieldsFromPitched(pitched *models.Pitched) {
	// insertion point for fields commit

	pitchedDB.Name_Data.String = pitched.Name
	pitchedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPitched_WOP
func (pitchedDB *PitchedDB) CopyBasicFieldsFromPitched_WOP(pitched *models.Pitched_WOP) {
	// insertion point for fields commit

	pitchedDB.Name_Data.String = pitched.Name
	pitchedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromPitchedWOP
func (pitchedDB *PitchedDB) CopyBasicFieldsFromPitchedWOP(pitched *PitchedWOP) {
	// insertion point for fields commit

	pitchedDB.Name_Data.String = pitched.Name
	pitchedDB.Name_Data.Valid = true
}

// CopyBasicFieldsToPitched
func (pitchedDB *PitchedDB) CopyBasicFieldsToPitched(pitched *models.Pitched) {
	// insertion point for checkout of basic fields (back repo to stage)
	pitched.Name = pitchedDB.Name_Data.String
}

// CopyBasicFieldsToPitched_WOP
func (pitchedDB *PitchedDB) CopyBasicFieldsToPitched_WOP(pitched *models.Pitched_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	pitched.Name = pitchedDB.Name_Data.String
}

// CopyBasicFieldsToPitchedWOP
func (pitchedDB *PitchedDB) CopyBasicFieldsToPitchedWOP(pitched *PitchedWOP) {
	pitched.ID = int(pitchedDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pitched.Name = pitchedDB.Name_Data.String
}

// Backup generates a json file from a slice of all PitchedDB instances in the backrepo
func (backRepoPitched *BackRepoPitchedStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PitchedDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PitchedDB, 0)
	for _, pitchedDB := range backRepoPitched.Map_PitchedDBID_PitchedDB {
		forBackup = append(forBackup, pitchedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Pitched ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Pitched file", err.Error())
	}
}

// Backup generates a json file from a slice of all PitchedDB instances in the backrepo
func (backRepoPitched *BackRepoPitchedStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PitchedDB, 0)
	for _, pitchedDB := range backRepoPitched.Map_PitchedDBID_PitchedDB {
		forBackup = append(forBackup, pitchedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Pitched")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Pitched_Fields, -1)
	for _, pitchedDB := range forBackup {

		var pitchedWOP PitchedWOP
		pitchedDB.CopyBasicFieldsToPitchedWOP(&pitchedWOP)

		row := sh.AddRow()
		row.WriteStruct(&pitchedWOP, -1)
	}
}

// RestoreXL from the "Pitched" sheet all PitchedDB instances
func (backRepoPitched *BackRepoPitchedStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPitchedid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Pitched"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPitched.rowVisitorPitched)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPitched *BackRepoPitchedStruct) rowVisitorPitched(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pitchedWOP PitchedWOP
		row.ReadStruct(&pitchedWOP)

		// add the unmarshalled struct to the stage
		pitchedDB := new(PitchedDB)
		pitchedDB.CopyBasicFieldsFromPitchedWOP(&pitchedWOP)

		pitchedDB_ID_atBackupTime := pitchedDB.ID
		pitchedDB.ID = 0
		query := backRepoPitched.db.Create(pitchedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPitched.Map_PitchedDBID_PitchedDB[pitchedDB.ID] = pitchedDB
		BackRepoPitchedid_atBckpTime_newID[pitchedDB_ID_atBackupTime] = pitchedDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PitchedDB.json" in dirPath that stores an array
// of PitchedDB and stores it in the database
// the map BackRepoPitchedid_atBckpTime_newID is updated accordingly
func (backRepoPitched *BackRepoPitchedStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPitchedid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PitchedDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Pitched file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PitchedDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PitchedDBID_PitchedDB
	for _, pitchedDB := range forRestore {

		pitchedDB_ID_atBackupTime := pitchedDB.ID
		pitchedDB.ID = 0
		query := backRepoPitched.db.Create(pitchedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoPitched.Map_PitchedDBID_PitchedDB[pitchedDB.ID] = pitchedDB
		BackRepoPitchedid_atBckpTime_newID[pitchedDB_ID_atBackupTime] = pitchedDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Pitched file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Pitched>id_atBckpTime_newID
// to compute new index
func (backRepoPitched *BackRepoPitchedStruct) RestorePhaseTwo() {

	for _, pitchedDB := range backRepoPitched.Map_PitchedDBID_PitchedDB {

		// next line of code is to avert unused variable compilation error
		_ = pitchedDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoPitched.db.Model(pitchedDB).Updates(*pitchedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoPitched.ResetReversePointers commits all staged instances of Pitched to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPitched *BackRepoPitchedStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, pitched := range backRepoPitched.Map_PitchedDBID_PitchedPtr {
		backRepoPitched.ResetReversePointersInstance(backRepo, idx, pitched)
	}

	return
}

func (backRepoPitched *BackRepoPitchedStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, pitched *models.Pitched) (Error error) {

	// fetch matching pitchedDB
	if pitchedDB, ok := backRepoPitched.Map_PitchedDBID_PitchedDB[idx]; ok {
		_ = pitchedDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPitchedid_atBckpTime_newID map[uint]uint
