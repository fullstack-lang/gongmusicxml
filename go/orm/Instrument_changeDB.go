// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Instrument_change_sql sql.NullBool
var dummy_Instrument_change_time time.Duration
var dummy_Instrument_change_sort sort.Float64Slice

// Instrument_changeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model instrument_changeAPI
type Instrument_changeAPI struct {
	gorm.Model

	models.Instrument_change_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Instrument_changePointersEncoding Instrument_changePointersEncoding
}

// Instrument_changePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Instrument_changePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Instrument_changeDB describes a instrument_change in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model instrument_changeDB
type Instrument_changeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field instrument_changeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Instrument_changePointersEncoding
}

// Instrument_changeDBs arrays instrument_changeDBs
// swagger:response instrument_changeDBsResponse
type Instrument_changeDBs []Instrument_changeDB

// Instrument_changeDBResponse provides response
// swagger:response instrument_changeDBResponse
type Instrument_changeDBResponse struct {
	Instrument_changeDB
}

// Instrument_changeWOP is a Instrument_change without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Instrument_changeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Instrument_change_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoInstrument_changeStruct struct {
	// stores Instrument_changeDB according to their gorm ID
	Map_Instrument_changeDBID_Instrument_changeDB map[uint]*Instrument_changeDB

	// stores Instrument_changeDB ID according to Instrument_change address
	Map_Instrument_changePtr_Instrument_changeDBID map[*models.Instrument_change]uint

	// stores Instrument_change according to their gorm ID
	Map_Instrument_changeDBID_Instrument_changePtr map[uint]*models.Instrument_change

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoInstrument_change *BackRepoInstrument_changeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoInstrument_change.stage
	return
}

func (backRepoInstrument_change *BackRepoInstrument_changeStruct) GetDB() *gorm.DB {
	return backRepoInstrument_change.db
}

// GetInstrument_changeDBFromInstrument_changePtr is a handy function to access the back repo instance from the stage instance
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) GetInstrument_changeDBFromInstrument_changePtr(instrument_change *models.Instrument_change) (instrument_changeDB *Instrument_changeDB) {
	id := backRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change]
	instrument_changeDB = backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[id]
	return
}

// BackRepoInstrument_change.CommitPhaseOne commits all staged instances of Instrument_change to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for instrument_change := range stage.Instrument_changes {
		backRepoInstrument_change.CommitPhaseOneInstance(instrument_change)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, instrument_change := range backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr {
		if _, ok := stage.Instrument_changes[instrument_change]; !ok {
			backRepoInstrument_change.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoInstrument_change.CommitDeleteInstance commits deletion of Instrument_change to the BackRepo
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CommitDeleteInstance(id uint) (Error error) {

	instrument_change := backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr[id]

	// instrument_change is not staged anymore, remove instrument_changeDB
	instrument_changeDB := backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[id]
	query := backRepoInstrument_change.db.Unscoped().Delete(&instrument_changeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID, instrument_change)
	delete(backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr, id)
	delete(backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB, id)

	return
}

// BackRepoInstrument_change.CommitPhaseOneInstance commits instrument_change staged instances of Instrument_change to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CommitPhaseOneInstance(instrument_change *models.Instrument_change) (Error error) {

	// check if the instrument_change is not commited yet
	if _, ok := backRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change]; ok {
		return
	}

	// initiate instrument_change
	var instrument_changeDB Instrument_changeDB
	instrument_changeDB.CopyBasicFieldsFromInstrument_change(instrument_change)

	query := backRepoInstrument_change.db.Create(&instrument_changeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change] = instrument_changeDB.ID
	backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr[instrument_changeDB.ID] = instrument_change
	backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[instrument_changeDB.ID] = &instrument_changeDB

	return
}

// BackRepoInstrument_change.CommitPhaseTwo commits all staged instances of Instrument_change to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, instrument_change := range backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr {
		backRepoInstrument_change.CommitPhaseTwoInstance(backRepo, idx, instrument_change)
	}

	return
}

// BackRepoInstrument_change.CommitPhaseTwoInstance commits {{structname }} of models.Instrument_change to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, instrument_change *models.Instrument_change) (Error error) {

	// fetch matching instrument_changeDB
	if instrument_changeDB, ok := backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[idx]; ok {

		instrument_changeDB.CopyBasicFieldsFromInstrument_change(instrument_change)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoInstrument_change.db.Save(&instrument_changeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Instrument_change intance %s", instrument_change.Name))
		return err
	}

	return
}

// BackRepoInstrument_change.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CheckoutPhaseOne() (Error error) {

	instrument_changeDBArray := make([]Instrument_changeDB, 0)
	query := backRepoInstrument_change.db.Find(&instrument_changeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	instrument_changeInstancesToBeRemovedFromTheStage := make(map[*models.Instrument_change]any)
	for key, value := range backRepoInstrument_change.stage.Instrument_changes {
		instrument_changeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, instrument_changeDB := range instrument_changeDBArray {
		backRepoInstrument_change.CheckoutPhaseOneInstance(&instrument_changeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		instrument_change, ok := backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr[instrument_changeDB.ID]
		if ok {
			delete(instrument_changeInstancesToBeRemovedFromTheStage, instrument_change)
		}
	}

	// remove from stage and back repo's 3 maps all instrument_changes that are not in the checkout
	for instrument_change := range instrument_changeInstancesToBeRemovedFromTheStage {
		instrument_change.Unstage(backRepoInstrument_change.GetStage())

		// remove instance from the back repo 3 maps
		instrument_changeID := backRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change]
		delete(backRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID, instrument_change)
		delete(backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB, instrument_changeID)
		delete(backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr, instrument_changeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a instrument_changeDB that has been found in the DB, updates the backRepo and stages the
// models version of the instrument_changeDB
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CheckoutPhaseOneInstance(instrument_changeDB *Instrument_changeDB) (Error error) {

	instrument_change, ok := backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr[instrument_changeDB.ID]
	if !ok {
		instrument_change = new(models.Instrument_change)

		backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr[instrument_changeDB.ID] = instrument_change
		backRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change] = instrument_changeDB.ID

		// append model store with the new element
		instrument_change.Name = instrument_changeDB.Name_Data.String
		instrument_change.Stage(backRepoInstrument_change.GetStage())
	}
	instrument_changeDB.CopyBasicFieldsToInstrument_change(instrument_change)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	instrument_change.Stage(backRepoInstrument_change.GetStage())

	// preserve pointer to instrument_changeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Instrument_changeDBID_Instrument_changeDB)[instrument_changeDB hold variable pointers
	instrument_changeDB_Data := *instrument_changeDB
	preservedPtrToInstrument_change := &instrument_changeDB_Data
	backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[instrument_changeDB.ID] = preservedPtrToInstrument_change

	return
}

// BackRepoInstrument_change.CheckoutPhaseTwo Checkouts all staged instances of Instrument_change to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, instrument_changeDB := range backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB {
		backRepoInstrument_change.CheckoutPhaseTwoInstance(backRepo, instrument_changeDB)
	}
	return
}

// BackRepoInstrument_change.CheckoutPhaseTwoInstance Checkouts staged instances of Instrument_change to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, instrument_changeDB *Instrument_changeDB) (Error error) {

	instrument_change := backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr[instrument_changeDB.ID]

	instrument_changeDB.DecodePointers(backRepo, instrument_change)

	return
}

func (instrument_changeDB *Instrument_changeDB) DecodePointers(backRepo *BackRepoStruct, instrument_change *models.Instrument_change) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitInstrument_change allows commit of a single instrument_change (if already staged)
func (backRepo *BackRepoStruct) CommitInstrument_change(instrument_change *models.Instrument_change) {
	backRepo.BackRepoInstrument_change.CommitPhaseOneInstance(instrument_change)
	if id, ok := backRepo.BackRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change]; ok {
		backRepo.BackRepoInstrument_change.CommitPhaseTwoInstance(backRepo, id, instrument_change)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitInstrument_change allows checkout of a single instrument_change (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutInstrument_change(instrument_change *models.Instrument_change) {
	// check if the instrument_change is staged
	if _, ok := backRepo.BackRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change]; ok {

		if id, ok := backRepo.BackRepoInstrument_change.Map_Instrument_changePtr_Instrument_changeDBID[instrument_change]; ok {
			var instrument_changeDB Instrument_changeDB
			instrument_changeDB.ID = id

			if err := backRepo.BackRepoInstrument_change.db.First(&instrument_changeDB, id).Error; err != nil {
				log.Fatalln("CheckoutInstrument_change : Problem with getting object with id:", id)
			}
			backRepo.BackRepoInstrument_change.CheckoutPhaseOneInstance(&instrument_changeDB)
			backRepo.BackRepoInstrument_change.CheckoutPhaseTwoInstance(backRepo, &instrument_changeDB)
		}
	}
}

// CopyBasicFieldsFromInstrument_change
func (instrument_changeDB *Instrument_changeDB) CopyBasicFieldsFromInstrument_change(instrument_change *models.Instrument_change) {
	// insertion point for fields commit

	instrument_changeDB.Name_Data.String = instrument_change.Name
	instrument_changeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInstrument_change_WOP
func (instrument_changeDB *Instrument_changeDB) CopyBasicFieldsFromInstrument_change_WOP(instrument_change *models.Instrument_change_WOP) {
	// insertion point for fields commit

	instrument_changeDB.Name_Data.String = instrument_change.Name
	instrument_changeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInstrument_changeWOP
func (instrument_changeDB *Instrument_changeDB) CopyBasicFieldsFromInstrument_changeWOP(instrument_change *Instrument_changeWOP) {
	// insertion point for fields commit

	instrument_changeDB.Name_Data.String = instrument_change.Name
	instrument_changeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToInstrument_change
func (instrument_changeDB *Instrument_changeDB) CopyBasicFieldsToInstrument_change(instrument_change *models.Instrument_change) {
	// insertion point for checkout of basic fields (back repo to stage)
	instrument_change.Name = instrument_changeDB.Name_Data.String
}

// CopyBasicFieldsToInstrument_change_WOP
func (instrument_changeDB *Instrument_changeDB) CopyBasicFieldsToInstrument_change_WOP(instrument_change *models.Instrument_change_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	instrument_change.Name = instrument_changeDB.Name_Data.String
}

// CopyBasicFieldsToInstrument_changeWOP
func (instrument_changeDB *Instrument_changeDB) CopyBasicFieldsToInstrument_changeWOP(instrument_change *Instrument_changeWOP) {
	instrument_change.ID = int(instrument_changeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	instrument_change.Name = instrument_changeDB.Name_Data.String
}

// Backup generates a json file from a slice of all Instrument_changeDB instances in the backrepo
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Instrument_changeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Instrument_changeDB, 0)
	for _, instrument_changeDB := range backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB {
		forBackup = append(forBackup, instrument_changeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Instrument_change ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Instrument_change file", err.Error())
	}
}

// Backup generates a json file from a slice of all Instrument_changeDB instances in the backrepo
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Instrument_changeDB, 0)
	for _, instrument_changeDB := range backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB {
		forBackup = append(forBackup, instrument_changeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Instrument_change")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Instrument_change_Fields, -1)
	for _, instrument_changeDB := range forBackup {

		var instrument_changeWOP Instrument_changeWOP
		instrument_changeDB.CopyBasicFieldsToInstrument_changeWOP(&instrument_changeWOP)

		row := sh.AddRow()
		row.WriteStruct(&instrument_changeWOP, -1)
	}
}

// RestoreXL from the "Instrument_change" sheet all Instrument_changeDB instances
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoInstrument_changeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Instrument_change"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoInstrument_change.rowVisitorInstrument_change)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoInstrument_change *BackRepoInstrument_changeStruct) rowVisitorInstrument_change(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var instrument_changeWOP Instrument_changeWOP
		row.ReadStruct(&instrument_changeWOP)

		// add the unmarshalled struct to the stage
		instrument_changeDB := new(Instrument_changeDB)
		instrument_changeDB.CopyBasicFieldsFromInstrument_changeWOP(&instrument_changeWOP)

		instrument_changeDB_ID_atBackupTime := instrument_changeDB.ID
		instrument_changeDB.ID = 0
		query := backRepoInstrument_change.db.Create(instrument_changeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[instrument_changeDB.ID] = instrument_changeDB
		BackRepoInstrument_changeid_atBckpTime_newID[instrument_changeDB_ID_atBackupTime] = instrument_changeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Instrument_changeDB.json" in dirPath that stores an array
// of Instrument_changeDB and stores it in the database
// the map BackRepoInstrument_changeid_atBckpTime_newID is updated accordingly
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoInstrument_changeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Instrument_changeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Instrument_change file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Instrument_changeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Instrument_changeDBID_Instrument_changeDB
	for _, instrument_changeDB := range forRestore {

		instrument_changeDB_ID_atBackupTime := instrument_changeDB.ID
		instrument_changeDB.ID = 0
		query := backRepoInstrument_change.db.Create(instrument_changeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[instrument_changeDB.ID] = instrument_changeDB
		BackRepoInstrument_changeid_atBckpTime_newID[instrument_changeDB_ID_atBackupTime] = instrument_changeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Instrument_change file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Instrument_change>id_atBckpTime_newID
// to compute new index
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) RestorePhaseTwo() {

	for _, instrument_changeDB := range backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB {

		// next line of code is to avert unused variable compilation error
		_ = instrument_changeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoInstrument_change.db.Model(instrument_changeDB).Updates(*instrument_changeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoInstrument_change.ResetReversePointers commits all staged instances of Instrument_change to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument_change *BackRepoInstrument_changeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, instrument_change := range backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changePtr {
		backRepoInstrument_change.ResetReversePointersInstance(backRepo, idx, instrument_change)
	}

	return
}

func (backRepoInstrument_change *BackRepoInstrument_changeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, instrument_change *models.Instrument_change) (Error error) {

	// fetch matching instrument_changeDB
	if instrument_changeDB, ok := backRepoInstrument_change.Map_Instrument_changeDBID_Instrument_changeDB[idx]; ok {
		_ = instrument_changeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoInstrument_changeid_atBckpTime_newID map[uint]uint
