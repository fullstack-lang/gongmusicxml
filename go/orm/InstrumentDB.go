// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Instrument_sql sql.NullBool
var dummy_Instrument_time time.Duration
var dummy_Instrument_sort sort.Float64Slice

// InstrumentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model instrumentAPI
type InstrumentAPI struct {
	gorm.Model

	models.Instrument_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	InstrumentPointersEncoding InstrumentPointersEncoding
}

// InstrumentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type InstrumentPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// InstrumentDB describes a instrument in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model instrumentDB
type InstrumentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field instrumentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	InstrumentPointersEncoding
}

// InstrumentDBs arrays instrumentDBs
// swagger:response instrumentDBsResponse
type InstrumentDBs []InstrumentDB

// InstrumentDBResponse provides response
// swagger:response instrumentDBResponse
type InstrumentDBResponse struct {
	InstrumentDB
}

// InstrumentWOP is a Instrument without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type InstrumentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Instrument_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoInstrumentStruct struct {
	// stores InstrumentDB according to their gorm ID
	Map_InstrumentDBID_InstrumentDB map[uint]*InstrumentDB

	// stores InstrumentDB ID according to Instrument address
	Map_InstrumentPtr_InstrumentDBID map[*models.Instrument]uint

	// stores Instrument according to their gorm ID
	Map_InstrumentDBID_InstrumentPtr map[uint]*models.Instrument

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoInstrument *BackRepoInstrumentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoInstrument.stage
	return
}

func (backRepoInstrument *BackRepoInstrumentStruct) GetDB() *gorm.DB {
	return backRepoInstrument.db
}

// GetInstrumentDBFromInstrumentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoInstrument *BackRepoInstrumentStruct) GetInstrumentDBFromInstrumentPtr(instrument *models.Instrument) (instrumentDB *InstrumentDB) {
	id := backRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument]
	instrumentDB = backRepoInstrument.Map_InstrumentDBID_InstrumentDB[id]
	return
}

// BackRepoInstrument.CommitPhaseOne commits all staged instances of Instrument to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInstrument *BackRepoInstrumentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for instrument := range stage.Instruments {
		backRepoInstrument.CommitPhaseOneInstance(instrument)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, instrument := range backRepoInstrument.Map_InstrumentDBID_InstrumentPtr {
		if _, ok := stage.Instruments[instrument]; !ok {
			backRepoInstrument.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoInstrument.CommitDeleteInstance commits deletion of Instrument to the BackRepo
func (backRepoInstrument *BackRepoInstrumentStruct) CommitDeleteInstance(id uint) (Error error) {

	instrument := backRepoInstrument.Map_InstrumentDBID_InstrumentPtr[id]

	// instrument is not staged anymore, remove instrumentDB
	instrumentDB := backRepoInstrument.Map_InstrumentDBID_InstrumentDB[id]
	query := backRepoInstrument.db.Unscoped().Delete(&instrumentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoInstrument.Map_InstrumentPtr_InstrumentDBID, instrument)
	delete(backRepoInstrument.Map_InstrumentDBID_InstrumentPtr, id)
	delete(backRepoInstrument.Map_InstrumentDBID_InstrumentDB, id)

	return
}

// BackRepoInstrument.CommitPhaseOneInstance commits instrument staged instances of Instrument to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoInstrument *BackRepoInstrumentStruct) CommitPhaseOneInstance(instrument *models.Instrument) (Error error) {

	// check if the instrument is not commited yet
	if _, ok := backRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument]; ok {
		return
	}

	// initiate instrument
	var instrumentDB InstrumentDB
	instrumentDB.CopyBasicFieldsFromInstrument(instrument)

	query := backRepoInstrument.db.Create(&instrumentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument] = instrumentDB.ID
	backRepoInstrument.Map_InstrumentDBID_InstrumentPtr[instrumentDB.ID] = instrument
	backRepoInstrument.Map_InstrumentDBID_InstrumentDB[instrumentDB.ID] = &instrumentDB

	return
}

// BackRepoInstrument.CommitPhaseTwo commits all staged instances of Instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument *BackRepoInstrumentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, instrument := range backRepoInstrument.Map_InstrumentDBID_InstrumentPtr {
		backRepoInstrument.CommitPhaseTwoInstance(backRepo, idx, instrument)
	}

	return
}

// BackRepoInstrument.CommitPhaseTwoInstance commits {{structname }} of models.Instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument *BackRepoInstrumentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, instrument *models.Instrument) (Error error) {

	// fetch matching instrumentDB
	if instrumentDB, ok := backRepoInstrument.Map_InstrumentDBID_InstrumentDB[idx]; ok {

		instrumentDB.CopyBasicFieldsFromInstrument(instrument)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoInstrument.db.Save(&instrumentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Instrument intance %s", instrument.Name))
		return err
	}

	return
}

// BackRepoInstrument.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoInstrument *BackRepoInstrumentStruct) CheckoutPhaseOne() (Error error) {

	instrumentDBArray := make([]InstrumentDB, 0)
	query := backRepoInstrument.db.Find(&instrumentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	instrumentInstancesToBeRemovedFromTheStage := make(map[*models.Instrument]any)
	for key, value := range backRepoInstrument.stage.Instruments {
		instrumentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, instrumentDB := range instrumentDBArray {
		backRepoInstrument.CheckoutPhaseOneInstance(&instrumentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		instrument, ok := backRepoInstrument.Map_InstrumentDBID_InstrumentPtr[instrumentDB.ID]
		if ok {
			delete(instrumentInstancesToBeRemovedFromTheStage, instrument)
		}
	}

	// remove from stage and back repo's 3 maps all instruments that are not in the checkout
	for instrument := range instrumentInstancesToBeRemovedFromTheStage {
		instrument.Unstage(backRepoInstrument.GetStage())

		// remove instance from the back repo 3 maps
		instrumentID := backRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument]
		delete(backRepoInstrument.Map_InstrumentPtr_InstrumentDBID, instrument)
		delete(backRepoInstrument.Map_InstrumentDBID_InstrumentDB, instrumentID)
		delete(backRepoInstrument.Map_InstrumentDBID_InstrumentPtr, instrumentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a instrumentDB that has been found in the DB, updates the backRepo and stages the
// models version of the instrumentDB
func (backRepoInstrument *BackRepoInstrumentStruct) CheckoutPhaseOneInstance(instrumentDB *InstrumentDB) (Error error) {

	instrument, ok := backRepoInstrument.Map_InstrumentDBID_InstrumentPtr[instrumentDB.ID]
	if !ok {
		instrument = new(models.Instrument)

		backRepoInstrument.Map_InstrumentDBID_InstrumentPtr[instrumentDB.ID] = instrument
		backRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument] = instrumentDB.ID

		// append model store with the new element
		instrument.Name = instrumentDB.Name_Data.String
		instrument.Stage(backRepoInstrument.GetStage())
	}
	instrumentDB.CopyBasicFieldsToInstrument(instrument)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	instrument.Stage(backRepoInstrument.GetStage())

	// preserve pointer to instrumentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_InstrumentDBID_InstrumentDB)[instrumentDB hold variable pointers
	instrumentDB_Data := *instrumentDB
	preservedPtrToInstrument := &instrumentDB_Data
	backRepoInstrument.Map_InstrumentDBID_InstrumentDB[instrumentDB.ID] = preservedPtrToInstrument

	return
}

// BackRepoInstrument.CheckoutPhaseTwo Checkouts all staged instances of Instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument *BackRepoInstrumentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, instrumentDB := range backRepoInstrument.Map_InstrumentDBID_InstrumentDB {
		backRepoInstrument.CheckoutPhaseTwoInstance(backRepo, instrumentDB)
	}
	return
}

// BackRepoInstrument.CheckoutPhaseTwoInstance Checkouts staged instances of Instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument *BackRepoInstrumentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, instrumentDB *InstrumentDB) (Error error) {

	instrument := backRepoInstrument.Map_InstrumentDBID_InstrumentPtr[instrumentDB.ID]

	instrumentDB.DecodePointers(backRepo, instrument)

	return
}

func (instrumentDB *InstrumentDB) DecodePointers(backRepo *BackRepoStruct, instrument *models.Instrument) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitInstrument allows commit of a single instrument (if already staged)
func (backRepo *BackRepoStruct) CommitInstrument(instrument *models.Instrument) {
	backRepo.BackRepoInstrument.CommitPhaseOneInstance(instrument)
	if id, ok := backRepo.BackRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument]; ok {
		backRepo.BackRepoInstrument.CommitPhaseTwoInstance(backRepo, id, instrument)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitInstrument allows checkout of a single instrument (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutInstrument(instrument *models.Instrument) {
	// check if the instrument is staged
	if _, ok := backRepo.BackRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument]; ok {

		if id, ok := backRepo.BackRepoInstrument.Map_InstrumentPtr_InstrumentDBID[instrument]; ok {
			var instrumentDB InstrumentDB
			instrumentDB.ID = id

			if err := backRepo.BackRepoInstrument.db.First(&instrumentDB, id).Error; err != nil {
				log.Fatalln("CheckoutInstrument : Problem with getting object with id:", id)
			}
			backRepo.BackRepoInstrument.CheckoutPhaseOneInstance(&instrumentDB)
			backRepo.BackRepoInstrument.CheckoutPhaseTwoInstance(backRepo, &instrumentDB)
		}
	}
}

// CopyBasicFieldsFromInstrument
func (instrumentDB *InstrumentDB) CopyBasicFieldsFromInstrument(instrument *models.Instrument) {
	// insertion point for fields commit

	instrumentDB.Name_Data.String = instrument.Name
	instrumentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInstrument_WOP
func (instrumentDB *InstrumentDB) CopyBasicFieldsFromInstrument_WOP(instrument *models.Instrument_WOP) {
	// insertion point for fields commit

	instrumentDB.Name_Data.String = instrument.Name
	instrumentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromInstrumentWOP
func (instrumentDB *InstrumentDB) CopyBasicFieldsFromInstrumentWOP(instrument *InstrumentWOP) {
	// insertion point for fields commit

	instrumentDB.Name_Data.String = instrument.Name
	instrumentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToInstrument
func (instrumentDB *InstrumentDB) CopyBasicFieldsToInstrument(instrument *models.Instrument) {
	// insertion point for checkout of basic fields (back repo to stage)
	instrument.Name = instrumentDB.Name_Data.String
}

// CopyBasicFieldsToInstrument_WOP
func (instrumentDB *InstrumentDB) CopyBasicFieldsToInstrument_WOP(instrument *models.Instrument_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	instrument.Name = instrumentDB.Name_Data.String
}

// CopyBasicFieldsToInstrumentWOP
func (instrumentDB *InstrumentDB) CopyBasicFieldsToInstrumentWOP(instrument *InstrumentWOP) {
	instrument.ID = int(instrumentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	instrument.Name = instrumentDB.Name_Data.String
}

// Backup generates a json file from a slice of all InstrumentDB instances in the backrepo
func (backRepoInstrument *BackRepoInstrumentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "InstrumentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InstrumentDB, 0)
	for _, instrumentDB := range backRepoInstrument.Map_InstrumentDBID_InstrumentDB {
		forBackup = append(forBackup, instrumentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Instrument ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Instrument file", err.Error())
	}
}

// Backup generates a json file from a slice of all InstrumentDB instances in the backrepo
func (backRepoInstrument *BackRepoInstrumentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*InstrumentDB, 0)
	for _, instrumentDB := range backRepoInstrument.Map_InstrumentDBID_InstrumentDB {
		forBackup = append(forBackup, instrumentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Instrument")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Instrument_Fields, -1)
	for _, instrumentDB := range forBackup {

		var instrumentWOP InstrumentWOP
		instrumentDB.CopyBasicFieldsToInstrumentWOP(&instrumentWOP)

		row := sh.AddRow()
		row.WriteStruct(&instrumentWOP, -1)
	}
}

// RestoreXL from the "Instrument" sheet all InstrumentDB instances
func (backRepoInstrument *BackRepoInstrumentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoInstrumentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Instrument"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoInstrument.rowVisitorInstrument)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoInstrument *BackRepoInstrumentStruct) rowVisitorInstrument(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var instrumentWOP InstrumentWOP
		row.ReadStruct(&instrumentWOP)

		// add the unmarshalled struct to the stage
		instrumentDB := new(InstrumentDB)
		instrumentDB.CopyBasicFieldsFromInstrumentWOP(&instrumentWOP)

		instrumentDB_ID_atBackupTime := instrumentDB.ID
		instrumentDB.ID = 0
		query := backRepoInstrument.db.Create(instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInstrument.Map_InstrumentDBID_InstrumentDB[instrumentDB.ID] = instrumentDB
		BackRepoInstrumentid_atBckpTime_newID[instrumentDB_ID_atBackupTime] = instrumentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "InstrumentDB.json" in dirPath that stores an array
// of InstrumentDB and stores it in the database
// the map BackRepoInstrumentid_atBckpTime_newID is updated accordingly
func (backRepoInstrument *BackRepoInstrumentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoInstrumentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "InstrumentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Instrument file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*InstrumentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_InstrumentDBID_InstrumentDB
	for _, instrumentDB := range forRestore {

		instrumentDB_ID_atBackupTime := instrumentDB.ID
		instrumentDB.ID = 0
		query := backRepoInstrument.db.Create(instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoInstrument.Map_InstrumentDBID_InstrumentDB[instrumentDB.ID] = instrumentDB
		BackRepoInstrumentid_atBckpTime_newID[instrumentDB_ID_atBackupTime] = instrumentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Instrument file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Instrument>id_atBckpTime_newID
// to compute new index
func (backRepoInstrument *BackRepoInstrumentStruct) RestorePhaseTwo() {

	for _, instrumentDB := range backRepoInstrument.Map_InstrumentDBID_InstrumentDB {

		// next line of code is to avert unused variable compilation error
		_ = instrumentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoInstrument.db.Model(instrumentDB).Updates(*instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoInstrument.ResetReversePointers commits all staged instances of Instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoInstrument *BackRepoInstrumentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, instrument := range backRepoInstrument.Map_InstrumentDBID_InstrumentPtr {
		backRepoInstrument.ResetReversePointersInstance(backRepo, idx, instrument)
	}

	return
}

func (backRepoInstrument *BackRepoInstrumentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, instrument *models.Instrument) (Error error) {

	// fetch matching instrumentDB
	if instrumentDB, ok := backRepoInstrument.Map_InstrumentDBID_InstrumentDB[idx]; ok {
		_ = instrumentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoInstrumentid_atBckpTime_newID map[uint]uint
