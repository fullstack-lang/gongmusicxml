// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Harmonic_sql sql.NullBool
var dummy_Harmonic_time time.Duration
var dummy_Harmonic_sort sort.Float64Slice

// HarmonicAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model harmonicAPI
type HarmonicAPI struct {
	gorm.Model

	models.Harmonic_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	HarmonicPointersEncoding HarmonicPointersEncoding
}

// HarmonicPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type HarmonicPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Natural is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NaturalID sql.NullInt64

	// field Artificial is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ArtificialID sql.NullInt64

	// field Base_pitch is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Base_pitchID sql.NullInt64

	// field Touching_pitch is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Touching_pitchID sql.NullInt64

	// field Sounding_pitch is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Sounding_pitchID sql.NullInt64
}

// HarmonicDB describes a harmonic in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model harmonicDB
type HarmonicDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field harmonicDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	HarmonicPointersEncoding
}

// HarmonicDBs arrays harmonicDBs
// swagger:response harmonicDBsResponse
type HarmonicDBs []HarmonicDB

// HarmonicDBResponse provides response
// swagger:response harmonicDBResponse
type HarmonicDBResponse struct {
	HarmonicDB
}

// HarmonicWOP is a Harmonic without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type HarmonicWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Harmonic_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHarmonicStruct struct {
	// stores HarmonicDB according to their gorm ID
	Map_HarmonicDBID_HarmonicDB map[uint]*HarmonicDB

	// stores HarmonicDB ID according to Harmonic address
	Map_HarmonicPtr_HarmonicDBID map[*models.Harmonic]uint

	// stores Harmonic according to their gorm ID
	Map_HarmonicDBID_HarmonicPtr map[uint]*models.Harmonic

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHarmonic *BackRepoHarmonicStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHarmonic.stage
	return
}

func (backRepoHarmonic *BackRepoHarmonicStruct) GetDB() *gorm.DB {
	return backRepoHarmonic.db
}

// GetHarmonicDBFromHarmonicPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHarmonic *BackRepoHarmonicStruct) GetHarmonicDBFromHarmonicPtr(harmonic *models.Harmonic) (harmonicDB *HarmonicDB) {
	id := backRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic]
	harmonicDB = backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[id]
	return
}

// BackRepoHarmonic.CommitPhaseOne commits all staged instances of Harmonic to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmonic *BackRepoHarmonicStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for harmonic := range stage.Harmonics {
		backRepoHarmonic.CommitPhaseOneInstance(harmonic)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, harmonic := range backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr {
		if _, ok := stage.Harmonics[harmonic]; !ok {
			backRepoHarmonic.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHarmonic.CommitDeleteInstance commits deletion of Harmonic to the BackRepo
func (backRepoHarmonic *BackRepoHarmonicStruct) CommitDeleteInstance(id uint) (Error error) {

	harmonic := backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr[id]

	// harmonic is not staged anymore, remove harmonicDB
	harmonicDB := backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[id]
	query := backRepoHarmonic.db.Unscoped().Delete(&harmonicDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHarmonic.Map_HarmonicPtr_HarmonicDBID, harmonic)
	delete(backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr, id)
	delete(backRepoHarmonic.Map_HarmonicDBID_HarmonicDB, id)

	return
}

// BackRepoHarmonic.CommitPhaseOneInstance commits harmonic staged instances of Harmonic to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmonic *BackRepoHarmonicStruct) CommitPhaseOneInstance(harmonic *models.Harmonic) (Error error) {

	// check if the harmonic is not commited yet
	if _, ok := backRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic]; ok {
		return
	}

	// initiate harmonic
	var harmonicDB HarmonicDB
	harmonicDB.CopyBasicFieldsFromHarmonic(harmonic)

	query := backRepoHarmonic.db.Create(&harmonicDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic] = harmonicDB.ID
	backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr[harmonicDB.ID] = harmonic
	backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[harmonicDB.ID] = &harmonicDB

	return
}

// BackRepoHarmonic.CommitPhaseTwo commits all staged instances of Harmonic to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmonic *BackRepoHarmonicStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, harmonic := range backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr {
		backRepoHarmonic.CommitPhaseTwoInstance(backRepo, idx, harmonic)
	}

	return
}

// BackRepoHarmonic.CommitPhaseTwoInstance commits {{structname }} of models.Harmonic to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmonic *BackRepoHarmonicStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, harmonic *models.Harmonic) (Error error) {

	// fetch matching harmonicDB
	if harmonicDB, ok := backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[idx]; ok {

		harmonicDB.CopyBasicFieldsFromHarmonic(harmonic)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value harmonic.Natural translates to updating the harmonic.NaturalID
		harmonicDB.NaturalID.Valid = true // allow for a 0 value (nil association)
		if harmonic.Natural != nil {
			if NaturalId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[harmonic.Natural]; ok {
				harmonicDB.NaturalID.Int64 = int64(NaturalId)
				harmonicDB.NaturalID.Valid = true
			}
		} else {
			harmonicDB.NaturalID.Int64 = 0
			harmonicDB.NaturalID.Valid = true
		}

		// commit pointer value harmonic.Artificial translates to updating the harmonic.ArtificialID
		harmonicDB.ArtificialID.Valid = true // allow for a 0 value (nil association)
		if harmonic.Artificial != nil {
			if ArtificialId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[harmonic.Artificial]; ok {
				harmonicDB.ArtificialID.Int64 = int64(ArtificialId)
				harmonicDB.ArtificialID.Valid = true
			}
		} else {
			harmonicDB.ArtificialID.Int64 = 0
			harmonicDB.ArtificialID.Valid = true
		}

		// commit pointer value harmonic.Base_pitch translates to updating the harmonic.Base_pitchID
		harmonicDB.Base_pitchID.Valid = true // allow for a 0 value (nil association)
		if harmonic.Base_pitch != nil {
			if Base_pitchId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[harmonic.Base_pitch]; ok {
				harmonicDB.Base_pitchID.Int64 = int64(Base_pitchId)
				harmonicDB.Base_pitchID.Valid = true
			}
		} else {
			harmonicDB.Base_pitchID.Int64 = 0
			harmonicDB.Base_pitchID.Valid = true
		}

		// commit pointer value harmonic.Touching_pitch translates to updating the harmonic.Touching_pitchID
		harmonicDB.Touching_pitchID.Valid = true // allow for a 0 value (nil association)
		if harmonic.Touching_pitch != nil {
			if Touching_pitchId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[harmonic.Touching_pitch]; ok {
				harmonicDB.Touching_pitchID.Int64 = int64(Touching_pitchId)
				harmonicDB.Touching_pitchID.Valid = true
			}
		} else {
			harmonicDB.Touching_pitchID.Int64 = 0
			harmonicDB.Touching_pitchID.Valid = true
		}

		// commit pointer value harmonic.Sounding_pitch translates to updating the harmonic.Sounding_pitchID
		harmonicDB.Sounding_pitchID.Valid = true // allow for a 0 value (nil association)
		if harmonic.Sounding_pitch != nil {
			if Sounding_pitchId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[harmonic.Sounding_pitch]; ok {
				harmonicDB.Sounding_pitchID.Int64 = int64(Sounding_pitchId)
				harmonicDB.Sounding_pitchID.Valid = true
			}
		} else {
			harmonicDB.Sounding_pitchID.Int64 = 0
			harmonicDB.Sounding_pitchID.Valid = true
		}

		query := backRepoHarmonic.db.Save(&harmonicDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Harmonic intance %s", harmonic.Name))
		return err
	}

	return
}

// BackRepoHarmonic.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHarmonic *BackRepoHarmonicStruct) CheckoutPhaseOne() (Error error) {

	harmonicDBArray := make([]HarmonicDB, 0)
	query := backRepoHarmonic.db.Find(&harmonicDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	harmonicInstancesToBeRemovedFromTheStage := make(map[*models.Harmonic]any)
	for key, value := range backRepoHarmonic.stage.Harmonics {
		harmonicInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, harmonicDB := range harmonicDBArray {
		backRepoHarmonic.CheckoutPhaseOneInstance(&harmonicDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		harmonic, ok := backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr[harmonicDB.ID]
		if ok {
			delete(harmonicInstancesToBeRemovedFromTheStage, harmonic)
		}
	}

	// remove from stage and back repo's 3 maps all harmonics that are not in the checkout
	for harmonic := range harmonicInstancesToBeRemovedFromTheStage {
		harmonic.Unstage(backRepoHarmonic.GetStage())

		// remove instance from the back repo 3 maps
		harmonicID := backRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic]
		delete(backRepoHarmonic.Map_HarmonicPtr_HarmonicDBID, harmonic)
		delete(backRepoHarmonic.Map_HarmonicDBID_HarmonicDB, harmonicID)
		delete(backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr, harmonicID)
	}

	return
}

// CheckoutPhaseOneInstance takes a harmonicDB that has been found in the DB, updates the backRepo and stages the
// models version of the harmonicDB
func (backRepoHarmonic *BackRepoHarmonicStruct) CheckoutPhaseOneInstance(harmonicDB *HarmonicDB) (Error error) {

	harmonic, ok := backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr[harmonicDB.ID]
	if !ok {
		harmonic = new(models.Harmonic)

		backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr[harmonicDB.ID] = harmonic
		backRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic] = harmonicDB.ID

		// append model store with the new element
		harmonic.Name = harmonicDB.Name_Data.String
		harmonic.Stage(backRepoHarmonic.GetStage())
	}
	harmonicDB.CopyBasicFieldsToHarmonic(harmonic)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	harmonic.Stage(backRepoHarmonic.GetStage())

	// preserve pointer to harmonicDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_HarmonicDBID_HarmonicDB)[harmonicDB hold variable pointers
	harmonicDB_Data := *harmonicDB
	preservedPtrToHarmonic := &harmonicDB_Data
	backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[harmonicDB.ID] = preservedPtrToHarmonic

	return
}

// BackRepoHarmonic.CheckoutPhaseTwo Checkouts all staged instances of Harmonic to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmonic *BackRepoHarmonicStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, harmonicDB := range backRepoHarmonic.Map_HarmonicDBID_HarmonicDB {
		backRepoHarmonic.CheckoutPhaseTwoInstance(backRepo, harmonicDB)
	}
	return
}

// BackRepoHarmonic.CheckoutPhaseTwoInstance Checkouts staged instances of Harmonic to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmonic *BackRepoHarmonicStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, harmonicDB *HarmonicDB) (Error error) {

	harmonic := backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr[harmonicDB.ID]

	harmonicDB.DecodePointers(backRepo, harmonic)

	return
}

func (harmonicDB *HarmonicDB) DecodePointers(backRepo *BackRepoStruct, harmonic *models.Harmonic) {

	// insertion point for checkout of pointer encoding
	// Natural field
	harmonic.Natural = nil
	if harmonicDB.NaturalID.Int64 != 0 {
		harmonic.Natural = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(harmonicDB.NaturalID.Int64)]
	}
	// Artificial field
	harmonic.Artificial = nil
	if harmonicDB.ArtificialID.Int64 != 0 {
		harmonic.Artificial = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(harmonicDB.ArtificialID.Int64)]
	}
	// Base_pitch field
	harmonic.Base_pitch = nil
	if harmonicDB.Base_pitchID.Int64 != 0 {
		harmonic.Base_pitch = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(harmonicDB.Base_pitchID.Int64)]
	}
	// Touching_pitch field
	harmonic.Touching_pitch = nil
	if harmonicDB.Touching_pitchID.Int64 != 0 {
		harmonic.Touching_pitch = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(harmonicDB.Touching_pitchID.Int64)]
	}
	// Sounding_pitch field
	harmonic.Sounding_pitch = nil
	if harmonicDB.Sounding_pitchID.Int64 != 0 {
		harmonic.Sounding_pitch = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(harmonicDB.Sounding_pitchID.Int64)]
	}
	return
}

// CommitHarmonic allows commit of a single harmonic (if already staged)
func (backRepo *BackRepoStruct) CommitHarmonic(harmonic *models.Harmonic) {
	backRepo.BackRepoHarmonic.CommitPhaseOneInstance(harmonic)
	if id, ok := backRepo.BackRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic]; ok {
		backRepo.BackRepoHarmonic.CommitPhaseTwoInstance(backRepo, id, harmonic)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHarmonic allows checkout of a single harmonic (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHarmonic(harmonic *models.Harmonic) {
	// check if the harmonic is staged
	if _, ok := backRepo.BackRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic]; ok {

		if id, ok := backRepo.BackRepoHarmonic.Map_HarmonicPtr_HarmonicDBID[harmonic]; ok {
			var harmonicDB HarmonicDB
			harmonicDB.ID = id

			if err := backRepo.BackRepoHarmonic.db.First(&harmonicDB, id).Error; err != nil {
				log.Fatalln("CheckoutHarmonic : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHarmonic.CheckoutPhaseOneInstance(&harmonicDB)
			backRepo.BackRepoHarmonic.CheckoutPhaseTwoInstance(backRepo, &harmonicDB)
		}
	}
}

// CopyBasicFieldsFromHarmonic
func (harmonicDB *HarmonicDB) CopyBasicFieldsFromHarmonic(harmonic *models.Harmonic) {
	// insertion point for fields commit

	harmonicDB.Name_Data.String = harmonic.Name
	harmonicDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmonic_WOP
func (harmonicDB *HarmonicDB) CopyBasicFieldsFromHarmonic_WOP(harmonic *models.Harmonic_WOP) {
	// insertion point for fields commit

	harmonicDB.Name_Data.String = harmonic.Name
	harmonicDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmonicWOP
func (harmonicDB *HarmonicDB) CopyBasicFieldsFromHarmonicWOP(harmonic *HarmonicWOP) {
	// insertion point for fields commit

	harmonicDB.Name_Data.String = harmonic.Name
	harmonicDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHarmonic
func (harmonicDB *HarmonicDB) CopyBasicFieldsToHarmonic(harmonic *models.Harmonic) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmonic.Name = harmonicDB.Name_Data.String
}

// CopyBasicFieldsToHarmonic_WOP
func (harmonicDB *HarmonicDB) CopyBasicFieldsToHarmonic_WOP(harmonic *models.Harmonic_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmonic.Name = harmonicDB.Name_Data.String
}

// CopyBasicFieldsToHarmonicWOP
func (harmonicDB *HarmonicDB) CopyBasicFieldsToHarmonicWOP(harmonic *HarmonicWOP) {
	harmonic.ID = int(harmonicDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	harmonic.Name = harmonicDB.Name_Data.String
}

// Backup generates a json file from a slice of all HarmonicDB instances in the backrepo
func (backRepoHarmonic *BackRepoHarmonicStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "HarmonicDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HarmonicDB, 0)
	for _, harmonicDB := range backRepoHarmonic.Map_HarmonicDBID_HarmonicDB {
		forBackup = append(forBackup, harmonicDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Harmonic ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Harmonic file", err.Error())
	}
}

// Backup generates a json file from a slice of all HarmonicDB instances in the backrepo
func (backRepoHarmonic *BackRepoHarmonicStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HarmonicDB, 0)
	for _, harmonicDB := range backRepoHarmonic.Map_HarmonicDBID_HarmonicDB {
		forBackup = append(forBackup, harmonicDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Harmonic")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Harmonic_Fields, -1)
	for _, harmonicDB := range forBackup {

		var harmonicWOP HarmonicWOP
		harmonicDB.CopyBasicFieldsToHarmonicWOP(&harmonicWOP)

		row := sh.AddRow()
		row.WriteStruct(&harmonicWOP, -1)
	}
}

// RestoreXL from the "Harmonic" sheet all HarmonicDB instances
func (backRepoHarmonic *BackRepoHarmonicStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHarmonicid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Harmonic"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHarmonic.rowVisitorHarmonic)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHarmonic *BackRepoHarmonicStruct) rowVisitorHarmonic(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var harmonicWOP HarmonicWOP
		row.ReadStruct(&harmonicWOP)

		// add the unmarshalled struct to the stage
		harmonicDB := new(HarmonicDB)
		harmonicDB.CopyBasicFieldsFromHarmonicWOP(&harmonicWOP)

		harmonicDB_ID_atBackupTime := harmonicDB.ID
		harmonicDB.ID = 0
		query := backRepoHarmonic.db.Create(harmonicDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[harmonicDB.ID] = harmonicDB
		BackRepoHarmonicid_atBckpTime_newID[harmonicDB_ID_atBackupTime] = harmonicDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "HarmonicDB.json" in dirPath that stores an array
// of HarmonicDB and stores it in the database
// the map BackRepoHarmonicid_atBckpTime_newID is updated accordingly
func (backRepoHarmonic *BackRepoHarmonicStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHarmonicid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "HarmonicDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Harmonic file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*HarmonicDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_HarmonicDBID_HarmonicDB
	for _, harmonicDB := range forRestore {

		harmonicDB_ID_atBackupTime := harmonicDB.ID
		harmonicDB.ID = 0
		query := backRepoHarmonic.db.Create(harmonicDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[harmonicDB.ID] = harmonicDB
		BackRepoHarmonicid_atBckpTime_newID[harmonicDB_ID_atBackupTime] = harmonicDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Harmonic file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Harmonic>id_atBckpTime_newID
// to compute new index
func (backRepoHarmonic *BackRepoHarmonicStruct) RestorePhaseTwo() {

	for _, harmonicDB := range backRepoHarmonic.Map_HarmonicDBID_HarmonicDB {

		// next line of code is to avert unused variable compilation error
		_ = harmonicDB

		// insertion point for reindexing pointers encoding
		// reindexing Natural field
		if harmonicDB.NaturalID.Int64 != 0 {
			harmonicDB.NaturalID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(harmonicDB.NaturalID.Int64)])
			harmonicDB.NaturalID.Valid = true
		}

		// reindexing Artificial field
		if harmonicDB.ArtificialID.Int64 != 0 {
			harmonicDB.ArtificialID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(harmonicDB.ArtificialID.Int64)])
			harmonicDB.ArtificialID.Valid = true
		}

		// reindexing Base_pitch field
		if harmonicDB.Base_pitchID.Int64 != 0 {
			harmonicDB.Base_pitchID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(harmonicDB.Base_pitchID.Int64)])
			harmonicDB.Base_pitchID.Valid = true
		}

		// reindexing Touching_pitch field
		if harmonicDB.Touching_pitchID.Int64 != 0 {
			harmonicDB.Touching_pitchID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(harmonicDB.Touching_pitchID.Int64)])
			harmonicDB.Touching_pitchID.Valid = true
		}

		// reindexing Sounding_pitch field
		if harmonicDB.Sounding_pitchID.Int64 != 0 {
			harmonicDB.Sounding_pitchID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(harmonicDB.Sounding_pitchID.Int64)])
			harmonicDB.Sounding_pitchID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoHarmonic.db.Model(harmonicDB).Updates(*harmonicDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHarmonic.ResetReversePointers commits all staged instances of Harmonic to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmonic *BackRepoHarmonicStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, harmonic := range backRepoHarmonic.Map_HarmonicDBID_HarmonicPtr {
		backRepoHarmonic.ResetReversePointersInstance(backRepo, idx, harmonic)
	}

	return
}

func (backRepoHarmonic *BackRepoHarmonicStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, harmonic *models.Harmonic) (Error error) {

	// fetch matching harmonicDB
	if harmonicDB, ok := backRepoHarmonic.Map_HarmonicDBID_HarmonicDB[idx]; ok {
		_ = harmonicDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHarmonicid_atBckpTime_newID map[uint]uint
