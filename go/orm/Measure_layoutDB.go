// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Measure_layout_sql sql.NullBool
var dummy_Measure_layout_time time.Duration
var dummy_Measure_layout_sort sort.Float64Slice

// Measure_layoutAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model measure_layoutAPI
type Measure_layoutAPI struct {
	gorm.Model

	models.Measure_layout_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Measure_layoutPointersEncoding Measure_layoutPointersEncoding
}

// Measure_layoutPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Measure_layoutPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Measure_layoutDB describes a measure_layout in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model measure_layoutDB
type Measure_layoutDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field measure_layoutDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Measure_layoutPointersEncoding
}

// Measure_layoutDBs arrays measure_layoutDBs
// swagger:response measure_layoutDBsResponse
type Measure_layoutDBs []Measure_layoutDB

// Measure_layoutDBResponse provides response
// swagger:response measure_layoutDBResponse
type Measure_layoutDBResponse struct {
	Measure_layoutDB
}

// Measure_layoutWOP is a Measure_layout without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Measure_layoutWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Measure_layout_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMeasure_layoutStruct struct {
	// stores Measure_layoutDB according to their gorm ID
	Map_Measure_layoutDBID_Measure_layoutDB map[uint]*Measure_layoutDB

	// stores Measure_layoutDB ID according to Measure_layout address
	Map_Measure_layoutPtr_Measure_layoutDBID map[*models.Measure_layout]uint

	// stores Measure_layout according to their gorm ID
	Map_Measure_layoutDBID_Measure_layoutPtr map[uint]*models.Measure_layout

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMeasure_layout.stage
	return
}

func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) GetDB() *gorm.DB {
	return backRepoMeasure_layout.db
}

// GetMeasure_layoutDBFromMeasure_layoutPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) GetMeasure_layoutDBFromMeasure_layoutPtr(measure_layout *models.Measure_layout) (measure_layoutDB *Measure_layoutDB) {
	id := backRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout]
	measure_layoutDB = backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[id]
	return
}

// BackRepoMeasure_layout.CommitPhaseOne commits all staged instances of Measure_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for measure_layout := range stage.Measure_layouts {
		backRepoMeasure_layout.CommitPhaseOneInstance(measure_layout)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, measure_layout := range backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr {
		if _, ok := stage.Measure_layouts[measure_layout]; !ok {
			backRepoMeasure_layout.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMeasure_layout.CommitDeleteInstance commits deletion of Measure_layout to the BackRepo
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CommitDeleteInstance(id uint) (Error error) {

	measure_layout := backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr[id]

	// measure_layout is not staged anymore, remove measure_layoutDB
	measure_layoutDB := backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[id]
	query := backRepoMeasure_layout.db.Unscoped().Delete(&measure_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID, measure_layout)
	delete(backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr, id)
	delete(backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB, id)

	return
}

// BackRepoMeasure_layout.CommitPhaseOneInstance commits measure_layout staged instances of Measure_layout to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CommitPhaseOneInstance(measure_layout *models.Measure_layout) (Error error) {

	// check if the measure_layout is not commited yet
	if _, ok := backRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout]; ok {
		return
	}

	// initiate measure_layout
	var measure_layoutDB Measure_layoutDB
	measure_layoutDB.CopyBasicFieldsFromMeasure_layout(measure_layout)

	query := backRepoMeasure_layout.db.Create(&measure_layoutDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout] = measure_layoutDB.ID
	backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr[measure_layoutDB.ID] = measure_layout
	backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[measure_layoutDB.ID] = &measure_layoutDB

	return
}

// BackRepoMeasure_layout.CommitPhaseTwo commits all staged instances of Measure_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_layout := range backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr {
		backRepoMeasure_layout.CommitPhaseTwoInstance(backRepo, idx, measure_layout)
	}

	return
}

// BackRepoMeasure_layout.CommitPhaseTwoInstance commits {{structname }} of models.Measure_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, measure_layout *models.Measure_layout) (Error error) {

	// fetch matching measure_layoutDB
	if measure_layoutDB, ok := backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[idx]; ok {

		measure_layoutDB.CopyBasicFieldsFromMeasure_layout(measure_layout)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMeasure_layout.db.Save(&measure_layoutDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Measure_layout intance %s", measure_layout.Name))
		return err
	}

	return
}

// BackRepoMeasure_layout.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CheckoutPhaseOne() (Error error) {

	measure_layoutDBArray := make([]Measure_layoutDB, 0)
	query := backRepoMeasure_layout.db.Find(&measure_layoutDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	measure_layoutInstancesToBeRemovedFromTheStage := make(map[*models.Measure_layout]any)
	for key, value := range backRepoMeasure_layout.stage.Measure_layouts {
		measure_layoutInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, measure_layoutDB := range measure_layoutDBArray {
		backRepoMeasure_layout.CheckoutPhaseOneInstance(&measure_layoutDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		measure_layout, ok := backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr[measure_layoutDB.ID]
		if ok {
			delete(measure_layoutInstancesToBeRemovedFromTheStage, measure_layout)
		}
	}

	// remove from stage and back repo's 3 maps all measure_layouts that are not in the checkout
	for measure_layout := range measure_layoutInstancesToBeRemovedFromTheStage {
		measure_layout.Unstage(backRepoMeasure_layout.GetStage())

		// remove instance from the back repo 3 maps
		measure_layoutID := backRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout]
		delete(backRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID, measure_layout)
		delete(backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB, measure_layoutID)
		delete(backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr, measure_layoutID)
	}

	return
}

// CheckoutPhaseOneInstance takes a measure_layoutDB that has been found in the DB, updates the backRepo and stages the
// models version of the measure_layoutDB
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CheckoutPhaseOneInstance(measure_layoutDB *Measure_layoutDB) (Error error) {

	measure_layout, ok := backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr[measure_layoutDB.ID]
	if !ok {
		measure_layout = new(models.Measure_layout)

		backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr[measure_layoutDB.ID] = measure_layout
		backRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout] = measure_layoutDB.ID

		// append model store with the new element
		measure_layout.Name = measure_layoutDB.Name_Data.String
		measure_layout.Stage(backRepoMeasure_layout.GetStage())
	}
	measure_layoutDB.CopyBasicFieldsToMeasure_layout(measure_layout)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	measure_layout.Stage(backRepoMeasure_layout.GetStage())

	// preserve pointer to measure_layoutDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Measure_layoutDBID_Measure_layoutDB)[measure_layoutDB hold variable pointers
	measure_layoutDB_Data := *measure_layoutDB
	preservedPtrToMeasure_layout := &measure_layoutDB_Data
	backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[measure_layoutDB.ID] = preservedPtrToMeasure_layout

	return
}

// BackRepoMeasure_layout.CheckoutPhaseTwo Checkouts all staged instances of Measure_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, measure_layoutDB := range backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB {
		backRepoMeasure_layout.CheckoutPhaseTwoInstance(backRepo, measure_layoutDB)
	}
	return
}

// BackRepoMeasure_layout.CheckoutPhaseTwoInstance Checkouts staged instances of Measure_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, measure_layoutDB *Measure_layoutDB) (Error error) {

	measure_layout := backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr[measure_layoutDB.ID]

	measure_layoutDB.DecodePointers(backRepo, measure_layout)

	return
}

func (measure_layoutDB *Measure_layoutDB) DecodePointers(backRepo *BackRepoStruct, measure_layout *models.Measure_layout) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMeasure_layout allows commit of a single measure_layout (if already staged)
func (backRepo *BackRepoStruct) CommitMeasure_layout(measure_layout *models.Measure_layout) {
	backRepo.BackRepoMeasure_layout.CommitPhaseOneInstance(measure_layout)
	if id, ok := backRepo.BackRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout]; ok {
		backRepo.BackRepoMeasure_layout.CommitPhaseTwoInstance(backRepo, id, measure_layout)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMeasure_layout allows checkout of a single measure_layout (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMeasure_layout(measure_layout *models.Measure_layout) {
	// check if the measure_layout is staged
	if _, ok := backRepo.BackRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout]; ok {

		if id, ok := backRepo.BackRepoMeasure_layout.Map_Measure_layoutPtr_Measure_layoutDBID[measure_layout]; ok {
			var measure_layoutDB Measure_layoutDB
			measure_layoutDB.ID = id

			if err := backRepo.BackRepoMeasure_layout.db.First(&measure_layoutDB, id).Error; err != nil {
				log.Fatalln("CheckoutMeasure_layout : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMeasure_layout.CheckoutPhaseOneInstance(&measure_layoutDB)
			backRepo.BackRepoMeasure_layout.CheckoutPhaseTwoInstance(backRepo, &measure_layoutDB)
		}
	}
}

// CopyBasicFieldsFromMeasure_layout
func (measure_layoutDB *Measure_layoutDB) CopyBasicFieldsFromMeasure_layout(measure_layout *models.Measure_layout) {
	// insertion point for fields commit

	measure_layoutDB.Name_Data.String = measure_layout.Name
	measure_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_layout_WOP
func (measure_layoutDB *Measure_layoutDB) CopyBasicFieldsFromMeasure_layout_WOP(measure_layout *models.Measure_layout_WOP) {
	// insertion point for fields commit

	measure_layoutDB.Name_Data.String = measure_layout.Name
	measure_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMeasure_layoutWOP
func (measure_layoutDB *Measure_layoutDB) CopyBasicFieldsFromMeasure_layoutWOP(measure_layout *Measure_layoutWOP) {
	// insertion point for fields commit

	measure_layoutDB.Name_Data.String = measure_layout.Name
	measure_layoutDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMeasure_layout
func (measure_layoutDB *Measure_layoutDB) CopyBasicFieldsToMeasure_layout(measure_layout *models.Measure_layout) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_layout.Name = measure_layoutDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_layout_WOP
func (measure_layoutDB *Measure_layoutDB) CopyBasicFieldsToMeasure_layout_WOP(measure_layout *models.Measure_layout_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	measure_layout.Name = measure_layoutDB.Name_Data.String
}

// CopyBasicFieldsToMeasure_layoutWOP
func (measure_layoutDB *Measure_layoutDB) CopyBasicFieldsToMeasure_layoutWOP(measure_layout *Measure_layoutWOP) {
	measure_layout.ID = int(measure_layoutDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	measure_layout.Name = measure_layoutDB.Name_Data.String
}

// Backup generates a json file from a slice of all Measure_layoutDB instances in the backrepo
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Measure_layoutDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_layoutDB, 0)
	for _, measure_layoutDB := range backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB {
		forBackup = append(forBackup, measure_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Measure_layout ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Measure_layout file", err.Error())
	}
}

// Backup generates a json file from a slice of all Measure_layoutDB instances in the backrepo
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Measure_layoutDB, 0)
	for _, measure_layoutDB := range backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB {
		forBackup = append(forBackup, measure_layoutDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Measure_layout")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Measure_layout_Fields, -1)
	for _, measure_layoutDB := range forBackup {

		var measure_layoutWOP Measure_layoutWOP
		measure_layoutDB.CopyBasicFieldsToMeasure_layoutWOP(&measure_layoutWOP)

		row := sh.AddRow()
		row.WriteStruct(&measure_layoutWOP, -1)
	}
}

// RestoreXL from the "Measure_layout" sheet all Measure_layoutDB instances
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMeasure_layoutid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Measure_layout"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMeasure_layout.rowVisitorMeasure_layout)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) rowVisitorMeasure_layout(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var measure_layoutWOP Measure_layoutWOP
		row.ReadStruct(&measure_layoutWOP)

		// add the unmarshalled struct to the stage
		measure_layoutDB := new(Measure_layoutDB)
		measure_layoutDB.CopyBasicFieldsFromMeasure_layoutWOP(&measure_layoutWOP)

		measure_layoutDB_ID_atBackupTime := measure_layoutDB.ID
		measure_layoutDB.ID = 0
		query := backRepoMeasure_layout.db.Create(measure_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[measure_layoutDB.ID] = measure_layoutDB
		BackRepoMeasure_layoutid_atBckpTime_newID[measure_layoutDB_ID_atBackupTime] = measure_layoutDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Measure_layoutDB.json" in dirPath that stores an array
// of Measure_layoutDB and stores it in the database
// the map BackRepoMeasure_layoutid_atBckpTime_newID is updated accordingly
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMeasure_layoutid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Measure_layoutDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Measure_layout file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Measure_layoutDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Measure_layoutDBID_Measure_layoutDB
	for _, measure_layoutDB := range forRestore {

		measure_layoutDB_ID_atBackupTime := measure_layoutDB.ID
		measure_layoutDB.ID = 0
		query := backRepoMeasure_layout.db.Create(measure_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[measure_layoutDB.ID] = measure_layoutDB
		BackRepoMeasure_layoutid_atBckpTime_newID[measure_layoutDB_ID_atBackupTime] = measure_layoutDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Measure_layout file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Measure_layout>id_atBckpTime_newID
// to compute new index
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) RestorePhaseTwo() {

	for _, measure_layoutDB := range backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB {

		// next line of code is to avert unused variable compilation error
		_ = measure_layoutDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMeasure_layout.db.Model(measure_layoutDB).Updates(*measure_layoutDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMeasure_layout.ResetReversePointers commits all staged instances of Measure_layout to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, measure_layout := range backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutPtr {
		backRepoMeasure_layout.ResetReversePointersInstance(backRepo, idx, measure_layout)
	}

	return
}

func (backRepoMeasure_layout *BackRepoMeasure_layoutStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, measure_layout *models.Measure_layout) (Error error) {

	// fetch matching measure_layoutDB
	if measure_layoutDB, ok := backRepoMeasure_layout.Map_Measure_layoutDBID_Measure_layoutDB[idx]; ok {
		_ = measure_layoutDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMeasure_layoutid_atBckpTime_newID map[uint]uint
