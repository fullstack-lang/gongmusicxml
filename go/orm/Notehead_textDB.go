// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Notehead_text_sql sql.NullBool
var dummy_Notehead_text_time time.Duration
var dummy_Notehead_text_sort sort.Float64Slice

// Notehead_textAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model notehead_textAPI
type Notehead_textAPI struct {
	gorm.Model

	models.Notehead_text_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Notehead_textPointersEncoding Notehead_textPointersEncoding
}

// Notehead_textPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Notehead_textPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Accidental_text is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Accidental_textID sql.NullInt64
}

// Notehead_textDB describes a notehead_text in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model notehead_textDB
type Notehead_textDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field notehead_textDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Notehead_textPointersEncoding
}

// Notehead_textDBs arrays notehead_textDBs
// swagger:response notehead_textDBsResponse
type Notehead_textDBs []Notehead_textDB

// Notehead_textDBResponse provides response
// swagger:response notehead_textDBResponse
type Notehead_textDBResponse struct {
	Notehead_textDB
}

// Notehead_textWOP is a Notehead_text without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Notehead_textWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Notehead_text_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoNotehead_textStruct struct {
	// stores Notehead_textDB according to their gorm ID
	Map_Notehead_textDBID_Notehead_textDB map[uint]*Notehead_textDB

	// stores Notehead_textDB ID according to Notehead_text address
	Map_Notehead_textPtr_Notehead_textDBID map[*models.Notehead_text]uint

	// stores Notehead_text according to their gorm ID
	Map_Notehead_textDBID_Notehead_textPtr map[uint]*models.Notehead_text

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNotehead_text *BackRepoNotehead_textStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNotehead_text.stage
	return
}

func (backRepoNotehead_text *BackRepoNotehead_textStruct) GetDB() *gorm.DB {
	return backRepoNotehead_text.db
}

// GetNotehead_textDBFromNotehead_textPtr is a handy function to access the back repo instance from the stage instance
func (backRepoNotehead_text *BackRepoNotehead_textStruct) GetNotehead_textDBFromNotehead_textPtr(notehead_text *models.Notehead_text) (notehead_textDB *Notehead_textDB) {
	id := backRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text]
	notehead_textDB = backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[id]
	return
}

// BackRepoNotehead_text.CommitPhaseOne commits all staged instances of Notehead_text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for notehead_text := range stage.Notehead_texts {
		backRepoNotehead_text.CommitPhaseOneInstance(notehead_text)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, notehead_text := range backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr {
		if _, ok := stage.Notehead_texts[notehead_text]; !ok {
			backRepoNotehead_text.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNotehead_text.CommitDeleteInstance commits deletion of Notehead_text to the BackRepo
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CommitDeleteInstance(id uint) (Error error) {

	notehead_text := backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr[id]

	// notehead_text is not staged anymore, remove notehead_textDB
	notehead_textDB := backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[id]
	query := backRepoNotehead_text.db.Unscoped().Delete(&notehead_textDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID, notehead_text)
	delete(backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr, id)
	delete(backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB, id)

	return
}

// BackRepoNotehead_text.CommitPhaseOneInstance commits notehead_text staged instances of Notehead_text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CommitPhaseOneInstance(notehead_text *models.Notehead_text) (Error error) {

	// check if the notehead_text is not commited yet
	if _, ok := backRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text]; ok {
		return
	}

	// initiate notehead_text
	var notehead_textDB Notehead_textDB
	notehead_textDB.CopyBasicFieldsFromNotehead_text(notehead_text)

	query := backRepoNotehead_text.db.Create(&notehead_textDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text] = notehead_textDB.ID
	backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr[notehead_textDB.ID] = notehead_text
	backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[notehead_textDB.ID] = &notehead_textDB

	return
}

// BackRepoNotehead_text.CommitPhaseTwo commits all staged instances of Notehead_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, notehead_text := range backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr {
		backRepoNotehead_text.CommitPhaseTwoInstance(backRepo, idx, notehead_text)
	}

	return
}

// BackRepoNotehead_text.CommitPhaseTwoInstance commits {{structname }} of models.Notehead_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, notehead_text *models.Notehead_text) (Error error) {

	// fetch matching notehead_textDB
	if notehead_textDB, ok := backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[idx]; ok {

		notehead_textDB.CopyBasicFieldsFromNotehead_text(notehead_text)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value notehead_text.Accidental_text translates to updating the notehead_text.Accidental_textID
		notehead_textDB.Accidental_textID.Valid = true // allow for a 0 value (nil association)
		if notehead_text.Accidental_text != nil {
			if Accidental_textId, ok := backRepo.BackRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[notehead_text.Accidental_text]; ok {
				notehead_textDB.Accidental_textID.Int64 = int64(Accidental_textId)
				notehead_textDB.Accidental_textID.Valid = true
			}
		} else {
			notehead_textDB.Accidental_textID.Int64 = 0
			notehead_textDB.Accidental_textID.Valid = true
		}

		query := backRepoNotehead_text.db.Save(&notehead_textDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Notehead_text intance %s", notehead_text.Name))
		return err
	}

	return
}

// BackRepoNotehead_text.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CheckoutPhaseOne() (Error error) {

	notehead_textDBArray := make([]Notehead_textDB, 0)
	query := backRepoNotehead_text.db.Find(&notehead_textDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	notehead_textInstancesToBeRemovedFromTheStage := make(map[*models.Notehead_text]any)
	for key, value := range backRepoNotehead_text.stage.Notehead_texts {
		notehead_textInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, notehead_textDB := range notehead_textDBArray {
		backRepoNotehead_text.CheckoutPhaseOneInstance(&notehead_textDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		notehead_text, ok := backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr[notehead_textDB.ID]
		if ok {
			delete(notehead_textInstancesToBeRemovedFromTheStage, notehead_text)
		}
	}

	// remove from stage and back repo's 3 maps all notehead_texts that are not in the checkout
	for notehead_text := range notehead_textInstancesToBeRemovedFromTheStage {
		notehead_text.Unstage(backRepoNotehead_text.GetStage())

		// remove instance from the back repo 3 maps
		notehead_textID := backRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text]
		delete(backRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID, notehead_text)
		delete(backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB, notehead_textID)
		delete(backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr, notehead_textID)
	}

	return
}

// CheckoutPhaseOneInstance takes a notehead_textDB that has been found in the DB, updates the backRepo and stages the
// models version of the notehead_textDB
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CheckoutPhaseOneInstance(notehead_textDB *Notehead_textDB) (Error error) {

	notehead_text, ok := backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr[notehead_textDB.ID]
	if !ok {
		notehead_text = new(models.Notehead_text)

		backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr[notehead_textDB.ID] = notehead_text
		backRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text] = notehead_textDB.ID

		// append model store with the new element
		notehead_text.Name = notehead_textDB.Name_Data.String
		notehead_text.Stage(backRepoNotehead_text.GetStage())
	}
	notehead_textDB.CopyBasicFieldsToNotehead_text(notehead_text)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	notehead_text.Stage(backRepoNotehead_text.GetStage())

	// preserve pointer to notehead_textDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Notehead_textDBID_Notehead_textDB)[notehead_textDB hold variable pointers
	notehead_textDB_Data := *notehead_textDB
	preservedPtrToNotehead_text := &notehead_textDB_Data
	backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[notehead_textDB.ID] = preservedPtrToNotehead_text

	return
}

// BackRepoNotehead_text.CheckoutPhaseTwo Checkouts all staged instances of Notehead_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, notehead_textDB := range backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB {
		backRepoNotehead_text.CheckoutPhaseTwoInstance(backRepo, notehead_textDB)
	}
	return
}

// BackRepoNotehead_text.CheckoutPhaseTwoInstance Checkouts staged instances of Notehead_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead_text *BackRepoNotehead_textStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, notehead_textDB *Notehead_textDB) (Error error) {

	notehead_text := backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr[notehead_textDB.ID]

	notehead_textDB.DecodePointers(backRepo, notehead_text)

	return
}

func (notehead_textDB *Notehead_textDB) DecodePointers(backRepo *BackRepoStruct, notehead_text *models.Notehead_text) {

	// insertion point for checkout of pointer encoding
	// Accidental_text field
	notehead_text.Accidental_text = nil
	if notehead_textDB.Accidental_textID.Int64 != 0 {
		notehead_text.Accidental_text = backRepo.BackRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[uint(notehead_textDB.Accidental_textID.Int64)]
	}
	return
}

// CommitNotehead_text allows commit of a single notehead_text (if already staged)
func (backRepo *BackRepoStruct) CommitNotehead_text(notehead_text *models.Notehead_text) {
	backRepo.BackRepoNotehead_text.CommitPhaseOneInstance(notehead_text)
	if id, ok := backRepo.BackRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text]; ok {
		backRepo.BackRepoNotehead_text.CommitPhaseTwoInstance(backRepo, id, notehead_text)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNotehead_text allows checkout of a single notehead_text (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNotehead_text(notehead_text *models.Notehead_text) {
	// check if the notehead_text is staged
	if _, ok := backRepo.BackRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text]; ok {

		if id, ok := backRepo.BackRepoNotehead_text.Map_Notehead_textPtr_Notehead_textDBID[notehead_text]; ok {
			var notehead_textDB Notehead_textDB
			notehead_textDB.ID = id

			if err := backRepo.BackRepoNotehead_text.db.First(&notehead_textDB, id).Error; err != nil {
				log.Fatalln("CheckoutNotehead_text : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNotehead_text.CheckoutPhaseOneInstance(&notehead_textDB)
			backRepo.BackRepoNotehead_text.CheckoutPhaseTwoInstance(backRepo, &notehead_textDB)
		}
	}
}

// CopyBasicFieldsFromNotehead_text
func (notehead_textDB *Notehead_textDB) CopyBasicFieldsFromNotehead_text(notehead_text *models.Notehead_text) {
	// insertion point for fields commit

	notehead_textDB.Name_Data.String = notehead_text.Name
	notehead_textDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNotehead_text_WOP
func (notehead_textDB *Notehead_textDB) CopyBasicFieldsFromNotehead_text_WOP(notehead_text *models.Notehead_text_WOP) {
	// insertion point for fields commit

	notehead_textDB.Name_Data.String = notehead_text.Name
	notehead_textDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNotehead_textWOP
func (notehead_textDB *Notehead_textDB) CopyBasicFieldsFromNotehead_textWOP(notehead_text *Notehead_textWOP) {
	// insertion point for fields commit

	notehead_textDB.Name_Data.String = notehead_text.Name
	notehead_textDB.Name_Data.Valid = true
}

// CopyBasicFieldsToNotehead_text
func (notehead_textDB *Notehead_textDB) CopyBasicFieldsToNotehead_text(notehead_text *models.Notehead_text) {
	// insertion point for checkout of basic fields (back repo to stage)
	notehead_text.Name = notehead_textDB.Name_Data.String
}

// CopyBasicFieldsToNotehead_text_WOP
func (notehead_textDB *Notehead_textDB) CopyBasicFieldsToNotehead_text_WOP(notehead_text *models.Notehead_text_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	notehead_text.Name = notehead_textDB.Name_Data.String
}

// CopyBasicFieldsToNotehead_textWOP
func (notehead_textDB *Notehead_textDB) CopyBasicFieldsToNotehead_textWOP(notehead_text *Notehead_textWOP) {
	notehead_text.ID = int(notehead_textDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	notehead_text.Name = notehead_textDB.Name_Data.String
}

// Backup generates a json file from a slice of all Notehead_textDB instances in the backrepo
func (backRepoNotehead_text *BackRepoNotehead_textStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Notehead_textDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Notehead_textDB, 0)
	for _, notehead_textDB := range backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB {
		forBackup = append(forBackup, notehead_textDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Notehead_text ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Notehead_text file", err.Error())
	}
}

// Backup generates a json file from a slice of all Notehead_textDB instances in the backrepo
func (backRepoNotehead_text *BackRepoNotehead_textStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Notehead_textDB, 0)
	for _, notehead_textDB := range backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB {
		forBackup = append(forBackup, notehead_textDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Notehead_text")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Notehead_text_Fields, -1)
	for _, notehead_textDB := range forBackup {

		var notehead_textWOP Notehead_textWOP
		notehead_textDB.CopyBasicFieldsToNotehead_textWOP(&notehead_textWOP)

		row := sh.AddRow()
		row.WriteStruct(&notehead_textWOP, -1)
	}
}

// RestoreXL from the "Notehead_text" sheet all Notehead_textDB instances
func (backRepoNotehead_text *BackRepoNotehead_textStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNotehead_textid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Notehead_text"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNotehead_text.rowVisitorNotehead_text)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNotehead_text *BackRepoNotehead_textStruct) rowVisitorNotehead_text(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var notehead_textWOP Notehead_textWOP
		row.ReadStruct(&notehead_textWOP)

		// add the unmarshalled struct to the stage
		notehead_textDB := new(Notehead_textDB)
		notehead_textDB.CopyBasicFieldsFromNotehead_textWOP(&notehead_textWOP)

		notehead_textDB_ID_atBackupTime := notehead_textDB.ID
		notehead_textDB.ID = 0
		query := backRepoNotehead_text.db.Create(notehead_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[notehead_textDB.ID] = notehead_textDB
		BackRepoNotehead_textid_atBckpTime_newID[notehead_textDB_ID_atBackupTime] = notehead_textDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Notehead_textDB.json" in dirPath that stores an array
// of Notehead_textDB and stores it in the database
// the map BackRepoNotehead_textid_atBckpTime_newID is updated accordingly
func (backRepoNotehead_text *BackRepoNotehead_textStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNotehead_textid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Notehead_textDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Notehead_text file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Notehead_textDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Notehead_textDBID_Notehead_textDB
	for _, notehead_textDB := range forRestore {

		notehead_textDB_ID_atBackupTime := notehead_textDB.ID
		notehead_textDB.ID = 0
		query := backRepoNotehead_text.db.Create(notehead_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[notehead_textDB.ID] = notehead_textDB
		BackRepoNotehead_textid_atBckpTime_newID[notehead_textDB_ID_atBackupTime] = notehead_textDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Notehead_text file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Notehead_text>id_atBckpTime_newID
// to compute new index
func (backRepoNotehead_text *BackRepoNotehead_textStruct) RestorePhaseTwo() {

	for _, notehead_textDB := range backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB {

		// next line of code is to avert unused variable compilation error
		_ = notehead_textDB

		// insertion point for reindexing pointers encoding
		// reindexing Accidental_text field
		if notehead_textDB.Accidental_textID.Int64 != 0 {
			notehead_textDB.Accidental_textID.Int64 = int64(BackRepoAccidental_textid_atBckpTime_newID[uint(notehead_textDB.Accidental_textID.Int64)])
			notehead_textDB.Accidental_textID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoNotehead_text.db.Model(notehead_textDB).Updates(*notehead_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNotehead_text.ResetReversePointers commits all staged instances of Notehead_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNotehead_text *BackRepoNotehead_textStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, notehead_text := range backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textPtr {
		backRepoNotehead_text.ResetReversePointersInstance(backRepo, idx, notehead_text)
	}

	return
}

func (backRepoNotehead_text *BackRepoNotehead_textStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, notehead_text *models.Notehead_text) (Error error) {

	// fetch matching notehead_textDB
	if notehead_textDB, ok := backRepoNotehead_text.Map_Notehead_textDBID_Notehead_textDB[idx]; ok {
		_ = notehead_textDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNotehead_textid_atBckpTime_newID map[uint]uint
