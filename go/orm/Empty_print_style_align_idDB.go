// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Empty_print_style_align_id_sql sql.NullBool
var dummy_Empty_print_style_align_id_time time.Duration
var dummy_Empty_print_style_align_id_sort sort.Float64Slice

// Empty_print_style_align_idAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model empty_print_style_align_idAPI
type Empty_print_style_align_idAPI struct {
	gorm.Model

	models.Empty_print_style_align_id_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Empty_print_style_align_idPointersEncoding Empty_print_style_align_idPointersEncoding
}

// Empty_print_style_align_idPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Empty_print_style_align_idPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Empty_print_style_align_idDB describes a empty_print_style_align_id in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model empty_print_style_align_idDB
type Empty_print_style_align_idDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field empty_print_style_align_idDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Empty_print_style_align_idPointersEncoding
}

// Empty_print_style_align_idDBs arrays empty_print_style_align_idDBs
// swagger:response empty_print_style_align_idDBsResponse
type Empty_print_style_align_idDBs []Empty_print_style_align_idDB

// Empty_print_style_align_idDBResponse provides response
// swagger:response empty_print_style_align_idDBResponse
type Empty_print_style_align_idDBResponse struct {
	Empty_print_style_align_idDB
}

// Empty_print_style_align_idWOP is a Empty_print_style_align_id without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Empty_print_style_align_idWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Empty_print_style_align_id_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEmpty_print_style_align_idStruct struct {
	// stores Empty_print_style_align_idDB according to their gorm ID
	Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB map[uint]*Empty_print_style_align_idDB

	// stores Empty_print_style_align_idDB ID according to Empty_print_style_align_id address
	Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID map[*models.Empty_print_style_align_id]uint

	// stores Empty_print_style_align_id according to their gorm ID
	Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr map[uint]*models.Empty_print_style_align_id

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEmpty_print_style_align_id.stage
	return
}

func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) GetDB() *gorm.DB {
	return backRepoEmpty_print_style_align_id.db
}

// GetEmpty_print_style_align_idDBFromEmpty_print_style_align_idPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) GetEmpty_print_style_align_idDBFromEmpty_print_style_align_idPtr(empty_print_style_align_id *models.Empty_print_style_align_id) (empty_print_style_align_idDB *Empty_print_style_align_idDB) {
	id := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id]
	empty_print_style_align_idDB = backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[id]
	return
}

// BackRepoEmpty_print_style_align_id.CommitPhaseOne commits all staged instances of Empty_print_style_align_id to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for empty_print_style_align_id := range stage.Empty_print_style_align_ids {
		backRepoEmpty_print_style_align_id.CommitPhaseOneInstance(empty_print_style_align_id)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, empty_print_style_align_id := range backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr {
		if _, ok := stage.Empty_print_style_align_ids[empty_print_style_align_id]; !ok {
			backRepoEmpty_print_style_align_id.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmpty_print_style_align_id.CommitDeleteInstance commits deletion of Empty_print_style_align_id to the BackRepo
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CommitDeleteInstance(id uint) (Error error) {

	empty_print_style_align_id := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr[id]

	// empty_print_style_align_id is not staged anymore, remove empty_print_style_align_idDB
	empty_print_style_align_idDB := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[id]
	query := backRepoEmpty_print_style_align_id.db.Unscoped().Delete(&empty_print_style_align_idDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID, empty_print_style_align_id)
	delete(backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr, id)
	delete(backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB, id)

	return
}

// BackRepoEmpty_print_style_align_id.CommitPhaseOneInstance commits empty_print_style_align_id staged instances of Empty_print_style_align_id to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CommitPhaseOneInstance(empty_print_style_align_id *models.Empty_print_style_align_id) (Error error) {

	// check if the empty_print_style_align_id is not commited yet
	if _, ok := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id]; ok {
		return
	}

	// initiate empty_print_style_align_id
	var empty_print_style_align_idDB Empty_print_style_align_idDB
	empty_print_style_align_idDB.CopyBasicFieldsFromEmpty_print_style_align_id(empty_print_style_align_id)

	query := backRepoEmpty_print_style_align_id.db.Create(&empty_print_style_align_idDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id] = empty_print_style_align_idDB.ID
	backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr[empty_print_style_align_idDB.ID] = empty_print_style_align_id
	backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[empty_print_style_align_idDB.ID] = &empty_print_style_align_idDB

	return
}

// BackRepoEmpty_print_style_align_id.CommitPhaseTwo commits all staged instances of Empty_print_style_align_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_print_style_align_id := range backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr {
		backRepoEmpty_print_style_align_id.CommitPhaseTwoInstance(backRepo, idx, empty_print_style_align_id)
	}

	return
}

// BackRepoEmpty_print_style_align_id.CommitPhaseTwoInstance commits {{structname }} of models.Empty_print_style_align_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, empty_print_style_align_id *models.Empty_print_style_align_id) (Error error) {

	// fetch matching empty_print_style_align_idDB
	if empty_print_style_align_idDB, ok := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[idx]; ok {

		empty_print_style_align_idDB.CopyBasicFieldsFromEmpty_print_style_align_id(empty_print_style_align_id)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEmpty_print_style_align_id.db.Save(&empty_print_style_align_idDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Empty_print_style_align_id intance %s", empty_print_style_align_id.Name))
		return err
	}

	return
}

// BackRepoEmpty_print_style_align_id.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CheckoutPhaseOne() (Error error) {

	empty_print_style_align_idDBArray := make([]Empty_print_style_align_idDB, 0)
	query := backRepoEmpty_print_style_align_id.db.Find(&empty_print_style_align_idDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	empty_print_style_align_idInstancesToBeRemovedFromTheStage := make(map[*models.Empty_print_style_align_id]any)
	for key, value := range backRepoEmpty_print_style_align_id.stage.Empty_print_style_align_ids {
		empty_print_style_align_idInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, empty_print_style_align_idDB := range empty_print_style_align_idDBArray {
		backRepoEmpty_print_style_align_id.CheckoutPhaseOneInstance(&empty_print_style_align_idDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		empty_print_style_align_id, ok := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr[empty_print_style_align_idDB.ID]
		if ok {
			delete(empty_print_style_align_idInstancesToBeRemovedFromTheStage, empty_print_style_align_id)
		}
	}

	// remove from stage and back repo's 3 maps all empty_print_style_align_ids that are not in the checkout
	for empty_print_style_align_id := range empty_print_style_align_idInstancesToBeRemovedFromTheStage {
		empty_print_style_align_id.Unstage(backRepoEmpty_print_style_align_id.GetStage())

		// remove instance from the back repo 3 maps
		empty_print_style_align_idID := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id]
		delete(backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID, empty_print_style_align_id)
		delete(backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB, empty_print_style_align_idID)
		delete(backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr, empty_print_style_align_idID)
	}

	return
}

// CheckoutPhaseOneInstance takes a empty_print_style_align_idDB that has been found in the DB, updates the backRepo and stages the
// models version of the empty_print_style_align_idDB
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CheckoutPhaseOneInstance(empty_print_style_align_idDB *Empty_print_style_align_idDB) (Error error) {

	empty_print_style_align_id, ok := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr[empty_print_style_align_idDB.ID]
	if !ok {
		empty_print_style_align_id = new(models.Empty_print_style_align_id)

		backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr[empty_print_style_align_idDB.ID] = empty_print_style_align_id
		backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id] = empty_print_style_align_idDB.ID

		// append model store with the new element
		empty_print_style_align_id.Name = empty_print_style_align_idDB.Name_Data.String
		empty_print_style_align_id.Stage(backRepoEmpty_print_style_align_id.GetStage())
	}
	empty_print_style_align_idDB.CopyBasicFieldsToEmpty_print_style_align_id(empty_print_style_align_id)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	empty_print_style_align_id.Stage(backRepoEmpty_print_style_align_id.GetStage())

	// preserve pointer to empty_print_style_align_idDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB)[empty_print_style_align_idDB hold variable pointers
	empty_print_style_align_idDB_Data := *empty_print_style_align_idDB
	preservedPtrToEmpty_print_style_align_id := &empty_print_style_align_idDB_Data
	backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[empty_print_style_align_idDB.ID] = preservedPtrToEmpty_print_style_align_id

	return
}

// BackRepoEmpty_print_style_align_id.CheckoutPhaseTwo Checkouts all staged instances of Empty_print_style_align_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, empty_print_style_align_idDB := range backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB {
		backRepoEmpty_print_style_align_id.CheckoutPhaseTwoInstance(backRepo, empty_print_style_align_idDB)
	}
	return
}

// BackRepoEmpty_print_style_align_id.CheckoutPhaseTwoInstance Checkouts staged instances of Empty_print_style_align_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, empty_print_style_align_idDB *Empty_print_style_align_idDB) (Error error) {

	empty_print_style_align_id := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr[empty_print_style_align_idDB.ID]

	empty_print_style_align_idDB.DecodePointers(backRepo, empty_print_style_align_id)

	return
}

func (empty_print_style_align_idDB *Empty_print_style_align_idDB) DecodePointers(backRepo *BackRepoStruct, empty_print_style_align_id *models.Empty_print_style_align_id) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmpty_print_style_align_id allows commit of a single empty_print_style_align_id (if already staged)
func (backRepo *BackRepoStruct) CommitEmpty_print_style_align_id(empty_print_style_align_id *models.Empty_print_style_align_id) {
	backRepo.BackRepoEmpty_print_style_align_id.CommitPhaseOneInstance(empty_print_style_align_id)
	if id, ok := backRepo.BackRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id]; ok {
		backRepo.BackRepoEmpty_print_style_align_id.CommitPhaseTwoInstance(backRepo, id, empty_print_style_align_id)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmpty_print_style_align_id allows checkout of a single empty_print_style_align_id (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmpty_print_style_align_id(empty_print_style_align_id *models.Empty_print_style_align_id) {
	// check if the empty_print_style_align_id is staged
	if _, ok := backRepo.BackRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id]; ok {

		if id, ok := backRepo.BackRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idPtr_Empty_print_style_align_idDBID[empty_print_style_align_id]; ok {
			var empty_print_style_align_idDB Empty_print_style_align_idDB
			empty_print_style_align_idDB.ID = id

			if err := backRepo.BackRepoEmpty_print_style_align_id.db.First(&empty_print_style_align_idDB, id).Error; err != nil {
				log.Fatalln("CheckoutEmpty_print_style_align_id : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmpty_print_style_align_id.CheckoutPhaseOneInstance(&empty_print_style_align_idDB)
			backRepo.BackRepoEmpty_print_style_align_id.CheckoutPhaseTwoInstance(backRepo, &empty_print_style_align_idDB)
		}
	}
}

// CopyBasicFieldsFromEmpty_print_style_align_id
func (empty_print_style_align_idDB *Empty_print_style_align_idDB) CopyBasicFieldsFromEmpty_print_style_align_id(empty_print_style_align_id *models.Empty_print_style_align_id) {
	// insertion point for fields commit

	empty_print_style_align_idDB.Name_Data.String = empty_print_style_align_id.Name
	empty_print_style_align_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_print_style_align_id_WOP
func (empty_print_style_align_idDB *Empty_print_style_align_idDB) CopyBasicFieldsFromEmpty_print_style_align_id_WOP(empty_print_style_align_id *models.Empty_print_style_align_id_WOP) {
	// insertion point for fields commit

	empty_print_style_align_idDB.Name_Data.String = empty_print_style_align_id.Name
	empty_print_style_align_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_print_style_align_idWOP
func (empty_print_style_align_idDB *Empty_print_style_align_idDB) CopyBasicFieldsFromEmpty_print_style_align_idWOP(empty_print_style_align_id *Empty_print_style_align_idWOP) {
	// insertion point for fields commit

	empty_print_style_align_idDB.Name_Data.String = empty_print_style_align_id.Name
	empty_print_style_align_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEmpty_print_style_align_id
func (empty_print_style_align_idDB *Empty_print_style_align_idDB) CopyBasicFieldsToEmpty_print_style_align_id(empty_print_style_align_id *models.Empty_print_style_align_id) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_print_style_align_id.Name = empty_print_style_align_idDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_print_style_align_id_WOP
func (empty_print_style_align_idDB *Empty_print_style_align_idDB) CopyBasicFieldsToEmpty_print_style_align_id_WOP(empty_print_style_align_id *models.Empty_print_style_align_id_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_print_style_align_id.Name = empty_print_style_align_idDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_print_style_align_idWOP
func (empty_print_style_align_idDB *Empty_print_style_align_idDB) CopyBasicFieldsToEmpty_print_style_align_idWOP(empty_print_style_align_id *Empty_print_style_align_idWOP) {
	empty_print_style_align_id.ID = int(empty_print_style_align_idDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	empty_print_style_align_id.Name = empty_print_style_align_idDB.Name_Data.String
}

// Backup generates a json file from a slice of all Empty_print_style_align_idDB instances in the backrepo
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Empty_print_style_align_idDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_print_style_align_idDB, 0)
	for _, empty_print_style_align_idDB := range backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB {
		forBackup = append(forBackup, empty_print_style_align_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Empty_print_style_align_id ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Empty_print_style_align_id file", err.Error())
	}
}

// Backup generates a json file from a slice of all Empty_print_style_align_idDB instances in the backrepo
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_print_style_align_idDB, 0)
	for _, empty_print_style_align_idDB := range backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB {
		forBackup = append(forBackup, empty_print_style_align_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Empty_print_style_align_id")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Empty_print_style_align_id_Fields, -1)
	for _, empty_print_style_align_idDB := range forBackup {

		var empty_print_style_align_idWOP Empty_print_style_align_idWOP
		empty_print_style_align_idDB.CopyBasicFieldsToEmpty_print_style_align_idWOP(&empty_print_style_align_idWOP)

		row := sh.AddRow()
		row.WriteStruct(&empty_print_style_align_idWOP, -1)
	}
}

// RestoreXL from the "Empty_print_style_align_id" sheet all Empty_print_style_align_idDB instances
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmpty_print_style_align_idid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Empty_print_style_align_id"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmpty_print_style_align_id.rowVisitorEmpty_print_style_align_id)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) rowVisitorEmpty_print_style_align_id(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var empty_print_style_align_idWOP Empty_print_style_align_idWOP
		row.ReadStruct(&empty_print_style_align_idWOP)

		// add the unmarshalled struct to the stage
		empty_print_style_align_idDB := new(Empty_print_style_align_idDB)
		empty_print_style_align_idDB.CopyBasicFieldsFromEmpty_print_style_align_idWOP(&empty_print_style_align_idWOP)

		empty_print_style_align_idDB_ID_atBackupTime := empty_print_style_align_idDB.ID
		empty_print_style_align_idDB.ID = 0
		query := backRepoEmpty_print_style_align_id.db.Create(empty_print_style_align_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[empty_print_style_align_idDB.ID] = empty_print_style_align_idDB
		BackRepoEmpty_print_style_align_idid_atBckpTime_newID[empty_print_style_align_idDB_ID_atBackupTime] = empty_print_style_align_idDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Empty_print_style_align_idDB.json" in dirPath that stores an array
// of Empty_print_style_align_idDB and stores it in the database
// the map BackRepoEmpty_print_style_align_idid_atBckpTime_newID is updated accordingly
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmpty_print_style_align_idid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Empty_print_style_align_idDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Empty_print_style_align_id file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Empty_print_style_align_idDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB
	for _, empty_print_style_align_idDB := range forRestore {

		empty_print_style_align_idDB_ID_atBackupTime := empty_print_style_align_idDB.ID
		empty_print_style_align_idDB.ID = 0
		query := backRepoEmpty_print_style_align_id.db.Create(empty_print_style_align_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[empty_print_style_align_idDB.ID] = empty_print_style_align_idDB
		BackRepoEmpty_print_style_align_idid_atBckpTime_newID[empty_print_style_align_idDB_ID_atBackupTime] = empty_print_style_align_idDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Empty_print_style_align_id file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Empty_print_style_align_id>id_atBckpTime_newID
// to compute new index
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) RestorePhaseTwo() {

	for _, empty_print_style_align_idDB := range backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB {

		// next line of code is to avert unused variable compilation error
		_ = empty_print_style_align_idDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEmpty_print_style_align_id.db.Model(empty_print_style_align_idDB).Updates(*empty_print_style_align_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEmpty_print_style_align_id.ResetReversePointers commits all staged instances of Empty_print_style_align_id to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_print_style_align_id := range backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idPtr {
		backRepoEmpty_print_style_align_id.ResetReversePointersInstance(backRepo, idx, empty_print_style_align_id)
	}

	return
}

func (backRepoEmpty_print_style_align_id *BackRepoEmpty_print_style_align_idStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, empty_print_style_align_id *models.Empty_print_style_align_id) (Error error) {

	// fetch matching empty_print_style_align_idDB
	if empty_print_style_align_idDB, ok := backRepoEmpty_print_style_align_id.Map_Empty_print_style_align_idDBID_Empty_print_style_align_idDB[idx]; ok {
		_ = empty_print_style_align_idDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmpty_print_style_align_idid_atBckpTime_newID map[uint]uint
