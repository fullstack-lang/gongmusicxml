// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Slur_sql sql.NullBool
var dummy_Slur_time time.Duration
var dummy_Slur_sort sort.Float64Slice

// SlurAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model slurAPI
type SlurAPI struct {
	gorm.Model

	models.Slur_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SlurPointersEncoding SlurPointersEncoding
}

// SlurPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SlurPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// SlurDB describes a slur in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model slurDB
type SlurDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field slurDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SlurPointersEncoding
}

// SlurDBs arrays slurDBs
// swagger:response slurDBsResponse
type SlurDBs []SlurDB

// SlurDBResponse provides response
// swagger:response slurDBResponse
type SlurDBResponse struct {
	SlurDB
}

// SlurWOP is a Slur without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SlurWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Slur_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSlurStruct struct {
	// stores SlurDB according to their gorm ID
	Map_SlurDBID_SlurDB map[uint]*SlurDB

	// stores SlurDB ID according to Slur address
	Map_SlurPtr_SlurDBID map[*models.Slur]uint

	// stores Slur according to their gorm ID
	Map_SlurDBID_SlurPtr map[uint]*models.Slur

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSlur *BackRepoSlurStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSlur.stage
	return
}

func (backRepoSlur *BackRepoSlurStruct) GetDB() *gorm.DB {
	return backRepoSlur.db
}

// GetSlurDBFromSlurPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSlur *BackRepoSlurStruct) GetSlurDBFromSlurPtr(slur *models.Slur) (slurDB *SlurDB) {
	id := backRepoSlur.Map_SlurPtr_SlurDBID[slur]
	slurDB = backRepoSlur.Map_SlurDBID_SlurDB[id]
	return
}

// BackRepoSlur.CommitPhaseOne commits all staged instances of Slur to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSlur *BackRepoSlurStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for slur := range stage.Slurs {
		backRepoSlur.CommitPhaseOneInstance(slur)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, slur := range backRepoSlur.Map_SlurDBID_SlurPtr {
		if _, ok := stage.Slurs[slur]; !ok {
			backRepoSlur.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSlur.CommitDeleteInstance commits deletion of Slur to the BackRepo
func (backRepoSlur *BackRepoSlurStruct) CommitDeleteInstance(id uint) (Error error) {

	slur := backRepoSlur.Map_SlurDBID_SlurPtr[id]

	// slur is not staged anymore, remove slurDB
	slurDB := backRepoSlur.Map_SlurDBID_SlurDB[id]
	query := backRepoSlur.db.Unscoped().Delete(&slurDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSlur.Map_SlurPtr_SlurDBID, slur)
	delete(backRepoSlur.Map_SlurDBID_SlurPtr, id)
	delete(backRepoSlur.Map_SlurDBID_SlurDB, id)

	return
}

// BackRepoSlur.CommitPhaseOneInstance commits slur staged instances of Slur to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSlur *BackRepoSlurStruct) CommitPhaseOneInstance(slur *models.Slur) (Error error) {

	// check if the slur is not commited yet
	if _, ok := backRepoSlur.Map_SlurPtr_SlurDBID[slur]; ok {
		return
	}

	// initiate slur
	var slurDB SlurDB
	slurDB.CopyBasicFieldsFromSlur(slur)

	query := backRepoSlur.db.Create(&slurDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSlur.Map_SlurPtr_SlurDBID[slur] = slurDB.ID
	backRepoSlur.Map_SlurDBID_SlurPtr[slurDB.ID] = slur
	backRepoSlur.Map_SlurDBID_SlurDB[slurDB.ID] = &slurDB

	return
}

// BackRepoSlur.CommitPhaseTwo commits all staged instances of Slur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlur *BackRepoSlurStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, slur := range backRepoSlur.Map_SlurDBID_SlurPtr {
		backRepoSlur.CommitPhaseTwoInstance(backRepo, idx, slur)
	}

	return
}

// BackRepoSlur.CommitPhaseTwoInstance commits {{structname }} of models.Slur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlur *BackRepoSlurStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, slur *models.Slur) (Error error) {

	// fetch matching slurDB
	if slurDB, ok := backRepoSlur.Map_SlurDBID_SlurDB[idx]; ok {

		slurDB.CopyBasicFieldsFromSlur(slur)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSlur.db.Save(&slurDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Slur intance %s", slur.Name))
		return err
	}

	return
}

// BackRepoSlur.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSlur *BackRepoSlurStruct) CheckoutPhaseOne() (Error error) {

	slurDBArray := make([]SlurDB, 0)
	query := backRepoSlur.db.Find(&slurDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	slurInstancesToBeRemovedFromTheStage := make(map[*models.Slur]any)
	for key, value := range backRepoSlur.stage.Slurs {
		slurInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, slurDB := range slurDBArray {
		backRepoSlur.CheckoutPhaseOneInstance(&slurDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		slur, ok := backRepoSlur.Map_SlurDBID_SlurPtr[slurDB.ID]
		if ok {
			delete(slurInstancesToBeRemovedFromTheStage, slur)
		}
	}

	// remove from stage and back repo's 3 maps all slurs that are not in the checkout
	for slur := range slurInstancesToBeRemovedFromTheStage {
		slur.Unstage(backRepoSlur.GetStage())

		// remove instance from the back repo 3 maps
		slurID := backRepoSlur.Map_SlurPtr_SlurDBID[slur]
		delete(backRepoSlur.Map_SlurPtr_SlurDBID, slur)
		delete(backRepoSlur.Map_SlurDBID_SlurDB, slurID)
		delete(backRepoSlur.Map_SlurDBID_SlurPtr, slurID)
	}

	return
}

// CheckoutPhaseOneInstance takes a slurDB that has been found in the DB, updates the backRepo and stages the
// models version of the slurDB
func (backRepoSlur *BackRepoSlurStruct) CheckoutPhaseOneInstance(slurDB *SlurDB) (Error error) {

	slur, ok := backRepoSlur.Map_SlurDBID_SlurPtr[slurDB.ID]
	if !ok {
		slur = new(models.Slur)

		backRepoSlur.Map_SlurDBID_SlurPtr[slurDB.ID] = slur
		backRepoSlur.Map_SlurPtr_SlurDBID[slur] = slurDB.ID

		// append model store with the new element
		slur.Name = slurDB.Name_Data.String
		slur.Stage(backRepoSlur.GetStage())
	}
	slurDB.CopyBasicFieldsToSlur(slur)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	slur.Stage(backRepoSlur.GetStage())

	// preserve pointer to slurDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SlurDBID_SlurDB)[slurDB hold variable pointers
	slurDB_Data := *slurDB
	preservedPtrToSlur := &slurDB_Data
	backRepoSlur.Map_SlurDBID_SlurDB[slurDB.ID] = preservedPtrToSlur

	return
}

// BackRepoSlur.CheckoutPhaseTwo Checkouts all staged instances of Slur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlur *BackRepoSlurStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, slurDB := range backRepoSlur.Map_SlurDBID_SlurDB {
		backRepoSlur.CheckoutPhaseTwoInstance(backRepo, slurDB)
	}
	return
}

// BackRepoSlur.CheckoutPhaseTwoInstance Checkouts staged instances of Slur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlur *BackRepoSlurStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, slurDB *SlurDB) (Error error) {

	slur := backRepoSlur.Map_SlurDBID_SlurPtr[slurDB.ID]

	slurDB.DecodePointers(backRepo, slur)

	return
}

func (slurDB *SlurDB) DecodePointers(backRepo *BackRepoStruct, slur *models.Slur) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSlur allows commit of a single slur (if already staged)
func (backRepo *BackRepoStruct) CommitSlur(slur *models.Slur) {
	backRepo.BackRepoSlur.CommitPhaseOneInstance(slur)
	if id, ok := backRepo.BackRepoSlur.Map_SlurPtr_SlurDBID[slur]; ok {
		backRepo.BackRepoSlur.CommitPhaseTwoInstance(backRepo, id, slur)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSlur allows checkout of a single slur (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSlur(slur *models.Slur) {
	// check if the slur is staged
	if _, ok := backRepo.BackRepoSlur.Map_SlurPtr_SlurDBID[slur]; ok {

		if id, ok := backRepo.BackRepoSlur.Map_SlurPtr_SlurDBID[slur]; ok {
			var slurDB SlurDB
			slurDB.ID = id

			if err := backRepo.BackRepoSlur.db.First(&slurDB, id).Error; err != nil {
				log.Fatalln("CheckoutSlur : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSlur.CheckoutPhaseOneInstance(&slurDB)
			backRepo.BackRepoSlur.CheckoutPhaseTwoInstance(backRepo, &slurDB)
		}
	}
}

// CopyBasicFieldsFromSlur
func (slurDB *SlurDB) CopyBasicFieldsFromSlur(slur *models.Slur) {
	// insertion point for fields commit

	slurDB.Name_Data.String = slur.Name
	slurDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSlur_WOP
func (slurDB *SlurDB) CopyBasicFieldsFromSlur_WOP(slur *models.Slur_WOP) {
	// insertion point for fields commit

	slurDB.Name_Data.String = slur.Name
	slurDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSlurWOP
func (slurDB *SlurDB) CopyBasicFieldsFromSlurWOP(slur *SlurWOP) {
	// insertion point for fields commit

	slurDB.Name_Data.String = slur.Name
	slurDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSlur
func (slurDB *SlurDB) CopyBasicFieldsToSlur(slur *models.Slur) {
	// insertion point for checkout of basic fields (back repo to stage)
	slur.Name = slurDB.Name_Data.String
}

// CopyBasicFieldsToSlur_WOP
func (slurDB *SlurDB) CopyBasicFieldsToSlur_WOP(slur *models.Slur_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	slur.Name = slurDB.Name_Data.String
}

// CopyBasicFieldsToSlurWOP
func (slurDB *SlurDB) CopyBasicFieldsToSlurWOP(slur *SlurWOP) {
	slur.ID = int(slurDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	slur.Name = slurDB.Name_Data.String
}

// Backup generates a json file from a slice of all SlurDB instances in the backrepo
func (backRepoSlur *BackRepoSlurStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SlurDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SlurDB, 0)
	for _, slurDB := range backRepoSlur.Map_SlurDBID_SlurDB {
		forBackup = append(forBackup, slurDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Slur ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Slur file", err.Error())
	}
}

// Backup generates a json file from a slice of all SlurDB instances in the backrepo
func (backRepoSlur *BackRepoSlurStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SlurDB, 0)
	for _, slurDB := range backRepoSlur.Map_SlurDBID_SlurDB {
		forBackup = append(forBackup, slurDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Slur")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Slur_Fields, -1)
	for _, slurDB := range forBackup {

		var slurWOP SlurWOP
		slurDB.CopyBasicFieldsToSlurWOP(&slurWOP)

		row := sh.AddRow()
		row.WriteStruct(&slurWOP, -1)
	}
}

// RestoreXL from the "Slur" sheet all SlurDB instances
func (backRepoSlur *BackRepoSlurStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSlurid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Slur"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSlur.rowVisitorSlur)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSlur *BackRepoSlurStruct) rowVisitorSlur(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var slurWOP SlurWOP
		row.ReadStruct(&slurWOP)

		// add the unmarshalled struct to the stage
		slurDB := new(SlurDB)
		slurDB.CopyBasicFieldsFromSlurWOP(&slurWOP)

		slurDB_ID_atBackupTime := slurDB.ID
		slurDB.ID = 0
		query := backRepoSlur.db.Create(slurDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSlur.Map_SlurDBID_SlurDB[slurDB.ID] = slurDB
		BackRepoSlurid_atBckpTime_newID[slurDB_ID_atBackupTime] = slurDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SlurDB.json" in dirPath that stores an array
// of SlurDB and stores it in the database
// the map BackRepoSlurid_atBckpTime_newID is updated accordingly
func (backRepoSlur *BackRepoSlurStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSlurid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SlurDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Slur file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SlurDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SlurDBID_SlurDB
	for _, slurDB := range forRestore {

		slurDB_ID_atBackupTime := slurDB.ID
		slurDB.ID = 0
		query := backRepoSlur.db.Create(slurDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSlur.Map_SlurDBID_SlurDB[slurDB.ID] = slurDB
		BackRepoSlurid_atBckpTime_newID[slurDB_ID_atBackupTime] = slurDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Slur file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Slur>id_atBckpTime_newID
// to compute new index
func (backRepoSlur *BackRepoSlurStruct) RestorePhaseTwo() {

	for _, slurDB := range backRepoSlur.Map_SlurDBID_SlurDB {

		// next line of code is to avert unused variable compilation error
		_ = slurDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSlur.db.Model(slurDB).Updates(*slurDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSlur.ResetReversePointers commits all staged instances of Slur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSlur *BackRepoSlurStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, slur := range backRepoSlur.Map_SlurDBID_SlurPtr {
		backRepoSlur.ResetReversePointersInstance(backRepo, idx, slur)
	}

	return
}

func (backRepoSlur *BackRepoSlurStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, slur *models.Slur) (Error error) {

	// fetch matching slurDB
	if slurDB, ok := backRepoSlur.Map_SlurDBID_SlurDB[idx]; ok {
		_ = slurDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSlurid_atBckpTime_newID map[uint]uint
