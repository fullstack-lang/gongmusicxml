// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Score_partwise_sql sql.NullBool
var dummy_Score_partwise_time time.Duration
var dummy_Score_partwise_sort sort.Float64Slice

// Score_partwiseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model score_partwiseAPI
type Score_partwiseAPI struct {
	gorm.Model

	models.Score_partwise_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Score_partwisePointersEncoding Score_partwisePointersEncoding
}

// Score_partwisePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Score_partwisePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Score_partwiseDB describes a score_partwise in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model score_partwiseDB
type Score_partwiseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field score_partwiseDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Score_partwisePointersEncoding
}

// Score_partwiseDBs arrays score_partwiseDBs
// swagger:response score_partwiseDBsResponse
type Score_partwiseDBs []Score_partwiseDB

// Score_partwiseDBResponse provides response
// swagger:response score_partwiseDBResponse
type Score_partwiseDBResponse struct {
	Score_partwiseDB
}

// Score_partwiseWOP is a Score_partwise without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Score_partwiseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Score_partwise_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoScore_partwiseStruct struct {
	// stores Score_partwiseDB according to their gorm ID
	Map_Score_partwiseDBID_Score_partwiseDB map[uint]*Score_partwiseDB

	// stores Score_partwiseDB ID according to Score_partwise address
	Map_Score_partwisePtr_Score_partwiseDBID map[*models.Score_partwise]uint

	// stores Score_partwise according to their gorm ID
	Map_Score_partwiseDBID_Score_partwisePtr map[uint]*models.Score_partwise

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoScore_partwise *BackRepoScore_partwiseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoScore_partwise.stage
	return
}

func (backRepoScore_partwise *BackRepoScore_partwiseStruct) GetDB() *gorm.DB {
	return backRepoScore_partwise.db
}

// GetScore_partwiseDBFromScore_partwisePtr is a handy function to access the back repo instance from the stage instance
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) GetScore_partwiseDBFromScore_partwisePtr(score_partwise *models.Score_partwise) (score_partwiseDB *Score_partwiseDB) {
	id := backRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise]
	score_partwiseDB = backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[id]
	return
}

// BackRepoScore_partwise.CommitPhaseOne commits all staged instances of Score_partwise to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for score_partwise := range stage.Score_partwises {
		backRepoScore_partwise.CommitPhaseOneInstance(score_partwise)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, score_partwise := range backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr {
		if _, ok := stage.Score_partwises[score_partwise]; !ok {
			backRepoScore_partwise.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoScore_partwise.CommitDeleteInstance commits deletion of Score_partwise to the BackRepo
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CommitDeleteInstance(id uint) (Error error) {

	score_partwise := backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr[id]

	// score_partwise is not staged anymore, remove score_partwiseDB
	score_partwiseDB := backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[id]
	query := backRepoScore_partwise.db.Unscoped().Delete(&score_partwiseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID, score_partwise)
	delete(backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr, id)
	delete(backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB, id)

	return
}

// BackRepoScore_partwise.CommitPhaseOneInstance commits score_partwise staged instances of Score_partwise to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CommitPhaseOneInstance(score_partwise *models.Score_partwise) (Error error) {

	// check if the score_partwise is not commited yet
	if _, ok := backRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise]; ok {
		return
	}

	// initiate score_partwise
	var score_partwiseDB Score_partwiseDB
	score_partwiseDB.CopyBasicFieldsFromScore_partwise(score_partwise)

	query := backRepoScore_partwise.db.Create(&score_partwiseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise] = score_partwiseDB.ID
	backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr[score_partwiseDB.ID] = score_partwise
	backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[score_partwiseDB.ID] = &score_partwiseDB

	return
}

// BackRepoScore_partwise.CommitPhaseTwo commits all staged instances of Score_partwise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, score_partwise := range backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr {
		backRepoScore_partwise.CommitPhaseTwoInstance(backRepo, idx, score_partwise)
	}

	return
}

// BackRepoScore_partwise.CommitPhaseTwoInstance commits {{structname }} of models.Score_partwise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, score_partwise *models.Score_partwise) (Error error) {

	// fetch matching score_partwiseDB
	if score_partwiseDB, ok := backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[idx]; ok {

		score_partwiseDB.CopyBasicFieldsFromScore_partwise(score_partwise)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoScore_partwise.db.Save(&score_partwiseDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Score_partwise intance %s", score_partwise.Name))
		return err
	}

	return
}

// BackRepoScore_partwise.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CheckoutPhaseOne() (Error error) {

	score_partwiseDBArray := make([]Score_partwiseDB, 0)
	query := backRepoScore_partwise.db.Find(&score_partwiseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	score_partwiseInstancesToBeRemovedFromTheStage := make(map[*models.Score_partwise]any)
	for key, value := range backRepoScore_partwise.stage.Score_partwises {
		score_partwiseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, score_partwiseDB := range score_partwiseDBArray {
		backRepoScore_partwise.CheckoutPhaseOneInstance(&score_partwiseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		score_partwise, ok := backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr[score_partwiseDB.ID]
		if ok {
			delete(score_partwiseInstancesToBeRemovedFromTheStage, score_partwise)
		}
	}

	// remove from stage and back repo's 3 maps all score_partwises that are not in the checkout
	for score_partwise := range score_partwiseInstancesToBeRemovedFromTheStage {
		score_partwise.Unstage(backRepoScore_partwise.GetStage())

		// remove instance from the back repo 3 maps
		score_partwiseID := backRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise]
		delete(backRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID, score_partwise)
		delete(backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB, score_partwiseID)
		delete(backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr, score_partwiseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a score_partwiseDB that has been found in the DB, updates the backRepo and stages the
// models version of the score_partwiseDB
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CheckoutPhaseOneInstance(score_partwiseDB *Score_partwiseDB) (Error error) {

	score_partwise, ok := backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr[score_partwiseDB.ID]
	if !ok {
		score_partwise = new(models.Score_partwise)

		backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr[score_partwiseDB.ID] = score_partwise
		backRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise] = score_partwiseDB.ID

		// append model store with the new element
		score_partwise.Name = score_partwiseDB.Name_Data.String
		score_partwise.Stage(backRepoScore_partwise.GetStage())
	}
	score_partwiseDB.CopyBasicFieldsToScore_partwise(score_partwise)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	score_partwise.Stage(backRepoScore_partwise.GetStage())

	// preserve pointer to score_partwiseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Score_partwiseDBID_Score_partwiseDB)[score_partwiseDB hold variable pointers
	score_partwiseDB_Data := *score_partwiseDB
	preservedPtrToScore_partwise := &score_partwiseDB_Data
	backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[score_partwiseDB.ID] = preservedPtrToScore_partwise

	return
}

// BackRepoScore_partwise.CheckoutPhaseTwo Checkouts all staged instances of Score_partwise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, score_partwiseDB := range backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB {
		backRepoScore_partwise.CheckoutPhaseTwoInstance(backRepo, score_partwiseDB)
	}
	return
}

// BackRepoScore_partwise.CheckoutPhaseTwoInstance Checkouts staged instances of Score_partwise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, score_partwiseDB *Score_partwiseDB) (Error error) {

	score_partwise := backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr[score_partwiseDB.ID]

	score_partwiseDB.DecodePointers(backRepo, score_partwise)

	return
}

func (score_partwiseDB *Score_partwiseDB) DecodePointers(backRepo *BackRepoStruct, score_partwise *models.Score_partwise) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitScore_partwise allows commit of a single score_partwise (if already staged)
func (backRepo *BackRepoStruct) CommitScore_partwise(score_partwise *models.Score_partwise) {
	backRepo.BackRepoScore_partwise.CommitPhaseOneInstance(score_partwise)
	if id, ok := backRepo.BackRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise]; ok {
		backRepo.BackRepoScore_partwise.CommitPhaseTwoInstance(backRepo, id, score_partwise)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitScore_partwise allows checkout of a single score_partwise (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutScore_partwise(score_partwise *models.Score_partwise) {
	// check if the score_partwise is staged
	if _, ok := backRepo.BackRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise]; ok {

		if id, ok := backRepo.BackRepoScore_partwise.Map_Score_partwisePtr_Score_partwiseDBID[score_partwise]; ok {
			var score_partwiseDB Score_partwiseDB
			score_partwiseDB.ID = id

			if err := backRepo.BackRepoScore_partwise.db.First(&score_partwiseDB, id).Error; err != nil {
				log.Fatalln("CheckoutScore_partwise : Problem with getting object with id:", id)
			}
			backRepo.BackRepoScore_partwise.CheckoutPhaseOneInstance(&score_partwiseDB)
			backRepo.BackRepoScore_partwise.CheckoutPhaseTwoInstance(backRepo, &score_partwiseDB)
		}
	}
}

// CopyBasicFieldsFromScore_partwise
func (score_partwiseDB *Score_partwiseDB) CopyBasicFieldsFromScore_partwise(score_partwise *models.Score_partwise) {
	// insertion point for fields commit

	score_partwiseDB.Name_Data.String = score_partwise.Name
	score_partwiseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScore_partwise_WOP
func (score_partwiseDB *Score_partwiseDB) CopyBasicFieldsFromScore_partwise_WOP(score_partwise *models.Score_partwise_WOP) {
	// insertion point for fields commit

	score_partwiseDB.Name_Data.String = score_partwise.Name
	score_partwiseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromScore_partwiseWOP
func (score_partwiseDB *Score_partwiseDB) CopyBasicFieldsFromScore_partwiseWOP(score_partwise *Score_partwiseWOP) {
	// insertion point for fields commit

	score_partwiseDB.Name_Data.String = score_partwise.Name
	score_partwiseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToScore_partwise
func (score_partwiseDB *Score_partwiseDB) CopyBasicFieldsToScore_partwise(score_partwise *models.Score_partwise) {
	// insertion point for checkout of basic fields (back repo to stage)
	score_partwise.Name = score_partwiseDB.Name_Data.String
}

// CopyBasicFieldsToScore_partwise_WOP
func (score_partwiseDB *Score_partwiseDB) CopyBasicFieldsToScore_partwise_WOP(score_partwise *models.Score_partwise_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	score_partwise.Name = score_partwiseDB.Name_Data.String
}

// CopyBasicFieldsToScore_partwiseWOP
func (score_partwiseDB *Score_partwiseDB) CopyBasicFieldsToScore_partwiseWOP(score_partwise *Score_partwiseWOP) {
	score_partwise.ID = int(score_partwiseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	score_partwise.Name = score_partwiseDB.Name_Data.String
}

// Backup generates a json file from a slice of all Score_partwiseDB instances in the backrepo
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Score_partwiseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Score_partwiseDB, 0)
	for _, score_partwiseDB := range backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB {
		forBackup = append(forBackup, score_partwiseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Score_partwise ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Score_partwise file", err.Error())
	}
}

// Backup generates a json file from a slice of all Score_partwiseDB instances in the backrepo
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Score_partwiseDB, 0)
	for _, score_partwiseDB := range backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB {
		forBackup = append(forBackup, score_partwiseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Score_partwise")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Score_partwise_Fields, -1)
	for _, score_partwiseDB := range forBackup {

		var score_partwiseWOP Score_partwiseWOP
		score_partwiseDB.CopyBasicFieldsToScore_partwiseWOP(&score_partwiseWOP)

		row := sh.AddRow()
		row.WriteStruct(&score_partwiseWOP, -1)
	}
}

// RestoreXL from the "Score_partwise" sheet all Score_partwiseDB instances
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoScore_partwiseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Score_partwise"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoScore_partwise.rowVisitorScore_partwise)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoScore_partwise *BackRepoScore_partwiseStruct) rowVisitorScore_partwise(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var score_partwiseWOP Score_partwiseWOP
		row.ReadStruct(&score_partwiseWOP)

		// add the unmarshalled struct to the stage
		score_partwiseDB := new(Score_partwiseDB)
		score_partwiseDB.CopyBasicFieldsFromScore_partwiseWOP(&score_partwiseWOP)

		score_partwiseDB_ID_atBackupTime := score_partwiseDB.ID
		score_partwiseDB.ID = 0
		query := backRepoScore_partwise.db.Create(score_partwiseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[score_partwiseDB.ID] = score_partwiseDB
		BackRepoScore_partwiseid_atBckpTime_newID[score_partwiseDB_ID_atBackupTime] = score_partwiseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Score_partwiseDB.json" in dirPath that stores an array
// of Score_partwiseDB and stores it in the database
// the map BackRepoScore_partwiseid_atBckpTime_newID is updated accordingly
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoScore_partwiseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Score_partwiseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Score_partwise file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Score_partwiseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Score_partwiseDBID_Score_partwiseDB
	for _, score_partwiseDB := range forRestore {

		score_partwiseDB_ID_atBackupTime := score_partwiseDB.ID
		score_partwiseDB.ID = 0
		query := backRepoScore_partwise.db.Create(score_partwiseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[score_partwiseDB.ID] = score_partwiseDB
		BackRepoScore_partwiseid_atBckpTime_newID[score_partwiseDB_ID_atBackupTime] = score_partwiseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Score_partwise file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Score_partwise>id_atBckpTime_newID
// to compute new index
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) RestorePhaseTwo() {

	for _, score_partwiseDB := range backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB {

		// next line of code is to avert unused variable compilation error
		_ = score_partwiseDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoScore_partwise.db.Model(score_partwiseDB).Updates(*score_partwiseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoScore_partwise.ResetReversePointers commits all staged instances of Score_partwise to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_partwise *BackRepoScore_partwiseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, score_partwise := range backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwisePtr {
		backRepoScore_partwise.ResetReversePointersInstance(backRepo, idx, score_partwise)
	}

	return
}

func (backRepoScore_partwise *BackRepoScore_partwiseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, score_partwise *models.Score_partwise) (Error error) {

	// fetch matching score_partwiseDB
	if score_partwiseDB, ok := backRepoScore_partwise.Map_Score_partwiseDBID_Score_partwiseDB[idx]; ok {
		_ = score_partwiseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoScore_partwiseid_atBckpTime_newID map[uint]uint
