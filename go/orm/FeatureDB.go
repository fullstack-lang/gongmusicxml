// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Feature_sql sql.NullBool
var dummy_Feature_time time.Duration
var dummy_Feature_sort sort.Float64Slice

// FeatureAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model featureAPI
type FeatureAPI struct {
	gorm.Model

	models.Feature_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FeaturePointersEncoding FeaturePointersEncoding
}

// FeaturePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FeaturePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FeatureDB describes a feature in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model featureDB
type FeatureDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field featureDB.Name
	Name_Data sql.NullString

	// Declation for basic field featureDB.Value
	Value_Data sql.NullString

	// Declation for basic field featureDB.Type
	Type_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FeaturePointersEncoding
}

// FeatureDBs arrays featureDBs
// swagger:response featureDBsResponse
type FeatureDBs []FeatureDB

// FeatureDBResponse provides response
// swagger:response featureDBResponse
type FeatureDBResponse struct {
	FeatureDB
}

// FeatureWOP is a Feature without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FeatureWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`

	Type string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Feature_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
	"Type",
}

type BackRepoFeatureStruct struct {
	// stores FeatureDB according to their gorm ID
	Map_FeatureDBID_FeatureDB map[uint]*FeatureDB

	// stores FeatureDB ID according to Feature address
	Map_FeaturePtr_FeatureDBID map[*models.Feature]uint

	// stores Feature according to their gorm ID
	Map_FeatureDBID_FeaturePtr map[uint]*models.Feature

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFeature *BackRepoFeatureStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFeature.stage
	return
}

func (backRepoFeature *BackRepoFeatureStruct) GetDB() *gorm.DB {
	return backRepoFeature.db
}

// GetFeatureDBFromFeaturePtr is a handy function to access the back repo instance from the stage instance
func (backRepoFeature *BackRepoFeatureStruct) GetFeatureDBFromFeaturePtr(feature *models.Feature) (featureDB *FeatureDB) {
	id := backRepoFeature.Map_FeaturePtr_FeatureDBID[feature]
	featureDB = backRepoFeature.Map_FeatureDBID_FeatureDB[id]
	return
}

// BackRepoFeature.CommitPhaseOne commits all staged instances of Feature to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFeature *BackRepoFeatureStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for feature := range stage.Features {
		backRepoFeature.CommitPhaseOneInstance(feature)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, feature := range backRepoFeature.Map_FeatureDBID_FeaturePtr {
		if _, ok := stage.Features[feature]; !ok {
			backRepoFeature.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFeature.CommitDeleteInstance commits deletion of Feature to the BackRepo
func (backRepoFeature *BackRepoFeatureStruct) CommitDeleteInstance(id uint) (Error error) {

	feature := backRepoFeature.Map_FeatureDBID_FeaturePtr[id]

	// feature is not staged anymore, remove featureDB
	featureDB := backRepoFeature.Map_FeatureDBID_FeatureDB[id]
	query := backRepoFeature.db.Unscoped().Delete(&featureDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFeature.Map_FeaturePtr_FeatureDBID, feature)
	delete(backRepoFeature.Map_FeatureDBID_FeaturePtr, id)
	delete(backRepoFeature.Map_FeatureDBID_FeatureDB, id)

	return
}

// BackRepoFeature.CommitPhaseOneInstance commits feature staged instances of Feature to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFeature *BackRepoFeatureStruct) CommitPhaseOneInstance(feature *models.Feature) (Error error) {

	// check if the feature is not commited yet
	if _, ok := backRepoFeature.Map_FeaturePtr_FeatureDBID[feature]; ok {
		return
	}

	// initiate feature
	var featureDB FeatureDB
	featureDB.CopyBasicFieldsFromFeature(feature)

	query := backRepoFeature.db.Create(&featureDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFeature.Map_FeaturePtr_FeatureDBID[feature] = featureDB.ID
	backRepoFeature.Map_FeatureDBID_FeaturePtr[featureDB.ID] = feature
	backRepoFeature.Map_FeatureDBID_FeatureDB[featureDB.ID] = &featureDB

	return
}

// BackRepoFeature.CommitPhaseTwo commits all staged instances of Feature to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFeature *BackRepoFeatureStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, feature := range backRepoFeature.Map_FeatureDBID_FeaturePtr {
		backRepoFeature.CommitPhaseTwoInstance(backRepo, idx, feature)
	}

	return
}

// BackRepoFeature.CommitPhaseTwoInstance commits {{structname }} of models.Feature to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFeature *BackRepoFeatureStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, feature *models.Feature) (Error error) {

	// fetch matching featureDB
	if featureDB, ok := backRepoFeature.Map_FeatureDBID_FeatureDB[idx]; ok {

		featureDB.CopyBasicFieldsFromFeature(feature)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFeature.db.Save(&featureDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Feature intance %s", feature.Name))
		return err
	}

	return
}

// BackRepoFeature.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFeature *BackRepoFeatureStruct) CheckoutPhaseOne() (Error error) {

	featureDBArray := make([]FeatureDB, 0)
	query := backRepoFeature.db.Find(&featureDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	featureInstancesToBeRemovedFromTheStage := make(map[*models.Feature]any)
	for key, value := range backRepoFeature.stage.Features {
		featureInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, featureDB := range featureDBArray {
		backRepoFeature.CheckoutPhaseOneInstance(&featureDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		feature, ok := backRepoFeature.Map_FeatureDBID_FeaturePtr[featureDB.ID]
		if ok {
			delete(featureInstancesToBeRemovedFromTheStage, feature)
		}
	}

	// remove from stage and back repo's 3 maps all features that are not in the checkout
	for feature := range featureInstancesToBeRemovedFromTheStage {
		feature.Unstage(backRepoFeature.GetStage())

		// remove instance from the back repo 3 maps
		featureID := backRepoFeature.Map_FeaturePtr_FeatureDBID[feature]
		delete(backRepoFeature.Map_FeaturePtr_FeatureDBID, feature)
		delete(backRepoFeature.Map_FeatureDBID_FeatureDB, featureID)
		delete(backRepoFeature.Map_FeatureDBID_FeaturePtr, featureID)
	}

	return
}

// CheckoutPhaseOneInstance takes a featureDB that has been found in the DB, updates the backRepo and stages the
// models version of the featureDB
func (backRepoFeature *BackRepoFeatureStruct) CheckoutPhaseOneInstance(featureDB *FeatureDB) (Error error) {

	feature, ok := backRepoFeature.Map_FeatureDBID_FeaturePtr[featureDB.ID]
	if !ok {
		feature = new(models.Feature)

		backRepoFeature.Map_FeatureDBID_FeaturePtr[featureDB.ID] = feature
		backRepoFeature.Map_FeaturePtr_FeatureDBID[feature] = featureDB.ID

		// append model store with the new element
		feature.Name = featureDB.Name_Data.String
		feature.Stage(backRepoFeature.GetStage())
	}
	featureDB.CopyBasicFieldsToFeature(feature)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	feature.Stage(backRepoFeature.GetStage())

	// preserve pointer to featureDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FeatureDBID_FeatureDB)[featureDB hold variable pointers
	featureDB_Data := *featureDB
	preservedPtrToFeature := &featureDB_Data
	backRepoFeature.Map_FeatureDBID_FeatureDB[featureDB.ID] = preservedPtrToFeature

	return
}

// BackRepoFeature.CheckoutPhaseTwo Checkouts all staged instances of Feature to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFeature *BackRepoFeatureStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, featureDB := range backRepoFeature.Map_FeatureDBID_FeatureDB {
		backRepoFeature.CheckoutPhaseTwoInstance(backRepo, featureDB)
	}
	return
}

// BackRepoFeature.CheckoutPhaseTwoInstance Checkouts staged instances of Feature to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFeature *BackRepoFeatureStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, featureDB *FeatureDB) (Error error) {

	feature := backRepoFeature.Map_FeatureDBID_FeaturePtr[featureDB.ID]

	featureDB.DecodePointers(backRepo, feature)

	return
}

func (featureDB *FeatureDB) DecodePointers(backRepo *BackRepoStruct, feature *models.Feature) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFeature allows commit of a single feature (if already staged)
func (backRepo *BackRepoStruct) CommitFeature(feature *models.Feature) {
	backRepo.BackRepoFeature.CommitPhaseOneInstance(feature)
	if id, ok := backRepo.BackRepoFeature.Map_FeaturePtr_FeatureDBID[feature]; ok {
		backRepo.BackRepoFeature.CommitPhaseTwoInstance(backRepo, id, feature)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFeature allows checkout of a single feature (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFeature(feature *models.Feature) {
	// check if the feature is staged
	if _, ok := backRepo.BackRepoFeature.Map_FeaturePtr_FeatureDBID[feature]; ok {

		if id, ok := backRepo.BackRepoFeature.Map_FeaturePtr_FeatureDBID[feature]; ok {
			var featureDB FeatureDB
			featureDB.ID = id

			if err := backRepo.BackRepoFeature.db.First(&featureDB, id).Error; err != nil {
				log.Fatalln("CheckoutFeature : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFeature.CheckoutPhaseOneInstance(&featureDB)
			backRepo.BackRepoFeature.CheckoutPhaseTwoInstance(backRepo, &featureDB)
		}
	}
}

// CopyBasicFieldsFromFeature
func (featureDB *FeatureDB) CopyBasicFieldsFromFeature(feature *models.Feature) {
	// insertion point for fields commit

	featureDB.Name_Data.String = feature.Name
	featureDB.Name_Data.Valid = true

	featureDB.Value_Data.String = feature.Value
	featureDB.Value_Data.Valid = true

	featureDB.Type_Data.String = feature.Type
	featureDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromFeature_WOP
func (featureDB *FeatureDB) CopyBasicFieldsFromFeature_WOP(feature *models.Feature_WOP) {
	// insertion point for fields commit

	featureDB.Name_Data.String = feature.Name
	featureDB.Name_Data.Valid = true

	featureDB.Value_Data.String = feature.Value
	featureDB.Value_Data.Valid = true

	featureDB.Type_Data.String = feature.Type
	featureDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromFeatureWOP
func (featureDB *FeatureDB) CopyBasicFieldsFromFeatureWOP(feature *FeatureWOP) {
	// insertion point for fields commit

	featureDB.Name_Data.String = feature.Name
	featureDB.Name_Data.Valid = true

	featureDB.Value_Data.String = feature.Value
	featureDB.Value_Data.Valid = true

	featureDB.Type_Data.String = feature.Type
	featureDB.Type_Data.Valid = true
}

// CopyBasicFieldsToFeature
func (featureDB *FeatureDB) CopyBasicFieldsToFeature(feature *models.Feature) {
	// insertion point for checkout of basic fields (back repo to stage)
	feature.Name = featureDB.Name_Data.String
	feature.Value = featureDB.Value_Data.String
	feature.Type = featureDB.Type_Data.String
}

// CopyBasicFieldsToFeature_WOP
func (featureDB *FeatureDB) CopyBasicFieldsToFeature_WOP(feature *models.Feature_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	feature.Name = featureDB.Name_Data.String
	feature.Value = featureDB.Value_Data.String
	feature.Type = featureDB.Type_Data.String
}

// CopyBasicFieldsToFeatureWOP
func (featureDB *FeatureDB) CopyBasicFieldsToFeatureWOP(feature *FeatureWOP) {
	feature.ID = int(featureDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	feature.Name = featureDB.Name_Data.String
	feature.Value = featureDB.Value_Data.String
	feature.Type = featureDB.Type_Data.String
}

// Backup generates a json file from a slice of all FeatureDB instances in the backrepo
func (backRepoFeature *BackRepoFeatureStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FeatureDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FeatureDB, 0)
	for _, featureDB := range backRepoFeature.Map_FeatureDBID_FeatureDB {
		forBackup = append(forBackup, featureDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Feature ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Feature file", err.Error())
	}
}

// Backup generates a json file from a slice of all FeatureDB instances in the backrepo
func (backRepoFeature *BackRepoFeatureStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FeatureDB, 0)
	for _, featureDB := range backRepoFeature.Map_FeatureDBID_FeatureDB {
		forBackup = append(forBackup, featureDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Feature")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Feature_Fields, -1)
	for _, featureDB := range forBackup {

		var featureWOP FeatureWOP
		featureDB.CopyBasicFieldsToFeatureWOP(&featureWOP)

		row := sh.AddRow()
		row.WriteStruct(&featureWOP, -1)
	}
}

// RestoreXL from the "Feature" sheet all FeatureDB instances
func (backRepoFeature *BackRepoFeatureStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFeatureid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Feature"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFeature.rowVisitorFeature)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFeature *BackRepoFeatureStruct) rowVisitorFeature(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var featureWOP FeatureWOP
		row.ReadStruct(&featureWOP)

		// add the unmarshalled struct to the stage
		featureDB := new(FeatureDB)
		featureDB.CopyBasicFieldsFromFeatureWOP(&featureWOP)

		featureDB_ID_atBackupTime := featureDB.ID
		featureDB.ID = 0
		query := backRepoFeature.db.Create(featureDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFeature.Map_FeatureDBID_FeatureDB[featureDB.ID] = featureDB
		BackRepoFeatureid_atBckpTime_newID[featureDB_ID_atBackupTime] = featureDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FeatureDB.json" in dirPath that stores an array
// of FeatureDB and stores it in the database
// the map BackRepoFeatureid_atBckpTime_newID is updated accordingly
func (backRepoFeature *BackRepoFeatureStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFeatureid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FeatureDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Feature file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FeatureDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FeatureDBID_FeatureDB
	for _, featureDB := range forRestore {

		featureDB_ID_atBackupTime := featureDB.ID
		featureDB.ID = 0
		query := backRepoFeature.db.Create(featureDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFeature.Map_FeatureDBID_FeatureDB[featureDB.ID] = featureDB
		BackRepoFeatureid_atBckpTime_newID[featureDB_ID_atBackupTime] = featureDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Feature file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Feature>id_atBckpTime_newID
// to compute new index
func (backRepoFeature *BackRepoFeatureStruct) RestorePhaseTwo() {

	for _, featureDB := range backRepoFeature.Map_FeatureDBID_FeatureDB {

		// next line of code is to avert unused variable compilation error
		_ = featureDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFeature.db.Model(featureDB).Updates(*featureDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFeature.ResetReversePointers commits all staged instances of Feature to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFeature *BackRepoFeatureStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, feature := range backRepoFeature.Map_FeatureDBID_FeaturePtr {
		backRepoFeature.ResetReversePointersInstance(backRepo, idx, feature)
	}

	return
}

func (backRepoFeature *BackRepoFeatureStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, feature *models.Feature) (Error error) {

	// fetch matching featureDB
	if featureDB, ok := backRepoFeature.Map_FeatureDBID_FeatureDB[idx]; ok {
		_ = featureDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFeatureid_atBckpTime_newID map[uint]uint
