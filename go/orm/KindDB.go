// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Kind_sql sql.NullBool
var dummy_Kind_time time.Duration
var dummy_Kind_sort sort.Float64Slice

// KindAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model kindAPI
type KindAPI struct {
	gorm.Model

	models.Kind_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	KindPointersEncoding KindPointersEncoding
}

// KindPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type KindPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// KindDB describes a kind in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model kindDB
type KindDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field kindDB.Name
	Name_Data sql.NullString

	// Declation for basic field kindDB.Text
	Text_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	KindPointersEncoding
}

// KindDBs arrays kindDBs
// swagger:response kindDBsResponse
type KindDBs []KindDB

// KindDBResponse provides response
// swagger:response kindDBResponse
type KindDBResponse struct {
	KindDB
}

// KindWOP is a Kind without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type KindWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Kind_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoKindStruct struct {
	// stores KindDB according to their gorm ID
	Map_KindDBID_KindDB map[uint]*KindDB

	// stores KindDB ID according to Kind address
	Map_KindPtr_KindDBID map[*models.Kind]uint

	// stores Kind according to their gorm ID
	Map_KindDBID_KindPtr map[uint]*models.Kind

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoKind *BackRepoKindStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoKind.stage
	return
}

func (backRepoKind *BackRepoKindStruct) GetDB() *gorm.DB {
	return backRepoKind.db
}

// GetKindDBFromKindPtr is a handy function to access the back repo instance from the stage instance
func (backRepoKind *BackRepoKindStruct) GetKindDBFromKindPtr(kind *models.Kind) (kindDB *KindDB) {
	id := backRepoKind.Map_KindPtr_KindDBID[kind]
	kindDB = backRepoKind.Map_KindDBID_KindDB[id]
	return
}

// BackRepoKind.CommitPhaseOne commits all staged instances of Kind to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKind *BackRepoKindStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for kind := range stage.Kinds {
		backRepoKind.CommitPhaseOneInstance(kind)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, kind := range backRepoKind.Map_KindDBID_KindPtr {
		if _, ok := stage.Kinds[kind]; !ok {
			backRepoKind.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKind.CommitDeleteInstance commits deletion of Kind to the BackRepo
func (backRepoKind *BackRepoKindStruct) CommitDeleteInstance(id uint) (Error error) {

	kind := backRepoKind.Map_KindDBID_KindPtr[id]

	// kind is not staged anymore, remove kindDB
	kindDB := backRepoKind.Map_KindDBID_KindDB[id]
	query := backRepoKind.db.Unscoped().Delete(&kindDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoKind.Map_KindPtr_KindDBID, kind)
	delete(backRepoKind.Map_KindDBID_KindPtr, id)
	delete(backRepoKind.Map_KindDBID_KindDB, id)

	return
}

// BackRepoKind.CommitPhaseOneInstance commits kind staged instances of Kind to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKind *BackRepoKindStruct) CommitPhaseOneInstance(kind *models.Kind) (Error error) {

	// check if the kind is not commited yet
	if _, ok := backRepoKind.Map_KindPtr_KindDBID[kind]; ok {
		return
	}

	// initiate kind
	var kindDB KindDB
	kindDB.CopyBasicFieldsFromKind(kind)

	query := backRepoKind.db.Create(&kindDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoKind.Map_KindPtr_KindDBID[kind] = kindDB.ID
	backRepoKind.Map_KindDBID_KindPtr[kindDB.ID] = kind
	backRepoKind.Map_KindDBID_KindDB[kindDB.ID] = &kindDB

	return
}

// BackRepoKind.CommitPhaseTwo commits all staged instances of Kind to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKind *BackRepoKindStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, kind := range backRepoKind.Map_KindDBID_KindPtr {
		backRepoKind.CommitPhaseTwoInstance(backRepo, idx, kind)
	}

	return
}

// BackRepoKind.CommitPhaseTwoInstance commits {{structname }} of models.Kind to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKind *BackRepoKindStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, kind *models.Kind) (Error error) {

	// fetch matching kindDB
	if kindDB, ok := backRepoKind.Map_KindDBID_KindDB[idx]; ok {

		kindDB.CopyBasicFieldsFromKind(kind)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoKind.db.Save(&kindDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Kind intance %s", kind.Name))
		return err
	}

	return
}

// BackRepoKind.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKind *BackRepoKindStruct) CheckoutPhaseOne() (Error error) {

	kindDBArray := make([]KindDB, 0)
	query := backRepoKind.db.Find(&kindDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	kindInstancesToBeRemovedFromTheStage := make(map[*models.Kind]any)
	for key, value := range backRepoKind.stage.Kinds {
		kindInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, kindDB := range kindDBArray {
		backRepoKind.CheckoutPhaseOneInstance(&kindDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		kind, ok := backRepoKind.Map_KindDBID_KindPtr[kindDB.ID]
		if ok {
			delete(kindInstancesToBeRemovedFromTheStage, kind)
		}
	}

	// remove from stage and back repo's 3 maps all kinds that are not in the checkout
	for kind := range kindInstancesToBeRemovedFromTheStage {
		kind.Unstage(backRepoKind.GetStage())

		// remove instance from the back repo 3 maps
		kindID := backRepoKind.Map_KindPtr_KindDBID[kind]
		delete(backRepoKind.Map_KindPtr_KindDBID, kind)
		delete(backRepoKind.Map_KindDBID_KindDB, kindID)
		delete(backRepoKind.Map_KindDBID_KindPtr, kindID)
	}

	return
}

// CheckoutPhaseOneInstance takes a kindDB that has been found in the DB, updates the backRepo and stages the
// models version of the kindDB
func (backRepoKind *BackRepoKindStruct) CheckoutPhaseOneInstance(kindDB *KindDB) (Error error) {

	kind, ok := backRepoKind.Map_KindDBID_KindPtr[kindDB.ID]
	if !ok {
		kind = new(models.Kind)

		backRepoKind.Map_KindDBID_KindPtr[kindDB.ID] = kind
		backRepoKind.Map_KindPtr_KindDBID[kind] = kindDB.ID

		// append model store with the new element
		kind.Name = kindDB.Name_Data.String
		kind.Stage(backRepoKind.GetStage())
	}
	kindDB.CopyBasicFieldsToKind(kind)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	kind.Stage(backRepoKind.GetStage())

	// preserve pointer to kindDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_KindDBID_KindDB)[kindDB hold variable pointers
	kindDB_Data := *kindDB
	preservedPtrToKind := &kindDB_Data
	backRepoKind.Map_KindDBID_KindDB[kindDB.ID] = preservedPtrToKind

	return
}

// BackRepoKind.CheckoutPhaseTwo Checkouts all staged instances of Kind to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKind *BackRepoKindStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, kindDB := range backRepoKind.Map_KindDBID_KindDB {
		backRepoKind.CheckoutPhaseTwoInstance(backRepo, kindDB)
	}
	return
}

// BackRepoKind.CheckoutPhaseTwoInstance Checkouts staged instances of Kind to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKind *BackRepoKindStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, kindDB *KindDB) (Error error) {

	kind := backRepoKind.Map_KindDBID_KindPtr[kindDB.ID]

	kindDB.DecodePointers(backRepo, kind)

	return
}

func (kindDB *KindDB) DecodePointers(backRepo *BackRepoStruct, kind *models.Kind) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitKind allows commit of a single kind (if already staged)
func (backRepo *BackRepoStruct) CommitKind(kind *models.Kind) {
	backRepo.BackRepoKind.CommitPhaseOneInstance(kind)
	if id, ok := backRepo.BackRepoKind.Map_KindPtr_KindDBID[kind]; ok {
		backRepo.BackRepoKind.CommitPhaseTwoInstance(backRepo, id, kind)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKind allows checkout of a single kind (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKind(kind *models.Kind) {
	// check if the kind is staged
	if _, ok := backRepo.BackRepoKind.Map_KindPtr_KindDBID[kind]; ok {

		if id, ok := backRepo.BackRepoKind.Map_KindPtr_KindDBID[kind]; ok {
			var kindDB KindDB
			kindDB.ID = id

			if err := backRepo.BackRepoKind.db.First(&kindDB, id).Error; err != nil {
				log.Fatalln("CheckoutKind : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKind.CheckoutPhaseOneInstance(&kindDB)
			backRepo.BackRepoKind.CheckoutPhaseTwoInstance(backRepo, &kindDB)
		}
	}
}

// CopyBasicFieldsFromKind
func (kindDB *KindDB) CopyBasicFieldsFromKind(kind *models.Kind) {
	// insertion point for fields commit

	kindDB.Name_Data.String = kind.Name
	kindDB.Name_Data.Valid = true

	kindDB.Text_Data.String = kind.Text
	kindDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromKind_WOP
func (kindDB *KindDB) CopyBasicFieldsFromKind_WOP(kind *models.Kind_WOP) {
	// insertion point for fields commit

	kindDB.Name_Data.String = kind.Name
	kindDB.Name_Data.Valid = true

	kindDB.Text_Data.String = kind.Text
	kindDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromKindWOP
func (kindDB *KindDB) CopyBasicFieldsFromKindWOP(kind *KindWOP) {
	// insertion point for fields commit

	kindDB.Name_Data.String = kind.Name
	kindDB.Name_Data.Valid = true

	kindDB.Text_Data.String = kind.Text
	kindDB.Text_Data.Valid = true
}

// CopyBasicFieldsToKind
func (kindDB *KindDB) CopyBasicFieldsToKind(kind *models.Kind) {
	// insertion point for checkout of basic fields (back repo to stage)
	kind.Name = kindDB.Name_Data.String
	kind.Text = kindDB.Text_Data.String
}

// CopyBasicFieldsToKind_WOP
func (kindDB *KindDB) CopyBasicFieldsToKind_WOP(kind *models.Kind_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	kind.Name = kindDB.Name_Data.String
	kind.Text = kindDB.Text_Data.String
}

// CopyBasicFieldsToKindWOP
func (kindDB *KindDB) CopyBasicFieldsToKindWOP(kind *KindWOP) {
	kind.ID = int(kindDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	kind.Name = kindDB.Name_Data.String
	kind.Text = kindDB.Text_Data.String
}

// Backup generates a json file from a slice of all KindDB instances in the backrepo
func (backRepoKind *BackRepoKindStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "KindDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KindDB, 0)
	for _, kindDB := range backRepoKind.Map_KindDBID_KindDB {
		forBackup = append(forBackup, kindDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Kind ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Kind file", err.Error())
	}
}

// Backup generates a json file from a slice of all KindDB instances in the backrepo
func (backRepoKind *BackRepoKindStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KindDB, 0)
	for _, kindDB := range backRepoKind.Map_KindDBID_KindDB {
		forBackup = append(forBackup, kindDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Kind")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Kind_Fields, -1)
	for _, kindDB := range forBackup {

		var kindWOP KindWOP
		kindDB.CopyBasicFieldsToKindWOP(&kindWOP)

		row := sh.AddRow()
		row.WriteStruct(&kindWOP, -1)
	}
}

// RestoreXL from the "Kind" sheet all KindDB instances
func (backRepoKind *BackRepoKindStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKindid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Kind"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKind.rowVisitorKind)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKind *BackRepoKindStruct) rowVisitorKind(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var kindWOP KindWOP
		row.ReadStruct(&kindWOP)

		// add the unmarshalled struct to the stage
		kindDB := new(KindDB)
		kindDB.CopyBasicFieldsFromKindWOP(&kindWOP)

		kindDB_ID_atBackupTime := kindDB.ID
		kindDB.ID = 0
		query := backRepoKind.db.Create(kindDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKind.Map_KindDBID_KindDB[kindDB.ID] = kindDB
		BackRepoKindid_atBckpTime_newID[kindDB_ID_atBackupTime] = kindDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "KindDB.json" in dirPath that stores an array
// of KindDB and stores it in the database
// the map BackRepoKindid_atBckpTime_newID is updated accordingly
func (backRepoKind *BackRepoKindStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKindid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "KindDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Kind file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*KindDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_KindDBID_KindDB
	for _, kindDB := range forRestore {

		kindDB_ID_atBackupTime := kindDB.ID
		kindDB.ID = 0
		query := backRepoKind.db.Create(kindDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKind.Map_KindDBID_KindDB[kindDB.ID] = kindDB
		BackRepoKindid_atBckpTime_newID[kindDB_ID_atBackupTime] = kindDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Kind file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Kind>id_atBckpTime_newID
// to compute new index
func (backRepoKind *BackRepoKindStruct) RestorePhaseTwo() {

	for _, kindDB := range backRepoKind.Map_KindDBID_KindDB {

		// next line of code is to avert unused variable compilation error
		_ = kindDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoKind.db.Model(kindDB).Updates(*kindDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoKind.ResetReversePointers commits all staged instances of Kind to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKind *BackRepoKindStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, kind := range backRepoKind.Map_KindDBID_KindPtr {
		backRepoKind.ResetReversePointersInstance(backRepo, idx, kind)
	}

	return
}

func (backRepoKind *BackRepoKindStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, kind *models.Kind) (Error error) {

	// fetch matching kindDB
	if kindDB, ok := backRepoKind.Map_KindDBID_KindDB[idx]; ok {
		_ = kindDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKindid_atBckpTime_newID map[uint]uint
