// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Handbell_sql sql.NullBool
var dummy_Handbell_time time.Duration
var dummy_Handbell_sort sort.Float64Slice

// HandbellAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model handbellAPI
type HandbellAPI struct {
	gorm.Model

	models.Handbell_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	HandbellPointersEncoding HandbellPointersEncoding
}

// HandbellPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type HandbellPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// HandbellDB describes a handbell in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model handbellDB
type HandbellDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field handbellDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	HandbellPointersEncoding
}

// HandbellDBs arrays handbellDBs
// swagger:response handbellDBsResponse
type HandbellDBs []HandbellDB

// HandbellDBResponse provides response
// swagger:response handbellDBResponse
type HandbellDBResponse struct {
	HandbellDB
}

// HandbellWOP is a Handbell without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type HandbellWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Handbell_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHandbellStruct struct {
	// stores HandbellDB according to their gorm ID
	Map_HandbellDBID_HandbellDB map[uint]*HandbellDB

	// stores HandbellDB ID according to Handbell address
	Map_HandbellPtr_HandbellDBID map[*models.Handbell]uint

	// stores Handbell according to their gorm ID
	Map_HandbellDBID_HandbellPtr map[uint]*models.Handbell

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHandbell *BackRepoHandbellStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHandbell.stage
	return
}

func (backRepoHandbell *BackRepoHandbellStruct) GetDB() *gorm.DB {
	return backRepoHandbell.db
}

// GetHandbellDBFromHandbellPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHandbell *BackRepoHandbellStruct) GetHandbellDBFromHandbellPtr(handbell *models.Handbell) (handbellDB *HandbellDB) {
	id := backRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell]
	handbellDB = backRepoHandbell.Map_HandbellDBID_HandbellDB[id]
	return
}

// BackRepoHandbell.CommitPhaseOne commits all staged instances of Handbell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHandbell *BackRepoHandbellStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for handbell := range stage.Handbells {
		backRepoHandbell.CommitPhaseOneInstance(handbell)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, handbell := range backRepoHandbell.Map_HandbellDBID_HandbellPtr {
		if _, ok := stage.Handbells[handbell]; !ok {
			backRepoHandbell.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHandbell.CommitDeleteInstance commits deletion of Handbell to the BackRepo
func (backRepoHandbell *BackRepoHandbellStruct) CommitDeleteInstance(id uint) (Error error) {

	handbell := backRepoHandbell.Map_HandbellDBID_HandbellPtr[id]

	// handbell is not staged anymore, remove handbellDB
	handbellDB := backRepoHandbell.Map_HandbellDBID_HandbellDB[id]
	query := backRepoHandbell.db.Unscoped().Delete(&handbellDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHandbell.Map_HandbellPtr_HandbellDBID, handbell)
	delete(backRepoHandbell.Map_HandbellDBID_HandbellPtr, id)
	delete(backRepoHandbell.Map_HandbellDBID_HandbellDB, id)

	return
}

// BackRepoHandbell.CommitPhaseOneInstance commits handbell staged instances of Handbell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHandbell *BackRepoHandbellStruct) CommitPhaseOneInstance(handbell *models.Handbell) (Error error) {

	// check if the handbell is not commited yet
	if _, ok := backRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell]; ok {
		return
	}

	// initiate handbell
	var handbellDB HandbellDB
	handbellDB.CopyBasicFieldsFromHandbell(handbell)

	query := backRepoHandbell.db.Create(&handbellDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell] = handbellDB.ID
	backRepoHandbell.Map_HandbellDBID_HandbellPtr[handbellDB.ID] = handbell
	backRepoHandbell.Map_HandbellDBID_HandbellDB[handbellDB.ID] = &handbellDB

	return
}

// BackRepoHandbell.CommitPhaseTwo commits all staged instances of Handbell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHandbell *BackRepoHandbellStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, handbell := range backRepoHandbell.Map_HandbellDBID_HandbellPtr {
		backRepoHandbell.CommitPhaseTwoInstance(backRepo, idx, handbell)
	}

	return
}

// BackRepoHandbell.CommitPhaseTwoInstance commits {{structname }} of models.Handbell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHandbell *BackRepoHandbellStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, handbell *models.Handbell) (Error error) {

	// fetch matching handbellDB
	if handbellDB, ok := backRepoHandbell.Map_HandbellDBID_HandbellDB[idx]; ok {

		handbellDB.CopyBasicFieldsFromHandbell(handbell)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHandbell.db.Save(&handbellDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Handbell intance %s", handbell.Name))
		return err
	}

	return
}

// BackRepoHandbell.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHandbell *BackRepoHandbellStruct) CheckoutPhaseOne() (Error error) {

	handbellDBArray := make([]HandbellDB, 0)
	query := backRepoHandbell.db.Find(&handbellDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	handbellInstancesToBeRemovedFromTheStage := make(map[*models.Handbell]any)
	for key, value := range backRepoHandbell.stage.Handbells {
		handbellInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, handbellDB := range handbellDBArray {
		backRepoHandbell.CheckoutPhaseOneInstance(&handbellDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		handbell, ok := backRepoHandbell.Map_HandbellDBID_HandbellPtr[handbellDB.ID]
		if ok {
			delete(handbellInstancesToBeRemovedFromTheStage, handbell)
		}
	}

	// remove from stage and back repo's 3 maps all handbells that are not in the checkout
	for handbell := range handbellInstancesToBeRemovedFromTheStage {
		handbell.Unstage(backRepoHandbell.GetStage())

		// remove instance from the back repo 3 maps
		handbellID := backRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell]
		delete(backRepoHandbell.Map_HandbellPtr_HandbellDBID, handbell)
		delete(backRepoHandbell.Map_HandbellDBID_HandbellDB, handbellID)
		delete(backRepoHandbell.Map_HandbellDBID_HandbellPtr, handbellID)
	}

	return
}

// CheckoutPhaseOneInstance takes a handbellDB that has been found in the DB, updates the backRepo and stages the
// models version of the handbellDB
func (backRepoHandbell *BackRepoHandbellStruct) CheckoutPhaseOneInstance(handbellDB *HandbellDB) (Error error) {

	handbell, ok := backRepoHandbell.Map_HandbellDBID_HandbellPtr[handbellDB.ID]
	if !ok {
		handbell = new(models.Handbell)

		backRepoHandbell.Map_HandbellDBID_HandbellPtr[handbellDB.ID] = handbell
		backRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell] = handbellDB.ID

		// append model store with the new element
		handbell.Name = handbellDB.Name_Data.String
		handbell.Stage(backRepoHandbell.GetStage())
	}
	handbellDB.CopyBasicFieldsToHandbell(handbell)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	handbell.Stage(backRepoHandbell.GetStage())

	// preserve pointer to handbellDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_HandbellDBID_HandbellDB)[handbellDB hold variable pointers
	handbellDB_Data := *handbellDB
	preservedPtrToHandbell := &handbellDB_Data
	backRepoHandbell.Map_HandbellDBID_HandbellDB[handbellDB.ID] = preservedPtrToHandbell

	return
}

// BackRepoHandbell.CheckoutPhaseTwo Checkouts all staged instances of Handbell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHandbell *BackRepoHandbellStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, handbellDB := range backRepoHandbell.Map_HandbellDBID_HandbellDB {
		backRepoHandbell.CheckoutPhaseTwoInstance(backRepo, handbellDB)
	}
	return
}

// BackRepoHandbell.CheckoutPhaseTwoInstance Checkouts staged instances of Handbell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHandbell *BackRepoHandbellStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, handbellDB *HandbellDB) (Error error) {

	handbell := backRepoHandbell.Map_HandbellDBID_HandbellPtr[handbellDB.ID]

	handbellDB.DecodePointers(backRepo, handbell)

	return
}

func (handbellDB *HandbellDB) DecodePointers(backRepo *BackRepoStruct, handbell *models.Handbell) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHandbell allows commit of a single handbell (if already staged)
func (backRepo *BackRepoStruct) CommitHandbell(handbell *models.Handbell) {
	backRepo.BackRepoHandbell.CommitPhaseOneInstance(handbell)
	if id, ok := backRepo.BackRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell]; ok {
		backRepo.BackRepoHandbell.CommitPhaseTwoInstance(backRepo, id, handbell)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHandbell allows checkout of a single handbell (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHandbell(handbell *models.Handbell) {
	// check if the handbell is staged
	if _, ok := backRepo.BackRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell]; ok {

		if id, ok := backRepo.BackRepoHandbell.Map_HandbellPtr_HandbellDBID[handbell]; ok {
			var handbellDB HandbellDB
			handbellDB.ID = id

			if err := backRepo.BackRepoHandbell.db.First(&handbellDB, id).Error; err != nil {
				log.Fatalln("CheckoutHandbell : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHandbell.CheckoutPhaseOneInstance(&handbellDB)
			backRepo.BackRepoHandbell.CheckoutPhaseTwoInstance(backRepo, &handbellDB)
		}
	}
}

// CopyBasicFieldsFromHandbell
func (handbellDB *HandbellDB) CopyBasicFieldsFromHandbell(handbell *models.Handbell) {
	// insertion point for fields commit

	handbellDB.Name_Data.String = handbell.Name
	handbellDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHandbell_WOP
func (handbellDB *HandbellDB) CopyBasicFieldsFromHandbell_WOP(handbell *models.Handbell_WOP) {
	// insertion point for fields commit

	handbellDB.Name_Data.String = handbell.Name
	handbellDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHandbellWOP
func (handbellDB *HandbellDB) CopyBasicFieldsFromHandbellWOP(handbell *HandbellWOP) {
	// insertion point for fields commit

	handbellDB.Name_Data.String = handbell.Name
	handbellDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHandbell
func (handbellDB *HandbellDB) CopyBasicFieldsToHandbell(handbell *models.Handbell) {
	// insertion point for checkout of basic fields (back repo to stage)
	handbell.Name = handbellDB.Name_Data.String
}

// CopyBasicFieldsToHandbell_WOP
func (handbellDB *HandbellDB) CopyBasicFieldsToHandbell_WOP(handbell *models.Handbell_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	handbell.Name = handbellDB.Name_Data.String
}

// CopyBasicFieldsToHandbellWOP
func (handbellDB *HandbellDB) CopyBasicFieldsToHandbellWOP(handbell *HandbellWOP) {
	handbell.ID = int(handbellDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	handbell.Name = handbellDB.Name_Data.String
}

// Backup generates a json file from a slice of all HandbellDB instances in the backrepo
func (backRepoHandbell *BackRepoHandbellStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "HandbellDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HandbellDB, 0)
	for _, handbellDB := range backRepoHandbell.Map_HandbellDBID_HandbellDB {
		forBackup = append(forBackup, handbellDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Handbell ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Handbell file", err.Error())
	}
}

// Backup generates a json file from a slice of all HandbellDB instances in the backrepo
func (backRepoHandbell *BackRepoHandbellStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HandbellDB, 0)
	for _, handbellDB := range backRepoHandbell.Map_HandbellDBID_HandbellDB {
		forBackup = append(forBackup, handbellDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Handbell")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Handbell_Fields, -1)
	for _, handbellDB := range forBackup {

		var handbellWOP HandbellWOP
		handbellDB.CopyBasicFieldsToHandbellWOP(&handbellWOP)

		row := sh.AddRow()
		row.WriteStruct(&handbellWOP, -1)
	}
}

// RestoreXL from the "Handbell" sheet all HandbellDB instances
func (backRepoHandbell *BackRepoHandbellStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHandbellid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Handbell"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHandbell.rowVisitorHandbell)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHandbell *BackRepoHandbellStruct) rowVisitorHandbell(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var handbellWOP HandbellWOP
		row.ReadStruct(&handbellWOP)

		// add the unmarshalled struct to the stage
		handbellDB := new(HandbellDB)
		handbellDB.CopyBasicFieldsFromHandbellWOP(&handbellWOP)

		handbellDB_ID_atBackupTime := handbellDB.ID
		handbellDB.ID = 0
		query := backRepoHandbell.db.Create(handbellDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHandbell.Map_HandbellDBID_HandbellDB[handbellDB.ID] = handbellDB
		BackRepoHandbellid_atBckpTime_newID[handbellDB_ID_atBackupTime] = handbellDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "HandbellDB.json" in dirPath that stores an array
// of HandbellDB and stores it in the database
// the map BackRepoHandbellid_atBckpTime_newID is updated accordingly
func (backRepoHandbell *BackRepoHandbellStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHandbellid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "HandbellDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Handbell file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*HandbellDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_HandbellDBID_HandbellDB
	for _, handbellDB := range forRestore {

		handbellDB_ID_atBackupTime := handbellDB.ID
		handbellDB.ID = 0
		query := backRepoHandbell.db.Create(handbellDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHandbell.Map_HandbellDBID_HandbellDB[handbellDB.ID] = handbellDB
		BackRepoHandbellid_atBckpTime_newID[handbellDB_ID_atBackupTime] = handbellDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Handbell file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Handbell>id_atBckpTime_newID
// to compute new index
func (backRepoHandbell *BackRepoHandbellStruct) RestorePhaseTwo() {

	for _, handbellDB := range backRepoHandbell.Map_HandbellDBID_HandbellDB {

		// next line of code is to avert unused variable compilation error
		_ = handbellDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHandbell.db.Model(handbellDB).Updates(*handbellDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHandbell.ResetReversePointers commits all staged instances of Handbell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHandbell *BackRepoHandbellStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, handbell := range backRepoHandbell.Map_HandbellDBID_HandbellPtr {
		backRepoHandbell.ResetReversePointersInstance(backRepo, idx, handbell)
	}

	return
}

func (backRepoHandbell *BackRepoHandbellStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, handbell *models.Handbell) (Error error) {

	// fetch matching handbellDB
	if handbellDB, ok := backRepoHandbell.Map_HandbellDBID_HandbellDB[idx]; ok {
		_ = handbellDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHandbellid_atBckpTime_newID map[uint]uint
