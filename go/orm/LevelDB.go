// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Level_sql sql.NullBool
var dummy_Level_time time.Duration
var dummy_Level_sort sort.Float64Slice

// LevelAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model levelAPI
type LevelAPI struct {
	gorm.Model

	models.Level_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LevelPointersEncoding LevelPointersEncoding
}

// LevelPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LevelPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// LevelDB describes a level in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model levelDB
type LevelDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field levelDB.Name
	Name_Data sql.NullString

	// Declation for basic field levelDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LevelPointersEncoding
}

// LevelDBs arrays levelDBs
// swagger:response levelDBsResponse
type LevelDBs []LevelDB

// LevelDBResponse provides response
// swagger:response levelDBResponse
type LevelDBResponse struct {
	LevelDB
}

// LevelWOP is a Level without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LevelWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Level_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoLevelStruct struct {
	// stores LevelDB according to their gorm ID
	Map_LevelDBID_LevelDB map[uint]*LevelDB

	// stores LevelDB ID according to Level address
	Map_LevelPtr_LevelDBID map[*models.Level]uint

	// stores Level according to their gorm ID
	Map_LevelDBID_LevelPtr map[uint]*models.Level

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLevel *BackRepoLevelStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLevel.stage
	return
}

func (backRepoLevel *BackRepoLevelStruct) GetDB() *gorm.DB {
	return backRepoLevel.db
}

// GetLevelDBFromLevelPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLevel *BackRepoLevelStruct) GetLevelDBFromLevelPtr(level *models.Level) (levelDB *LevelDB) {
	id := backRepoLevel.Map_LevelPtr_LevelDBID[level]
	levelDB = backRepoLevel.Map_LevelDBID_LevelDB[id]
	return
}

// BackRepoLevel.CommitPhaseOne commits all staged instances of Level to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLevel *BackRepoLevelStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for level := range stage.Levels {
		backRepoLevel.CommitPhaseOneInstance(level)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, level := range backRepoLevel.Map_LevelDBID_LevelPtr {
		if _, ok := stage.Levels[level]; !ok {
			backRepoLevel.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLevel.CommitDeleteInstance commits deletion of Level to the BackRepo
func (backRepoLevel *BackRepoLevelStruct) CommitDeleteInstance(id uint) (Error error) {

	level := backRepoLevel.Map_LevelDBID_LevelPtr[id]

	// level is not staged anymore, remove levelDB
	levelDB := backRepoLevel.Map_LevelDBID_LevelDB[id]
	query := backRepoLevel.db.Unscoped().Delete(&levelDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLevel.Map_LevelPtr_LevelDBID, level)
	delete(backRepoLevel.Map_LevelDBID_LevelPtr, id)
	delete(backRepoLevel.Map_LevelDBID_LevelDB, id)

	return
}

// BackRepoLevel.CommitPhaseOneInstance commits level staged instances of Level to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLevel *BackRepoLevelStruct) CommitPhaseOneInstance(level *models.Level) (Error error) {

	// check if the level is not commited yet
	if _, ok := backRepoLevel.Map_LevelPtr_LevelDBID[level]; ok {
		return
	}

	// initiate level
	var levelDB LevelDB
	levelDB.CopyBasicFieldsFromLevel(level)

	query := backRepoLevel.db.Create(&levelDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLevel.Map_LevelPtr_LevelDBID[level] = levelDB.ID
	backRepoLevel.Map_LevelDBID_LevelPtr[levelDB.ID] = level
	backRepoLevel.Map_LevelDBID_LevelDB[levelDB.ID] = &levelDB

	return
}

// BackRepoLevel.CommitPhaseTwo commits all staged instances of Level to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLevel *BackRepoLevelStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, level := range backRepoLevel.Map_LevelDBID_LevelPtr {
		backRepoLevel.CommitPhaseTwoInstance(backRepo, idx, level)
	}

	return
}

// BackRepoLevel.CommitPhaseTwoInstance commits {{structname }} of models.Level to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLevel *BackRepoLevelStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, level *models.Level) (Error error) {

	// fetch matching levelDB
	if levelDB, ok := backRepoLevel.Map_LevelDBID_LevelDB[idx]; ok {

		levelDB.CopyBasicFieldsFromLevel(level)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoLevel.db.Save(&levelDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Level intance %s", level.Name))
		return err
	}

	return
}

// BackRepoLevel.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLevel *BackRepoLevelStruct) CheckoutPhaseOne() (Error error) {

	levelDBArray := make([]LevelDB, 0)
	query := backRepoLevel.db.Find(&levelDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	levelInstancesToBeRemovedFromTheStage := make(map[*models.Level]any)
	for key, value := range backRepoLevel.stage.Levels {
		levelInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, levelDB := range levelDBArray {
		backRepoLevel.CheckoutPhaseOneInstance(&levelDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		level, ok := backRepoLevel.Map_LevelDBID_LevelPtr[levelDB.ID]
		if ok {
			delete(levelInstancesToBeRemovedFromTheStage, level)
		}
	}

	// remove from stage and back repo's 3 maps all levels that are not in the checkout
	for level := range levelInstancesToBeRemovedFromTheStage {
		level.Unstage(backRepoLevel.GetStage())

		// remove instance from the back repo 3 maps
		levelID := backRepoLevel.Map_LevelPtr_LevelDBID[level]
		delete(backRepoLevel.Map_LevelPtr_LevelDBID, level)
		delete(backRepoLevel.Map_LevelDBID_LevelDB, levelID)
		delete(backRepoLevel.Map_LevelDBID_LevelPtr, levelID)
	}

	return
}

// CheckoutPhaseOneInstance takes a levelDB that has been found in the DB, updates the backRepo and stages the
// models version of the levelDB
func (backRepoLevel *BackRepoLevelStruct) CheckoutPhaseOneInstance(levelDB *LevelDB) (Error error) {

	level, ok := backRepoLevel.Map_LevelDBID_LevelPtr[levelDB.ID]
	if !ok {
		level = new(models.Level)

		backRepoLevel.Map_LevelDBID_LevelPtr[levelDB.ID] = level
		backRepoLevel.Map_LevelPtr_LevelDBID[level] = levelDB.ID

		// append model store with the new element
		level.Name = levelDB.Name_Data.String
		level.Stage(backRepoLevel.GetStage())
	}
	levelDB.CopyBasicFieldsToLevel(level)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	level.Stage(backRepoLevel.GetStage())

	// preserve pointer to levelDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LevelDBID_LevelDB)[levelDB hold variable pointers
	levelDB_Data := *levelDB
	preservedPtrToLevel := &levelDB_Data
	backRepoLevel.Map_LevelDBID_LevelDB[levelDB.ID] = preservedPtrToLevel

	return
}

// BackRepoLevel.CheckoutPhaseTwo Checkouts all staged instances of Level to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLevel *BackRepoLevelStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, levelDB := range backRepoLevel.Map_LevelDBID_LevelDB {
		backRepoLevel.CheckoutPhaseTwoInstance(backRepo, levelDB)
	}
	return
}

// BackRepoLevel.CheckoutPhaseTwoInstance Checkouts staged instances of Level to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLevel *BackRepoLevelStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, levelDB *LevelDB) (Error error) {

	level := backRepoLevel.Map_LevelDBID_LevelPtr[levelDB.ID]

	levelDB.DecodePointers(backRepo, level)

	return
}

func (levelDB *LevelDB) DecodePointers(backRepo *BackRepoStruct, level *models.Level) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitLevel allows commit of a single level (if already staged)
func (backRepo *BackRepoStruct) CommitLevel(level *models.Level) {
	backRepo.BackRepoLevel.CommitPhaseOneInstance(level)
	if id, ok := backRepo.BackRepoLevel.Map_LevelPtr_LevelDBID[level]; ok {
		backRepo.BackRepoLevel.CommitPhaseTwoInstance(backRepo, id, level)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLevel allows checkout of a single level (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLevel(level *models.Level) {
	// check if the level is staged
	if _, ok := backRepo.BackRepoLevel.Map_LevelPtr_LevelDBID[level]; ok {

		if id, ok := backRepo.BackRepoLevel.Map_LevelPtr_LevelDBID[level]; ok {
			var levelDB LevelDB
			levelDB.ID = id

			if err := backRepo.BackRepoLevel.db.First(&levelDB, id).Error; err != nil {
				log.Fatalln("CheckoutLevel : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLevel.CheckoutPhaseOneInstance(&levelDB)
			backRepo.BackRepoLevel.CheckoutPhaseTwoInstance(backRepo, &levelDB)
		}
	}
}

// CopyBasicFieldsFromLevel
func (levelDB *LevelDB) CopyBasicFieldsFromLevel(level *models.Level) {
	// insertion point for fields commit

	levelDB.Name_Data.String = level.Name
	levelDB.Name_Data.Valid = true

	levelDB.Value_Data.String = level.Value
	levelDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromLevel_WOP
func (levelDB *LevelDB) CopyBasicFieldsFromLevel_WOP(level *models.Level_WOP) {
	// insertion point for fields commit

	levelDB.Name_Data.String = level.Name
	levelDB.Name_Data.Valid = true

	levelDB.Value_Data.String = level.Value
	levelDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromLevelWOP
func (levelDB *LevelDB) CopyBasicFieldsFromLevelWOP(level *LevelWOP) {
	// insertion point for fields commit

	levelDB.Name_Data.String = level.Name
	levelDB.Name_Data.Valid = true

	levelDB.Value_Data.String = level.Value
	levelDB.Value_Data.Valid = true
}

// CopyBasicFieldsToLevel
func (levelDB *LevelDB) CopyBasicFieldsToLevel(level *models.Level) {
	// insertion point for checkout of basic fields (back repo to stage)
	level.Name = levelDB.Name_Data.String
	level.Value = levelDB.Value_Data.String
}

// CopyBasicFieldsToLevel_WOP
func (levelDB *LevelDB) CopyBasicFieldsToLevel_WOP(level *models.Level_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	level.Name = levelDB.Name_Data.String
	level.Value = levelDB.Value_Data.String
}

// CopyBasicFieldsToLevelWOP
func (levelDB *LevelDB) CopyBasicFieldsToLevelWOP(level *LevelWOP) {
	level.ID = int(levelDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	level.Name = levelDB.Name_Data.String
	level.Value = levelDB.Value_Data.String
}

// Backup generates a json file from a slice of all LevelDB instances in the backrepo
func (backRepoLevel *BackRepoLevelStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LevelDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LevelDB, 0)
	for _, levelDB := range backRepoLevel.Map_LevelDBID_LevelDB {
		forBackup = append(forBackup, levelDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Level ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Level file", err.Error())
	}
}

// Backup generates a json file from a slice of all LevelDB instances in the backrepo
func (backRepoLevel *BackRepoLevelStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LevelDB, 0)
	for _, levelDB := range backRepoLevel.Map_LevelDBID_LevelDB {
		forBackup = append(forBackup, levelDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Level")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Level_Fields, -1)
	for _, levelDB := range forBackup {

		var levelWOP LevelWOP
		levelDB.CopyBasicFieldsToLevelWOP(&levelWOP)

		row := sh.AddRow()
		row.WriteStruct(&levelWOP, -1)
	}
}

// RestoreXL from the "Level" sheet all LevelDB instances
func (backRepoLevel *BackRepoLevelStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLevelid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Level"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLevel.rowVisitorLevel)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLevel *BackRepoLevelStruct) rowVisitorLevel(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var levelWOP LevelWOP
		row.ReadStruct(&levelWOP)

		// add the unmarshalled struct to the stage
		levelDB := new(LevelDB)
		levelDB.CopyBasicFieldsFromLevelWOP(&levelWOP)

		levelDB_ID_atBackupTime := levelDB.ID
		levelDB.ID = 0
		query := backRepoLevel.db.Create(levelDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLevel.Map_LevelDBID_LevelDB[levelDB.ID] = levelDB
		BackRepoLevelid_atBckpTime_newID[levelDB_ID_atBackupTime] = levelDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LevelDB.json" in dirPath that stores an array
// of LevelDB and stores it in the database
// the map BackRepoLevelid_atBckpTime_newID is updated accordingly
func (backRepoLevel *BackRepoLevelStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLevelid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LevelDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Level file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LevelDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LevelDBID_LevelDB
	for _, levelDB := range forRestore {

		levelDB_ID_atBackupTime := levelDB.ID
		levelDB.ID = 0
		query := backRepoLevel.db.Create(levelDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLevel.Map_LevelDBID_LevelDB[levelDB.ID] = levelDB
		BackRepoLevelid_atBckpTime_newID[levelDB_ID_atBackupTime] = levelDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Level file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Level>id_atBckpTime_newID
// to compute new index
func (backRepoLevel *BackRepoLevelStruct) RestorePhaseTwo() {

	for _, levelDB := range backRepoLevel.Map_LevelDBID_LevelDB {

		// next line of code is to avert unused variable compilation error
		_ = levelDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLevel.db.Model(levelDB).Updates(*levelDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLevel.ResetReversePointers commits all staged instances of Level to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLevel *BackRepoLevelStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, level := range backRepoLevel.Map_LevelDBID_LevelPtr {
		backRepoLevel.ResetReversePointersInstance(backRepo, idx, level)
	}

	return
}

func (backRepoLevel *BackRepoLevelStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, level *models.Level) (Error error) {

	// fetch matching levelDB
	if levelDB, ok := backRepoLevel.Map_LevelDBID_LevelDB[idx]; ok {
		_ = levelDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLevelid_atBckpTime_newID map[uint]uint
