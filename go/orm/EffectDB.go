// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Effect_sql sql.NullBool
var dummy_Effect_time time.Duration
var dummy_Effect_sort sort.Float64Slice

// EffectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model effectAPI
type EffectAPI struct {
	gorm.Model

	models.Effect_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EffectPointersEncoding EffectPointersEncoding
}

// EffectPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EffectPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EffectDB describes a effect in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model effectDB
type EffectDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field effectDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EffectPointersEncoding
}

// EffectDBs arrays effectDBs
// swagger:response effectDBsResponse
type EffectDBs []EffectDB

// EffectDBResponse provides response
// swagger:response effectDBResponse
type EffectDBResponse struct {
	EffectDB
}

// EffectWOP is a Effect without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EffectWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Effect_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEffectStruct struct {
	// stores EffectDB according to their gorm ID
	Map_EffectDBID_EffectDB map[uint]*EffectDB

	// stores EffectDB ID according to Effect address
	Map_EffectPtr_EffectDBID map[*models.Effect]uint

	// stores Effect according to their gorm ID
	Map_EffectDBID_EffectPtr map[uint]*models.Effect

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEffect *BackRepoEffectStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEffect.stage
	return
}

func (backRepoEffect *BackRepoEffectStruct) GetDB() *gorm.DB {
	return backRepoEffect.db
}

// GetEffectDBFromEffectPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEffect *BackRepoEffectStruct) GetEffectDBFromEffectPtr(effect *models.Effect) (effectDB *EffectDB) {
	id := backRepoEffect.Map_EffectPtr_EffectDBID[effect]
	effectDB = backRepoEffect.Map_EffectDBID_EffectDB[id]
	return
}

// BackRepoEffect.CommitPhaseOne commits all staged instances of Effect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEffect *BackRepoEffectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for effect := range stage.Effects {
		backRepoEffect.CommitPhaseOneInstance(effect)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, effect := range backRepoEffect.Map_EffectDBID_EffectPtr {
		if _, ok := stage.Effects[effect]; !ok {
			backRepoEffect.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEffect.CommitDeleteInstance commits deletion of Effect to the BackRepo
func (backRepoEffect *BackRepoEffectStruct) CommitDeleteInstance(id uint) (Error error) {

	effect := backRepoEffect.Map_EffectDBID_EffectPtr[id]

	// effect is not staged anymore, remove effectDB
	effectDB := backRepoEffect.Map_EffectDBID_EffectDB[id]
	query := backRepoEffect.db.Unscoped().Delete(&effectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEffect.Map_EffectPtr_EffectDBID, effect)
	delete(backRepoEffect.Map_EffectDBID_EffectPtr, id)
	delete(backRepoEffect.Map_EffectDBID_EffectDB, id)

	return
}

// BackRepoEffect.CommitPhaseOneInstance commits effect staged instances of Effect to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEffect *BackRepoEffectStruct) CommitPhaseOneInstance(effect *models.Effect) (Error error) {

	// check if the effect is not commited yet
	if _, ok := backRepoEffect.Map_EffectPtr_EffectDBID[effect]; ok {
		return
	}

	// initiate effect
	var effectDB EffectDB
	effectDB.CopyBasicFieldsFromEffect(effect)

	query := backRepoEffect.db.Create(&effectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEffect.Map_EffectPtr_EffectDBID[effect] = effectDB.ID
	backRepoEffect.Map_EffectDBID_EffectPtr[effectDB.ID] = effect
	backRepoEffect.Map_EffectDBID_EffectDB[effectDB.ID] = &effectDB

	return
}

// BackRepoEffect.CommitPhaseTwo commits all staged instances of Effect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEffect *BackRepoEffectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, effect := range backRepoEffect.Map_EffectDBID_EffectPtr {
		backRepoEffect.CommitPhaseTwoInstance(backRepo, idx, effect)
	}

	return
}

// BackRepoEffect.CommitPhaseTwoInstance commits {{structname }} of models.Effect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEffect *BackRepoEffectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, effect *models.Effect) (Error error) {

	// fetch matching effectDB
	if effectDB, ok := backRepoEffect.Map_EffectDBID_EffectDB[idx]; ok {

		effectDB.CopyBasicFieldsFromEffect(effect)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEffect.db.Save(&effectDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Effect intance %s", effect.Name))
		return err
	}

	return
}

// BackRepoEffect.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEffect *BackRepoEffectStruct) CheckoutPhaseOne() (Error error) {

	effectDBArray := make([]EffectDB, 0)
	query := backRepoEffect.db.Find(&effectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	effectInstancesToBeRemovedFromTheStage := make(map[*models.Effect]any)
	for key, value := range backRepoEffect.stage.Effects {
		effectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, effectDB := range effectDBArray {
		backRepoEffect.CheckoutPhaseOneInstance(&effectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		effect, ok := backRepoEffect.Map_EffectDBID_EffectPtr[effectDB.ID]
		if ok {
			delete(effectInstancesToBeRemovedFromTheStage, effect)
		}
	}

	// remove from stage and back repo's 3 maps all effects that are not in the checkout
	for effect := range effectInstancesToBeRemovedFromTheStage {
		effect.Unstage(backRepoEffect.GetStage())

		// remove instance from the back repo 3 maps
		effectID := backRepoEffect.Map_EffectPtr_EffectDBID[effect]
		delete(backRepoEffect.Map_EffectPtr_EffectDBID, effect)
		delete(backRepoEffect.Map_EffectDBID_EffectDB, effectID)
		delete(backRepoEffect.Map_EffectDBID_EffectPtr, effectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a effectDB that has been found in the DB, updates the backRepo and stages the
// models version of the effectDB
func (backRepoEffect *BackRepoEffectStruct) CheckoutPhaseOneInstance(effectDB *EffectDB) (Error error) {

	effect, ok := backRepoEffect.Map_EffectDBID_EffectPtr[effectDB.ID]
	if !ok {
		effect = new(models.Effect)

		backRepoEffect.Map_EffectDBID_EffectPtr[effectDB.ID] = effect
		backRepoEffect.Map_EffectPtr_EffectDBID[effect] = effectDB.ID

		// append model store with the new element
		effect.Name = effectDB.Name_Data.String
		effect.Stage(backRepoEffect.GetStage())
	}
	effectDB.CopyBasicFieldsToEffect(effect)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	effect.Stage(backRepoEffect.GetStage())

	// preserve pointer to effectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EffectDBID_EffectDB)[effectDB hold variable pointers
	effectDB_Data := *effectDB
	preservedPtrToEffect := &effectDB_Data
	backRepoEffect.Map_EffectDBID_EffectDB[effectDB.ID] = preservedPtrToEffect

	return
}

// BackRepoEffect.CheckoutPhaseTwo Checkouts all staged instances of Effect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEffect *BackRepoEffectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, effectDB := range backRepoEffect.Map_EffectDBID_EffectDB {
		backRepoEffect.CheckoutPhaseTwoInstance(backRepo, effectDB)
	}
	return
}

// BackRepoEffect.CheckoutPhaseTwoInstance Checkouts staged instances of Effect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEffect *BackRepoEffectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, effectDB *EffectDB) (Error error) {

	effect := backRepoEffect.Map_EffectDBID_EffectPtr[effectDB.ID]

	effectDB.DecodePointers(backRepo, effect)

	return
}

func (effectDB *EffectDB) DecodePointers(backRepo *BackRepoStruct, effect *models.Effect) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEffect allows commit of a single effect (if already staged)
func (backRepo *BackRepoStruct) CommitEffect(effect *models.Effect) {
	backRepo.BackRepoEffect.CommitPhaseOneInstance(effect)
	if id, ok := backRepo.BackRepoEffect.Map_EffectPtr_EffectDBID[effect]; ok {
		backRepo.BackRepoEffect.CommitPhaseTwoInstance(backRepo, id, effect)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEffect allows checkout of a single effect (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEffect(effect *models.Effect) {
	// check if the effect is staged
	if _, ok := backRepo.BackRepoEffect.Map_EffectPtr_EffectDBID[effect]; ok {

		if id, ok := backRepo.BackRepoEffect.Map_EffectPtr_EffectDBID[effect]; ok {
			var effectDB EffectDB
			effectDB.ID = id

			if err := backRepo.BackRepoEffect.db.First(&effectDB, id).Error; err != nil {
				log.Fatalln("CheckoutEffect : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEffect.CheckoutPhaseOneInstance(&effectDB)
			backRepo.BackRepoEffect.CheckoutPhaseTwoInstance(backRepo, &effectDB)
		}
	}
}

// CopyBasicFieldsFromEffect
func (effectDB *EffectDB) CopyBasicFieldsFromEffect(effect *models.Effect) {
	// insertion point for fields commit

	effectDB.Name_Data.String = effect.Name
	effectDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEffect_WOP
func (effectDB *EffectDB) CopyBasicFieldsFromEffect_WOP(effect *models.Effect_WOP) {
	// insertion point for fields commit

	effectDB.Name_Data.String = effect.Name
	effectDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEffectWOP
func (effectDB *EffectDB) CopyBasicFieldsFromEffectWOP(effect *EffectWOP) {
	// insertion point for fields commit

	effectDB.Name_Data.String = effect.Name
	effectDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEffect
func (effectDB *EffectDB) CopyBasicFieldsToEffect(effect *models.Effect) {
	// insertion point for checkout of basic fields (back repo to stage)
	effect.Name = effectDB.Name_Data.String
}

// CopyBasicFieldsToEffect_WOP
func (effectDB *EffectDB) CopyBasicFieldsToEffect_WOP(effect *models.Effect_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	effect.Name = effectDB.Name_Data.String
}

// CopyBasicFieldsToEffectWOP
func (effectDB *EffectDB) CopyBasicFieldsToEffectWOP(effect *EffectWOP) {
	effect.ID = int(effectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	effect.Name = effectDB.Name_Data.String
}

// Backup generates a json file from a slice of all EffectDB instances in the backrepo
func (backRepoEffect *BackRepoEffectStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EffectDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EffectDB, 0)
	for _, effectDB := range backRepoEffect.Map_EffectDBID_EffectDB {
		forBackup = append(forBackup, effectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Effect ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Effect file", err.Error())
	}
}

// Backup generates a json file from a slice of all EffectDB instances in the backrepo
func (backRepoEffect *BackRepoEffectStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EffectDB, 0)
	for _, effectDB := range backRepoEffect.Map_EffectDBID_EffectDB {
		forBackup = append(forBackup, effectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Effect")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Effect_Fields, -1)
	for _, effectDB := range forBackup {

		var effectWOP EffectWOP
		effectDB.CopyBasicFieldsToEffectWOP(&effectWOP)

		row := sh.AddRow()
		row.WriteStruct(&effectWOP, -1)
	}
}

// RestoreXL from the "Effect" sheet all EffectDB instances
func (backRepoEffect *BackRepoEffectStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEffectid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Effect"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEffect.rowVisitorEffect)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEffect *BackRepoEffectStruct) rowVisitorEffect(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var effectWOP EffectWOP
		row.ReadStruct(&effectWOP)

		// add the unmarshalled struct to the stage
		effectDB := new(EffectDB)
		effectDB.CopyBasicFieldsFromEffectWOP(&effectWOP)

		effectDB_ID_atBackupTime := effectDB.ID
		effectDB.ID = 0
		query := backRepoEffect.db.Create(effectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEffect.Map_EffectDBID_EffectDB[effectDB.ID] = effectDB
		BackRepoEffectid_atBckpTime_newID[effectDB_ID_atBackupTime] = effectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EffectDB.json" in dirPath that stores an array
// of EffectDB and stores it in the database
// the map BackRepoEffectid_atBckpTime_newID is updated accordingly
func (backRepoEffect *BackRepoEffectStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEffectid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EffectDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Effect file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EffectDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EffectDBID_EffectDB
	for _, effectDB := range forRestore {

		effectDB_ID_atBackupTime := effectDB.ID
		effectDB.ID = 0
		query := backRepoEffect.db.Create(effectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEffect.Map_EffectDBID_EffectDB[effectDB.ID] = effectDB
		BackRepoEffectid_atBckpTime_newID[effectDB_ID_atBackupTime] = effectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Effect file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Effect>id_atBckpTime_newID
// to compute new index
func (backRepoEffect *BackRepoEffectStruct) RestorePhaseTwo() {

	for _, effectDB := range backRepoEffect.Map_EffectDBID_EffectDB {

		// next line of code is to avert unused variable compilation error
		_ = effectDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEffect.db.Model(effectDB).Updates(*effectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEffect.ResetReversePointers commits all staged instances of Effect to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEffect *BackRepoEffectStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, effect := range backRepoEffect.Map_EffectDBID_EffectPtr {
		backRepoEffect.ResetReversePointersInstance(backRepo, idx, effect)
	}

	return
}

func (backRepoEffect *BackRepoEffectStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, effect *models.Effect) (Error error) {

	// fetch matching effectDB
	if effectDB, ok := backRepoEffect.Map_EffectDBID_EffectDB[idx]; ok {
		_ = effectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEffectid_atBckpTime_newID map[uint]uint
