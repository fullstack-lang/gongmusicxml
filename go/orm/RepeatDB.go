// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Repeat_sql sql.NullBool
var dummy_Repeat_time time.Duration
var dummy_Repeat_sort sort.Float64Slice

// RepeatAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model repeatAPI
type RepeatAPI struct {
	gorm.Model

	models.Repeat_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RepeatPointersEncoding RepeatPointersEncoding
}

// RepeatPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RepeatPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// RepeatDB describes a repeat in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model repeatDB
type RepeatDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field repeatDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RepeatPointersEncoding
}

// RepeatDBs arrays repeatDBs
// swagger:response repeatDBsResponse
type RepeatDBs []RepeatDB

// RepeatDBResponse provides response
// swagger:response repeatDBResponse
type RepeatDBResponse struct {
	RepeatDB
}

// RepeatWOP is a Repeat without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RepeatWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Repeat_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoRepeatStruct struct {
	// stores RepeatDB according to their gorm ID
	Map_RepeatDBID_RepeatDB map[uint]*RepeatDB

	// stores RepeatDB ID according to Repeat address
	Map_RepeatPtr_RepeatDBID map[*models.Repeat]uint

	// stores Repeat according to their gorm ID
	Map_RepeatDBID_RepeatPtr map[uint]*models.Repeat

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRepeat *BackRepoRepeatStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRepeat.stage
	return
}

func (backRepoRepeat *BackRepoRepeatStruct) GetDB() *gorm.DB {
	return backRepoRepeat.db
}

// GetRepeatDBFromRepeatPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRepeat *BackRepoRepeatStruct) GetRepeatDBFromRepeatPtr(repeat *models.Repeat) (repeatDB *RepeatDB) {
	id := backRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat]
	repeatDB = backRepoRepeat.Map_RepeatDBID_RepeatDB[id]
	return
}

// BackRepoRepeat.CommitPhaseOne commits all staged instances of Repeat to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRepeat *BackRepoRepeatStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for repeat := range stage.Repeats {
		backRepoRepeat.CommitPhaseOneInstance(repeat)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, repeat := range backRepoRepeat.Map_RepeatDBID_RepeatPtr {
		if _, ok := stage.Repeats[repeat]; !ok {
			backRepoRepeat.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRepeat.CommitDeleteInstance commits deletion of Repeat to the BackRepo
func (backRepoRepeat *BackRepoRepeatStruct) CommitDeleteInstance(id uint) (Error error) {

	repeat := backRepoRepeat.Map_RepeatDBID_RepeatPtr[id]

	// repeat is not staged anymore, remove repeatDB
	repeatDB := backRepoRepeat.Map_RepeatDBID_RepeatDB[id]
	query := backRepoRepeat.db.Unscoped().Delete(&repeatDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRepeat.Map_RepeatPtr_RepeatDBID, repeat)
	delete(backRepoRepeat.Map_RepeatDBID_RepeatPtr, id)
	delete(backRepoRepeat.Map_RepeatDBID_RepeatDB, id)

	return
}

// BackRepoRepeat.CommitPhaseOneInstance commits repeat staged instances of Repeat to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRepeat *BackRepoRepeatStruct) CommitPhaseOneInstance(repeat *models.Repeat) (Error error) {

	// check if the repeat is not commited yet
	if _, ok := backRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat]; ok {
		return
	}

	// initiate repeat
	var repeatDB RepeatDB
	repeatDB.CopyBasicFieldsFromRepeat(repeat)

	query := backRepoRepeat.db.Create(&repeatDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat] = repeatDB.ID
	backRepoRepeat.Map_RepeatDBID_RepeatPtr[repeatDB.ID] = repeat
	backRepoRepeat.Map_RepeatDBID_RepeatDB[repeatDB.ID] = &repeatDB

	return
}

// BackRepoRepeat.CommitPhaseTwo commits all staged instances of Repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepeat *BackRepoRepeatStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, repeat := range backRepoRepeat.Map_RepeatDBID_RepeatPtr {
		backRepoRepeat.CommitPhaseTwoInstance(backRepo, idx, repeat)
	}

	return
}

// BackRepoRepeat.CommitPhaseTwoInstance commits {{structname }} of models.Repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepeat *BackRepoRepeatStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, repeat *models.Repeat) (Error error) {

	// fetch matching repeatDB
	if repeatDB, ok := backRepoRepeat.Map_RepeatDBID_RepeatDB[idx]; ok {

		repeatDB.CopyBasicFieldsFromRepeat(repeat)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoRepeat.db.Save(&repeatDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Repeat intance %s", repeat.Name))
		return err
	}

	return
}

// BackRepoRepeat.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRepeat *BackRepoRepeatStruct) CheckoutPhaseOne() (Error error) {

	repeatDBArray := make([]RepeatDB, 0)
	query := backRepoRepeat.db.Find(&repeatDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	repeatInstancesToBeRemovedFromTheStage := make(map[*models.Repeat]any)
	for key, value := range backRepoRepeat.stage.Repeats {
		repeatInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, repeatDB := range repeatDBArray {
		backRepoRepeat.CheckoutPhaseOneInstance(&repeatDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		repeat, ok := backRepoRepeat.Map_RepeatDBID_RepeatPtr[repeatDB.ID]
		if ok {
			delete(repeatInstancesToBeRemovedFromTheStage, repeat)
		}
	}

	// remove from stage and back repo's 3 maps all repeats that are not in the checkout
	for repeat := range repeatInstancesToBeRemovedFromTheStage {
		repeat.Unstage(backRepoRepeat.GetStage())

		// remove instance from the back repo 3 maps
		repeatID := backRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat]
		delete(backRepoRepeat.Map_RepeatPtr_RepeatDBID, repeat)
		delete(backRepoRepeat.Map_RepeatDBID_RepeatDB, repeatID)
		delete(backRepoRepeat.Map_RepeatDBID_RepeatPtr, repeatID)
	}

	return
}

// CheckoutPhaseOneInstance takes a repeatDB that has been found in the DB, updates the backRepo and stages the
// models version of the repeatDB
func (backRepoRepeat *BackRepoRepeatStruct) CheckoutPhaseOneInstance(repeatDB *RepeatDB) (Error error) {

	repeat, ok := backRepoRepeat.Map_RepeatDBID_RepeatPtr[repeatDB.ID]
	if !ok {
		repeat = new(models.Repeat)

		backRepoRepeat.Map_RepeatDBID_RepeatPtr[repeatDB.ID] = repeat
		backRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat] = repeatDB.ID

		// append model store with the new element
		repeat.Name = repeatDB.Name_Data.String
		repeat.Stage(backRepoRepeat.GetStage())
	}
	repeatDB.CopyBasicFieldsToRepeat(repeat)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	repeat.Stage(backRepoRepeat.GetStage())

	// preserve pointer to repeatDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RepeatDBID_RepeatDB)[repeatDB hold variable pointers
	repeatDB_Data := *repeatDB
	preservedPtrToRepeat := &repeatDB_Data
	backRepoRepeat.Map_RepeatDBID_RepeatDB[repeatDB.ID] = preservedPtrToRepeat

	return
}

// BackRepoRepeat.CheckoutPhaseTwo Checkouts all staged instances of Repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepeat *BackRepoRepeatStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, repeatDB := range backRepoRepeat.Map_RepeatDBID_RepeatDB {
		backRepoRepeat.CheckoutPhaseTwoInstance(backRepo, repeatDB)
	}
	return
}

// BackRepoRepeat.CheckoutPhaseTwoInstance Checkouts staged instances of Repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepeat *BackRepoRepeatStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, repeatDB *RepeatDB) (Error error) {

	repeat := backRepoRepeat.Map_RepeatDBID_RepeatPtr[repeatDB.ID]

	repeatDB.DecodePointers(backRepo, repeat)

	return
}

func (repeatDB *RepeatDB) DecodePointers(backRepo *BackRepoStruct, repeat *models.Repeat) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitRepeat allows commit of a single repeat (if already staged)
func (backRepo *BackRepoStruct) CommitRepeat(repeat *models.Repeat) {
	backRepo.BackRepoRepeat.CommitPhaseOneInstance(repeat)
	if id, ok := backRepo.BackRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat]; ok {
		backRepo.BackRepoRepeat.CommitPhaseTwoInstance(backRepo, id, repeat)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRepeat allows checkout of a single repeat (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRepeat(repeat *models.Repeat) {
	// check if the repeat is staged
	if _, ok := backRepo.BackRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat]; ok {

		if id, ok := backRepo.BackRepoRepeat.Map_RepeatPtr_RepeatDBID[repeat]; ok {
			var repeatDB RepeatDB
			repeatDB.ID = id

			if err := backRepo.BackRepoRepeat.db.First(&repeatDB, id).Error; err != nil {
				log.Fatalln("CheckoutRepeat : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRepeat.CheckoutPhaseOneInstance(&repeatDB)
			backRepo.BackRepoRepeat.CheckoutPhaseTwoInstance(backRepo, &repeatDB)
		}
	}
}

// CopyBasicFieldsFromRepeat
func (repeatDB *RepeatDB) CopyBasicFieldsFromRepeat(repeat *models.Repeat) {
	// insertion point for fields commit

	repeatDB.Name_Data.String = repeat.Name
	repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRepeat_WOP
func (repeatDB *RepeatDB) CopyBasicFieldsFromRepeat_WOP(repeat *models.Repeat_WOP) {
	// insertion point for fields commit

	repeatDB.Name_Data.String = repeat.Name
	repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRepeatWOP
func (repeatDB *RepeatDB) CopyBasicFieldsFromRepeatWOP(repeat *RepeatWOP) {
	// insertion point for fields commit

	repeatDB.Name_Data.String = repeat.Name
	repeatDB.Name_Data.Valid = true
}

// CopyBasicFieldsToRepeat
func (repeatDB *RepeatDB) CopyBasicFieldsToRepeat(repeat *models.Repeat) {
	// insertion point for checkout of basic fields (back repo to stage)
	repeat.Name = repeatDB.Name_Data.String
}

// CopyBasicFieldsToRepeat_WOP
func (repeatDB *RepeatDB) CopyBasicFieldsToRepeat_WOP(repeat *models.Repeat_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	repeat.Name = repeatDB.Name_Data.String
}

// CopyBasicFieldsToRepeatWOP
func (repeatDB *RepeatDB) CopyBasicFieldsToRepeatWOP(repeat *RepeatWOP) {
	repeat.ID = int(repeatDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	repeat.Name = repeatDB.Name_Data.String
}

// Backup generates a json file from a slice of all RepeatDB instances in the backrepo
func (backRepoRepeat *BackRepoRepeatStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RepeatDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RepeatDB, 0)
	for _, repeatDB := range backRepoRepeat.Map_RepeatDBID_RepeatDB {
		forBackup = append(forBackup, repeatDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Repeat ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Repeat file", err.Error())
	}
}

// Backup generates a json file from a slice of all RepeatDB instances in the backrepo
func (backRepoRepeat *BackRepoRepeatStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RepeatDB, 0)
	for _, repeatDB := range backRepoRepeat.Map_RepeatDBID_RepeatDB {
		forBackup = append(forBackup, repeatDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Repeat")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Repeat_Fields, -1)
	for _, repeatDB := range forBackup {

		var repeatWOP RepeatWOP
		repeatDB.CopyBasicFieldsToRepeatWOP(&repeatWOP)

		row := sh.AddRow()
		row.WriteStruct(&repeatWOP, -1)
	}
}

// RestoreXL from the "Repeat" sheet all RepeatDB instances
func (backRepoRepeat *BackRepoRepeatStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRepeatid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Repeat"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRepeat.rowVisitorRepeat)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRepeat *BackRepoRepeatStruct) rowVisitorRepeat(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var repeatWOP RepeatWOP
		row.ReadStruct(&repeatWOP)

		// add the unmarshalled struct to the stage
		repeatDB := new(RepeatDB)
		repeatDB.CopyBasicFieldsFromRepeatWOP(&repeatWOP)

		repeatDB_ID_atBackupTime := repeatDB.ID
		repeatDB.ID = 0
		query := backRepoRepeat.db.Create(repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRepeat.Map_RepeatDBID_RepeatDB[repeatDB.ID] = repeatDB
		BackRepoRepeatid_atBckpTime_newID[repeatDB_ID_atBackupTime] = repeatDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RepeatDB.json" in dirPath that stores an array
// of RepeatDB and stores it in the database
// the map BackRepoRepeatid_atBckpTime_newID is updated accordingly
func (backRepoRepeat *BackRepoRepeatStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRepeatid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RepeatDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Repeat file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RepeatDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RepeatDBID_RepeatDB
	for _, repeatDB := range forRestore {

		repeatDB_ID_atBackupTime := repeatDB.ID
		repeatDB.ID = 0
		query := backRepoRepeat.db.Create(repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRepeat.Map_RepeatDBID_RepeatDB[repeatDB.ID] = repeatDB
		BackRepoRepeatid_atBckpTime_newID[repeatDB_ID_atBackupTime] = repeatDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Repeat file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Repeat>id_atBckpTime_newID
// to compute new index
func (backRepoRepeat *BackRepoRepeatStruct) RestorePhaseTwo() {

	for _, repeatDB := range backRepoRepeat.Map_RepeatDBID_RepeatDB {

		// next line of code is to avert unused variable compilation error
		_ = repeatDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRepeat.db.Model(repeatDB).Updates(*repeatDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRepeat.ResetReversePointers commits all staged instances of Repeat to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepeat *BackRepoRepeatStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, repeat := range backRepoRepeat.Map_RepeatDBID_RepeatPtr {
		backRepoRepeat.ResetReversePointersInstance(backRepo, idx, repeat)
	}

	return
}

func (backRepoRepeat *BackRepoRepeatStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, repeat *models.Repeat) (Error error) {

	// fetch matching repeatDB
	if repeatDB, ok := backRepoRepeat.Map_RepeatDBID_RepeatDB[idx]; ok {
		_ = repeatDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRepeatid_atBckpTime_newID map[uint]uint
