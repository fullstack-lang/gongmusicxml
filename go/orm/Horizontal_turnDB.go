// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Horizontal_turn_sql sql.NullBool
var dummy_Horizontal_turn_time time.Duration
var dummy_Horizontal_turn_sort sort.Float64Slice

// Horizontal_turnAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model horizontal_turnAPI
type Horizontal_turnAPI struct {
	gorm.Model

	models.Horizontal_turn_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Horizontal_turnPointersEncoding Horizontal_turnPointersEncoding
}

// Horizontal_turnPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Horizontal_turnPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Horizontal_turnDB describes a horizontal_turn in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model horizontal_turnDB
type Horizontal_turnDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field horizontal_turnDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Horizontal_turnPointersEncoding
}

// Horizontal_turnDBs arrays horizontal_turnDBs
// swagger:response horizontal_turnDBsResponse
type Horizontal_turnDBs []Horizontal_turnDB

// Horizontal_turnDBResponse provides response
// swagger:response horizontal_turnDBResponse
type Horizontal_turnDBResponse struct {
	Horizontal_turnDB
}

// Horizontal_turnWOP is a Horizontal_turn without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Horizontal_turnWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Horizontal_turn_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHorizontal_turnStruct struct {
	// stores Horizontal_turnDB according to their gorm ID
	Map_Horizontal_turnDBID_Horizontal_turnDB map[uint]*Horizontal_turnDB

	// stores Horizontal_turnDB ID according to Horizontal_turn address
	Map_Horizontal_turnPtr_Horizontal_turnDBID map[*models.Horizontal_turn]uint

	// stores Horizontal_turn according to their gorm ID
	Map_Horizontal_turnDBID_Horizontal_turnPtr map[uint]*models.Horizontal_turn

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHorizontal_turn.stage
	return
}

func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) GetDB() *gorm.DB {
	return backRepoHorizontal_turn.db
}

// GetHorizontal_turnDBFromHorizontal_turnPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) GetHorizontal_turnDBFromHorizontal_turnPtr(horizontal_turn *models.Horizontal_turn) (horizontal_turnDB *Horizontal_turnDB) {
	id := backRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn]
	horizontal_turnDB = backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[id]
	return
}

// BackRepoHorizontal_turn.CommitPhaseOne commits all staged instances of Horizontal_turn to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for horizontal_turn := range stage.Horizontal_turns {
		backRepoHorizontal_turn.CommitPhaseOneInstance(horizontal_turn)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, horizontal_turn := range backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr {
		if _, ok := stage.Horizontal_turns[horizontal_turn]; !ok {
			backRepoHorizontal_turn.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHorizontal_turn.CommitDeleteInstance commits deletion of Horizontal_turn to the BackRepo
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CommitDeleteInstance(id uint) (Error error) {

	horizontal_turn := backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr[id]

	// horizontal_turn is not staged anymore, remove horizontal_turnDB
	horizontal_turnDB := backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[id]
	query := backRepoHorizontal_turn.db.Unscoped().Delete(&horizontal_turnDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID, horizontal_turn)
	delete(backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr, id)
	delete(backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB, id)

	return
}

// BackRepoHorizontal_turn.CommitPhaseOneInstance commits horizontal_turn staged instances of Horizontal_turn to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CommitPhaseOneInstance(horizontal_turn *models.Horizontal_turn) (Error error) {

	// check if the horizontal_turn is not commited yet
	if _, ok := backRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn]; ok {
		return
	}

	// initiate horizontal_turn
	var horizontal_turnDB Horizontal_turnDB
	horizontal_turnDB.CopyBasicFieldsFromHorizontal_turn(horizontal_turn)

	query := backRepoHorizontal_turn.db.Create(&horizontal_turnDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn] = horizontal_turnDB.ID
	backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr[horizontal_turnDB.ID] = horizontal_turn
	backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[horizontal_turnDB.ID] = &horizontal_turnDB

	return
}

// BackRepoHorizontal_turn.CommitPhaseTwo commits all staged instances of Horizontal_turn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, horizontal_turn := range backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr {
		backRepoHorizontal_turn.CommitPhaseTwoInstance(backRepo, idx, horizontal_turn)
	}

	return
}

// BackRepoHorizontal_turn.CommitPhaseTwoInstance commits {{structname }} of models.Horizontal_turn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, horizontal_turn *models.Horizontal_turn) (Error error) {

	// fetch matching horizontal_turnDB
	if horizontal_turnDB, ok := backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[idx]; ok {

		horizontal_turnDB.CopyBasicFieldsFromHorizontal_turn(horizontal_turn)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHorizontal_turn.db.Save(&horizontal_turnDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Horizontal_turn intance %s", horizontal_turn.Name))
		return err
	}

	return
}

// BackRepoHorizontal_turn.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CheckoutPhaseOne() (Error error) {

	horizontal_turnDBArray := make([]Horizontal_turnDB, 0)
	query := backRepoHorizontal_turn.db.Find(&horizontal_turnDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	horizontal_turnInstancesToBeRemovedFromTheStage := make(map[*models.Horizontal_turn]any)
	for key, value := range backRepoHorizontal_turn.stage.Horizontal_turns {
		horizontal_turnInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, horizontal_turnDB := range horizontal_turnDBArray {
		backRepoHorizontal_turn.CheckoutPhaseOneInstance(&horizontal_turnDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		horizontal_turn, ok := backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr[horizontal_turnDB.ID]
		if ok {
			delete(horizontal_turnInstancesToBeRemovedFromTheStage, horizontal_turn)
		}
	}

	// remove from stage and back repo's 3 maps all horizontal_turns that are not in the checkout
	for horizontal_turn := range horizontal_turnInstancesToBeRemovedFromTheStage {
		horizontal_turn.Unstage(backRepoHorizontal_turn.GetStage())

		// remove instance from the back repo 3 maps
		horizontal_turnID := backRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn]
		delete(backRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID, horizontal_turn)
		delete(backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB, horizontal_turnID)
		delete(backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr, horizontal_turnID)
	}

	return
}

// CheckoutPhaseOneInstance takes a horizontal_turnDB that has been found in the DB, updates the backRepo and stages the
// models version of the horizontal_turnDB
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CheckoutPhaseOneInstance(horizontal_turnDB *Horizontal_turnDB) (Error error) {

	horizontal_turn, ok := backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr[horizontal_turnDB.ID]
	if !ok {
		horizontal_turn = new(models.Horizontal_turn)

		backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr[horizontal_turnDB.ID] = horizontal_turn
		backRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn] = horizontal_turnDB.ID

		// append model store with the new element
		horizontal_turn.Name = horizontal_turnDB.Name_Data.String
		horizontal_turn.Stage(backRepoHorizontal_turn.GetStage())
	}
	horizontal_turnDB.CopyBasicFieldsToHorizontal_turn(horizontal_turn)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	horizontal_turn.Stage(backRepoHorizontal_turn.GetStage())

	// preserve pointer to horizontal_turnDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Horizontal_turnDBID_Horizontal_turnDB)[horizontal_turnDB hold variable pointers
	horizontal_turnDB_Data := *horizontal_turnDB
	preservedPtrToHorizontal_turn := &horizontal_turnDB_Data
	backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[horizontal_turnDB.ID] = preservedPtrToHorizontal_turn

	return
}

// BackRepoHorizontal_turn.CheckoutPhaseTwo Checkouts all staged instances of Horizontal_turn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, horizontal_turnDB := range backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB {
		backRepoHorizontal_turn.CheckoutPhaseTwoInstance(backRepo, horizontal_turnDB)
	}
	return
}

// BackRepoHorizontal_turn.CheckoutPhaseTwoInstance Checkouts staged instances of Horizontal_turn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, horizontal_turnDB *Horizontal_turnDB) (Error error) {

	horizontal_turn := backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr[horizontal_turnDB.ID]

	horizontal_turnDB.DecodePointers(backRepo, horizontal_turn)

	return
}

func (horizontal_turnDB *Horizontal_turnDB) DecodePointers(backRepo *BackRepoStruct, horizontal_turn *models.Horizontal_turn) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHorizontal_turn allows commit of a single horizontal_turn (if already staged)
func (backRepo *BackRepoStruct) CommitHorizontal_turn(horizontal_turn *models.Horizontal_turn) {
	backRepo.BackRepoHorizontal_turn.CommitPhaseOneInstance(horizontal_turn)
	if id, ok := backRepo.BackRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn]; ok {
		backRepo.BackRepoHorizontal_turn.CommitPhaseTwoInstance(backRepo, id, horizontal_turn)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHorizontal_turn allows checkout of a single horizontal_turn (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHorizontal_turn(horizontal_turn *models.Horizontal_turn) {
	// check if the horizontal_turn is staged
	if _, ok := backRepo.BackRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn]; ok {

		if id, ok := backRepo.BackRepoHorizontal_turn.Map_Horizontal_turnPtr_Horizontal_turnDBID[horizontal_turn]; ok {
			var horizontal_turnDB Horizontal_turnDB
			horizontal_turnDB.ID = id

			if err := backRepo.BackRepoHorizontal_turn.db.First(&horizontal_turnDB, id).Error; err != nil {
				log.Fatalln("CheckoutHorizontal_turn : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHorizontal_turn.CheckoutPhaseOneInstance(&horizontal_turnDB)
			backRepo.BackRepoHorizontal_turn.CheckoutPhaseTwoInstance(backRepo, &horizontal_turnDB)
		}
	}
}

// CopyBasicFieldsFromHorizontal_turn
func (horizontal_turnDB *Horizontal_turnDB) CopyBasicFieldsFromHorizontal_turn(horizontal_turn *models.Horizontal_turn) {
	// insertion point for fields commit

	horizontal_turnDB.Name_Data.String = horizontal_turn.Name
	horizontal_turnDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHorizontal_turn_WOP
func (horizontal_turnDB *Horizontal_turnDB) CopyBasicFieldsFromHorizontal_turn_WOP(horizontal_turn *models.Horizontal_turn_WOP) {
	// insertion point for fields commit

	horizontal_turnDB.Name_Data.String = horizontal_turn.Name
	horizontal_turnDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHorizontal_turnWOP
func (horizontal_turnDB *Horizontal_turnDB) CopyBasicFieldsFromHorizontal_turnWOP(horizontal_turn *Horizontal_turnWOP) {
	// insertion point for fields commit

	horizontal_turnDB.Name_Data.String = horizontal_turn.Name
	horizontal_turnDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHorizontal_turn
func (horizontal_turnDB *Horizontal_turnDB) CopyBasicFieldsToHorizontal_turn(horizontal_turn *models.Horizontal_turn) {
	// insertion point for checkout of basic fields (back repo to stage)
	horizontal_turn.Name = horizontal_turnDB.Name_Data.String
}

// CopyBasicFieldsToHorizontal_turn_WOP
func (horizontal_turnDB *Horizontal_turnDB) CopyBasicFieldsToHorizontal_turn_WOP(horizontal_turn *models.Horizontal_turn_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	horizontal_turn.Name = horizontal_turnDB.Name_Data.String
}

// CopyBasicFieldsToHorizontal_turnWOP
func (horizontal_turnDB *Horizontal_turnDB) CopyBasicFieldsToHorizontal_turnWOP(horizontal_turn *Horizontal_turnWOP) {
	horizontal_turn.ID = int(horizontal_turnDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	horizontal_turn.Name = horizontal_turnDB.Name_Data.String
}

// Backup generates a json file from a slice of all Horizontal_turnDB instances in the backrepo
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Horizontal_turnDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Horizontal_turnDB, 0)
	for _, horizontal_turnDB := range backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB {
		forBackup = append(forBackup, horizontal_turnDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Horizontal_turn ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Horizontal_turn file", err.Error())
	}
}

// Backup generates a json file from a slice of all Horizontal_turnDB instances in the backrepo
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Horizontal_turnDB, 0)
	for _, horizontal_turnDB := range backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB {
		forBackup = append(forBackup, horizontal_turnDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Horizontal_turn")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Horizontal_turn_Fields, -1)
	for _, horizontal_turnDB := range forBackup {

		var horizontal_turnWOP Horizontal_turnWOP
		horizontal_turnDB.CopyBasicFieldsToHorizontal_turnWOP(&horizontal_turnWOP)

		row := sh.AddRow()
		row.WriteStruct(&horizontal_turnWOP, -1)
	}
}

// RestoreXL from the "Horizontal_turn" sheet all Horizontal_turnDB instances
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHorizontal_turnid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Horizontal_turn"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHorizontal_turn.rowVisitorHorizontal_turn)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) rowVisitorHorizontal_turn(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var horizontal_turnWOP Horizontal_turnWOP
		row.ReadStruct(&horizontal_turnWOP)

		// add the unmarshalled struct to the stage
		horizontal_turnDB := new(Horizontal_turnDB)
		horizontal_turnDB.CopyBasicFieldsFromHorizontal_turnWOP(&horizontal_turnWOP)

		horizontal_turnDB_ID_atBackupTime := horizontal_turnDB.ID
		horizontal_turnDB.ID = 0
		query := backRepoHorizontal_turn.db.Create(horizontal_turnDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[horizontal_turnDB.ID] = horizontal_turnDB
		BackRepoHorizontal_turnid_atBckpTime_newID[horizontal_turnDB_ID_atBackupTime] = horizontal_turnDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Horizontal_turnDB.json" in dirPath that stores an array
// of Horizontal_turnDB and stores it in the database
// the map BackRepoHorizontal_turnid_atBckpTime_newID is updated accordingly
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHorizontal_turnid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Horizontal_turnDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Horizontal_turn file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Horizontal_turnDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Horizontal_turnDBID_Horizontal_turnDB
	for _, horizontal_turnDB := range forRestore {

		horizontal_turnDB_ID_atBackupTime := horizontal_turnDB.ID
		horizontal_turnDB.ID = 0
		query := backRepoHorizontal_turn.db.Create(horizontal_turnDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[horizontal_turnDB.ID] = horizontal_turnDB
		BackRepoHorizontal_turnid_atBckpTime_newID[horizontal_turnDB_ID_atBackupTime] = horizontal_turnDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Horizontal_turn file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Horizontal_turn>id_atBckpTime_newID
// to compute new index
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) RestorePhaseTwo() {

	for _, horizontal_turnDB := range backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB {

		// next line of code is to avert unused variable compilation error
		_ = horizontal_turnDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHorizontal_turn.db.Model(horizontal_turnDB).Updates(*horizontal_turnDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHorizontal_turn.ResetReversePointers commits all staged instances of Horizontal_turn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, horizontal_turn := range backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnPtr {
		backRepoHorizontal_turn.ResetReversePointersInstance(backRepo, idx, horizontal_turn)
	}

	return
}

func (backRepoHorizontal_turn *BackRepoHorizontal_turnStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, horizontal_turn *models.Horizontal_turn) (Error error) {

	// fetch matching horizontal_turnDB
	if horizontal_turnDB, ok := backRepoHorizontal_turn.Map_Horizontal_turnDBID_Horizontal_turnDB[idx]; ok {
		_ = horizontal_turnDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHorizontal_turnid_atBckpTime_newID map[uint]uint
