// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_System_margins_sql sql.NullBool
var dummy_System_margins_time time.Duration
var dummy_System_margins_sort sort.Float64Slice

// System_marginsAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model system_marginsAPI
type System_marginsAPI struct {
	gorm.Model

	models.System_margins_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	System_marginsPointersEncoding System_marginsPointersEncoding
}

// System_marginsPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type System_marginsPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// System_marginsDB describes a system_margins in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model system_marginsDB
type System_marginsDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field system_marginsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	System_marginsPointersEncoding
}

// System_marginsDBs arrays system_marginsDBs
// swagger:response system_marginsDBsResponse
type System_marginsDBs []System_marginsDB

// System_marginsDBResponse provides response
// swagger:response system_marginsDBResponse
type System_marginsDBResponse struct {
	System_marginsDB
}

// System_marginsWOP is a System_margins without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type System_marginsWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var System_margins_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSystem_marginsStruct struct {
	// stores System_marginsDB according to their gorm ID
	Map_System_marginsDBID_System_marginsDB map[uint]*System_marginsDB

	// stores System_marginsDB ID according to System_margins address
	Map_System_marginsPtr_System_marginsDBID map[*models.System_margins]uint

	// stores System_margins according to their gorm ID
	Map_System_marginsDBID_System_marginsPtr map[uint]*models.System_margins

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSystem_margins *BackRepoSystem_marginsStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSystem_margins.stage
	return
}

func (backRepoSystem_margins *BackRepoSystem_marginsStruct) GetDB() *gorm.DB {
	return backRepoSystem_margins.db
}

// GetSystem_marginsDBFromSystem_marginsPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) GetSystem_marginsDBFromSystem_marginsPtr(system_margins *models.System_margins) (system_marginsDB *System_marginsDB) {
	id := backRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins]
	system_marginsDB = backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[id]
	return
}

// BackRepoSystem_margins.CommitPhaseOne commits all staged instances of System_margins to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for system_margins := range stage.System_marginss {
		backRepoSystem_margins.CommitPhaseOneInstance(system_margins)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, system_margins := range backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr {
		if _, ok := stage.System_marginss[system_margins]; !ok {
			backRepoSystem_margins.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSystem_margins.CommitDeleteInstance commits deletion of System_margins to the BackRepo
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CommitDeleteInstance(id uint) (Error error) {

	system_margins := backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr[id]

	// system_margins is not staged anymore, remove system_marginsDB
	system_marginsDB := backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[id]
	query := backRepoSystem_margins.db.Unscoped().Delete(&system_marginsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID, system_margins)
	delete(backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr, id)
	delete(backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB, id)

	return
}

// BackRepoSystem_margins.CommitPhaseOneInstance commits system_margins staged instances of System_margins to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CommitPhaseOneInstance(system_margins *models.System_margins) (Error error) {

	// check if the system_margins is not commited yet
	if _, ok := backRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins]; ok {
		return
	}

	// initiate system_margins
	var system_marginsDB System_marginsDB
	system_marginsDB.CopyBasicFieldsFromSystem_margins(system_margins)

	query := backRepoSystem_margins.db.Create(&system_marginsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins] = system_marginsDB.ID
	backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr[system_marginsDB.ID] = system_margins
	backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[system_marginsDB.ID] = &system_marginsDB

	return
}

// BackRepoSystem_margins.CommitPhaseTwo commits all staged instances of System_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, system_margins := range backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr {
		backRepoSystem_margins.CommitPhaseTwoInstance(backRepo, idx, system_margins)
	}

	return
}

// BackRepoSystem_margins.CommitPhaseTwoInstance commits {{structname }} of models.System_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, system_margins *models.System_margins) (Error error) {

	// fetch matching system_marginsDB
	if system_marginsDB, ok := backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[idx]; ok {

		system_marginsDB.CopyBasicFieldsFromSystem_margins(system_margins)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoSystem_margins.db.Save(&system_marginsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown System_margins intance %s", system_margins.Name))
		return err
	}

	return
}

// BackRepoSystem_margins.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CheckoutPhaseOne() (Error error) {

	system_marginsDBArray := make([]System_marginsDB, 0)
	query := backRepoSystem_margins.db.Find(&system_marginsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	system_marginsInstancesToBeRemovedFromTheStage := make(map[*models.System_margins]any)
	for key, value := range backRepoSystem_margins.stage.System_marginss {
		system_marginsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, system_marginsDB := range system_marginsDBArray {
		backRepoSystem_margins.CheckoutPhaseOneInstance(&system_marginsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		system_margins, ok := backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr[system_marginsDB.ID]
		if ok {
			delete(system_marginsInstancesToBeRemovedFromTheStage, system_margins)
		}
	}

	// remove from stage and back repo's 3 maps all system_marginss that are not in the checkout
	for system_margins := range system_marginsInstancesToBeRemovedFromTheStage {
		system_margins.Unstage(backRepoSystem_margins.GetStage())

		// remove instance from the back repo 3 maps
		system_marginsID := backRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins]
		delete(backRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID, system_margins)
		delete(backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB, system_marginsID)
		delete(backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr, system_marginsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a system_marginsDB that has been found in the DB, updates the backRepo and stages the
// models version of the system_marginsDB
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CheckoutPhaseOneInstance(system_marginsDB *System_marginsDB) (Error error) {

	system_margins, ok := backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr[system_marginsDB.ID]
	if !ok {
		system_margins = new(models.System_margins)

		backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr[system_marginsDB.ID] = system_margins
		backRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins] = system_marginsDB.ID

		// append model store with the new element
		system_margins.Name = system_marginsDB.Name_Data.String
		system_margins.Stage(backRepoSystem_margins.GetStage())
	}
	system_marginsDB.CopyBasicFieldsToSystem_margins(system_margins)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	system_margins.Stage(backRepoSystem_margins.GetStage())

	// preserve pointer to system_marginsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_System_marginsDBID_System_marginsDB)[system_marginsDB hold variable pointers
	system_marginsDB_Data := *system_marginsDB
	preservedPtrToSystem_margins := &system_marginsDB_Data
	backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[system_marginsDB.ID] = preservedPtrToSystem_margins

	return
}

// BackRepoSystem_margins.CheckoutPhaseTwo Checkouts all staged instances of System_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, system_marginsDB := range backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB {
		backRepoSystem_margins.CheckoutPhaseTwoInstance(backRepo, system_marginsDB)
	}
	return
}

// BackRepoSystem_margins.CheckoutPhaseTwoInstance Checkouts staged instances of System_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, system_marginsDB *System_marginsDB) (Error error) {

	system_margins := backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr[system_marginsDB.ID]

	system_marginsDB.DecodePointers(backRepo, system_margins)

	return
}

func (system_marginsDB *System_marginsDB) DecodePointers(backRepo *BackRepoStruct, system_margins *models.System_margins) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitSystem_margins allows commit of a single system_margins (if already staged)
func (backRepo *BackRepoStruct) CommitSystem_margins(system_margins *models.System_margins) {
	backRepo.BackRepoSystem_margins.CommitPhaseOneInstance(system_margins)
	if id, ok := backRepo.BackRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins]; ok {
		backRepo.BackRepoSystem_margins.CommitPhaseTwoInstance(backRepo, id, system_margins)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSystem_margins allows checkout of a single system_margins (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSystem_margins(system_margins *models.System_margins) {
	// check if the system_margins is staged
	if _, ok := backRepo.BackRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins]; ok {

		if id, ok := backRepo.BackRepoSystem_margins.Map_System_marginsPtr_System_marginsDBID[system_margins]; ok {
			var system_marginsDB System_marginsDB
			system_marginsDB.ID = id

			if err := backRepo.BackRepoSystem_margins.db.First(&system_marginsDB, id).Error; err != nil {
				log.Fatalln("CheckoutSystem_margins : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSystem_margins.CheckoutPhaseOneInstance(&system_marginsDB)
			backRepo.BackRepoSystem_margins.CheckoutPhaseTwoInstance(backRepo, &system_marginsDB)
		}
	}
}

// CopyBasicFieldsFromSystem_margins
func (system_marginsDB *System_marginsDB) CopyBasicFieldsFromSystem_margins(system_margins *models.System_margins) {
	// insertion point for fields commit

	system_marginsDB.Name_Data.String = system_margins.Name
	system_marginsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSystem_margins_WOP
func (system_marginsDB *System_marginsDB) CopyBasicFieldsFromSystem_margins_WOP(system_margins *models.System_margins_WOP) {
	// insertion point for fields commit

	system_marginsDB.Name_Data.String = system_margins.Name
	system_marginsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSystem_marginsWOP
func (system_marginsDB *System_marginsDB) CopyBasicFieldsFromSystem_marginsWOP(system_margins *System_marginsWOP) {
	// insertion point for fields commit

	system_marginsDB.Name_Data.String = system_margins.Name
	system_marginsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSystem_margins
func (system_marginsDB *System_marginsDB) CopyBasicFieldsToSystem_margins(system_margins *models.System_margins) {
	// insertion point for checkout of basic fields (back repo to stage)
	system_margins.Name = system_marginsDB.Name_Data.String
}

// CopyBasicFieldsToSystem_margins_WOP
func (system_marginsDB *System_marginsDB) CopyBasicFieldsToSystem_margins_WOP(system_margins *models.System_margins_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	system_margins.Name = system_marginsDB.Name_Data.String
}

// CopyBasicFieldsToSystem_marginsWOP
func (system_marginsDB *System_marginsDB) CopyBasicFieldsToSystem_marginsWOP(system_margins *System_marginsWOP) {
	system_margins.ID = int(system_marginsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	system_margins.Name = system_marginsDB.Name_Data.String
}

// Backup generates a json file from a slice of all System_marginsDB instances in the backrepo
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "System_marginsDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*System_marginsDB, 0)
	for _, system_marginsDB := range backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB {
		forBackup = append(forBackup, system_marginsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json System_margins ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json System_margins file", err.Error())
	}
}

// Backup generates a json file from a slice of all System_marginsDB instances in the backrepo
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*System_marginsDB, 0)
	for _, system_marginsDB := range backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB {
		forBackup = append(forBackup, system_marginsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("System_margins")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&System_margins_Fields, -1)
	for _, system_marginsDB := range forBackup {

		var system_marginsWOP System_marginsWOP
		system_marginsDB.CopyBasicFieldsToSystem_marginsWOP(&system_marginsWOP)

		row := sh.AddRow()
		row.WriteStruct(&system_marginsWOP, -1)
	}
}

// RestoreXL from the "System_margins" sheet all System_marginsDB instances
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSystem_marginsid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["System_margins"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSystem_margins.rowVisitorSystem_margins)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSystem_margins *BackRepoSystem_marginsStruct) rowVisitorSystem_margins(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var system_marginsWOP System_marginsWOP
		row.ReadStruct(&system_marginsWOP)

		// add the unmarshalled struct to the stage
		system_marginsDB := new(System_marginsDB)
		system_marginsDB.CopyBasicFieldsFromSystem_marginsWOP(&system_marginsWOP)

		system_marginsDB_ID_atBackupTime := system_marginsDB.ID
		system_marginsDB.ID = 0
		query := backRepoSystem_margins.db.Create(system_marginsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[system_marginsDB.ID] = system_marginsDB
		BackRepoSystem_marginsid_atBckpTime_newID[system_marginsDB_ID_atBackupTime] = system_marginsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "System_marginsDB.json" in dirPath that stores an array
// of System_marginsDB and stores it in the database
// the map BackRepoSystem_marginsid_atBckpTime_newID is updated accordingly
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSystem_marginsid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "System_marginsDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json System_margins file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*System_marginsDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_System_marginsDBID_System_marginsDB
	for _, system_marginsDB := range forRestore {

		system_marginsDB_ID_atBackupTime := system_marginsDB.ID
		system_marginsDB.ID = 0
		query := backRepoSystem_margins.db.Create(system_marginsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[system_marginsDB.ID] = system_marginsDB
		BackRepoSystem_marginsid_atBckpTime_newID[system_marginsDB_ID_atBackupTime] = system_marginsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json System_margins file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<System_margins>id_atBckpTime_newID
// to compute new index
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) RestorePhaseTwo() {

	for _, system_marginsDB := range backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB {

		// next line of code is to avert unused variable compilation error
		_ = system_marginsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSystem_margins.db.Model(system_marginsDB).Updates(*system_marginsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSystem_margins.ResetReversePointers commits all staged instances of System_margins to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSystem_margins *BackRepoSystem_marginsStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, system_margins := range backRepoSystem_margins.Map_System_marginsDBID_System_marginsPtr {
		backRepoSystem_margins.ResetReversePointersInstance(backRepo, idx, system_margins)
	}

	return
}

func (backRepoSystem_margins *BackRepoSystem_marginsStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, system_margins *models.System_margins) (Error error) {

	// fetch matching system_marginsDB
	if system_marginsDB, ok := backRepoSystem_margins.Map_System_marginsDBID_System_marginsDB[idx]; ok {
		_ = system_marginsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSystem_marginsid_atBckpTime_newID map[uint]uint
