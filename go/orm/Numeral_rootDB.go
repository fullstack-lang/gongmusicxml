// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Numeral_root_sql sql.NullBool
var dummy_Numeral_root_time time.Duration
var dummy_Numeral_root_sort sort.Float64Slice

// Numeral_rootAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model numeral_rootAPI
type Numeral_rootAPI struct {
	gorm.Model

	models.Numeral_root_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Numeral_rootPointersEncoding Numeral_rootPointersEncoding
}

// Numeral_rootPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Numeral_rootPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Numeral_rootDB describes a numeral_root in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model numeral_rootDB
type Numeral_rootDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field numeral_rootDB.Name
	Name_Data sql.NullString

	// Declation for basic field numeral_rootDB.Text
	Text_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Numeral_rootPointersEncoding
}

// Numeral_rootDBs arrays numeral_rootDBs
// swagger:response numeral_rootDBsResponse
type Numeral_rootDBs []Numeral_rootDB

// Numeral_rootDBResponse provides response
// swagger:response numeral_rootDBResponse
type Numeral_rootDBResponse struct {
	Numeral_rootDB
}

// Numeral_rootWOP is a Numeral_root without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Numeral_rootWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Numeral_root_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoNumeral_rootStruct struct {
	// stores Numeral_rootDB according to their gorm ID
	Map_Numeral_rootDBID_Numeral_rootDB map[uint]*Numeral_rootDB

	// stores Numeral_rootDB ID according to Numeral_root address
	Map_Numeral_rootPtr_Numeral_rootDBID map[*models.Numeral_root]uint

	// stores Numeral_root according to their gorm ID
	Map_Numeral_rootDBID_Numeral_rootPtr map[uint]*models.Numeral_root

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNumeral_root *BackRepoNumeral_rootStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNumeral_root.stage
	return
}

func (backRepoNumeral_root *BackRepoNumeral_rootStruct) GetDB() *gorm.DB {
	return backRepoNumeral_root.db
}

// GetNumeral_rootDBFromNumeral_rootPtr is a handy function to access the back repo instance from the stage instance
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) GetNumeral_rootDBFromNumeral_rootPtr(numeral_root *models.Numeral_root) (numeral_rootDB *Numeral_rootDB) {
	id := backRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root]
	numeral_rootDB = backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[id]
	return
}

// BackRepoNumeral_root.CommitPhaseOne commits all staged instances of Numeral_root to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for numeral_root := range stage.Numeral_roots {
		backRepoNumeral_root.CommitPhaseOneInstance(numeral_root)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, numeral_root := range backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr {
		if _, ok := stage.Numeral_roots[numeral_root]; !ok {
			backRepoNumeral_root.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNumeral_root.CommitDeleteInstance commits deletion of Numeral_root to the BackRepo
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CommitDeleteInstance(id uint) (Error error) {

	numeral_root := backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr[id]

	// numeral_root is not staged anymore, remove numeral_rootDB
	numeral_rootDB := backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[id]
	query := backRepoNumeral_root.db.Unscoped().Delete(&numeral_rootDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID, numeral_root)
	delete(backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr, id)
	delete(backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB, id)

	return
}

// BackRepoNumeral_root.CommitPhaseOneInstance commits numeral_root staged instances of Numeral_root to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CommitPhaseOneInstance(numeral_root *models.Numeral_root) (Error error) {

	// check if the numeral_root is not commited yet
	if _, ok := backRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root]; ok {
		return
	}

	// initiate numeral_root
	var numeral_rootDB Numeral_rootDB
	numeral_rootDB.CopyBasicFieldsFromNumeral_root(numeral_root)

	query := backRepoNumeral_root.db.Create(&numeral_rootDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root] = numeral_rootDB.ID
	backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr[numeral_rootDB.ID] = numeral_root
	backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[numeral_rootDB.ID] = &numeral_rootDB

	return
}

// BackRepoNumeral_root.CommitPhaseTwo commits all staged instances of Numeral_root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, numeral_root := range backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr {
		backRepoNumeral_root.CommitPhaseTwoInstance(backRepo, idx, numeral_root)
	}

	return
}

// BackRepoNumeral_root.CommitPhaseTwoInstance commits {{structname }} of models.Numeral_root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, numeral_root *models.Numeral_root) (Error error) {

	// fetch matching numeral_rootDB
	if numeral_rootDB, ok := backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[idx]; ok {

		numeral_rootDB.CopyBasicFieldsFromNumeral_root(numeral_root)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoNumeral_root.db.Save(&numeral_rootDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Numeral_root intance %s", numeral_root.Name))
		return err
	}

	return
}

// BackRepoNumeral_root.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CheckoutPhaseOne() (Error error) {

	numeral_rootDBArray := make([]Numeral_rootDB, 0)
	query := backRepoNumeral_root.db.Find(&numeral_rootDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	numeral_rootInstancesToBeRemovedFromTheStage := make(map[*models.Numeral_root]any)
	for key, value := range backRepoNumeral_root.stage.Numeral_roots {
		numeral_rootInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, numeral_rootDB := range numeral_rootDBArray {
		backRepoNumeral_root.CheckoutPhaseOneInstance(&numeral_rootDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		numeral_root, ok := backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr[numeral_rootDB.ID]
		if ok {
			delete(numeral_rootInstancesToBeRemovedFromTheStage, numeral_root)
		}
	}

	// remove from stage and back repo's 3 maps all numeral_roots that are not in the checkout
	for numeral_root := range numeral_rootInstancesToBeRemovedFromTheStage {
		numeral_root.Unstage(backRepoNumeral_root.GetStage())

		// remove instance from the back repo 3 maps
		numeral_rootID := backRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root]
		delete(backRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID, numeral_root)
		delete(backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB, numeral_rootID)
		delete(backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr, numeral_rootID)
	}

	return
}

// CheckoutPhaseOneInstance takes a numeral_rootDB that has been found in the DB, updates the backRepo and stages the
// models version of the numeral_rootDB
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CheckoutPhaseOneInstance(numeral_rootDB *Numeral_rootDB) (Error error) {

	numeral_root, ok := backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr[numeral_rootDB.ID]
	if !ok {
		numeral_root = new(models.Numeral_root)

		backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr[numeral_rootDB.ID] = numeral_root
		backRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root] = numeral_rootDB.ID

		// append model store with the new element
		numeral_root.Name = numeral_rootDB.Name_Data.String
		numeral_root.Stage(backRepoNumeral_root.GetStage())
	}
	numeral_rootDB.CopyBasicFieldsToNumeral_root(numeral_root)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	numeral_root.Stage(backRepoNumeral_root.GetStage())

	// preserve pointer to numeral_rootDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Numeral_rootDBID_Numeral_rootDB)[numeral_rootDB hold variable pointers
	numeral_rootDB_Data := *numeral_rootDB
	preservedPtrToNumeral_root := &numeral_rootDB_Data
	backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[numeral_rootDB.ID] = preservedPtrToNumeral_root

	return
}

// BackRepoNumeral_root.CheckoutPhaseTwo Checkouts all staged instances of Numeral_root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, numeral_rootDB := range backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB {
		backRepoNumeral_root.CheckoutPhaseTwoInstance(backRepo, numeral_rootDB)
	}
	return
}

// BackRepoNumeral_root.CheckoutPhaseTwoInstance Checkouts staged instances of Numeral_root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, numeral_rootDB *Numeral_rootDB) (Error error) {

	numeral_root := backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr[numeral_rootDB.ID]

	numeral_rootDB.DecodePointers(backRepo, numeral_root)

	return
}

func (numeral_rootDB *Numeral_rootDB) DecodePointers(backRepo *BackRepoStruct, numeral_root *models.Numeral_root) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitNumeral_root allows commit of a single numeral_root (if already staged)
func (backRepo *BackRepoStruct) CommitNumeral_root(numeral_root *models.Numeral_root) {
	backRepo.BackRepoNumeral_root.CommitPhaseOneInstance(numeral_root)
	if id, ok := backRepo.BackRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root]; ok {
		backRepo.BackRepoNumeral_root.CommitPhaseTwoInstance(backRepo, id, numeral_root)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNumeral_root allows checkout of a single numeral_root (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNumeral_root(numeral_root *models.Numeral_root) {
	// check if the numeral_root is staged
	if _, ok := backRepo.BackRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root]; ok {

		if id, ok := backRepo.BackRepoNumeral_root.Map_Numeral_rootPtr_Numeral_rootDBID[numeral_root]; ok {
			var numeral_rootDB Numeral_rootDB
			numeral_rootDB.ID = id

			if err := backRepo.BackRepoNumeral_root.db.First(&numeral_rootDB, id).Error; err != nil {
				log.Fatalln("CheckoutNumeral_root : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNumeral_root.CheckoutPhaseOneInstance(&numeral_rootDB)
			backRepo.BackRepoNumeral_root.CheckoutPhaseTwoInstance(backRepo, &numeral_rootDB)
		}
	}
}

// CopyBasicFieldsFromNumeral_root
func (numeral_rootDB *Numeral_rootDB) CopyBasicFieldsFromNumeral_root(numeral_root *models.Numeral_root) {
	// insertion point for fields commit

	numeral_rootDB.Name_Data.String = numeral_root.Name
	numeral_rootDB.Name_Data.Valid = true

	numeral_rootDB.Text_Data.String = numeral_root.Text
	numeral_rootDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromNumeral_root_WOP
func (numeral_rootDB *Numeral_rootDB) CopyBasicFieldsFromNumeral_root_WOP(numeral_root *models.Numeral_root_WOP) {
	// insertion point for fields commit

	numeral_rootDB.Name_Data.String = numeral_root.Name
	numeral_rootDB.Name_Data.Valid = true

	numeral_rootDB.Text_Data.String = numeral_root.Text
	numeral_rootDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromNumeral_rootWOP
func (numeral_rootDB *Numeral_rootDB) CopyBasicFieldsFromNumeral_rootWOP(numeral_root *Numeral_rootWOP) {
	// insertion point for fields commit

	numeral_rootDB.Name_Data.String = numeral_root.Name
	numeral_rootDB.Name_Data.Valid = true

	numeral_rootDB.Text_Data.String = numeral_root.Text
	numeral_rootDB.Text_Data.Valid = true
}

// CopyBasicFieldsToNumeral_root
func (numeral_rootDB *Numeral_rootDB) CopyBasicFieldsToNumeral_root(numeral_root *models.Numeral_root) {
	// insertion point for checkout of basic fields (back repo to stage)
	numeral_root.Name = numeral_rootDB.Name_Data.String
	numeral_root.Text = numeral_rootDB.Text_Data.String
}

// CopyBasicFieldsToNumeral_root_WOP
func (numeral_rootDB *Numeral_rootDB) CopyBasicFieldsToNumeral_root_WOP(numeral_root *models.Numeral_root_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	numeral_root.Name = numeral_rootDB.Name_Data.String
	numeral_root.Text = numeral_rootDB.Text_Data.String
}

// CopyBasicFieldsToNumeral_rootWOP
func (numeral_rootDB *Numeral_rootDB) CopyBasicFieldsToNumeral_rootWOP(numeral_root *Numeral_rootWOP) {
	numeral_root.ID = int(numeral_rootDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	numeral_root.Name = numeral_rootDB.Name_Data.String
	numeral_root.Text = numeral_rootDB.Text_Data.String
}

// Backup generates a json file from a slice of all Numeral_rootDB instances in the backrepo
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Numeral_rootDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Numeral_rootDB, 0)
	for _, numeral_rootDB := range backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB {
		forBackup = append(forBackup, numeral_rootDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Numeral_root ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Numeral_root file", err.Error())
	}
}

// Backup generates a json file from a slice of all Numeral_rootDB instances in the backrepo
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Numeral_rootDB, 0)
	for _, numeral_rootDB := range backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB {
		forBackup = append(forBackup, numeral_rootDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Numeral_root")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Numeral_root_Fields, -1)
	for _, numeral_rootDB := range forBackup {

		var numeral_rootWOP Numeral_rootWOP
		numeral_rootDB.CopyBasicFieldsToNumeral_rootWOP(&numeral_rootWOP)

		row := sh.AddRow()
		row.WriteStruct(&numeral_rootWOP, -1)
	}
}

// RestoreXL from the "Numeral_root" sheet all Numeral_rootDB instances
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNumeral_rootid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Numeral_root"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNumeral_root.rowVisitorNumeral_root)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNumeral_root *BackRepoNumeral_rootStruct) rowVisitorNumeral_root(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var numeral_rootWOP Numeral_rootWOP
		row.ReadStruct(&numeral_rootWOP)

		// add the unmarshalled struct to the stage
		numeral_rootDB := new(Numeral_rootDB)
		numeral_rootDB.CopyBasicFieldsFromNumeral_rootWOP(&numeral_rootWOP)

		numeral_rootDB_ID_atBackupTime := numeral_rootDB.ID
		numeral_rootDB.ID = 0
		query := backRepoNumeral_root.db.Create(numeral_rootDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[numeral_rootDB.ID] = numeral_rootDB
		BackRepoNumeral_rootid_atBckpTime_newID[numeral_rootDB_ID_atBackupTime] = numeral_rootDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Numeral_rootDB.json" in dirPath that stores an array
// of Numeral_rootDB and stores it in the database
// the map BackRepoNumeral_rootid_atBckpTime_newID is updated accordingly
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNumeral_rootid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Numeral_rootDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Numeral_root file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Numeral_rootDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Numeral_rootDBID_Numeral_rootDB
	for _, numeral_rootDB := range forRestore {

		numeral_rootDB_ID_atBackupTime := numeral_rootDB.ID
		numeral_rootDB.ID = 0
		query := backRepoNumeral_root.db.Create(numeral_rootDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[numeral_rootDB.ID] = numeral_rootDB
		BackRepoNumeral_rootid_atBckpTime_newID[numeral_rootDB_ID_atBackupTime] = numeral_rootDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Numeral_root file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Numeral_root>id_atBckpTime_newID
// to compute new index
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) RestorePhaseTwo() {

	for _, numeral_rootDB := range backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB {

		// next line of code is to avert unused variable compilation error
		_ = numeral_rootDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoNumeral_root.db.Model(numeral_rootDB).Updates(*numeral_rootDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNumeral_root.ResetReversePointers commits all staged instances of Numeral_root to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNumeral_root *BackRepoNumeral_rootStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, numeral_root := range backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootPtr {
		backRepoNumeral_root.ResetReversePointersInstance(backRepo, idx, numeral_root)
	}

	return
}

func (backRepoNumeral_root *BackRepoNumeral_rootStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, numeral_root *models.Numeral_root) (Error error) {

	// fetch matching numeral_rootDB
	if numeral_rootDB, ok := backRepoNumeral_root.Map_Numeral_rootDBID_Numeral_rootDB[idx]; ok {
		_ = numeral_rootDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNumeral_rootid_atBckpTime_newID map[uint]uint
