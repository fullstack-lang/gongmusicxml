// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Accordion_registration_sql sql.NullBool
var dummy_Accordion_registration_time time.Duration
var dummy_Accordion_registration_sort sort.Float64Slice

// Accordion_registrationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model accordion_registrationAPI
type Accordion_registrationAPI struct {
	gorm.Model

	models.Accordion_registration_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Accordion_registrationPointersEncoding Accordion_registrationPointersEncoding
}

// Accordion_registrationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Accordion_registrationPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Accordion_high is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Accordion_highID sql.NullInt64

	// field Accordion_low is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Accordion_lowID sql.NullInt64
}

// Accordion_registrationDB describes a accordion_registration in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model accordion_registrationDB
type Accordion_registrationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field accordion_registrationDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Accordion_registrationPointersEncoding
}

// Accordion_registrationDBs arrays accordion_registrationDBs
// swagger:response accordion_registrationDBsResponse
type Accordion_registrationDBs []Accordion_registrationDB

// Accordion_registrationDBResponse provides response
// swagger:response accordion_registrationDBResponse
type Accordion_registrationDBResponse struct {
	Accordion_registrationDB
}

// Accordion_registrationWOP is a Accordion_registration without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Accordion_registrationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Accordion_registration_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAccordion_registrationStruct struct {
	// stores Accordion_registrationDB according to their gorm ID
	Map_Accordion_registrationDBID_Accordion_registrationDB map[uint]*Accordion_registrationDB

	// stores Accordion_registrationDB ID according to Accordion_registration address
	Map_Accordion_registrationPtr_Accordion_registrationDBID map[*models.Accordion_registration]uint

	// stores Accordion_registration according to their gorm ID
	Map_Accordion_registrationDBID_Accordion_registrationPtr map[uint]*models.Accordion_registration

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAccordion_registration.stage
	return
}

func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) GetDB() *gorm.DB {
	return backRepoAccordion_registration.db
}

// GetAccordion_registrationDBFromAccordion_registrationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) GetAccordion_registrationDBFromAccordion_registrationPtr(accordion_registration *models.Accordion_registration) (accordion_registrationDB *Accordion_registrationDB) {
	id := backRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration]
	accordion_registrationDB = backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[id]
	return
}

// BackRepoAccordion_registration.CommitPhaseOne commits all staged instances of Accordion_registration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for accordion_registration := range stage.Accordion_registrations {
		backRepoAccordion_registration.CommitPhaseOneInstance(accordion_registration)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, accordion_registration := range backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr {
		if _, ok := stage.Accordion_registrations[accordion_registration]; !ok {
			backRepoAccordion_registration.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAccordion_registration.CommitDeleteInstance commits deletion of Accordion_registration to the BackRepo
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CommitDeleteInstance(id uint) (Error error) {

	accordion_registration := backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr[id]

	// accordion_registration is not staged anymore, remove accordion_registrationDB
	accordion_registrationDB := backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[id]
	query := backRepoAccordion_registration.db.Unscoped().Delete(&accordion_registrationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID, accordion_registration)
	delete(backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr, id)
	delete(backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB, id)

	return
}

// BackRepoAccordion_registration.CommitPhaseOneInstance commits accordion_registration staged instances of Accordion_registration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CommitPhaseOneInstance(accordion_registration *models.Accordion_registration) (Error error) {

	// check if the accordion_registration is not commited yet
	if _, ok := backRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration]; ok {
		return
	}

	// initiate accordion_registration
	var accordion_registrationDB Accordion_registrationDB
	accordion_registrationDB.CopyBasicFieldsFromAccordion_registration(accordion_registration)

	query := backRepoAccordion_registration.db.Create(&accordion_registrationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration] = accordion_registrationDB.ID
	backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr[accordion_registrationDB.ID] = accordion_registration
	backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[accordion_registrationDB.ID] = &accordion_registrationDB

	return
}

// BackRepoAccordion_registration.CommitPhaseTwo commits all staged instances of Accordion_registration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, accordion_registration := range backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr {
		backRepoAccordion_registration.CommitPhaseTwoInstance(backRepo, idx, accordion_registration)
	}

	return
}

// BackRepoAccordion_registration.CommitPhaseTwoInstance commits {{structname }} of models.Accordion_registration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, accordion_registration *models.Accordion_registration) (Error error) {

	// fetch matching accordion_registrationDB
	if accordion_registrationDB, ok := backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[idx]; ok {

		accordion_registrationDB.CopyBasicFieldsFromAccordion_registration(accordion_registration)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value accordion_registration.Accordion_high translates to updating the accordion_registration.Accordion_highID
		accordion_registrationDB.Accordion_highID.Valid = true // allow for a 0 value (nil association)
		if accordion_registration.Accordion_high != nil {
			if Accordion_highId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[accordion_registration.Accordion_high]; ok {
				accordion_registrationDB.Accordion_highID.Int64 = int64(Accordion_highId)
				accordion_registrationDB.Accordion_highID.Valid = true
			}
		} else {
			accordion_registrationDB.Accordion_highID.Int64 = 0
			accordion_registrationDB.Accordion_highID.Valid = true
		}

		// commit pointer value accordion_registration.Accordion_low translates to updating the accordion_registration.Accordion_lowID
		accordion_registrationDB.Accordion_lowID.Valid = true // allow for a 0 value (nil association)
		if accordion_registration.Accordion_low != nil {
			if Accordion_lowId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[accordion_registration.Accordion_low]; ok {
				accordion_registrationDB.Accordion_lowID.Int64 = int64(Accordion_lowId)
				accordion_registrationDB.Accordion_lowID.Valid = true
			}
		} else {
			accordion_registrationDB.Accordion_lowID.Int64 = 0
			accordion_registrationDB.Accordion_lowID.Valid = true
		}

		query := backRepoAccordion_registration.db.Save(&accordion_registrationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Accordion_registration intance %s", accordion_registration.Name))
		return err
	}

	return
}

// BackRepoAccordion_registration.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CheckoutPhaseOne() (Error error) {

	accordion_registrationDBArray := make([]Accordion_registrationDB, 0)
	query := backRepoAccordion_registration.db.Find(&accordion_registrationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	accordion_registrationInstancesToBeRemovedFromTheStage := make(map[*models.Accordion_registration]any)
	for key, value := range backRepoAccordion_registration.stage.Accordion_registrations {
		accordion_registrationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, accordion_registrationDB := range accordion_registrationDBArray {
		backRepoAccordion_registration.CheckoutPhaseOneInstance(&accordion_registrationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		accordion_registration, ok := backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr[accordion_registrationDB.ID]
		if ok {
			delete(accordion_registrationInstancesToBeRemovedFromTheStage, accordion_registration)
		}
	}

	// remove from stage and back repo's 3 maps all accordion_registrations that are not in the checkout
	for accordion_registration := range accordion_registrationInstancesToBeRemovedFromTheStage {
		accordion_registration.Unstage(backRepoAccordion_registration.GetStage())

		// remove instance from the back repo 3 maps
		accordion_registrationID := backRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration]
		delete(backRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID, accordion_registration)
		delete(backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB, accordion_registrationID)
		delete(backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr, accordion_registrationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a accordion_registrationDB that has been found in the DB, updates the backRepo and stages the
// models version of the accordion_registrationDB
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CheckoutPhaseOneInstance(accordion_registrationDB *Accordion_registrationDB) (Error error) {

	accordion_registration, ok := backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr[accordion_registrationDB.ID]
	if !ok {
		accordion_registration = new(models.Accordion_registration)

		backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr[accordion_registrationDB.ID] = accordion_registration
		backRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration] = accordion_registrationDB.ID

		// append model store with the new element
		accordion_registration.Name = accordion_registrationDB.Name_Data.String
		accordion_registration.Stage(backRepoAccordion_registration.GetStage())
	}
	accordion_registrationDB.CopyBasicFieldsToAccordion_registration(accordion_registration)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	accordion_registration.Stage(backRepoAccordion_registration.GetStage())

	// preserve pointer to accordion_registrationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Accordion_registrationDBID_Accordion_registrationDB)[accordion_registrationDB hold variable pointers
	accordion_registrationDB_Data := *accordion_registrationDB
	preservedPtrToAccordion_registration := &accordion_registrationDB_Data
	backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[accordion_registrationDB.ID] = preservedPtrToAccordion_registration

	return
}

// BackRepoAccordion_registration.CheckoutPhaseTwo Checkouts all staged instances of Accordion_registration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, accordion_registrationDB := range backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB {
		backRepoAccordion_registration.CheckoutPhaseTwoInstance(backRepo, accordion_registrationDB)
	}
	return
}

// BackRepoAccordion_registration.CheckoutPhaseTwoInstance Checkouts staged instances of Accordion_registration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, accordion_registrationDB *Accordion_registrationDB) (Error error) {

	accordion_registration := backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr[accordion_registrationDB.ID]

	accordion_registrationDB.DecodePointers(backRepo, accordion_registration)

	return
}

func (accordion_registrationDB *Accordion_registrationDB) DecodePointers(backRepo *BackRepoStruct, accordion_registration *models.Accordion_registration) {

	// insertion point for checkout of pointer encoding
	// Accordion_high field
	accordion_registration.Accordion_high = nil
	if accordion_registrationDB.Accordion_highID.Int64 != 0 {
		accordion_registration.Accordion_high = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(accordion_registrationDB.Accordion_highID.Int64)]
	}
	// Accordion_low field
	accordion_registration.Accordion_low = nil
	if accordion_registrationDB.Accordion_lowID.Int64 != 0 {
		accordion_registration.Accordion_low = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(accordion_registrationDB.Accordion_lowID.Int64)]
	}
	return
}

// CommitAccordion_registration allows commit of a single accordion_registration (if already staged)
func (backRepo *BackRepoStruct) CommitAccordion_registration(accordion_registration *models.Accordion_registration) {
	backRepo.BackRepoAccordion_registration.CommitPhaseOneInstance(accordion_registration)
	if id, ok := backRepo.BackRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration]; ok {
		backRepo.BackRepoAccordion_registration.CommitPhaseTwoInstance(backRepo, id, accordion_registration)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAccordion_registration allows checkout of a single accordion_registration (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAccordion_registration(accordion_registration *models.Accordion_registration) {
	// check if the accordion_registration is staged
	if _, ok := backRepo.BackRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration]; ok {

		if id, ok := backRepo.BackRepoAccordion_registration.Map_Accordion_registrationPtr_Accordion_registrationDBID[accordion_registration]; ok {
			var accordion_registrationDB Accordion_registrationDB
			accordion_registrationDB.ID = id

			if err := backRepo.BackRepoAccordion_registration.db.First(&accordion_registrationDB, id).Error; err != nil {
				log.Fatalln("CheckoutAccordion_registration : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAccordion_registration.CheckoutPhaseOneInstance(&accordion_registrationDB)
			backRepo.BackRepoAccordion_registration.CheckoutPhaseTwoInstance(backRepo, &accordion_registrationDB)
		}
	}
}

// CopyBasicFieldsFromAccordion_registration
func (accordion_registrationDB *Accordion_registrationDB) CopyBasicFieldsFromAccordion_registration(accordion_registration *models.Accordion_registration) {
	// insertion point for fields commit

	accordion_registrationDB.Name_Data.String = accordion_registration.Name
	accordion_registrationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAccordion_registration_WOP
func (accordion_registrationDB *Accordion_registrationDB) CopyBasicFieldsFromAccordion_registration_WOP(accordion_registration *models.Accordion_registration_WOP) {
	// insertion point for fields commit

	accordion_registrationDB.Name_Data.String = accordion_registration.Name
	accordion_registrationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAccordion_registrationWOP
func (accordion_registrationDB *Accordion_registrationDB) CopyBasicFieldsFromAccordion_registrationWOP(accordion_registration *Accordion_registrationWOP) {
	// insertion point for fields commit

	accordion_registrationDB.Name_Data.String = accordion_registration.Name
	accordion_registrationDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAccordion_registration
func (accordion_registrationDB *Accordion_registrationDB) CopyBasicFieldsToAccordion_registration(accordion_registration *models.Accordion_registration) {
	// insertion point for checkout of basic fields (back repo to stage)
	accordion_registration.Name = accordion_registrationDB.Name_Data.String
}

// CopyBasicFieldsToAccordion_registration_WOP
func (accordion_registrationDB *Accordion_registrationDB) CopyBasicFieldsToAccordion_registration_WOP(accordion_registration *models.Accordion_registration_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	accordion_registration.Name = accordion_registrationDB.Name_Data.String
}

// CopyBasicFieldsToAccordion_registrationWOP
func (accordion_registrationDB *Accordion_registrationDB) CopyBasicFieldsToAccordion_registrationWOP(accordion_registration *Accordion_registrationWOP) {
	accordion_registration.ID = int(accordion_registrationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	accordion_registration.Name = accordion_registrationDB.Name_Data.String
}

// Backup generates a json file from a slice of all Accordion_registrationDB instances in the backrepo
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Accordion_registrationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Accordion_registrationDB, 0)
	for _, accordion_registrationDB := range backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB {
		forBackup = append(forBackup, accordion_registrationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Accordion_registration ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Accordion_registration file", err.Error())
	}
}

// Backup generates a json file from a slice of all Accordion_registrationDB instances in the backrepo
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Accordion_registrationDB, 0)
	for _, accordion_registrationDB := range backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB {
		forBackup = append(forBackup, accordion_registrationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Accordion_registration")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Accordion_registration_Fields, -1)
	for _, accordion_registrationDB := range forBackup {

		var accordion_registrationWOP Accordion_registrationWOP
		accordion_registrationDB.CopyBasicFieldsToAccordion_registrationWOP(&accordion_registrationWOP)

		row := sh.AddRow()
		row.WriteStruct(&accordion_registrationWOP, -1)
	}
}

// RestoreXL from the "Accordion_registration" sheet all Accordion_registrationDB instances
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAccordion_registrationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Accordion_registration"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAccordion_registration.rowVisitorAccordion_registration)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) rowVisitorAccordion_registration(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var accordion_registrationWOP Accordion_registrationWOP
		row.ReadStruct(&accordion_registrationWOP)

		// add the unmarshalled struct to the stage
		accordion_registrationDB := new(Accordion_registrationDB)
		accordion_registrationDB.CopyBasicFieldsFromAccordion_registrationWOP(&accordion_registrationWOP)

		accordion_registrationDB_ID_atBackupTime := accordion_registrationDB.ID
		accordion_registrationDB.ID = 0
		query := backRepoAccordion_registration.db.Create(accordion_registrationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[accordion_registrationDB.ID] = accordion_registrationDB
		BackRepoAccordion_registrationid_atBckpTime_newID[accordion_registrationDB_ID_atBackupTime] = accordion_registrationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Accordion_registrationDB.json" in dirPath that stores an array
// of Accordion_registrationDB and stores it in the database
// the map BackRepoAccordion_registrationid_atBckpTime_newID is updated accordingly
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAccordion_registrationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Accordion_registrationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Accordion_registration file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Accordion_registrationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Accordion_registrationDBID_Accordion_registrationDB
	for _, accordion_registrationDB := range forRestore {

		accordion_registrationDB_ID_atBackupTime := accordion_registrationDB.ID
		accordion_registrationDB.ID = 0
		query := backRepoAccordion_registration.db.Create(accordion_registrationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[accordion_registrationDB.ID] = accordion_registrationDB
		BackRepoAccordion_registrationid_atBckpTime_newID[accordion_registrationDB_ID_atBackupTime] = accordion_registrationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Accordion_registration file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Accordion_registration>id_atBckpTime_newID
// to compute new index
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) RestorePhaseTwo() {

	for _, accordion_registrationDB := range backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB {

		// next line of code is to avert unused variable compilation error
		_ = accordion_registrationDB

		// insertion point for reindexing pointers encoding
		// reindexing Accordion_high field
		if accordion_registrationDB.Accordion_highID.Int64 != 0 {
			accordion_registrationDB.Accordion_highID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(accordion_registrationDB.Accordion_highID.Int64)])
			accordion_registrationDB.Accordion_highID.Valid = true
		}

		// reindexing Accordion_low field
		if accordion_registrationDB.Accordion_lowID.Int64 != 0 {
			accordion_registrationDB.Accordion_lowID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(accordion_registrationDB.Accordion_lowID.Int64)])
			accordion_registrationDB.Accordion_lowID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAccordion_registration.db.Model(accordion_registrationDB).Updates(*accordion_registrationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAccordion_registration.ResetReversePointers commits all staged instances of Accordion_registration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, accordion_registration := range backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationPtr {
		backRepoAccordion_registration.ResetReversePointersInstance(backRepo, idx, accordion_registration)
	}

	return
}

func (backRepoAccordion_registration *BackRepoAccordion_registrationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, accordion_registration *models.Accordion_registration) (Error error) {

	// fetch matching accordion_registrationDB
	if accordion_registrationDB, ok := backRepoAccordion_registration.Map_Accordion_registrationDBID_Accordion_registrationDB[idx]; ok {
		_ = accordion_registrationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAccordion_registrationid_atBckpTime_newID map[uint]uint
