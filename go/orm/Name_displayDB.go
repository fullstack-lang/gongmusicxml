// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Name_display_sql sql.NullBool
var dummy_Name_display_time time.Duration
var dummy_Name_display_sort sort.Float64Slice

// Name_displayAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model name_displayAPI
type Name_displayAPI struct {
	gorm.Model

	models.Name_display_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Name_displayPointersEncoding Name_displayPointersEncoding
}

// Name_displayPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Name_displayPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Accidental_text is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Accidental_textID sql.NullInt64
}

// Name_displayDB describes a name_display in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model name_displayDB
type Name_displayDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field name_displayDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Name_displayPointersEncoding
}

// Name_displayDBs arrays name_displayDBs
// swagger:response name_displayDBsResponse
type Name_displayDBs []Name_displayDB

// Name_displayDBResponse provides response
// swagger:response name_displayDBResponse
type Name_displayDBResponse struct {
	Name_displayDB
}

// Name_displayWOP is a Name_display without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Name_displayWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Name_display_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoName_displayStruct struct {
	// stores Name_displayDB according to their gorm ID
	Map_Name_displayDBID_Name_displayDB map[uint]*Name_displayDB

	// stores Name_displayDB ID according to Name_display address
	Map_Name_displayPtr_Name_displayDBID map[*models.Name_display]uint

	// stores Name_display according to their gorm ID
	Map_Name_displayDBID_Name_displayPtr map[uint]*models.Name_display

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoName_display *BackRepoName_displayStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoName_display.stage
	return
}

func (backRepoName_display *BackRepoName_displayStruct) GetDB() *gorm.DB {
	return backRepoName_display.db
}

// GetName_displayDBFromName_displayPtr is a handy function to access the back repo instance from the stage instance
func (backRepoName_display *BackRepoName_displayStruct) GetName_displayDBFromName_displayPtr(name_display *models.Name_display) (name_displayDB *Name_displayDB) {
	id := backRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display]
	name_displayDB = backRepoName_display.Map_Name_displayDBID_Name_displayDB[id]
	return
}

// BackRepoName_display.CommitPhaseOne commits all staged instances of Name_display to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoName_display *BackRepoName_displayStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for name_display := range stage.Name_displays {
		backRepoName_display.CommitPhaseOneInstance(name_display)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, name_display := range backRepoName_display.Map_Name_displayDBID_Name_displayPtr {
		if _, ok := stage.Name_displays[name_display]; !ok {
			backRepoName_display.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoName_display.CommitDeleteInstance commits deletion of Name_display to the BackRepo
func (backRepoName_display *BackRepoName_displayStruct) CommitDeleteInstance(id uint) (Error error) {

	name_display := backRepoName_display.Map_Name_displayDBID_Name_displayPtr[id]

	// name_display is not staged anymore, remove name_displayDB
	name_displayDB := backRepoName_display.Map_Name_displayDBID_Name_displayDB[id]
	query := backRepoName_display.db.Unscoped().Delete(&name_displayDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoName_display.Map_Name_displayPtr_Name_displayDBID, name_display)
	delete(backRepoName_display.Map_Name_displayDBID_Name_displayPtr, id)
	delete(backRepoName_display.Map_Name_displayDBID_Name_displayDB, id)

	return
}

// BackRepoName_display.CommitPhaseOneInstance commits name_display staged instances of Name_display to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoName_display *BackRepoName_displayStruct) CommitPhaseOneInstance(name_display *models.Name_display) (Error error) {

	// check if the name_display is not commited yet
	if _, ok := backRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display]; ok {
		return
	}

	// initiate name_display
	var name_displayDB Name_displayDB
	name_displayDB.CopyBasicFieldsFromName_display(name_display)

	query := backRepoName_display.db.Create(&name_displayDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display] = name_displayDB.ID
	backRepoName_display.Map_Name_displayDBID_Name_displayPtr[name_displayDB.ID] = name_display
	backRepoName_display.Map_Name_displayDBID_Name_displayDB[name_displayDB.ID] = &name_displayDB

	return
}

// BackRepoName_display.CommitPhaseTwo commits all staged instances of Name_display to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoName_display *BackRepoName_displayStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, name_display := range backRepoName_display.Map_Name_displayDBID_Name_displayPtr {
		backRepoName_display.CommitPhaseTwoInstance(backRepo, idx, name_display)
	}

	return
}

// BackRepoName_display.CommitPhaseTwoInstance commits {{structname }} of models.Name_display to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoName_display *BackRepoName_displayStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, name_display *models.Name_display) (Error error) {

	// fetch matching name_displayDB
	if name_displayDB, ok := backRepoName_display.Map_Name_displayDBID_Name_displayDB[idx]; ok {

		name_displayDB.CopyBasicFieldsFromName_display(name_display)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value name_display.Accidental_text translates to updating the name_display.Accidental_textID
		name_displayDB.Accidental_textID.Valid = true // allow for a 0 value (nil association)
		if name_display.Accidental_text != nil {
			if Accidental_textId, ok := backRepo.BackRepoAccidental_text.Map_Accidental_textPtr_Accidental_textDBID[name_display.Accidental_text]; ok {
				name_displayDB.Accidental_textID.Int64 = int64(Accidental_textId)
				name_displayDB.Accidental_textID.Valid = true
			}
		} else {
			name_displayDB.Accidental_textID.Int64 = 0
			name_displayDB.Accidental_textID.Valid = true
		}

		query := backRepoName_display.db.Save(&name_displayDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Name_display intance %s", name_display.Name))
		return err
	}

	return
}

// BackRepoName_display.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoName_display *BackRepoName_displayStruct) CheckoutPhaseOne() (Error error) {

	name_displayDBArray := make([]Name_displayDB, 0)
	query := backRepoName_display.db.Find(&name_displayDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	name_displayInstancesToBeRemovedFromTheStage := make(map[*models.Name_display]any)
	for key, value := range backRepoName_display.stage.Name_displays {
		name_displayInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, name_displayDB := range name_displayDBArray {
		backRepoName_display.CheckoutPhaseOneInstance(&name_displayDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		name_display, ok := backRepoName_display.Map_Name_displayDBID_Name_displayPtr[name_displayDB.ID]
		if ok {
			delete(name_displayInstancesToBeRemovedFromTheStage, name_display)
		}
	}

	// remove from stage and back repo's 3 maps all name_displays that are not in the checkout
	for name_display := range name_displayInstancesToBeRemovedFromTheStage {
		name_display.Unstage(backRepoName_display.GetStage())

		// remove instance from the back repo 3 maps
		name_displayID := backRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display]
		delete(backRepoName_display.Map_Name_displayPtr_Name_displayDBID, name_display)
		delete(backRepoName_display.Map_Name_displayDBID_Name_displayDB, name_displayID)
		delete(backRepoName_display.Map_Name_displayDBID_Name_displayPtr, name_displayID)
	}

	return
}

// CheckoutPhaseOneInstance takes a name_displayDB that has been found in the DB, updates the backRepo and stages the
// models version of the name_displayDB
func (backRepoName_display *BackRepoName_displayStruct) CheckoutPhaseOneInstance(name_displayDB *Name_displayDB) (Error error) {

	name_display, ok := backRepoName_display.Map_Name_displayDBID_Name_displayPtr[name_displayDB.ID]
	if !ok {
		name_display = new(models.Name_display)

		backRepoName_display.Map_Name_displayDBID_Name_displayPtr[name_displayDB.ID] = name_display
		backRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display] = name_displayDB.ID

		// append model store with the new element
		name_display.Name = name_displayDB.Name_Data.String
		name_display.Stage(backRepoName_display.GetStage())
	}
	name_displayDB.CopyBasicFieldsToName_display(name_display)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	name_display.Stage(backRepoName_display.GetStage())

	// preserve pointer to name_displayDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Name_displayDBID_Name_displayDB)[name_displayDB hold variable pointers
	name_displayDB_Data := *name_displayDB
	preservedPtrToName_display := &name_displayDB_Data
	backRepoName_display.Map_Name_displayDBID_Name_displayDB[name_displayDB.ID] = preservedPtrToName_display

	return
}

// BackRepoName_display.CheckoutPhaseTwo Checkouts all staged instances of Name_display to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoName_display *BackRepoName_displayStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, name_displayDB := range backRepoName_display.Map_Name_displayDBID_Name_displayDB {
		backRepoName_display.CheckoutPhaseTwoInstance(backRepo, name_displayDB)
	}
	return
}

// BackRepoName_display.CheckoutPhaseTwoInstance Checkouts staged instances of Name_display to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoName_display *BackRepoName_displayStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, name_displayDB *Name_displayDB) (Error error) {

	name_display := backRepoName_display.Map_Name_displayDBID_Name_displayPtr[name_displayDB.ID]

	name_displayDB.DecodePointers(backRepo, name_display)

	return
}

func (name_displayDB *Name_displayDB) DecodePointers(backRepo *BackRepoStruct, name_display *models.Name_display) {

	// insertion point for checkout of pointer encoding
	// Accidental_text field
	name_display.Accidental_text = nil
	if name_displayDB.Accidental_textID.Int64 != 0 {
		name_display.Accidental_text = backRepo.BackRepoAccidental_text.Map_Accidental_textDBID_Accidental_textPtr[uint(name_displayDB.Accidental_textID.Int64)]
	}
	return
}

// CommitName_display allows commit of a single name_display (if already staged)
func (backRepo *BackRepoStruct) CommitName_display(name_display *models.Name_display) {
	backRepo.BackRepoName_display.CommitPhaseOneInstance(name_display)
	if id, ok := backRepo.BackRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display]; ok {
		backRepo.BackRepoName_display.CommitPhaseTwoInstance(backRepo, id, name_display)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitName_display allows checkout of a single name_display (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutName_display(name_display *models.Name_display) {
	// check if the name_display is staged
	if _, ok := backRepo.BackRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display]; ok {

		if id, ok := backRepo.BackRepoName_display.Map_Name_displayPtr_Name_displayDBID[name_display]; ok {
			var name_displayDB Name_displayDB
			name_displayDB.ID = id

			if err := backRepo.BackRepoName_display.db.First(&name_displayDB, id).Error; err != nil {
				log.Fatalln("CheckoutName_display : Problem with getting object with id:", id)
			}
			backRepo.BackRepoName_display.CheckoutPhaseOneInstance(&name_displayDB)
			backRepo.BackRepoName_display.CheckoutPhaseTwoInstance(backRepo, &name_displayDB)
		}
	}
}

// CopyBasicFieldsFromName_display
func (name_displayDB *Name_displayDB) CopyBasicFieldsFromName_display(name_display *models.Name_display) {
	// insertion point for fields commit

	name_displayDB.Name_Data.String = name_display.Name
	name_displayDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromName_display_WOP
func (name_displayDB *Name_displayDB) CopyBasicFieldsFromName_display_WOP(name_display *models.Name_display_WOP) {
	// insertion point for fields commit

	name_displayDB.Name_Data.String = name_display.Name
	name_displayDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromName_displayWOP
func (name_displayDB *Name_displayDB) CopyBasicFieldsFromName_displayWOP(name_display *Name_displayWOP) {
	// insertion point for fields commit

	name_displayDB.Name_Data.String = name_display.Name
	name_displayDB.Name_Data.Valid = true
}

// CopyBasicFieldsToName_display
func (name_displayDB *Name_displayDB) CopyBasicFieldsToName_display(name_display *models.Name_display) {
	// insertion point for checkout of basic fields (back repo to stage)
	name_display.Name = name_displayDB.Name_Data.String
}

// CopyBasicFieldsToName_display_WOP
func (name_displayDB *Name_displayDB) CopyBasicFieldsToName_display_WOP(name_display *models.Name_display_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	name_display.Name = name_displayDB.Name_Data.String
}

// CopyBasicFieldsToName_displayWOP
func (name_displayDB *Name_displayDB) CopyBasicFieldsToName_displayWOP(name_display *Name_displayWOP) {
	name_display.ID = int(name_displayDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	name_display.Name = name_displayDB.Name_Data.String
}

// Backup generates a json file from a slice of all Name_displayDB instances in the backrepo
func (backRepoName_display *BackRepoName_displayStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Name_displayDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Name_displayDB, 0)
	for _, name_displayDB := range backRepoName_display.Map_Name_displayDBID_Name_displayDB {
		forBackup = append(forBackup, name_displayDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Name_display ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Name_display file", err.Error())
	}
}

// Backup generates a json file from a slice of all Name_displayDB instances in the backrepo
func (backRepoName_display *BackRepoName_displayStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Name_displayDB, 0)
	for _, name_displayDB := range backRepoName_display.Map_Name_displayDBID_Name_displayDB {
		forBackup = append(forBackup, name_displayDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Name_display")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Name_display_Fields, -1)
	for _, name_displayDB := range forBackup {

		var name_displayWOP Name_displayWOP
		name_displayDB.CopyBasicFieldsToName_displayWOP(&name_displayWOP)

		row := sh.AddRow()
		row.WriteStruct(&name_displayWOP, -1)
	}
}

// RestoreXL from the "Name_display" sheet all Name_displayDB instances
func (backRepoName_display *BackRepoName_displayStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoName_displayid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Name_display"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoName_display.rowVisitorName_display)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoName_display *BackRepoName_displayStruct) rowVisitorName_display(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var name_displayWOP Name_displayWOP
		row.ReadStruct(&name_displayWOP)

		// add the unmarshalled struct to the stage
		name_displayDB := new(Name_displayDB)
		name_displayDB.CopyBasicFieldsFromName_displayWOP(&name_displayWOP)

		name_displayDB_ID_atBackupTime := name_displayDB.ID
		name_displayDB.ID = 0
		query := backRepoName_display.db.Create(name_displayDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoName_display.Map_Name_displayDBID_Name_displayDB[name_displayDB.ID] = name_displayDB
		BackRepoName_displayid_atBckpTime_newID[name_displayDB_ID_atBackupTime] = name_displayDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Name_displayDB.json" in dirPath that stores an array
// of Name_displayDB and stores it in the database
// the map BackRepoName_displayid_atBckpTime_newID is updated accordingly
func (backRepoName_display *BackRepoName_displayStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoName_displayid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Name_displayDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Name_display file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Name_displayDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Name_displayDBID_Name_displayDB
	for _, name_displayDB := range forRestore {

		name_displayDB_ID_atBackupTime := name_displayDB.ID
		name_displayDB.ID = 0
		query := backRepoName_display.db.Create(name_displayDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoName_display.Map_Name_displayDBID_Name_displayDB[name_displayDB.ID] = name_displayDB
		BackRepoName_displayid_atBckpTime_newID[name_displayDB_ID_atBackupTime] = name_displayDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Name_display file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Name_display>id_atBckpTime_newID
// to compute new index
func (backRepoName_display *BackRepoName_displayStruct) RestorePhaseTwo() {

	for _, name_displayDB := range backRepoName_display.Map_Name_displayDBID_Name_displayDB {

		// next line of code is to avert unused variable compilation error
		_ = name_displayDB

		// insertion point for reindexing pointers encoding
		// reindexing Accidental_text field
		if name_displayDB.Accidental_textID.Int64 != 0 {
			name_displayDB.Accidental_textID.Int64 = int64(BackRepoAccidental_textid_atBckpTime_newID[uint(name_displayDB.Accidental_textID.Int64)])
			name_displayDB.Accidental_textID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoName_display.db.Model(name_displayDB).Updates(*name_displayDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoName_display.ResetReversePointers commits all staged instances of Name_display to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoName_display *BackRepoName_displayStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, name_display := range backRepoName_display.Map_Name_displayDBID_Name_displayPtr {
		backRepoName_display.ResetReversePointersInstance(backRepo, idx, name_display)
	}

	return
}

func (backRepoName_display *BackRepoName_displayStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, name_display *models.Name_display) (Error error) {

	// fetch matching name_displayDB
	if name_displayDB, ok := backRepoName_display.Map_Name_displayDBID_Name_displayDB[idx]; ok {
		_ = name_displayDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoName_displayid_atBckpTime_newID map[uint]uint
