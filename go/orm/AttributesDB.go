// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Attributes_sql sql.NullBool
var dummy_Attributes_time time.Duration
var dummy_Attributes_sort sort.Float64Slice

// AttributesAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributesAPI
type AttributesAPI struct {
	gorm.Model

	models.Attributes_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AttributesPointersEncoding AttributesPointersEncoding
}

// AttributesPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AttributesPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Key is a slice of pointers to another Struct (optional or 0..1)
	Key IntSlice `gorm:"type:TEXT"`

	// field Part_symbol is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Part_symbolID sql.NullInt64

	// field Clef is a slice of pointers to another Struct (optional or 0..1)
	Clef IntSlice `gorm:"type:TEXT"`

	// field Staff_details is a slice of pointers to another Struct (optional or 0..1)
	Staff_details IntSlice `gorm:"type:TEXT"`

	// field Measure_style is a slice of pointers to another Struct (optional or 0..1)
	Measure_style IntSlice `gorm:"type:TEXT"`

	// field Transpose is a slice of pointers to another Struct (optional or 0..1)
	Transpose IntSlice `gorm:"type:TEXT"`

	// field For_part is a slice of pointers to another Struct (optional or 0..1)
	For_part IntSlice `gorm:"type:TEXT"`
}

// AttributesDB describes a attributes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributesDB
type AttributesDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AttributesPointersEncoding
}

// AttributesDBs arrays attributesDBs
// swagger:response attributesDBsResponse
type AttributesDBs []AttributesDB

// AttributesDBResponse provides response
// swagger:response attributesDBResponse
type AttributesDBResponse struct {
	AttributesDB
}

// AttributesWOP is a Attributes without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AttributesWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Attributes_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAttributesStruct struct {
	// stores AttributesDB according to their gorm ID
	Map_AttributesDBID_AttributesDB map[uint]*AttributesDB

	// stores AttributesDB ID according to Attributes address
	Map_AttributesPtr_AttributesDBID map[*models.Attributes]uint

	// stores Attributes according to their gorm ID
	Map_AttributesDBID_AttributesPtr map[uint]*models.Attributes

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAttributes *BackRepoAttributesStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAttributes.stage
	return
}

func (backRepoAttributes *BackRepoAttributesStruct) GetDB() *gorm.DB {
	return backRepoAttributes.db
}

// GetAttributesDBFromAttributesPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAttributes *BackRepoAttributesStruct) GetAttributesDBFromAttributesPtr(attributes *models.Attributes) (attributesDB *AttributesDB) {
	id := backRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes]
	attributesDB = backRepoAttributes.Map_AttributesDBID_AttributesDB[id]
	return
}

// BackRepoAttributes.CommitPhaseOne commits all staged instances of Attributes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttributes *BackRepoAttributesStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributes := range stage.Attributess {
		backRepoAttributes.CommitPhaseOneInstance(attributes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributes := range backRepoAttributes.Map_AttributesDBID_AttributesPtr {
		if _, ok := stage.Attributess[attributes]; !ok {
			backRepoAttributes.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAttributes.CommitDeleteInstance commits deletion of Attributes to the BackRepo
func (backRepoAttributes *BackRepoAttributesStruct) CommitDeleteInstance(id uint) (Error error) {

	attributes := backRepoAttributes.Map_AttributesDBID_AttributesPtr[id]

	// attributes is not staged anymore, remove attributesDB
	attributesDB := backRepoAttributes.Map_AttributesDBID_AttributesDB[id]
	query := backRepoAttributes.db.Unscoped().Delete(&attributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAttributes.Map_AttributesPtr_AttributesDBID, attributes)
	delete(backRepoAttributes.Map_AttributesDBID_AttributesPtr, id)
	delete(backRepoAttributes.Map_AttributesDBID_AttributesDB, id)

	return
}

// BackRepoAttributes.CommitPhaseOneInstance commits attributes staged instances of Attributes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttributes *BackRepoAttributesStruct) CommitPhaseOneInstance(attributes *models.Attributes) (Error error) {

	// check if the attributes is not commited yet
	if _, ok := backRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes]; ok {
		return
	}

	// initiate attributes
	var attributesDB AttributesDB
	attributesDB.CopyBasicFieldsFromAttributes(attributes)

	query := backRepoAttributes.db.Create(&attributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes] = attributesDB.ID
	backRepoAttributes.Map_AttributesDBID_AttributesPtr[attributesDB.ID] = attributes
	backRepoAttributes.Map_AttributesDBID_AttributesDB[attributesDB.ID] = &attributesDB

	return
}

// BackRepoAttributes.CommitPhaseTwo commits all staged instances of Attributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributes *BackRepoAttributesStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributes := range backRepoAttributes.Map_AttributesDBID_AttributesPtr {
		backRepoAttributes.CommitPhaseTwoInstance(backRepo, idx, attributes)
	}

	return
}

// BackRepoAttributes.CommitPhaseTwoInstance commits {{structname }} of models.Attributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributes *BackRepoAttributesStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributes *models.Attributes) (Error error) {

	// fetch matching attributesDB
	if attributesDB, ok := backRepoAttributes.Map_AttributesDBID_AttributesDB[idx]; ok {

		attributesDB.CopyBasicFieldsFromAttributes(attributes)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		attributesDB.AttributesPointersEncoding.Key = make([]int, 0)
		// 2. encode
		for _, keyAssocEnd := range attributes.Key {
			keyAssocEnd_DB :=
				backRepo.BackRepoKey.GetKeyDBFromKeyPtr(keyAssocEnd)
			
			// the stage might be inconsistant, meaning that the keyAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if keyAssocEnd_DB == nil {
				continue
			}
			
			attributesDB.AttributesPointersEncoding.Key =
				append(attributesDB.AttributesPointersEncoding.Key, int(keyAssocEnd_DB.ID))
		}

		// commit pointer value attributes.Part_symbol translates to updating the attributes.Part_symbolID
		attributesDB.Part_symbolID.Valid = true // allow for a 0 value (nil association)
		if attributes.Part_symbol != nil {
			if Part_symbolId, ok := backRepo.BackRepoPart_symbol.Map_Part_symbolPtr_Part_symbolDBID[attributes.Part_symbol]; ok {
				attributesDB.Part_symbolID.Int64 = int64(Part_symbolId)
				attributesDB.Part_symbolID.Valid = true
			}
		} else {
			attributesDB.Part_symbolID.Int64 = 0
			attributesDB.Part_symbolID.Valid = true
		}

		// 1. reset
		attributesDB.AttributesPointersEncoding.Clef = make([]int, 0)
		// 2. encode
		for _, clefAssocEnd := range attributes.Clef {
			clefAssocEnd_DB :=
				backRepo.BackRepoClef.GetClefDBFromClefPtr(clefAssocEnd)
			
			// the stage might be inconsistant, meaning that the clefAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if clefAssocEnd_DB == nil {
				continue
			}
			
			attributesDB.AttributesPointersEncoding.Clef =
				append(attributesDB.AttributesPointersEncoding.Clef, int(clefAssocEnd_DB.ID))
		}

		// 1. reset
		attributesDB.AttributesPointersEncoding.Staff_details = make([]int, 0)
		// 2. encode
		for _, staff_detailsAssocEnd := range attributes.Staff_details {
			staff_detailsAssocEnd_DB :=
				backRepo.BackRepoStaff_details.GetStaff_detailsDBFromStaff_detailsPtr(staff_detailsAssocEnd)
			
			// the stage might be inconsistant, meaning that the staff_detailsAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if staff_detailsAssocEnd_DB == nil {
				continue
			}
			
			attributesDB.AttributesPointersEncoding.Staff_details =
				append(attributesDB.AttributesPointersEncoding.Staff_details, int(staff_detailsAssocEnd_DB.ID))
		}

		// 1. reset
		attributesDB.AttributesPointersEncoding.Measure_style = make([]int, 0)
		// 2. encode
		for _, measure_styleAssocEnd := range attributes.Measure_style {
			measure_styleAssocEnd_DB :=
				backRepo.BackRepoMeasure_style.GetMeasure_styleDBFromMeasure_stylePtr(measure_styleAssocEnd)
			
			// the stage might be inconsistant, meaning that the measure_styleAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if measure_styleAssocEnd_DB == nil {
				continue
			}
			
			attributesDB.AttributesPointersEncoding.Measure_style =
				append(attributesDB.AttributesPointersEncoding.Measure_style, int(measure_styleAssocEnd_DB.ID))
		}

		// 1. reset
		attributesDB.AttributesPointersEncoding.Transpose = make([]int, 0)
		// 2. encode
		for _, transposeAssocEnd := range attributes.Transpose {
			transposeAssocEnd_DB :=
				backRepo.BackRepoTranspose.GetTransposeDBFromTransposePtr(transposeAssocEnd)
			
			// the stage might be inconsistant, meaning that the transposeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if transposeAssocEnd_DB == nil {
				continue
			}
			
			attributesDB.AttributesPointersEncoding.Transpose =
				append(attributesDB.AttributesPointersEncoding.Transpose, int(transposeAssocEnd_DB.ID))
		}

		// 1. reset
		attributesDB.AttributesPointersEncoding.For_part = make([]int, 0)
		// 2. encode
		for _, for_partAssocEnd := range attributes.For_part {
			for_partAssocEnd_DB :=
				backRepo.BackRepoFor_part.GetFor_partDBFromFor_partPtr(for_partAssocEnd)
			
			// the stage might be inconsistant, meaning that the for_partAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if for_partAssocEnd_DB == nil {
				continue
			}
			
			attributesDB.AttributesPointersEncoding.For_part =
				append(attributesDB.AttributesPointersEncoding.For_part, int(for_partAssocEnd_DB.ID))
		}

		query := backRepoAttributes.db.Save(&attributesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Attributes intance %s", attributes.Name))
		return err
	}

	return
}

// BackRepoAttributes.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAttributes *BackRepoAttributesStruct) CheckoutPhaseOne() (Error error) {

	attributesDBArray := make([]AttributesDB, 0)
	query := backRepoAttributes.db.Find(&attributesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributesInstancesToBeRemovedFromTheStage := make(map[*models.Attributes]any)
	for key, value := range backRepoAttributes.stage.Attributess {
		attributesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributesDB := range attributesDBArray {
		backRepoAttributes.CheckoutPhaseOneInstance(&attributesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributes, ok := backRepoAttributes.Map_AttributesDBID_AttributesPtr[attributesDB.ID]
		if ok {
			delete(attributesInstancesToBeRemovedFromTheStage, attributes)
		}
	}

	// remove from stage and back repo's 3 maps all attributess that are not in the checkout
	for attributes := range attributesInstancesToBeRemovedFromTheStage {
		attributes.Unstage(backRepoAttributes.GetStage())

		// remove instance from the back repo 3 maps
		attributesID := backRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes]
		delete(backRepoAttributes.Map_AttributesPtr_AttributesDBID, attributes)
		delete(backRepoAttributes.Map_AttributesDBID_AttributesDB, attributesID)
		delete(backRepoAttributes.Map_AttributesDBID_AttributesPtr, attributesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributesDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributesDB
func (backRepoAttributes *BackRepoAttributesStruct) CheckoutPhaseOneInstance(attributesDB *AttributesDB) (Error error) {

	attributes, ok := backRepoAttributes.Map_AttributesDBID_AttributesPtr[attributesDB.ID]
	if !ok {
		attributes = new(models.Attributes)

		backRepoAttributes.Map_AttributesDBID_AttributesPtr[attributesDB.ID] = attributes
		backRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes] = attributesDB.ID

		// append model store with the new element
		attributes.Name = attributesDB.Name_Data.String
		attributes.Stage(backRepoAttributes.GetStage())
	}
	attributesDB.CopyBasicFieldsToAttributes(attributes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributes.Stage(backRepoAttributes.GetStage())

	// preserve pointer to attributesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AttributesDBID_AttributesDB)[attributesDB hold variable pointers
	attributesDB_Data := *attributesDB
	preservedPtrToAttributes := &attributesDB_Data
	backRepoAttributes.Map_AttributesDBID_AttributesDB[attributesDB.ID] = preservedPtrToAttributes

	return
}

// BackRepoAttributes.CheckoutPhaseTwo Checkouts all staged instances of Attributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributes *BackRepoAttributesStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributesDB := range backRepoAttributes.Map_AttributesDBID_AttributesDB {
		backRepoAttributes.CheckoutPhaseTwoInstance(backRepo, attributesDB)
	}
	return
}

// BackRepoAttributes.CheckoutPhaseTwoInstance Checkouts staged instances of Attributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributes *BackRepoAttributesStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributesDB *AttributesDB) (Error error) {

	attributes := backRepoAttributes.Map_AttributesDBID_AttributesPtr[attributesDB.ID]

	attributesDB.DecodePointers(backRepo, attributes)

	return
}

func (attributesDB *AttributesDB) DecodePointers(backRepo *BackRepoStruct, attributes *models.Attributes) {

	// insertion point for checkout of pointer encoding
	// This loop redeem attributes.Key in the stage from the encode in the back repo
	// It parses all KeyDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributes.Key = attributes.Key[:0]
	for _, _Keyid := range attributesDB.AttributesPointersEncoding.Key {
		attributes.Key = append(attributes.Key, backRepo.BackRepoKey.Map_KeyDBID_KeyPtr[uint(_Keyid)])
	}

	// Part_symbol field
	attributes.Part_symbol = nil
	if attributesDB.Part_symbolID.Int64 != 0 {
		attributes.Part_symbol = backRepo.BackRepoPart_symbol.Map_Part_symbolDBID_Part_symbolPtr[uint(attributesDB.Part_symbolID.Int64)]
	}
	// This loop redeem attributes.Clef in the stage from the encode in the back repo
	// It parses all ClefDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributes.Clef = attributes.Clef[:0]
	for _, _Clefid := range attributesDB.AttributesPointersEncoding.Clef {
		attributes.Clef = append(attributes.Clef, backRepo.BackRepoClef.Map_ClefDBID_ClefPtr[uint(_Clefid)])
	}

	// This loop redeem attributes.Staff_details in the stage from the encode in the back repo
	// It parses all Staff_detailsDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributes.Staff_details = attributes.Staff_details[:0]
	for _, _Staff_detailsid := range attributesDB.AttributesPointersEncoding.Staff_details {
		attributes.Staff_details = append(attributes.Staff_details, backRepo.BackRepoStaff_details.Map_Staff_detailsDBID_Staff_detailsPtr[uint(_Staff_detailsid)])
	}

	// This loop redeem attributes.Measure_style in the stage from the encode in the back repo
	// It parses all Measure_styleDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributes.Measure_style = attributes.Measure_style[:0]
	for _, _Measure_styleid := range attributesDB.AttributesPointersEncoding.Measure_style {
		attributes.Measure_style = append(attributes.Measure_style, backRepo.BackRepoMeasure_style.Map_Measure_styleDBID_Measure_stylePtr[uint(_Measure_styleid)])
	}

	// This loop redeem attributes.Transpose in the stage from the encode in the back repo
	// It parses all TransposeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributes.Transpose = attributes.Transpose[:0]
	for _, _Transposeid := range attributesDB.AttributesPointersEncoding.Transpose {
		attributes.Transpose = append(attributes.Transpose, backRepo.BackRepoTranspose.Map_TransposeDBID_TransposePtr[uint(_Transposeid)])
	}

	// This loop redeem attributes.For_part in the stage from the encode in the back repo
	// It parses all For_partDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributes.For_part = attributes.For_part[:0]
	for _, _For_partid := range attributesDB.AttributesPointersEncoding.For_part {
		attributes.For_part = append(attributes.For_part, backRepo.BackRepoFor_part.Map_For_partDBID_For_partPtr[uint(_For_partid)])
	}

	return
}

// CommitAttributes allows commit of a single attributes (if already staged)
func (backRepo *BackRepoStruct) CommitAttributes(attributes *models.Attributes) {
	backRepo.BackRepoAttributes.CommitPhaseOneInstance(attributes)
	if id, ok := backRepo.BackRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes]; ok {
		backRepo.BackRepoAttributes.CommitPhaseTwoInstance(backRepo, id, attributes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAttributes allows checkout of a single attributes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAttributes(attributes *models.Attributes) {
	// check if the attributes is staged
	if _, ok := backRepo.BackRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes]; ok {

		if id, ok := backRepo.BackRepoAttributes.Map_AttributesPtr_AttributesDBID[attributes]; ok {
			var attributesDB AttributesDB
			attributesDB.ID = id

			if err := backRepo.BackRepoAttributes.db.First(&attributesDB, id).Error; err != nil {
				log.Fatalln("CheckoutAttributes : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAttributes.CheckoutPhaseOneInstance(&attributesDB)
			backRepo.BackRepoAttributes.CheckoutPhaseTwoInstance(backRepo, &attributesDB)
		}
	}
}

// CopyBasicFieldsFromAttributes
func (attributesDB *AttributesDB) CopyBasicFieldsFromAttributes(attributes *models.Attributes) {
	// insertion point for fields commit

	attributesDB.Name_Data.String = attributes.Name
	attributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAttributes_WOP
func (attributesDB *AttributesDB) CopyBasicFieldsFromAttributes_WOP(attributes *models.Attributes_WOP) {
	// insertion point for fields commit

	attributesDB.Name_Data.String = attributes.Name
	attributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAttributesWOP
func (attributesDB *AttributesDB) CopyBasicFieldsFromAttributesWOP(attributes *AttributesWOP) {
	// insertion point for fields commit

	attributesDB.Name_Data.String = attributes.Name
	attributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAttributes
func (attributesDB *AttributesDB) CopyBasicFieldsToAttributes(attributes *models.Attributes) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributes.Name = attributesDB.Name_Data.String
}

// CopyBasicFieldsToAttributes_WOP
func (attributesDB *AttributesDB) CopyBasicFieldsToAttributes_WOP(attributes *models.Attributes_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributes.Name = attributesDB.Name_Data.String
}

// CopyBasicFieldsToAttributesWOP
func (attributesDB *AttributesDB) CopyBasicFieldsToAttributesWOP(attributes *AttributesWOP) {
	attributes.ID = int(attributesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributes.Name = attributesDB.Name_Data.String
}

// Backup generates a json file from a slice of all AttributesDB instances in the backrepo
func (backRepoAttributes *BackRepoAttributesStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AttributesDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributesDB, 0)
	for _, attributesDB := range backRepoAttributes.Map_AttributesDBID_AttributesDB {
		forBackup = append(forBackup, attributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Attributes ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Attributes file", err.Error())
	}
}

// Backup generates a json file from a slice of all AttributesDB instances in the backrepo
func (backRepoAttributes *BackRepoAttributesStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributesDB, 0)
	for _, attributesDB := range backRepoAttributes.Map_AttributesDBID_AttributesDB {
		forBackup = append(forBackup, attributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Attributes")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Attributes_Fields, -1)
	for _, attributesDB := range forBackup {

		var attributesWOP AttributesWOP
		attributesDB.CopyBasicFieldsToAttributesWOP(&attributesWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributesWOP, -1)
	}
}

// RestoreXL from the "Attributes" sheet all AttributesDB instances
func (backRepoAttributes *BackRepoAttributesStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAttributesid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Attributes"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAttributes.rowVisitorAttributes)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAttributes *BackRepoAttributesStruct) rowVisitorAttributes(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributesWOP AttributesWOP
		row.ReadStruct(&attributesWOP)

		// add the unmarshalled struct to the stage
		attributesDB := new(AttributesDB)
		attributesDB.CopyBasicFieldsFromAttributesWOP(&attributesWOP)

		attributesDB_ID_atBackupTime := attributesDB.ID
		attributesDB.ID = 0
		query := backRepoAttributes.db.Create(attributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAttributes.Map_AttributesDBID_AttributesDB[attributesDB.ID] = attributesDB
		BackRepoAttributesid_atBckpTime_newID[attributesDB_ID_atBackupTime] = attributesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AttributesDB.json" in dirPath that stores an array
// of AttributesDB and stores it in the database
// the map BackRepoAttributesid_atBckpTime_newID is updated accordingly
func (backRepoAttributes *BackRepoAttributesStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAttributesid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AttributesDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Attributes file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AttributesDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AttributesDBID_AttributesDB
	for _, attributesDB := range forRestore {

		attributesDB_ID_atBackupTime := attributesDB.ID
		attributesDB.ID = 0
		query := backRepoAttributes.db.Create(attributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAttributes.Map_AttributesDBID_AttributesDB[attributesDB.ID] = attributesDB
		BackRepoAttributesid_atBckpTime_newID[attributesDB_ID_atBackupTime] = attributesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Attributes file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Attributes>id_atBckpTime_newID
// to compute new index
func (backRepoAttributes *BackRepoAttributesStruct) RestorePhaseTwo() {

	for _, attributesDB := range backRepoAttributes.Map_AttributesDBID_AttributesDB {

		// next line of code is to avert unused variable compilation error
		_ = attributesDB

		// insertion point for reindexing pointers encoding
		// reindexing Part_symbol field
		if attributesDB.Part_symbolID.Int64 != 0 {
			attributesDB.Part_symbolID.Int64 = int64(BackRepoPart_symbolid_atBckpTime_newID[uint(attributesDB.Part_symbolID.Int64)])
			attributesDB.Part_symbolID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAttributes.db.Model(attributesDB).Updates(*attributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAttributes.ResetReversePointers commits all staged instances of Attributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributes *BackRepoAttributesStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributes := range backRepoAttributes.Map_AttributesDBID_AttributesPtr {
		backRepoAttributes.ResetReversePointersInstance(backRepo, idx, attributes)
	}

	return
}

func (backRepoAttributes *BackRepoAttributesStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributes *models.Attributes) (Error error) {

	// fetch matching attributesDB
	if attributesDB, ok := backRepoAttributes.Map_AttributesDBID_AttributesDB[idx]; ok {
		_ = attributesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAttributesid_atBckpTime_newID map[uint]uint
