// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Metronome_sql sql.NullBool
var dummy_Metronome_time time.Duration
var dummy_Metronome_sort sort.Float64Slice

// MetronomeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model metronomeAPI
type MetronomeAPI struct {
	gorm.Model

	models.Metronome_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MetronomePointersEncoding MetronomePointersEncoding
}

// MetronomePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MetronomePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// MetronomeDB describes a metronome in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model metronomeDB
type MetronomeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field metronomeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MetronomePointersEncoding
}

// MetronomeDBs arrays metronomeDBs
// swagger:response metronomeDBsResponse
type MetronomeDBs []MetronomeDB

// MetronomeDBResponse provides response
// swagger:response metronomeDBResponse
type MetronomeDBResponse struct {
	MetronomeDB
}

// MetronomeWOP is a Metronome without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MetronomeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Metronome_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMetronomeStruct struct {
	// stores MetronomeDB according to their gorm ID
	Map_MetronomeDBID_MetronomeDB map[uint]*MetronomeDB

	// stores MetronomeDB ID according to Metronome address
	Map_MetronomePtr_MetronomeDBID map[*models.Metronome]uint

	// stores Metronome according to their gorm ID
	Map_MetronomeDBID_MetronomePtr map[uint]*models.Metronome

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMetronome *BackRepoMetronomeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMetronome.stage
	return
}

func (backRepoMetronome *BackRepoMetronomeStruct) GetDB() *gorm.DB {
	return backRepoMetronome.db
}

// GetMetronomeDBFromMetronomePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMetronome *BackRepoMetronomeStruct) GetMetronomeDBFromMetronomePtr(metronome *models.Metronome) (metronomeDB *MetronomeDB) {
	id := backRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome]
	metronomeDB = backRepoMetronome.Map_MetronomeDBID_MetronomeDB[id]
	return
}

// BackRepoMetronome.CommitPhaseOne commits all staged instances of Metronome to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome *BackRepoMetronomeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for metronome := range stage.Metronomes {
		backRepoMetronome.CommitPhaseOneInstance(metronome)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, metronome := range backRepoMetronome.Map_MetronomeDBID_MetronomePtr {
		if _, ok := stage.Metronomes[metronome]; !ok {
			backRepoMetronome.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMetronome.CommitDeleteInstance commits deletion of Metronome to the BackRepo
func (backRepoMetronome *BackRepoMetronomeStruct) CommitDeleteInstance(id uint) (Error error) {

	metronome := backRepoMetronome.Map_MetronomeDBID_MetronomePtr[id]

	// metronome is not staged anymore, remove metronomeDB
	metronomeDB := backRepoMetronome.Map_MetronomeDBID_MetronomeDB[id]
	query := backRepoMetronome.db.Unscoped().Delete(&metronomeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMetronome.Map_MetronomePtr_MetronomeDBID, metronome)
	delete(backRepoMetronome.Map_MetronomeDBID_MetronomePtr, id)
	delete(backRepoMetronome.Map_MetronomeDBID_MetronomeDB, id)

	return
}

// BackRepoMetronome.CommitPhaseOneInstance commits metronome staged instances of Metronome to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome *BackRepoMetronomeStruct) CommitPhaseOneInstance(metronome *models.Metronome) (Error error) {

	// check if the metronome is not commited yet
	if _, ok := backRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome]; ok {
		return
	}

	// initiate metronome
	var metronomeDB MetronomeDB
	metronomeDB.CopyBasicFieldsFromMetronome(metronome)

	query := backRepoMetronome.db.Create(&metronomeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome] = metronomeDB.ID
	backRepoMetronome.Map_MetronomeDBID_MetronomePtr[metronomeDB.ID] = metronome
	backRepoMetronome.Map_MetronomeDBID_MetronomeDB[metronomeDB.ID] = &metronomeDB

	return
}

// BackRepoMetronome.CommitPhaseTwo commits all staged instances of Metronome to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome *BackRepoMetronomeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome := range backRepoMetronome.Map_MetronomeDBID_MetronomePtr {
		backRepoMetronome.CommitPhaseTwoInstance(backRepo, idx, metronome)
	}

	return
}

// BackRepoMetronome.CommitPhaseTwoInstance commits {{structname }} of models.Metronome to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome *BackRepoMetronomeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, metronome *models.Metronome) (Error error) {

	// fetch matching metronomeDB
	if metronomeDB, ok := backRepoMetronome.Map_MetronomeDBID_MetronomeDB[idx]; ok {

		metronomeDB.CopyBasicFieldsFromMetronome(metronome)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMetronome.db.Save(&metronomeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Metronome intance %s", metronome.Name))
		return err
	}

	return
}

// BackRepoMetronome.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMetronome *BackRepoMetronomeStruct) CheckoutPhaseOne() (Error error) {

	metronomeDBArray := make([]MetronomeDB, 0)
	query := backRepoMetronome.db.Find(&metronomeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	metronomeInstancesToBeRemovedFromTheStage := make(map[*models.Metronome]any)
	for key, value := range backRepoMetronome.stage.Metronomes {
		metronomeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, metronomeDB := range metronomeDBArray {
		backRepoMetronome.CheckoutPhaseOneInstance(&metronomeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		metronome, ok := backRepoMetronome.Map_MetronomeDBID_MetronomePtr[metronomeDB.ID]
		if ok {
			delete(metronomeInstancesToBeRemovedFromTheStage, metronome)
		}
	}

	// remove from stage and back repo's 3 maps all metronomes that are not in the checkout
	for metronome := range metronomeInstancesToBeRemovedFromTheStage {
		metronome.Unstage(backRepoMetronome.GetStage())

		// remove instance from the back repo 3 maps
		metronomeID := backRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome]
		delete(backRepoMetronome.Map_MetronomePtr_MetronomeDBID, metronome)
		delete(backRepoMetronome.Map_MetronomeDBID_MetronomeDB, metronomeID)
		delete(backRepoMetronome.Map_MetronomeDBID_MetronomePtr, metronomeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a metronomeDB that has been found in the DB, updates the backRepo and stages the
// models version of the metronomeDB
func (backRepoMetronome *BackRepoMetronomeStruct) CheckoutPhaseOneInstance(metronomeDB *MetronomeDB) (Error error) {

	metronome, ok := backRepoMetronome.Map_MetronomeDBID_MetronomePtr[metronomeDB.ID]
	if !ok {
		metronome = new(models.Metronome)

		backRepoMetronome.Map_MetronomeDBID_MetronomePtr[metronomeDB.ID] = metronome
		backRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome] = metronomeDB.ID

		// append model store with the new element
		metronome.Name = metronomeDB.Name_Data.String
		metronome.Stage(backRepoMetronome.GetStage())
	}
	metronomeDB.CopyBasicFieldsToMetronome(metronome)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	metronome.Stage(backRepoMetronome.GetStage())

	// preserve pointer to metronomeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MetronomeDBID_MetronomeDB)[metronomeDB hold variable pointers
	metronomeDB_Data := *metronomeDB
	preservedPtrToMetronome := &metronomeDB_Data
	backRepoMetronome.Map_MetronomeDBID_MetronomeDB[metronomeDB.ID] = preservedPtrToMetronome

	return
}

// BackRepoMetronome.CheckoutPhaseTwo Checkouts all staged instances of Metronome to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome *BackRepoMetronomeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, metronomeDB := range backRepoMetronome.Map_MetronomeDBID_MetronomeDB {
		backRepoMetronome.CheckoutPhaseTwoInstance(backRepo, metronomeDB)
	}
	return
}

// BackRepoMetronome.CheckoutPhaseTwoInstance Checkouts staged instances of Metronome to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome *BackRepoMetronomeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, metronomeDB *MetronomeDB) (Error error) {

	metronome := backRepoMetronome.Map_MetronomeDBID_MetronomePtr[metronomeDB.ID]

	metronomeDB.DecodePointers(backRepo, metronome)

	return
}

func (metronomeDB *MetronomeDB) DecodePointers(backRepo *BackRepoStruct, metronome *models.Metronome) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMetronome allows commit of a single metronome (if already staged)
func (backRepo *BackRepoStruct) CommitMetronome(metronome *models.Metronome) {
	backRepo.BackRepoMetronome.CommitPhaseOneInstance(metronome)
	if id, ok := backRepo.BackRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome]; ok {
		backRepo.BackRepoMetronome.CommitPhaseTwoInstance(backRepo, id, metronome)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMetronome allows checkout of a single metronome (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMetronome(metronome *models.Metronome) {
	// check if the metronome is staged
	if _, ok := backRepo.BackRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome]; ok {

		if id, ok := backRepo.BackRepoMetronome.Map_MetronomePtr_MetronomeDBID[metronome]; ok {
			var metronomeDB MetronomeDB
			metronomeDB.ID = id

			if err := backRepo.BackRepoMetronome.db.First(&metronomeDB, id).Error; err != nil {
				log.Fatalln("CheckoutMetronome : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMetronome.CheckoutPhaseOneInstance(&metronomeDB)
			backRepo.BackRepoMetronome.CheckoutPhaseTwoInstance(backRepo, &metronomeDB)
		}
	}
}

// CopyBasicFieldsFromMetronome
func (metronomeDB *MetronomeDB) CopyBasicFieldsFromMetronome(metronome *models.Metronome) {
	// insertion point for fields commit

	metronomeDB.Name_Data.String = metronome.Name
	metronomeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_WOP
func (metronomeDB *MetronomeDB) CopyBasicFieldsFromMetronome_WOP(metronome *models.Metronome_WOP) {
	// insertion point for fields commit

	metronomeDB.Name_Data.String = metronome.Name
	metronomeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronomeWOP
func (metronomeDB *MetronomeDB) CopyBasicFieldsFromMetronomeWOP(metronome *MetronomeWOP) {
	// insertion point for fields commit

	metronomeDB.Name_Data.String = metronome.Name
	metronomeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMetronome
func (metronomeDB *MetronomeDB) CopyBasicFieldsToMetronome(metronome *models.Metronome) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome.Name = metronomeDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_WOP
func (metronomeDB *MetronomeDB) CopyBasicFieldsToMetronome_WOP(metronome *models.Metronome_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome.Name = metronomeDB.Name_Data.String
}

// CopyBasicFieldsToMetronomeWOP
func (metronomeDB *MetronomeDB) CopyBasicFieldsToMetronomeWOP(metronome *MetronomeWOP) {
	metronome.ID = int(metronomeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	metronome.Name = metronomeDB.Name_Data.String
}

// Backup generates a json file from a slice of all MetronomeDB instances in the backrepo
func (backRepoMetronome *BackRepoMetronomeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MetronomeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MetronomeDB, 0)
	for _, metronomeDB := range backRepoMetronome.Map_MetronomeDBID_MetronomeDB {
		forBackup = append(forBackup, metronomeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Metronome ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Metronome file", err.Error())
	}
}

// Backup generates a json file from a slice of all MetronomeDB instances in the backrepo
func (backRepoMetronome *BackRepoMetronomeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MetronomeDB, 0)
	for _, metronomeDB := range backRepoMetronome.Map_MetronomeDBID_MetronomeDB {
		forBackup = append(forBackup, metronomeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Metronome")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Metronome_Fields, -1)
	for _, metronomeDB := range forBackup {

		var metronomeWOP MetronomeWOP
		metronomeDB.CopyBasicFieldsToMetronomeWOP(&metronomeWOP)

		row := sh.AddRow()
		row.WriteStruct(&metronomeWOP, -1)
	}
}

// RestoreXL from the "Metronome" sheet all MetronomeDB instances
func (backRepoMetronome *BackRepoMetronomeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMetronomeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Metronome"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMetronome.rowVisitorMetronome)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMetronome *BackRepoMetronomeStruct) rowVisitorMetronome(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var metronomeWOP MetronomeWOP
		row.ReadStruct(&metronomeWOP)

		// add the unmarshalled struct to the stage
		metronomeDB := new(MetronomeDB)
		metronomeDB.CopyBasicFieldsFromMetronomeWOP(&metronomeWOP)

		metronomeDB_ID_atBackupTime := metronomeDB.ID
		metronomeDB.ID = 0
		query := backRepoMetronome.db.Create(metronomeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome.Map_MetronomeDBID_MetronomeDB[metronomeDB.ID] = metronomeDB
		BackRepoMetronomeid_atBckpTime_newID[metronomeDB_ID_atBackupTime] = metronomeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MetronomeDB.json" in dirPath that stores an array
// of MetronomeDB and stores it in the database
// the map BackRepoMetronomeid_atBckpTime_newID is updated accordingly
func (backRepoMetronome *BackRepoMetronomeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMetronomeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MetronomeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Metronome file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MetronomeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MetronomeDBID_MetronomeDB
	for _, metronomeDB := range forRestore {

		metronomeDB_ID_atBackupTime := metronomeDB.ID
		metronomeDB.ID = 0
		query := backRepoMetronome.db.Create(metronomeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome.Map_MetronomeDBID_MetronomeDB[metronomeDB.ID] = metronomeDB
		BackRepoMetronomeid_atBckpTime_newID[metronomeDB_ID_atBackupTime] = metronomeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Metronome file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Metronome>id_atBckpTime_newID
// to compute new index
func (backRepoMetronome *BackRepoMetronomeStruct) RestorePhaseTwo() {

	for _, metronomeDB := range backRepoMetronome.Map_MetronomeDBID_MetronomeDB {

		// next line of code is to avert unused variable compilation error
		_ = metronomeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMetronome.db.Model(metronomeDB).Updates(*metronomeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMetronome.ResetReversePointers commits all staged instances of Metronome to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome *BackRepoMetronomeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome := range backRepoMetronome.Map_MetronomeDBID_MetronomePtr {
		backRepoMetronome.ResetReversePointersInstance(backRepo, idx, metronome)
	}

	return
}

func (backRepoMetronome *BackRepoMetronomeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, metronome *models.Metronome) (Error error) {

	// fetch matching metronomeDB
	if metronomeDB, ok := backRepoMetronome.Map_MetronomeDBID_MetronomeDB[idx]; ok {
		_ = metronomeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMetronomeid_atBckpTime_newID map[uint]uint
