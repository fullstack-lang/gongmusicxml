// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Hole_closed_sql sql.NullBool
var dummy_Hole_closed_time time.Duration
var dummy_Hole_closed_sort sort.Float64Slice

// Hole_closedAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model hole_closedAPI
type Hole_closedAPI struct {
	gorm.Model

	models.Hole_closed_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Hole_closedPointersEncoding Hole_closedPointersEncoding
}

// Hole_closedPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Hole_closedPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Hole_closedDB describes a hole_closed in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model hole_closedDB
type Hole_closedDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field hole_closedDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Hole_closedPointersEncoding
}

// Hole_closedDBs arrays hole_closedDBs
// swagger:response hole_closedDBsResponse
type Hole_closedDBs []Hole_closedDB

// Hole_closedDBResponse provides response
// swagger:response hole_closedDBResponse
type Hole_closedDBResponse struct {
	Hole_closedDB
}

// Hole_closedWOP is a Hole_closed without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Hole_closedWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Hole_closed_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHole_closedStruct struct {
	// stores Hole_closedDB according to their gorm ID
	Map_Hole_closedDBID_Hole_closedDB map[uint]*Hole_closedDB

	// stores Hole_closedDB ID according to Hole_closed address
	Map_Hole_closedPtr_Hole_closedDBID map[*models.Hole_closed]uint

	// stores Hole_closed according to their gorm ID
	Map_Hole_closedDBID_Hole_closedPtr map[uint]*models.Hole_closed

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHole_closed *BackRepoHole_closedStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHole_closed.stage
	return
}

func (backRepoHole_closed *BackRepoHole_closedStruct) GetDB() *gorm.DB {
	return backRepoHole_closed.db
}

// GetHole_closedDBFromHole_closedPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHole_closed *BackRepoHole_closedStruct) GetHole_closedDBFromHole_closedPtr(hole_closed *models.Hole_closed) (hole_closedDB *Hole_closedDB) {
	id := backRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed]
	hole_closedDB = backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[id]
	return
}

// BackRepoHole_closed.CommitPhaseOne commits all staged instances of Hole_closed to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHole_closed *BackRepoHole_closedStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for hole_closed := range stage.Hole_closeds {
		backRepoHole_closed.CommitPhaseOneInstance(hole_closed)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, hole_closed := range backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr {
		if _, ok := stage.Hole_closeds[hole_closed]; !ok {
			backRepoHole_closed.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHole_closed.CommitDeleteInstance commits deletion of Hole_closed to the BackRepo
func (backRepoHole_closed *BackRepoHole_closedStruct) CommitDeleteInstance(id uint) (Error error) {

	hole_closed := backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr[id]

	// hole_closed is not staged anymore, remove hole_closedDB
	hole_closedDB := backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[id]
	query := backRepoHole_closed.db.Unscoped().Delete(&hole_closedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID, hole_closed)
	delete(backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr, id)
	delete(backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB, id)

	return
}

// BackRepoHole_closed.CommitPhaseOneInstance commits hole_closed staged instances of Hole_closed to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHole_closed *BackRepoHole_closedStruct) CommitPhaseOneInstance(hole_closed *models.Hole_closed) (Error error) {

	// check if the hole_closed is not commited yet
	if _, ok := backRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed]; ok {
		return
	}

	// initiate hole_closed
	var hole_closedDB Hole_closedDB
	hole_closedDB.CopyBasicFieldsFromHole_closed(hole_closed)

	query := backRepoHole_closed.db.Create(&hole_closedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed] = hole_closedDB.ID
	backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr[hole_closedDB.ID] = hole_closed
	backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[hole_closedDB.ID] = &hole_closedDB

	return
}

// BackRepoHole_closed.CommitPhaseTwo commits all staged instances of Hole_closed to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole_closed *BackRepoHole_closedStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, hole_closed := range backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr {
		backRepoHole_closed.CommitPhaseTwoInstance(backRepo, idx, hole_closed)
	}

	return
}

// BackRepoHole_closed.CommitPhaseTwoInstance commits {{structname }} of models.Hole_closed to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole_closed *BackRepoHole_closedStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, hole_closed *models.Hole_closed) (Error error) {

	// fetch matching hole_closedDB
	if hole_closedDB, ok := backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[idx]; ok {

		hole_closedDB.CopyBasicFieldsFromHole_closed(hole_closed)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHole_closed.db.Save(&hole_closedDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Hole_closed intance %s", hole_closed.Name))
		return err
	}

	return
}

// BackRepoHole_closed.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHole_closed *BackRepoHole_closedStruct) CheckoutPhaseOne() (Error error) {

	hole_closedDBArray := make([]Hole_closedDB, 0)
	query := backRepoHole_closed.db.Find(&hole_closedDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	hole_closedInstancesToBeRemovedFromTheStage := make(map[*models.Hole_closed]any)
	for key, value := range backRepoHole_closed.stage.Hole_closeds {
		hole_closedInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, hole_closedDB := range hole_closedDBArray {
		backRepoHole_closed.CheckoutPhaseOneInstance(&hole_closedDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		hole_closed, ok := backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr[hole_closedDB.ID]
		if ok {
			delete(hole_closedInstancesToBeRemovedFromTheStage, hole_closed)
		}
	}

	// remove from stage and back repo's 3 maps all hole_closeds that are not in the checkout
	for hole_closed := range hole_closedInstancesToBeRemovedFromTheStage {
		hole_closed.Unstage(backRepoHole_closed.GetStage())

		// remove instance from the back repo 3 maps
		hole_closedID := backRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed]
		delete(backRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID, hole_closed)
		delete(backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB, hole_closedID)
		delete(backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr, hole_closedID)
	}

	return
}

// CheckoutPhaseOneInstance takes a hole_closedDB that has been found in the DB, updates the backRepo and stages the
// models version of the hole_closedDB
func (backRepoHole_closed *BackRepoHole_closedStruct) CheckoutPhaseOneInstance(hole_closedDB *Hole_closedDB) (Error error) {

	hole_closed, ok := backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr[hole_closedDB.ID]
	if !ok {
		hole_closed = new(models.Hole_closed)

		backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr[hole_closedDB.ID] = hole_closed
		backRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed] = hole_closedDB.ID

		// append model store with the new element
		hole_closed.Name = hole_closedDB.Name_Data.String
		hole_closed.Stage(backRepoHole_closed.GetStage())
	}
	hole_closedDB.CopyBasicFieldsToHole_closed(hole_closed)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	hole_closed.Stage(backRepoHole_closed.GetStage())

	// preserve pointer to hole_closedDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Hole_closedDBID_Hole_closedDB)[hole_closedDB hold variable pointers
	hole_closedDB_Data := *hole_closedDB
	preservedPtrToHole_closed := &hole_closedDB_Data
	backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[hole_closedDB.ID] = preservedPtrToHole_closed

	return
}

// BackRepoHole_closed.CheckoutPhaseTwo Checkouts all staged instances of Hole_closed to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole_closed *BackRepoHole_closedStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, hole_closedDB := range backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB {
		backRepoHole_closed.CheckoutPhaseTwoInstance(backRepo, hole_closedDB)
	}
	return
}

// BackRepoHole_closed.CheckoutPhaseTwoInstance Checkouts staged instances of Hole_closed to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole_closed *BackRepoHole_closedStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, hole_closedDB *Hole_closedDB) (Error error) {

	hole_closed := backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr[hole_closedDB.ID]

	hole_closedDB.DecodePointers(backRepo, hole_closed)

	return
}

func (hole_closedDB *Hole_closedDB) DecodePointers(backRepo *BackRepoStruct, hole_closed *models.Hole_closed) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHole_closed allows commit of a single hole_closed (if already staged)
func (backRepo *BackRepoStruct) CommitHole_closed(hole_closed *models.Hole_closed) {
	backRepo.BackRepoHole_closed.CommitPhaseOneInstance(hole_closed)
	if id, ok := backRepo.BackRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed]; ok {
		backRepo.BackRepoHole_closed.CommitPhaseTwoInstance(backRepo, id, hole_closed)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHole_closed allows checkout of a single hole_closed (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHole_closed(hole_closed *models.Hole_closed) {
	// check if the hole_closed is staged
	if _, ok := backRepo.BackRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed]; ok {

		if id, ok := backRepo.BackRepoHole_closed.Map_Hole_closedPtr_Hole_closedDBID[hole_closed]; ok {
			var hole_closedDB Hole_closedDB
			hole_closedDB.ID = id

			if err := backRepo.BackRepoHole_closed.db.First(&hole_closedDB, id).Error; err != nil {
				log.Fatalln("CheckoutHole_closed : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHole_closed.CheckoutPhaseOneInstance(&hole_closedDB)
			backRepo.BackRepoHole_closed.CheckoutPhaseTwoInstance(backRepo, &hole_closedDB)
		}
	}
}

// CopyBasicFieldsFromHole_closed
func (hole_closedDB *Hole_closedDB) CopyBasicFieldsFromHole_closed(hole_closed *models.Hole_closed) {
	// insertion point for fields commit

	hole_closedDB.Name_Data.String = hole_closed.Name
	hole_closedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHole_closed_WOP
func (hole_closedDB *Hole_closedDB) CopyBasicFieldsFromHole_closed_WOP(hole_closed *models.Hole_closed_WOP) {
	// insertion point for fields commit

	hole_closedDB.Name_Data.String = hole_closed.Name
	hole_closedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHole_closedWOP
func (hole_closedDB *Hole_closedDB) CopyBasicFieldsFromHole_closedWOP(hole_closed *Hole_closedWOP) {
	// insertion point for fields commit

	hole_closedDB.Name_Data.String = hole_closed.Name
	hole_closedDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHole_closed
func (hole_closedDB *Hole_closedDB) CopyBasicFieldsToHole_closed(hole_closed *models.Hole_closed) {
	// insertion point for checkout of basic fields (back repo to stage)
	hole_closed.Name = hole_closedDB.Name_Data.String
}

// CopyBasicFieldsToHole_closed_WOP
func (hole_closedDB *Hole_closedDB) CopyBasicFieldsToHole_closed_WOP(hole_closed *models.Hole_closed_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	hole_closed.Name = hole_closedDB.Name_Data.String
}

// CopyBasicFieldsToHole_closedWOP
func (hole_closedDB *Hole_closedDB) CopyBasicFieldsToHole_closedWOP(hole_closed *Hole_closedWOP) {
	hole_closed.ID = int(hole_closedDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	hole_closed.Name = hole_closedDB.Name_Data.String
}

// Backup generates a json file from a slice of all Hole_closedDB instances in the backrepo
func (backRepoHole_closed *BackRepoHole_closedStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Hole_closedDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Hole_closedDB, 0)
	for _, hole_closedDB := range backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB {
		forBackup = append(forBackup, hole_closedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Hole_closed ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Hole_closed file", err.Error())
	}
}

// Backup generates a json file from a slice of all Hole_closedDB instances in the backrepo
func (backRepoHole_closed *BackRepoHole_closedStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Hole_closedDB, 0)
	for _, hole_closedDB := range backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB {
		forBackup = append(forBackup, hole_closedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Hole_closed")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Hole_closed_Fields, -1)
	for _, hole_closedDB := range forBackup {

		var hole_closedWOP Hole_closedWOP
		hole_closedDB.CopyBasicFieldsToHole_closedWOP(&hole_closedWOP)

		row := sh.AddRow()
		row.WriteStruct(&hole_closedWOP, -1)
	}
}

// RestoreXL from the "Hole_closed" sheet all Hole_closedDB instances
func (backRepoHole_closed *BackRepoHole_closedStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHole_closedid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Hole_closed"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHole_closed.rowVisitorHole_closed)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHole_closed *BackRepoHole_closedStruct) rowVisitorHole_closed(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var hole_closedWOP Hole_closedWOP
		row.ReadStruct(&hole_closedWOP)

		// add the unmarshalled struct to the stage
		hole_closedDB := new(Hole_closedDB)
		hole_closedDB.CopyBasicFieldsFromHole_closedWOP(&hole_closedWOP)

		hole_closedDB_ID_atBackupTime := hole_closedDB.ID
		hole_closedDB.ID = 0
		query := backRepoHole_closed.db.Create(hole_closedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[hole_closedDB.ID] = hole_closedDB
		BackRepoHole_closedid_atBckpTime_newID[hole_closedDB_ID_atBackupTime] = hole_closedDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Hole_closedDB.json" in dirPath that stores an array
// of Hole_closedDB and stores it in the database
// the map BackRepoHole_closedid_atBckpTime_newID is updated accordingly
func (backRepoHole_closed *BackRepoHole_closedStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHole_closedid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Hole_closedDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Hole_closed file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Hole_closedDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Hole_closedDBID_Hole_closedDB
	for _, hole_closedDB := range forRestore {

		hole_closedDB_ID_atBackupTime := hole_closedDB.ID
		hole_closedDB.ID = 0
		query := backRepoHole_closed.db.Create(hole_closedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[hole_closedDB.ID] = hole_closedDB
		BackRepoHole_closedid_atBckpTime_newID[hole_closedDB_ID_atBackupTime] = hole_closedDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Hole_closed file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Hole_closed>id_atBckpTime_newID
// to compute new index
func (backRepoHole_closed *BackRepoHole_closedStruct) RestorePhaseTwo() {

	for _, hole_closedDB := range backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB {

		// next line of code is to avert unused variable compilation error
		_ = hole_closedDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHole_closed.db.Model(hole_closedDB).Updates(*hole_closedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHole_closed.ResetReversePointers commits all staged instances of Hole_closed to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHole_closed *BackRepoHole_closedStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, hole_closed := range backRepoHole_closed.Map_Hole_closedDBID_Hole_closedPtr {
		backRepoHole_closed.ResetReversePointersInstance(backRepo, idx, hole_closed)
	}

	return
}

func (backRepoHole_closed *BackRepoHole_closedStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, hole_closed *models.Hole_closed) (Error error) {

	// fetch matching hole_closedDB
	if hole_closedDB, ok := backRepoHole_closed.Map_Hole_closedDBID_Hole_closedDB[idx]; ok {
		_ = hole_closedDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHole_closedid_atBckpTime_newID map[uint]uint
