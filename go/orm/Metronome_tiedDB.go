// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Metronome_tied_sql sql.NullBool
var dummy_Metronome_tied_time time.Duration
var dummy_Metronome_tied_sort sort.Float64Slice

// Metronome_tiedAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model metronome_tiedAPI
type Metronome_tiedAPI struct {
	gorm.Model

	models.Metronome_tied_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Metronome_tiedPointersEncoding Metronome_tiedPointersEncoding
}

// Metronome_tiedPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Metronome_tiedPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Metronome_tiedDB describes a metronome_tied in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model metronome_tiedDB
type Metronome_tiedDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field metronome_tiedDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Metronome_tiedPointersEncoding
}

// Metronome_tiedDBs arrays metronome_tiedDBs
// swagger:response metronome_tiedDBsResponse
type Metronome_tiedDBs []Metronome_tiedDB

// Metronome_tiedDBResponse provides response
// swagger:response metronome_tiedDBResponse
type Metronome_tiedDBResponse struct {
	Metronome_tiedDB
}

// Metronome_tiedWOP is a Metronome_tied without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Metronome_tiedWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Metronome_tied_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMetronome_tiedStruct struct {
	// stores Metronome_tiedDB according to their gorm ID
	Map_Metronome_tiedDBID_Metronome_tiedDB map[uint]*Metronome_tiedDB

	// stores Metronome_tiedDB ID according to Metronome_tied address
	Map_Metronome_tiedPtr_Metronome_tiedDBID map[*models.Metronome_tied]uint

	// stores Metronome_tied according to their gorm ID
	Map_Metronome_tiedDBID_Metronome_tiedPtr map[uint]*models.Metronome_tied

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMetronome_tied.stage
	return
}

func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) GetDB() *gorm.DB {
	return backRepoMetronome_tied.db
}

// GetMetronome_tiedDBFromMetronome_tiedPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) GetMetronome_tiedDBFromMetronome_tiedPtr(metronome_tied *models.Metronome_tied) (metronome_tiedDB *Metronome_tiedDB) {
	id := backRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied]
	metronome_tiedDB = backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[id]
	return
}

// BackRepoMetronome_tied.CommitPhaseOne commits all staged instances of Metronome_tied to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for metronome_tied := range stage.Metronome_tieds {
		backRepoMetronome_tied.CommitPhaseOneInstance(metronome_tied)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, metronome_tied := range backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr {
		if _, ok := stage.Metronome_tieds[metronome_tied]; !ok {
			backRepoMetronome_tied.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMetronome_tied.CommitDeleteInstance commits deletion of Metronome_tied to the BackRepo
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CommitDeleteInstance(id uint) (Error error) {

	metronome_tied := backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr[id]

	// metronome_tied is not staged anymore, remove metronome_tiedDB
	metronome_tiedDB := backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[id]
	query := backRepoMetronome_tied.db.Unscoped().Delete(&metronome_tiedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID, metronome_tied)
	delete(backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr, id)
	delete(backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB, id)

	return
}

// BackRepoMetronome_tied.CommitPhaseOneInstance commits metronome_tied staged instances of Metronome_tied to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CommitPhaseOneInstance(metronome_tied *models.Metronome_tied) (Error error) {

	// check if the metronome_tied is not commited yet
	if _, ok := backRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied]; ok {
		return
	}

	// initiate metronome_tied
	var metronome_tiedDB Metronome_tiedDB
	metronome_tiedDB.CopyBasicFieldsFromMetronome_tied(metronome_tied)

	query := backRepoMetronome_tied.db.Create(&metronome_tiedDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied] = metronome_tiedDB.ID
	backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr[metronome_tiedDB.ID] = metronome_tied
	backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[metronome_tiedDB.ID] = &metronome_tiedDB

	return
}

// BackRepoMetronome_tied.CommitPhaseTwo commits all staged instances of Metronome_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_tied := range backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr {
		backRepoMetronome_tied.CommitPhaseTwoInstance(backRepo, idx, metronome_tied)
	}

	return
}

// BackRepoMetronome_tied.CommitPhaseTwoInstance commits {{structname }} of models.Metronome_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, metronome_tied *models.Metronome_tied) (Error error) {

	// fetch matching metronome_tiedDB
	if metronome_tiedDB, ok := backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[idx]; ok {

		metronome_tiedDB.CopyBasicFieldsFromMetronome_tied(metronome_tied)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMetronome_tied.db.Save(&metronome_tiedDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Metronome_tied intance %s", metronome_tied.Name))
		return err
	}

	return
}

// BackRepoMetronome_tied.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CheckoutPhaseOne() (Error error) {

	metronome_tiedDBArray := make([]Metronome_tiedDB, 0)
	query := backRepoMetronome_tied.db.Find(&metronome_tiedDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	metronome_tiedInstancesToBeRemovedFromTheStage := make(map[*models.Metronome_tied]any)
	for key, value := range backRepoMetronome_tied.stage.Metronome_tieds {
		metronome_tiedInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, metronome_tiedDB := range metronome_tiedDBArray {
		backRepoMetronome_tied.CheckoutPhaseOneInstance(&metronome_tiedDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		metronome_tied, ok := backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr[metronome_tiedDB.ID]
		if ok {
			delete(metronome_tiedInstancesToBeRemovedFromTheStage, metronome_tied)
		}
	}

	// remove from stage and back repo's 3 maps all metronome_tieds that are not in the checkout
	for metronome_tied := range metronome_tiedInstancesToBeRemovedFromTheStage {
		metronome_tied.Unstage(backRepoMetronome_tied.GetStage())

		// remove instance from the back repo 3 maps
		metronome_tiedID := backRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied]
		delete(backRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID, metronome_tied)
		delete(backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB, metronome_tiedID)
		delete(backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr, metronome_tiedID)
	}

	return
}

// CheckoutPhaseOneInstance takes a metronome_tiedDB that has been found in the DB, updates the backRepo and stages the
// models version of the metronome_tiedDB
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CheckoutPhaseOneInstance(metronome_tiedDB *Metronome_tiedDB) (Error error) {

	metronome_tied, ok := backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr[metronome_tiedDB.ID]
	if !ok {
		metronome_tied = new(models.Metronome_tied)

		backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr[metronome_tiedDB.ID] = metronome_tied
		backRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied] = metronome_tiedDB.ID

		// append model store with the new element
		metronome_tied.Name = metronome_tiedDB.Name_Data.String
		metronome_tied.Stage(backRepoMetronome_tied.GetStage())
	}
	metronome_tiedDB.CopyBasicFieldsToMetronome_tied(metronome_tied)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	metronome_tied.Stage(backRepoMetronome_tied.GetStage())

	// preserve pointer to metronome_tiedDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Metronome_tiedDBID_Metronome_tiedDB)[metronome_tiedDB hold variable pointers
	metronome_tiedDB_Data := *metronome_tiedDB
	preservedPtrToMetronome_tied := &metronome_tiedDB_Data
	backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[metronome_tiedDB.ID] = preservedPtrToMetronome_tied

	return
}

// BackRepoMetronome_tied.CheckoutPhaseTwo Checkouts all staged instances of Metronome_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, metronome_tiedDB := range backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB {
		backRepoMetronome_tied.CheckoutPhaseTwoInstance(backRepo, metronome_tiedDB)
	}
	return
}

// BackRepoMetronome_tied.CheckoutPhaseTwoInstance Checkouts staged instances of Metronome_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, metronome_tiedDB *Metronome_tiedDB) (Error error) {

	metronome_tied := backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr[metronome_tiedDB.ID]

	metronome_tiedDB.DecodePointers(backRepo, metronome_tied)

	return
}

func (metronome_tiedDB *Metronome_tiedDB) DecodePointers(backRepo *BackRepoStruct, metronome_tied *models.Metronome_tied) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMetronome_tied allows commit of a single metronome_tied (if already staged)
func (backRepo *BackRepoStruct) CommitMetronome_tied(metronome_tied *models.Metronome_tied) {
	backRepo.BackRepoMetronome_tied.CommitPhaseOneInstance(metronome_tied)
	if id, ok := backRepo.BackRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied]; ok {
		backRepo.BackRepoMetronome_tied.CommitPhaseTwoInstance(backRepo, id, metronome_tied)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMetronome_tied allows checkout of a single metronome_tied (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMetronome_tied(metronome_tied *models.Metronome_tied) {
	// check if the metronome_tied is staged
	if _, ok := backRepo.BackRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied]; ok {

		if id, ok := backRepo.BackRepoMetronome_tied.Map_Metronome_tiedPtr_Metronome_tiedDBID[metronome_tied]; ok {
			var metronome_tiedDB Metronome_tiedDB
			metronome_tiedDB.ID = id

			if err := backRepo.BackRepoMetronome_tied.db.First(&metronome_tiedDB, id).Error; err != nil {
				log.Fatalln("CheckoutMetronome_tied : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMetronome_tied.CheckoutPhaseOneInstance(&metronome_tiedDB)
			backRepo.BackRepoMetronome_tied.CheckoutPhaseTwoInstance(backRepo, &metronome_tiedDB)
		}
	}
}

// CopyBasicFieldsFromMetronome_tied
func (metronome_tiedDB *Metronome_tiedDB) CopyBasicFieldsFromMetronome_tied(metronome_tied *models.Metronome_tied) {
	// insertion point for fields commit

	metronome_tiedDB.Name_Data.String = metronome_tied.Name
	metronome_tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_tied_WOP
func (metronome_tiedDB *Metronome_tiedDB) CopyBasicFieldsFromMetronome_tied_WOP(metronome_tied *models.Metronome_tied_WOP) {
	// insertion point for fields commit

	metronome_tiedDB.Name_Data.String = metronome_tied.Name
	metronome_tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_tiedWOP
func (metronome_tiedDB *Metronome_tiedDB) CopyBasicFieldsFromMetronome_tiedWOP(metronome_tied *Metronome_tiedWOP) {
	// insertion point for fields commit

	metronome_tiedDB.Name_Data.String = metronome_tied.Name
	metronome_tiedDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMetronome_tied
func (metronome_tiedDB *Metronome_tiedDB) CopyBasicFieldsToMetronome_tied(metronome_tied *models.Metronome_tied) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_tied.Name = metronome_tiedDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_tied_WOP
func (metronome_tiedDB *Metronome_tiedDB) CopyBasicFieldsToMetronome_tied_WOP(metronome_tied *models.Metronome_tied_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_tied.Name = metronome_tiedDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_tiedWOP
func (metronome_tiedDB *Metronome_tiedDB) CopyBasicFieldsToMetronome_tiedWOP(metronome_tied *Metronome_tiedWOP) {
	metronome_tied.ID = int(metronome_tiedDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_tied.Name = metronome_tiedDB.Name_Data.String
}

// Backup generates a json file from a slice of all Metronome_tiedDB instances in the backrepo
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Metronome_tiedDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_tiedDB, 0)
	for _, metronome_tiedDB := range backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB {
		forBackup = append(forBackup, metronome_tiedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Metronome_tied ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Metronome_tied file", err.Error())
	}
}

// Backup generates a json file from a slice of all Metronome_tiedDB instances in the backrepo
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_tiedDB, 0)
	for _, metronome_tiedDB := range backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB {
		forBackup = append(forBackup, metronome_tiedDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Metronome_tied")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Metronome_tied_Fields, -1)
	for _, metronome_tiedDB := range forBackup {

		var metronome_tiedWOP Metronome_tiedWOP
		metronome_tiedDB.CopyBasicFieldsToMetronome_tiedWOP(&metronome_tiedWOP)

		row := sh.AddRow()
		row.WriteStruct(&metronome_tiedWOP, -1)
	}
}

// RestoreXL from the "Metronome_tied" sheet all Metronome_tiedDB instances
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMetronome_tiedid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Metronome_tied"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMetronome_tied.rowVisitorMetronome_tied)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) rowVisitorMetronome_tied(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var metronome_tiedWOP Metronome_tiedWOP
		row.ReadStruct(&metronome_tiedWOP)

		// add the unmarshalled struct to the stage
		metronome_tiedDB := new(Metronome_tiedDB)
		metronome_tiedDB.CopyBasicFieldsFromMetronome_tiedWOP(&metronome_tiedWOP)

		metronome_tiedDB_ID_atBackupTime := metronome_tiedDB.ID
		metronome_tiedDB.ID = 0
		query := backRepoMetronome_tied.db.Create(metronome_tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[metronome_tiedDB.ID] = metronome_tiedDB
		BackRepoMetronome_tiedid_atBckpTime_newID[metronome_tiedDB_ID_atBackupTime] = metronome_tiedDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Metronome_tiedDB.json" in dirPath that stores an array
// of Metronome_tiedDB and stores it in the database
// the map BackRepoMetronome_tiedid_atBckpTime_newID is updated accordingly
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMetronome_tiedid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Metronome_tiedDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Metronome_tied file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Metronome_tiedDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Metronome_tiedDBID_Metronome_tiedDB
	for _, metronome_tiedDB := range forRestore {

		metronome_tiedDB_ID_atBackupTime := metronome_tiedDB.ID
		metronome_tiedDB.ID = 0
		query := backRepoMetronome_tied.db.Create(metronome_tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[metronome_tiedDB.ID] = metronome_tiedDB
		BackRepoMetronome_tiedid_atBckpTime_newID[metronome_tiedDB_ID_atBackupTime] = metronome_tiedDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Metronome_tied file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Metronome_tied>id_atBckpTime_newID
// to compute new index
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) RestorePhaseTwo() {

	for _, metronome_tiedDB := range backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB {

		// next line of code is to avert unused variable compilation error
		_ = metronome_tiedDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMetronome_tied.db.Model(metronome_tiedDB).Updates(*metronome_tiedDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMetronome_tied.ResetReversePointers commits all staged instances of Metronome_tied to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_tied := range backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedPtr {
		backRepoMetronome_tied.ResetReversePointersInstance(backRepo, idx, metronome_tied)
	}

	return
}

func (backRepoMetronome_tied *BackRepoMetronome_tiedStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, metronome_tied *models.Metronome_tied) (Error error) {

	// fetch matching metronome_tiedDB
	if metronome_tiedDB, ok := backRepoMetronome_tied.Map_Metronome_tiedDBID_Metronome_tiedDB[idx]; ok {
		_ = metronome_tiedDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMetronome_tiedid_atBckpTime_newID map[uint]uint
