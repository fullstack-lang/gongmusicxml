// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Hammer_on_pull_off_sql sql.NullBool
var dummy_Hammer_on_pull_off_time time.Duration
var dummy_Hammer_on_pull_off_sort sort.Float64Slice

// Hammer_on_pull_offAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model hammer_on_pull_offAPI
type Hammer_on_pull_offAPI struct {
	gorm.Model

	models.Hammer_on_pull_off_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Hammer_on_pull_offPointersEncoding Hammer_on_pull_offPointersEncoding
}

// Hammer_on_pull_offPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Hammer_on_pull_offPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Hammer_on_pull_offDB describes a hammer_on_pull_off in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model hammer_on_pull_offDB
type Hammer_on_pull_offDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field hammer_on_pull_offDB.Name
	Name_Data sql.NullString

	// Declation for basic field hammer_on_pull_offDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Hammer_on_pull_offPointersEncoding
}

// Hammer_on_pull_offDBs arrays hammer_on_pull_offDBs
// swagger:response hammer_on_pull_offDBsResponse
type Hammer_on_pull_offDBs []Hammer_on_pull_offDB

// Hammer_on_pull_offDBResponse provides response
// swagger:response hammer_on_pull_offDBResponse
type Hammer_on_pull_offDBResponse struct {
	Hammer_on_pull_offDB
}

// Hammer_on_pull_offWOP is a Hammer_on_pull_off without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Hammer_on_pull_offWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Hammer_on_pull_off_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoHammer_on_pull_offStruct struct {
	// stores Hammer_on_pull_offDB according to their gorm ID
	Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB map[uint]*Hammer_on_pull_offDB

	// stores Hammer_on_pull_offDB ID according to Hammer_on_pull_off address
	Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID map[*models.Hammer_on_pull_off]uint

	// stores Hammer_on_pull_off according to their gorm ID
	Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr map[uint]*models.Hammer_on_pull_off

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHammer_on_pull_off.stage
	return
}

func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) GetDB() *gorm.DB {
	return backRepoHammer_on_pull_off.db
}

// GetHammer_on_pull_offDBFromHammer_on_pull_offPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) GetHammer_on_pull_offDBFromHammer_on_pull_offPtr(hammer_on_pull_off *models.Hammer_on_pull_off) (hammer_on_pull_offDB *Hammer_on_pull_offDB) {
	id := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off]
	hammer_on_pull_offDB = backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[id]
	return
}

// BackRepoHammer_on_pull_off.CommitPhaseOne commits all staged instances of Hammer_on_pull_off to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for hammer_on_pull_off := range stage.Hammer_on_pull_offs {
		backRepoHammer_on_pull_off.CommitPhaseOneInstance(hammer_on_pull_off)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, hammer_on_pull_off := range backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr {
		if _, ok := stage.Hammer_on_pull_offs[hammer_on_pull_off]; !ok {
			backRepoHammer_on_pull_off.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHammer_on_pull_off.CommitDeleteInstance commits deletion of Hammer_on_pull_off to the BackRepo
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CommitDeleteInstance(id uint) (Error error) {

	hammer_on_pull_off := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr[id]

	// hammer_on_pull_off is not staged anymore, remove hammer_on_pull_offDB
	hammer_on_pull_offDB := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[id]
	query := backRepoHammer_on_pull_off.db.Unscoped().Delete(&hammer_on_pull_offDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID, hammer_on_pull_off)
	delete(backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr, id)
	delete(backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB, id)

	return
}

// BackRepoHammer_on_pull_off.CommitPhaseOneInstance commits hammer_on_pull_off staged instances of Hammer_on_pull_off to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CommitPhaseOneInstance(hammer_on_pull_off *models.Hammer_on_pull_off) (Error error) {

	// check if the hammer_on_pull_off is not commited yet
	if _, ok := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off]; ok {
		return
	}

	// initiate hammer_on_pull_off
	var hammer_on_pull_offDB Hammer_on_pull_offDB
	hammer_on_pull_offDB.CopyBasicFieldsFromHammer_on_pull_off(hammer_on_pull_off)

	query := backRepoHammer_on_pull_off.db.Create(&hammer_on_pull_offDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off] = hammer_on_pull_offDB.ID
	backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr[hammer_on_pull_offDB.ID] = hammer_on_pull_off
	backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[hammer_on_pull_offDB.ID] = &hammer_on_pull_offDB

	return
}

// BackRepoHammer_on_pull_off.CommitPhaseTwo commits all staged instances of Hammer_on_pull_off to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, hammer_on_pull_off := range backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr {
		backRepoHammer_on_pull_off.CommitPhaseTwoInstance(backRepo, idx, hammer_on_pull_off)
	}

	return
}

// BackRepoHammer_on_pull_off.CommitPhaseTwoInstance commits {{structname }} of models.Hammer_on_pull_off to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, hammer_on_pull_off *models.Hammer_on_pull_off) (Error error) {

	// fetch matching hammer_on_pull_offDB
	if hammer_on_pull_offDB, ok := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[idx]; ok {

		hammer_on_pull_offDB.CopyBasicFieldsFromHammer_on_pull_off(hammer_on_pull_off)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHammer_on_pull_off.db.Save(&hammer_on_pull_offDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Hammer_on_pull_off intance %s", hammer_on_pull_off.Name))
		return err
	}

	return
}

// BackRepoHammer_on_pull_off.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CheckoutPhaseOne() (Error error) {

	hammer_on_pull_offDBArray := make([]Hammer_on_pull_offDB, 0)
	query := backRepoHammer_on_pull_off.db.Find(&hammer_on_pull_offDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	hammer_on_pull_offInstancesToBeRemovedFromTheStage := make(map[*models.Hammer_on_pull_off]any)
	for key, value := range backRepoHammer_on_pull_off.stage.Hammer_on_pull_offs {
		hammer_on_pull_offInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, hammer_on_pull_offDB := range hammer_on_pull_offDBArray {
		backRepoHammer_on_pull_off.CheckoutPhaseOneInstance(&hammer_on_pull_offDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		hammer_on_pull_off, ok := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr[hammer_on_pull_offDB.ID]
		if ok {
			delete(hammer_on_pull_offInstancesToBeRemovedFromTheStage, hammer_on_pull_off)
		}
	}

	// remove from stage and back repo's 3 maps all hammer_on_pull_offs that are not in the checkout
	for hammer_on_pull_off := range hammer_on_pull_offInstancesToBeRemovedFromTheStage {
		hammer_on_pull_off.Unstage(backRepoHammer_on_pull_off.GetStage())

		// remove instance from the back repo 3 maps
		hammer_on_pull_offID := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off]
		delete(backRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID, hammer_on_pull_off)
		delete(backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB, hammer_on_pull_offID)
		delete(backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr, hammer_on_pull_offID)
	}

	return
}

// CheckoutPhaseOneInstance takes a hammer_on_pull_offDB that has been found in the DB, updates the backRepo and stages the
// models version of the hammer_on_pull_offDB
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CheckoutPhaseOneInstance(hammer_on_pull_offDB *Hammer_on_pull_offDB) (Error error) {

	hammer_on_pull_off, ok := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr[hammer_on_pull_offDB.ID]
	if !ok {
		hammer_on_pull_off = new(models.Hammer_on_pull_off)

		backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr[hammer_on_pull_offDB.ID] = hammer_on_pull_off
		backRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off] = hammer_on_pull_offDB.ID

		// append model store with the new element
		hammer_on_pull_off.Name = hammer_on_pull_offDB.Name_Data.String
		hammer_on_pull_off.Stage(backRepoHammer_on_pull_off.GetStage())
	}
	hammer_on_pull_offDB.CopyBasicFieldsToHammer_on_pull_off(hammer_on_pull_off)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	hammer_on_pull_off.Stage(backRepoHammer_on_pull_off.GetStage())

	// preserve pointer to hammer_on_pull_offDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB)[hammer_on_pull_offDB hold variable pointers
	hammer_on_pull_offDB_Data := *hammer_on_pull_offDB
	preservedPtrToHammer_on_pull_off := &hammer_on_pull_offDB_Data
	backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[hammer_on_pull_offDB.ID] = preservedPtrToHammer_on_pull_off

	return
}

// BackRepoHammer_on_pull_off.CheckoutPhaseTwo Checkouts all staged instances of Hammer_on_pull_off to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, hammer_on_pull_offDB := range backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB {
		backRepoHammer_on_pull_off.CheckoutPhaseTwoInstance(backRepo, hammer_on_pull_offDB)
	}
	return
}

// BackRepoHammer_on_pull_off.CheckoutPhaseTwoInstance Checkouts staged instances of Hammer_on_pull_off to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, hammer_on_pull_offDB *Hammer_on_pull_offDB) (Error error) {

	hammer_on_pull_off := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr[hammer_on_pull_offDB.ID]

	hammer_on_pull_offDB.DecodePointers(backRepo, hammer_on_pull_off)

	return
}

func (hammer_on_pull_offDB *Hammer_on_pull_offDB) DecodePointers(backRepo *BackRepoStruct, hammer_on_pull_off *models.Hammer_on_pull_off) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHammer_on_pull_off allows commit of a single hammer_on_pull_off (if already staged)
func (backRepo *BackRepoStruct) CommitHammer_on_pull_off(hammer_on_pull_off *models.Hammer_on_pull_off) {
	backRepo.BackRepoHammer_on_pull_off.CommitPhaseOneInstance(hammer_on_pull_off)
	if id, ok := backRepo.BackRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off]; ok {
		backRepo.BackRepoHammer_on_pull_off.CommitPhaseTwoInstance(backRepo, id, hammer_on_pull_off)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHammer_on_pull_off allows checkout of a single hammer_on_pull_off (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHammer_on_pull_off(hammer_on_pull_off *models.Hammer_on_pull_off) {
	// check if the hammer_on_pull_off is staged
	if _, ok := backRepo.BackRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off]; ok {

		if id, ok := backRepo.BackRepoHammer_on_pull_off.Map_Hammer_on_pull_offPtr_Hammer_on_pull_offDBID[hammer_on_pull_off]; ok {
			var hammer_on_pull_offDB Hammer_on_pull_offDB
			hammer_on_pull_offDB.ID = id

			if err := backRepo.BackRepoHammer_on_pull_off.db.First(&hammer_on_pull_offDB, id).Error; err != nil {
				log.Fatalln("CheckoutHammer_on_pull_off : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHammer_on_pull_off.CheckoutPhaseOneInstance(&hammer_on_pull_offDB)
			backRepo.BackRepoHammer_on_pull_off.CheckoutPhaseTwoInstance(backRepo, &hammer_on_pull_offDB)
		}
	}
}

// CopyBasicFieldsFromHammer_on_pull_off
func (hammer_on_pull_offDB *Hammer_on_pull_offDB) CopyBasicFieldsFromHammer_on_pull_off(hammer_on_pull_off *models.Hammer_on_pull_off) {
	// insertion point for fields commit

	hammer_on_pull_offDB.Name_Data.String = hammer_on_pull_off.Name
	hammer_on_pull_offDB.Name_Data.Valid = true

	hammer_on_pull_offDB.Value_Data.String = hammer_on_pull_off.Value
	hammer_on_pull_offDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromHammer_on_pull_off_WOP
func (hammer_on_pull_offDB *Hammer_on_pull_offDB) CopyBasicFieldsFromHammer_on_pull_off_WOP(hammer_on_pull_off *models.Hammer_on_pull_off_WOP) {
	// insertion point for fields commit

	hammer_on_pull_offDB.Name_Data.String = hammer_on_pull_off.Name
	hammer_on_pull_offDB.Name_Data.Valid = true

	hammer_on_pull_offDB.Value_Data.String = hammer_on_pull_off.Value
	hammer_on_pull_offDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromHammer_on_pull_offWOP
func (hammer_on_pull_offDB *Hammer_on_pull_offDB) CopyBasicFieldsFromHammer_on_pull_offWOP(hammer_on_pull_off *Hammer_on_pull_offWOP) {
	// insertion point for fields commit

	hammer_on_pull_offDB.Name_Data.String = hammer_on_pull_off.Name
	hammer_on_pull_offDB.Name_Data.Valid = true

	hammer_on_pull_offDB.Value_Data.String = hammer_on_pull_off.Value
	hammer_on_pull_offDB.Value_Data.Valid = true
}

// CopyBasicFieldsToHammer_on_pull_off
func (hammer_on_pull_offDB *Hammer_on_pull_offDB) CopyBasicFieldsToHammer_on_pull_off(hammer_on_pull_off *models.Hammer_on_pull_off) {
	// insertion point for checkout of basic fields (back repo to stage)
	hammer_on_pull_off.Name = hammer_on_pull_offDB.Name_Data.String
	hammer_on_pull_off.Value = hammer_on_pull_offDB.Value_Data.String
}

// CopyBasicFieldsToHammer_on_pull_off_WOP
func (hammer_on_pull_offDB *Hammer_on_pull_offDB) CopyBasicFieldsToHammer_on_pull_off_WOP(hammer_on_pull_off *models.Hammer_on_pull_off_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	hammer_on_pull_off.Name = hammer_on_pull_offDB.Name_Data.String
	hammer_on_pull_off.Value = hammer_on_pull_offDB.Value_Data.String
}

// CopyBasicFieldsToHammer_on_pull_offWOP
func (hammer_on_pull_offDB *Hammer_on_pull_offDB) CopyBasicFieldsToHammer_on_pull_offWOP(hammer_on_pull_off *Hammer_on_pull_offWOP) {
	hammer_on_pull_off.ID = int(hammer_on_pull_offDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	hammer_on_pull_off.Name = hammer_on_pull_offDB.Name_Data.String
	hammer_on_pull_off.Value = hammer_on_pull_offDB.Value_Data.String
}

// Backup generates a json file from a slice of all Hammer_on_pull_offDB instances in the backrepo
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Hammer_on_pull_offDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Hammer_on_pull_offDB, 0)
	for _, hammer_on_pull_offDB := range backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB {
		forBackup = append(forBackup, hammer_on_pull_offDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Hammer_on_pull_off ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Hammer_on_pull_off file", err.Error())
	}
}

// Backup generates a json file from a slice of all Hammer_on_pull_offDB instances in the backrepo
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Hammer_on_pull_offDB, 0)
	for _, hammer_on_pull_offDB := range backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB {
		forBackup = append(forBackup, hammer_on_pull_offDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Hammer_on_pull_off")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Hammer_on_pull_off_Fields, -1)
	for _, hammer_on_pull_offDB := range forBackup {

		var hammer_on_pull_offWOP Hammer_on_pull_offWOP
		hammer_on_pull_offDB.CopyBasicFieldsToHammer_on_pull_offWOP(&hammer_on_pull_offWOP)

		row := sh.AddRow()
		row.WriteStruct(&hammer_on_pull_offWOP, -1)
	}
}

// RestoreXL from the "Hammer_on_pull_off" sheet all Hammer_on_pull_offDB instances
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHammer_on_pull_offid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Hammer_on_pull_off"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHammer_on_pull_off.rowVisitorHammer_on_pull_off)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) rowVisitorHammer_on_pull_off(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var hammer_on_pull_offWOP Hammer_on_pull_offWOP
		row.ReadStruct(&hammer_on_pull_offWOP)

		// add the unmarshalled struct to the stage
		hammer_on_pull_offDB := new(Hammer_on_pull_offDB)
		hammer_on_pull_offDB.CopyBasicFieldsFromHammer_on_pull_offWOP(&hammer_on_pull_offWOP)

		hammer_on_pull_offDB_ID_atBackupTime := hammer_on_pull_offDB.ID
		hammer_on_pull_offDB.ID = 0
		query := backRepoHammer_on_pull_off.db.Create(hammer_on_pull_offDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[hammer_on_pull_offDB.ID] = hammer_on_pull_offDB
		BackRepoHammer_on_pull_offid_atBckpTime_newID[hammer_on_pull_offDB_ID_atBackupTime] = hammer_on_pull_offDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Hammer_on_pull_offDB.json" in dirPath that stores an array
// of Hammer_on_pull_offDB and stores it in the database
// the map BackRepoHammer_on_pull_offid_atBckpTime_newID is updated accordingly
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHammer_on_pull_offid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Hammer_on_pull_offDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Hammer_on_pull_off file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Hammer_on_pull_offDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB
	for _, hammer_on_pull_offDB := range forRestore {

		hammer_on_pull_offDB_ID_atBackupTime := hammer_on_pull_offDB.ID
		hammer_on_pull_offDB.ID = 0
		query := backRepoHammer_on_pull_off.db.Create(hammer_on_pull_offDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[hammer_on_pull_offDB.ID] = hammer_on_pull_offDB
		BackRepoHammer_on_pull_offid_atBckpTime_newID[hammer_on_pull_offDB_ID_atBackupTime] = hammer_on_pull_offDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Hammer_on_pull_off file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Hammer_on_pull_off>id_atBckpTime_newID
// to compute new index
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) RestorePhaseTwo() {

	for _, hammer_on_pull_offDB := range backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB {

		// next line of code is to avert unused variable compilation error
		_ = hammer_on_pull_offDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHammer_on_pull_off.db.Model(hammer_on_pull_offDB).Updates(*hammer_on_pull_offDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHammer_on_pull_off.ResetReversePointers commits all staged instances of Hammer_on_pull_off to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, hammer_on_pull_off := range backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offPtr {
		backRepoHammer_on_pull_off.ResetReversePointersInstance(backRepo, idx, hammer_on_pull_off)
	}

	return
}

func (backRepoHammer_on_pull_off *BackRepoHammer_on_pull_offStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, hammer_on_pull_off *models.Hammer_on_pull_off) (Error error) {

	// fetch matching hammer_on_pull_offDB
	if hammer_on_pull_offDB, ok := backRepoHammer_on_pull_off.Map_Hammer_on_pull_offDBID_Hammer_on_pull_offDB[idx]; ok {
		_ = hammer_on_pull_offDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHammer_on_pull_offid_atBckpTime_newID map[uint]uint
