// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tuplet_number_sql sql.NullBool
var dummy_Tuplet_number_time time.Duration
var dummy_Tuplet_number_sort sort.Float64Slice

// Tuplet_numberAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tuplet_numberAPI
type Tuplet_numberAPI struct {
	gorm.Model

	models.Tuplet_number_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Tuplet_numberPointersEncoding Tuplet_numberPointersEncoding
}

// Tuplet_numberPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Tuplet_numberPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Tuplet_numberDB describes a tuplet_number in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tuplet_numberDB
type Tuplet_numberDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tuplet_numberDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Tuplet_numberPointersEncoding
}

// Tuplet_numberDBs arrays tuplet_numberDBs
// swagger:response tuplet_numberDBsResponse
type Tuplet_numberDBs []Tuplet_numberDB

// Tuplet_numberDBResponse provides response
// swagger:response tuplet_numberDBResponse
type Tuplet_numberDBResponse struct {
	Tuplet_numberDB
}

// Tuplet_numberWOP is a Tuplet_number without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Tuplet_numberWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Tuplet_number_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTuplet_numberStruct struct {
	// stores Tuplet_numberDB according to their gorm ID
	Map_Tuplet_numberDBID_Tuplet_numberDB map[uint]*Tuplet_numberDB

	// stores Tuplet_numberDB ID according to Tuplet_number address
	Map_Tuplet_numberPtr_Tuplet_numberDBID map[*models.Tuplet_number]uint

	// stores Tuplet_number according to their gorm ID
	Map_Tuplet_numberDBID_Tuplet_numberPtr map[uint]*models.Tuplet_number

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTuplet_number *BackRepoTuplet_numberStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTuplet_number.stage
	return
}

func (backRepoTuplet_number *BackRepoTuplet_numberStruct) GetDB() *gorm.DB {
	return backRepoTuplet_number.db
}

// GetTuplet_numberDBFromTuplet_numberPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) GetTuplet_numberDBFromTuplet_numberPtr(tuplet_number *models.Tuplet_number) (tuplet_numberDB *Tuplet_numberDB) {
	id := backRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number]
	tuplet_numberDB = backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[id]
	return
}

// BackRepoTuplet_number.CommitPhaseOne commits all staged instances of Tuplet_number to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tuplet_number := range stage.Tuplet_numbers {
		backRepoTuplet_number.CommitPhaseOneInstance(tuplet_number)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tuplet_number := range backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr {
		if _, ok := stage.Tuplet_numbers[tuplet_number]; !ok {
			backRepoTuplet_number.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTuplet_number.CommitDeleteInstance commits deletion of Tuplet_number to the BackRepo
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CommitDeleteInstance(id uint) (Error error) {

	tuplet_number := backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr[id]

	// tuplet_number is not staged anymore, remove tuplet_numberDB
	tuplet_numberDB := backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[id]
	query := backRepoTuplet_number.db.Unscoped().Delete(&tuplet_numberDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID, tuplet_number)
	delete(backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr, id)
	delete(backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB, id)

	return
}

// BackRepoTuplet_number.CommitPhaseOneInstance commits tuplet_number staged instances of Tuplet_number to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CommitPhaseOneInstance(tuplet_number *models.Tuplet_number) (Error error) {

	// check if the tuplet_number is not commited yet
	if _, ok := backRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number]; ok {
		return
	}

	// initiate tuplet_number
	var tuplet_numberDB Tuplet_numberDB
	tuplet_numberDB.CopyBasicFieldsFromTuplet_number(tuplet_number)

	query := backRepoTuplet_number.db.Create(&tuplet_numberDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number] = tuplet_numberDB.ID
	backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr[tuplet_numberDB.ID] = tuplet_number
	backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[tuplet_numberDB.ID] = &tuplet_numberDB

	return
}

// BackRepoTuplet_number.CommitPhaseTwo commits all staged instances of Tuplet_number to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet_number := range backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr {
		backRepoTuplet_number.CommitPhaseTwoInstance(backRepo, idx, tuplet_number)
	}

	return
}

// BackRepoTuplet_number.CommitPhaseTwoInstance commits {{structname }} of models.Tuplet_number to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tuplet_number *models.Tuplet_number) (Error error) {

	// fetch matching tuplet_numberDB
	if tuplet_numberDB, ok := backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[idx]; ok {

		tuplet_numberDB.CopyBasicFieldsFromTuplet_number(tuplet_number)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTuplet_number.db.Save(&tuplet_numberDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tuplet_number intance %s", tuplet_number.Name))
		return err
	}

	return
}

// BackRepoTuplet_number.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CheckoutPhaseOne() (Error error) {

	tuplet_numberDBArray := make([]Tuplet_numberDB, 0)
	query := backRepoTuplet_number.db.Find(&tuplet_numberDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tuplet_numberInstancesToBeRemovedFromTheStage := make(map[*models.Tuplet_number]any)
	for key, value := range backRepoTuplet_number.stage.Tuplet_numbers {
		tuplet_numberInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tuplet_numberDB := range tuplet_numberDBArray {
		backRepoTuplet_number.CheckoutPhaseOneInstance(&tuplet_numberDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tuplet_number, ok := backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr[tuplet_numberDB.ID]
		if ok {
			delete(tuplet_numberInstancesToBeRemovedFromTheStage, tuplet_number)
		}
	}

	// remove from stage and back repo's 3 maps all tuplet_numbers that are not in the checkout
	for tuplet_number := range tuplet_numberInstancesToBeRemovedFromTheStage {
		tuplet_number.Unstage(backRepoTuplet_number.GetStage())

		// remove instance from the back repo 3 maps
		tuplet_numberID := backRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number]
		delete(backRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID, tuplet_number)
		delete(backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB, tuplet_numberID)
		delete(backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr, tuplet_numberID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tuplet_numberDB that has been found in the DB, updates the backRepo and stages the
// models version of the tuplet_numberDB
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CheckoutPhaseOneInstance(tuplet_numberDB *Tuplet_numberDB) (Error error) {

	tuplet_number, ok := backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr[tuplet_numberDB.ID]
	if !ok {
		tuplet_number = new(models.Tuplet_number)

		backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr[tuplet_numberDB.ID] = tuplet_number
		backRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number] = tuplet_numberDB.ID

		// append model store with the new element
		tuplet_number.Name = tuplet_numberDB.Name_Data.String
		tuplet_number.Stage(backRepoTuplet_number.GetStage())
	}
	tuplet_numberDB.CopyBasicFieldsToTuplet_number(tuplet_number)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tuplet_number.Stage(backRepoTuplet_number.GetStage())

	// preserve pointer to tuplet_numberDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Tuplet_numberDBID_Tuplet_numberDB)[tuplet_numberDB hold variable pointers
	tuplet_numberDB_Data := *tuplet_numberDB
	preservedPtrToTuplet_number := &tuplet_numberDB_Data
	backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[tuplet_numberDB.ID] = preservedPtrToTuplet_number

	return
}

// BackRepoTuplet_number.CheckoutPhaseTwo Checkouts all staged instances of Tuplet_number to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tuplet_numberDB := range backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB {
		backRepoTuplet_number.CheckoutPhaseTwoInstance(backRepo, tuplet_numberDB)
	}
	return
}

// BackRepoTuplet_number.CheckoutPhaseTwoInstance Checkouts staged instances of Tuplet_number to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tuplet_numberDB *Tuplet_numberDB) (Error error) {

	tuplet_number := backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr[tuplet_numberDB.ID]

	tuplet_numberDB.DecodePointers(backRepo, tuplet_number)

	return
}

func (tuplet_numberDB *Tuplet_numberDB) DecodePointers(backRepo *BackRepoStruct, tuplet_number *models.Tuplet_number) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTuplet_number allows commit of a single tuplet_number (if already staged)
func (backRepo *BackRepoStruct) CommitTuplet_number(tuplet_number *models.Tuplet_number) {
	backRepo.BackRepoTuplet_number.CommitPhaseOneInstance(tuplet_number)
	if id, ok := backRepo.BackRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number]; ok {
		backRepo.BackRepoTuplet_number.CommitPhaseTwoInstance(backRepo, id, tuplet_number)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTuplet_number allows checkout of a single tuplet_number (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTuplet_number(tuplet_number *models.Tuplet_number) {
	// check if the tuplet_number is staged
	if _, ok := backRepo.BackRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number]; ok {

		if id, ok := backRepo.BackRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_number]; ok {
			var tuplet_numberDB Tuplet_numberDB
			tuplet_numberDB.ID = id

			if err := backRepo.BackRepoTuplet_number.db.First(&tuplet_numberDB, id).Error; err != nil {
				log.Fatalln("CheckoutTuplet_number : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTuplet_number.CheckoutPhaseOneInstance(&tuplet_numberDB)
			backRepo.BackRepoTuplet_number.CheckoutPhaseTwoInstance(backRepo, &tuplet_numberDB)
		}
	}
}

// CopyBasicFieldsFromTuplet_number
func (tuplet_numberDB *Tuplet_numberDB) CopyBasicFieldsFromTuplet_number(tuplet_number *models.Tuplet_number) {
	// insertion point for fields commit

	tuplet_numberDB.Name_Data.String = tuplet_number.Name
	tuplet_numberDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTuplet_number_WOP
func (tuplet_numberDB *Tuplet_numberDB) CopyBasicFieldsFromTuplet_number_WOP(tuplet_number *models.Tuplet_number_WOP) {
	// insertion point for fields commit

	tuplet_numberDB.Name_Data.String = tuplet_number.Name
	tuplet_numberDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTuplet_numberWOP
func (tuplet_numberDB *Tuplet_numberDB) CopyBasicFieldsFromTuplet_numberWOP(tuplet_number *Tuplet_numberWOP) {
	// insertion point for fields commit

	tuplet_numberDB.Name_Data.String = tuplet_number.Name
	tuplet_numberDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTuplet_number
func (tuplet_numberDB *Tuplet_numberDB) CopyBasicFieldsToTuplet_number(tuplet_number *models.Tuplet_number) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_number.Name = tuplet_numberDB.Name_Data.String
}

// CopyBasicFieldsToTuplet_number_WOP
func (tuplet_numberDB *Tuplet_numberDB) CopyBasicFieldsToTuplet_number_WOP(tuplet_number *models.Tuplet_number_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_number.Name = tuplet_numberDB.Name_Data.String
}

// CopyBasicFieldsToTuplet_numberWOP
func (tuplet_numberDB *Tuplet_numberDB) CopyBasicFieldsToTuplet_numberWOP(tuplet_number *Tuplet_numberWOP) {
	tuplet_number.ID = int(tuplet_numberDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_number.Name = tuplet_numberDB.Name_Data.String
}

// Backup generates a json file from a slice of all Tuplet_numberDB instances in the backrepo
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Tuplet_numberDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Tuplet_numberDB, 0)
	for _, tuplet_numberDB := range backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB {
		forBackup = append(forBackup, tuplet_numberDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tuplet_number ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tuplet_number file", err.Error())
	}
}

// Backup generates a json file from a slice of all Tuplet_numberDB instances in the backrepo
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Tuplet_numberDB, 0)
	for _, tuplet_numberDB := range backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB {
		forBackup = append(forBackup, tuplet_numberDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tuplet_number")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tuplet_number_Fields, -1)
	for _, tuplet_numberDB := range forBackup {

		var tuplet_numberWOP Tuplet_numberWOP
		tuplet_numberDB.CopyBasicFieldsToTuplet_numberWOP(&tuplet_numberWOP)

		row := sh.AddRow()
		row.WriteStruct(&tuplet_numberWOP, -1)
	}
}

// RestoreXL from the "Tuplet_number" sheet all Tuplet_numberDB instances
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTuplet_numberid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tuplet_number"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTuplet_number.rowVisitorTuplet_number)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTuplet_number *BackRepoTuplet_numberStruct) rowVisitorTuplet_number(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tuplet_numberWOP Tuplet_numberWOP
		row.ReadStruct(&tuplet_numberWOP)

		// add the unmarshalled struct to the stage
		tuplet_numberDB := new(Tuplet_numberDB)
		tuplet_numberDB.CopyBasicFieldsFromTuplet_numberWOP(&tuplet_numberWOP)

		tuplet_numberDB_ID_atBackupTime := tuplet_numberDB.ID
		tuplet_numberDB.ID = 0
		query := backRepoTuplet_number.db.Create(tuplet_numberDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[tuplet_numberDB.ID] = tuplet_numberDB
		BackRepoTuplet_numberid_atBckpTime_newID[tuplet_numberDB_ID_atBackupTime] = tuplet_numberDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Tuplet_numberDB.json" in dirPath that stores an array
// of Tuplet_numberDB and stores it in the database
// the map BackRepoTuplet_numberid_atBckpTime_newID is updated accordingly
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTuplet_numberid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Tuplet_numberDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tuplet_number file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Tuplet_numberDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Tuplet_numberDBID_Tuplet_numberDB
	for _, tuplet_numberDB := range forRestore {

		tuplet_numberDB_ID_atBackupTime := tuplet_numberDB.ID
		tuplet_numberDB.ID = 0
		query := backRepoTuplet_number.db.Create(tuplet_numberDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[tuplet_numberDB.ID] = tuplet_numberDB
		BackRepoTuplet_numberid_atBckpTime_newID[tuplet_numberDB_ID_atBackupTime] = tuplet_numberDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tuplet_number file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tuplet_number>id_atBckpTime_newID
// to compute new index
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) RestorePhaseTwo() {

	for _, tuplet_numberDB := range backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB {

		// next line of code is to avert unused variable compilation error
		_ = tuplet_numberDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTuplet_number.db.Model(tuplet_numberDB).Updates(*tuplet_numberDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTuplet_number.ResetReversePointers commits all staged instances of Tuplet_number to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_number *BackRepoTuplet_numberStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet_number := range backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr {
		backRepoTuplet_number.ResetReversePointersInstance(backRepo, idx, tuplet_number)
	}

	return
}

func (backRepoTuplet_number *BackRepoTuplet_numberStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tuplet_number *models.Tuplet_number) (Error error) {

	// fetch matching tuplet_numberDB
	if tuplet_numberDB, ok := backRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberDB[idx]; ok {
		_ = tuplet_numberDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTuplet_numberid_atBckpTime_newID map[uint]uint
