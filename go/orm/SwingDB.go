// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Swing_sql sql.NullBool
var dummy_Swing_time time.Duration
var dummy_Swing_sort sort.Float64Slice

// SwingAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model swingAPI
type SwingAPI struct {
	gorm.Model

	models.Swing_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SwingPointersEncoding SwingPointersEncoding
}

// SwingPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SwingPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Straight is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	StraightID sql.NullInt64
}

// SwingDB describes a swing in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model swingDB
type SwingDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field swingDB.Name
	Name_Data sql.NullString

	// Declation for basic field swingDB.Swing_style
	Swing_style_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SwingPointersEncoding
}

// SwingDBs arrays swingDBs
// swagger:response swingDBsResponse
type SwingDBs []SwingDB

// SwingDBResponse provides response
// swagger:response swingDBResponse
type SwingDBResponse struct {
	SwingDB
}

// SwingWOP is a Swing without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SwingWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Swing_style string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Swing_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Swing_style",
}

type BackRepoSwingStruct struct {
	// stores SwingDB according to their gorm ID
	Map_SwingDBID_SwingDB map[uint]*SwingDB

	// stores SwingDB ID according to Swing address
	Map_SwingPtr_SwingDBID map[*models.Swing]uint

	// stores Swing according to their gorm ID
	Map_SwingDBID_SwingPtr map[uint]*models.Swing

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSwing *BackRepoSwingStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSwing.stage
	return
}

func (backRepoSwing *BackRepoSwingStruct) GetDB() *gorm.DB {
	return backRepoSwing.db
}

// GetSwingDBFromSwingPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSwing *BackRepoSwingStruct) GetSwingDBFromSwingPtr(swing *models.Swing) (swingDB *SwingDB) {
	id := backRepoSwing.Map_SwingPtr_SwingDBID[swing]
	swingDB = backRepoSwing.Map_SwingDBID_SwingDB[id]
	return
}

// BackRepoSwing.CommitPhaseOne commits all staged instances of Swing to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSwing *BackRepoSwingStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for swing := range stage.Swings {
		backRepoSwing.CommitPhaseOneInstance(swing)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, swing := range backRepoSwing.Map_SwingDBID_SwingPtr {
		if _, ok := stage.Swings[swing]; !ok {
			backRepoSwing.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSwing.CommitDeleteInstance commits deletion of Swing to the BackRepo
func (backRepoSwing *BackRepoSwingStruct) CommitDeleteInstance(id uint) (Error error) {

	swing := backRepoSwing.Map_SwingDBID_SwingPtr[id]

	// swing is not staged anymore, remove swingDB
	swingDB := backRepoSwing.Map_SwingDBID_SwingDB[id]
	query := backRepoSwing.db.Unscoped().Delete(&swingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSwing.Map_SwingPtr_SwingDBID, swing)
	delete(backRepoSwing.Map_SwingDBID_SwingPtr, id)
	delete(backRepoSwing.Map_SwingDBID_SwingDB, id)

	return
}

// BackRepoSwing.CommitPhaseOneInstance commits swing staged instances of Swing to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSwing *BackRepoSwingStruct) CommitPhaseOneInstance(swing *models.Swing) (Error error) {

	// check if the swing is not commited yet
	if _, ok := backRepoSwing.Map_SwingPtr_SwingDBID[swing]; ok {
		return
	}

	// initiate swing
	var swingDB SwingDB
	swingDB.CopyBasicFieldsFromSwing(swing)

	query := backRepoSwing.db.Create(&swingDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSwing.Map_SwingPtr_SwingDBID[swing] = swingDB.ID
	backRepoSwing.Map_SwingDBID_SwingPtr[swingDB.ID] = swing
	backRepoSwing.Map_SwingDBID_SwingDB[swingDB.ID] = &swingDB

	return
}

// BackRepoSwing.CommitPhaseTwo commits all staged instances of Swing to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSwing *BackRepoSwingStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, swing := range backRepoSwing.Map_SwingDBID_SwingPtr {
		backRepoSwing.CommitPhaseTwoInstance(backRepo, idx, swing)
	}

	return
}

// BackRepoSwing.CommitPhaseTwoInstance commits {{structname }} of models.Swing to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSwing *BackRepoSwingStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, swing *models.Swing) (Error error) {

	// fetch matching swingDB
	if swingDB, ok := backRepoSwing.Map_SwingDBID_SwingDB[idx]; ok {

		swingDB.CopyBasicFieldsFromSwing(swing)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value swing.Straight translates to updating the swing.StraightID
		swingDB.StraightID.Valid = true // allow for a 0 value (nil association)
		if swing.Straight != nil {
			if StraightId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[swing.Straight]; ok {
				swingDB.StraightID.Int64 = int64(StraightId)
				swingDB.StraightID.Valid = true
			}
		} else {
			swingDB.StraightID.Int64 = 0
			swingDB.StraightID.Valid = true
		}

		query := backRepoSwing.db.Save(&swingDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Swing intance %s", swing.Name))
		return err
	}

	return
}

// BackRepoSwing.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSwing *BackRepoSwingStruct) CheckoutPhaseOne() (Error error) {

	swingDBArray := make([]SwingDB, 0)
	query := backRepoSwing.db.Find(&swingDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	swingInstancesToBeRemovedFromTheStage := make(map[*models.Swing]any)
	for key, value := range backRepoSwing.stage.Swings {
		swingInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, swingDB := range swingDBArray {
		backRepoSwing.CheckoutPhaseOneInstance(&swingDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		swing, ok := backRepoSwing.Map_SwingDBID_SwingPtr[swingDB.ID]
		if ok {
			delete(swingInstancesToBeRemovedFromTheStage, swing)
		}
	}

	// remove from stage and back repo's 3 maps all swings that are not in the checkout
	for swing := range swingInstancesToBeRemovedFromTheStage {
		swing.Unstage(backRepoSwing.GetStage())

		// remove instance from the back repo 3 maps
		swingID := backRepoSwing.Map_SwingPtr_SwingDBID[swing]
		delete(backRepoSwing.Map_SwingPtr_SwingDBID, swing)
		delete(backRepoSwing.Map_SwingDBID_SwingDB, swingID)
		delete(backRepoSwing.Map_SwingDBID_SwingPtr, swingID)
	}

	return
}

// CheckoutPhaseOneInstance takes a swingDB that has been found in the DB, updates the backRepo and stages the
// models version of the swingDB
func (backRepoSwing *BackRepoSwingStruct) CheckoutPhaseOneInstance(swingDB *SwingDB) (Error error) {

	swing, ok := backRepoSwing.Map_SwingDBID_SwingPtr[swingDB.ID]
	if !ok {
		swing = new(models.Swing)

		backRepoSwing.Map_SwingDBID_SwingPtr[swingDB.ID] = swing
		backRepoSwing.Map_SwingPtr_SwingDBID[swing] = swingDB.ID

		// append model store with the new element
		swing.Name = swingDB.Name_Data.String
		swing.Stage(backRepoSwing.GetStage())
	}
	swingDB.CopyBasicFieldsToSwing(swing)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	swing.Stage(backRepoSwing.GetStage())

	// preserve pointer to swingDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SwingDBID_SwingDB)[swingDB hold variable pointers
	swingDB_Data := *swingDB
	preservedPtrToSwing := &swingDB_Data
	backRepoSwing.Map_SwingDBID_SwingDB[swingDB.ID] = preservedPtrToSwing

	return
}

// BackRepoSwing.CheckoutPhaseTwo Checkouts all staged instances of Swing to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSwing *BackRepoSwingStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, swingDB := range backRepoSwing.Map_SwingDBID_SwingDB {
		backRepoSwing.CheckoutPhaseTwoInstance(backRepo, swingDB)
	}
	return
}

// BackRepoSwing.CheckoutPhaseTwoInstance Checkouts staged instances of Swing to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSwing *BackRepoSwingStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, swingDB *SwingDB) (Error error) {

	swing := backRepoSwing.Map_SwingDBID_SwingPtr[swingDB.ID]

	swingDB.DecodePointers(backRepo, swing)

	return
}

func (swingDB *SwingDB) DecodePointers(backRepo *BackRepoStruct, swing *models.Swing) {

	// insertion point for checkout of pointer encoding
	// Straight field
	swing.Straight = nil
	if swingDB.StraightID.Int64 != 0 {
		swing.Straight = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(swingDB.StraightID.Int64)]
	}
	return
}

// CommitSwing allows commit of a single swing (if already staged)
func (backRepo *BackRepoStruct) CommitSwing(swing *models.Swing) {
	backRepo.BackRepoSwing.CommitPhaseOneInstance(swing)
	if id, ok := backRepo.BackRepoSwing.Map_SwingPtr_SwingDBID[swing]; ok {
		backRepo.BackRepoSwing.CommitPhaseTwoInstance(backRepo, id, swing)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSwing allows checkout of a single swing (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSwing(swing *models.Swing) {
	// check if the swing is staged
	if _, ok := backRepo.BackRepoSwing.Map_SwingPtr_SwingDBID[swing]; ok {

		if id, ok := backRepo.BackRepoSwing.Map_SwingPtr_SwingDBID[swing]; ok {
			var swingDB SwingDB
			swingDB.ID = id

			if err := backRepo.BackRepoSwing.db.First(&swingDB, id).Error; err != nil {
				log.Fatalln("CheckoutSwing : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSwing.CheckoutPhaseOneInstance(&swingDB)
			backRepo.BackRepoSwing.CheckoutPhaseTwoInstance(backRepo, &swingDB)
		}
	}
}

// CopyBasicFieldsFromSwing
func (swingDB *SwingDB) CopyBasicFieldsFromSwing(swing *models.Swing) {
	// insertion point for fields commit

	swingDB.Name_Data.String = swing.Name
	swingDB.Name_Data.Valid = true

	swingDB.Swing_style_Data.String = swing.Swing_style
	swingDB.Swing_style_Data.Valid = true
}

// CopyBasicFieldsFromSwing_WOP
func (swingDB *SwingDB) CopyBasicFieldsFromSwing_WOP(swing *models.Swing_WOP) {
	// insertion point for fields commit

	swingDB.Name_Data.String = swing.Name
	swingDB.Name_Data.Valid = true

	swingDB.Swing_style_Data.String = swing.Swing_style
	swingDB.Swing_style_Data.Valid = true
}

// CopyBasicFieldsFromSwingWOP
func (swingDB *SwingDB) CopyBasicFieldsFromSwingWOP(swing *SwingWOP) {
	// insertion point for fields commit

	swingDB.Name_Data.String = swing.Name
	swingDB.Name_Data.Valid = true

	swingDB.Swing_style_Data.String = swing.Swing_style
	swingDB.Swing_style_Data.Valid = true
}

// CopyBasicFieldsToSwing
func (swingDB *SwingDB) CopyBasicFieldsToSwing(swing *models.Swing) {
	// insertion point for checkout of basic fields (back repo to stage)
	swing.Name = swingDB.Name_Data.String
	swing.Swing_style = swingDB.Swing_style_Data.String
}

// CopyBasicFieldsToSwing_WOP
func (swingDB *SwingDB) CopyBasicFieldsToSwing_WOP(swing *models.Swing_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	swing.Name = swingDB.Name_Data.String
	swing.Swing_style = swingDB.Swing_style_Data.String
}

// CopyBasicFieldsToSwingWOP
func (swingDB *SwingDB) CopyBasicFieldsToSwingWOP(swing *SwingWOP) {
	swing.ID = int(swingDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	swing.Name = swingDB.Name_Data.String
	swing.Swing_style = swingDB.Swing_style_Data.String
}

// Backup generates a json file from a slice of all SwingDB instances in the backrepo
func (backRepoSwing *BackRepoSwingStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SwingDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SwingDB, 0)
	for _, swingDB := range backRepoSwing.Map_SwingDBID_SwingDB {
		forBackup = append(forBackup, swingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Swing ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Swing file", err.Error())
	}
}

// Backup generates a json file from a slice of all SwingDB instances in the backrepo
func (backRepoSwing *BackRepoSwingStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SwingDB, 0)
	for _, swingDB := range backRepoSwing.Map_SwingDBID_SwingDB {
		forBackup = append(forBackup, swingDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Swing")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Swing_Fields, -1)
	for _, swingDB := range forBackup {

		var swingWOP SwingWOP
		swingDB.CopyBasicFieldsToSwingWOP(&swingWOP)

		row := sh.AddRow()
		row.WriteStruct(&swingWOP, -1)
	}
}

// RestoreXL from the "Swing" sheet all SwingDB instances
func (backRepoSwing *BackRepoSwingStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSwingid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Swing"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSwing.rowVisitorSwing)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSwing *BackRepoSwingStruct) rowVisitorSwing(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var swingWOP SwingWOP
		row.ReadStruct(&swingWOP)

		// add the unmarshalled struct to the stage
		swingDB := new(SwingDB)
		swingDB.CopyBasicFieldsFromSwingWOP(&swingWOP)

		swingDB_ID_atBackupTime := swingDB.ID
		swingDB.ID = 0
		query := backRepoSwing.db.Create(swingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSwing.Map_SwingDBID_SwingDB[swingDB.ID] = swingDB
		BackRepoSwingid_atBckpTime_newID[swingDB_ID_atBackupTime] = swingDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SwingDB.json" in dirPath that stores an array
// of SwingDB and stores it in the database
// the map BackRepoSwingid_atBckpTime_newID is updated accordingly
func (backRepoSwing *BackRepoSwingStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSwingid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SwingDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Swing file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SwingDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SwingDBID_SwingDB
	for _, swingDB := range forRestore {

		swingDB_ID_atBackupTime := swingDB.ID
		swingDB.ID = 0
		query := backRepoSwing.db.Create(swingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSwing.Map_SwingDBID_SwingDB[swingDB.ID] = swingDB
		BackRepoSwingid_atBckpTime_newID[swingDB_ID_atBackupTime] = swingDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Swing file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Swing>id_atBckpTime_newID
// to compute new index
func (backRepoSwing *BackRepoSwingStruct) RestorePhaseTwo() {

	for _, swingDB := range backRepoSwing.Map_SwingDBID_SwingDB {

		// next line of code is to avert unused variable compilation error
		_ = swingDB

		// insertion point for reindexing pointers encoding
		// reindexing Straight field
		if swingDB.StraightID.Int64 != 0 {
			swingDB.StraightID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(swingDB.StraightID.Int64)])
			swingDB.StraightID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSwing.db.Model(swingDB).Updates(*swingDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSwing.ResetReversePointers commits all staged instances of Swing to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSwing *BackRepoSwingStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, swing := range backRepoSwing.Map_SwingDBID_SwingPtr {
		backRepoSwing.ResetReversePointersInstance(backRepo, idx, swing)
	}

	return
}

func (backRepoSwing *BackRepoSwingStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, swing *models.Swing) (Error error) {

	// fetch matching swingDB
	if swingDB, ok := backRepoSwing.Map_SwingDBID_SwingDB[idx]; ok {
		_ = swingDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSwingid_atBckpTime_newID map[uint]uint
