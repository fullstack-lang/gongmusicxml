// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Clef_sql sql.NullBool
var dummy_Clef_time time.Duration
var dummy_Clef_sort sort.Float64Slice

// ClefAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model clefAPI
type ClefAPI struct {
	gorm.Model

	models.Clef_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ClefPointersEncoding ClefPointersEncoding
}

// ClefPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ClefPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ClefDB describes a clef in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model clefDB
type ClefDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field clefDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ClefPointersEncoding
}

// ClefDBs arrays clefDBs
// swagger:response clefDBsResponse
type ClefDBs []ClefDB

// ClefDBResponse provides response
// swagger:response clefDBResponse
type ClefDBResponse struct {
	ClefDB
}

// ClefWOP is a Clef without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ClefWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Clef_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoClefStruct struct {
	// stores ClefDB according to their gorm ID
	Map_ClefDBID_ClefDB map[uint]*ClefDB

	// stores ClefDB ID according to Clef address
	Map_ClefPtr_ClefDBID map[*models.Clef]uint

	// stores Clef according to their gorm ID
	Map_ClefDBID_ClefPtr map[uint]*models.Clef

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoClef *BackRepoClefStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoClef.stage
	return
}

func (backRepoClef *BackRepoClefStruct) GetDB() *gorm.DB {
	return backRepoClef.db
}

// GetClefDBFromClefPtr is a handy function to access the back repo instance from the stage instance
func (backRepoClef *BackRepoClefStruct) GetClefDBFromClefPtr(clef *models.Clef) (clefDB *ClefDB) {
	id := backRepoClef.Map_ClefPtr_ClefDBID[clef]
	clefDB = backRepoClef.Map_ClefDBID_ClefDB[id]
	return
}

// BackRepoClef.CommitPhaseOne commits all staged instances of Clef to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClef *BackRepoClefStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for clef := range stage.Clefs {
		backRepoClef.CommitPhaseOneInstance(clef)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, clef := range backRepoClef.Map_ClefDBID_ClefPtr {
		if _, ok := stage.Clefs[clef]; !ok {
			backRepoClef.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoClef.CommitDeleteInstance commits deletion of Clef to the BackRepo
func (backRepoClef *BackRepoClefStruct) CommitDeleteInstance(id uint) (Error error) {

	clef := backRepoClef.Map_ClefDBID_ClefPtr[id]

	// clef is not staged anymore, remove clefDB
	clefDB := backRepoClef.Map_ClefDBID_ClefDB[id]
	query := backRepoClef.db.Unscoped().Delete(&clefDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoClef.Map_ClefPtr_ClefDBID, clef)
	delete(backRepoClef.Map_ClefDBID_ClefPtr, id)
	delete(backRepoClef.Map_ClefDBID_ClefDB, id)

	return
}

// BackRepoClef.CommitPhaseOneInstance commits clef staged instances of Clef to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoClef *BackRepoClefStruct) CommitPhaseOneInstance(clef *models.Clef) (Error error) {

	// check if the clef is not commited yet
	if _, ok := backRepoClef.Map_ClefPtr_ClefDBID[clef]; ok {
		return
	}

	// initiate clef
	var clefDB ClefDB
	clefDB.CopyBasicFieldsFromClef(clef)

	query := backRepoClef.db.Create(&clefDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoClef.Map_ClefPtr_ClefDBID[clef] = clefDB.ID
	backRepoClef.Map_ClefDBID_ClefPtr[clefDB.ID] = clef
	backRepoClef.Map_ClefDBID_ClefDB[clefDB.ID] = &clefDB

	return
}

// BackRepoClef.CommitPhaseTwo commits all staged instances of Clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClef *BackRepoClefStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, clef := range backRepoClef.Map_ClefDBID_ClefPtr {
		backRepoClef.CommitPhaseTwoInstance(backRepo, idx, clef)
	}

	return
}

// BackRepoClef.CommitPhaseTwoInstance commits {{structname }} of models.Clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClef *BackRepoClefStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, clef *models.Clef) (Error error) {

	// fetch matching clefDB
	if clefDB, ok := backRepoClef.Map_ClefDBID_ClefDB[idx]; ok {

		clefDB.CopyBasicFieldsFromClef(clef)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoClef.db.Save(&clefDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Clef intance %s", clef.Name))
		return err
	}

	return
}

// BackRepoClef.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoClef *BackRepoClefStruct) CheckoutPhaseOne() (Error error) {

	clefDBArray := make([]ClefDB, 0)
	query := backRepoClef.db.Find(&clefDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	clefInstancesToBeRemovedFromTheStage := make(map[*models.Clef]any)
	for key, value := range backRepoClef.stage.Clefs {
		clefInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, clefDB := range clefDBArray {
		backRepoClef.CheckoutPhaseOneInstance(&clefDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		clef, ok := backRepoClef.Map_ClefDBID_ClefPtr[clefDB.ID]
		if ok {
			delete(clefInstancesToBeRemovedFromTheStage, clef)
		}
	}

	// remove from stage and back repo's 3 maps all clefs that are not in the checkout
	for clef := range clefInstancesToBeRemovedFromTheStage {
		clef.Unstage(backRepoClef.GetStage())

		// remove instance from the back repo 3 maps
		clefID := backRepoClef.Map_ClefPtr_ClefDBID[clef]
		delete(backRepoClef.Map_ClefPtr_ClefDBID, clef)
		delete(backRepoClef.Map_ClefDBID_ClefDB, clefID)
		delete(backRepoClef.Map_ClefDBID_ClefPtr, clefID)
	}

	return
}

// CheckoutPhaseOneInstance takes a clefDB that has been found in the DB, updates the backRepo and stages the
// models version of the clefDB
func (backRepoClef *BackRepoClefStruct) CheckoutPhaseOneInstance(clefDB *ClefDB) (Error error) {

	clef, ok := backRepoClef.Map_ClefDBID_ClefPtr[clefDB.ID]
	if !ok {
		clef = new(models.Clef)

		backRepoClef.Map_ClefDBID_ClefPtr[clefDB.ID] = clef
		backRepoClef.Map_ClefPtr_ClefDBID[clef] = clefDB.ID

		// append model store with the new element
		clef.Name = clefDB.Name_Data.String
		clef.Stage(backRepoClef.GetStage())
	}
	clefDB.CopyBasicFieldsToClef(clef)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	clef.Stage(backRepoClef.GetStage())

	// preserve pointer to clefDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ClefDBID_ClefDB)[clefDB hold variable pointers
	clefDB_Data := *clefDB
	preservedPtrToClef := &clefDB_Data
	backRepoClef.Map_ClefDBID_ClefDB[clefDB.ID] = preservedPtrToClef

	return
}

// BackRepoClef.CheckoutPhaseTwo Checkouts all staged instances of Clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClef *BackRepoClefStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, clefDB := range backRepoClef.Map_ClefDBID_ClefDB {
		backRepoClef.CheckoutPhaseTwoInstance(backRepo, clefDB)
	}
	return
}

// BackRepoClef.CheckoutPhaseTwoInstance Checkouts staged instances of Clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClef *BackRepoClefStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, clefDB *ClefDB) (Error error) {

	clef := backRepoClef.Map_ClefDBID_ClefPtr[clefDB.ID]

	clefDB.DecodePointers(backRepo, clef)

	return
}

func (clefDB *ClefDB) DecodePointers(backRepo *BackRepoStruct, clef *models.Clef) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitClef allows commit of a single clef (if already staged)
func (backRepo *BackRepoStruct) CommitClef(clef *models.Clef) {
	backRepo.BackRepoClef.CommitPhaseOneInstance(clef)
	if id, ok := backRepo.BackRepoClef.Map_ClefPtr_ClefDBID[clef]; ok {
		backRepo.BackRepoClef.CommitPhaseTwoInstance(backRepo, id, clef)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitClef allows checkout of a single clef (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutClef(clef *models.Clef) {
	// check if the clef is staged
	if _, ok := backRepo.BackRepoClef.Map_ClefPtr_ClefDBID[clef]; ok {

		if id, ok := backRepo.BackRepoClef.Map_ClefPtr_ClefDBID[clef]; ok {
			var clefDB ClefDB
			clefDB.ID = id

			if err := backRepo.BackRepoClef.db.First(&clefDB, id).Error; err != nil {
				log.Fatalln("CheckoutClef : Problem with getting object with id:", id)
			}
			backRepo.BackRepoClef.CheckoutPhaseOneInstance(&clefDB)
			backRepo.BackRepoClef.CheckoutPhaseTwoInstance(backRepo, &clefDB)
		}
	}
}

// CopyBasicFieldsFromClef
func (clefDB *ClefDB) CopyBasicFieldsFromClef(clef *models.Clef) {
	// insertion point for fields commit

	clefDB.Name_Data.String = clef.Name
	clefDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromClef_WOP
func (clefDB *ClefDB) CopyBasicFieldsFromClef_WOP(clef *models.Clef_WOP) {
	// insertion point for fields commit

	clefDB.Name_Data.String = clef.Name
	clefDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromClefWOP
func (clefDB *ClefDB) CopyBasicFieldsFromClefWOP(clef *ClefWOP) {
	// insertion point for fields commit

	clefDB.Name_Data.String = clef.Name
	clefDB.Name_Data.Valid = true
}

// CopyBasicFieldsToClef
func (clefDB *ClefDB) CopyBasicFieldsToClef(clef *models.Clef) {
	// insertion point for checkout of basic fields (back repo to stage)
	clef.Name = clefDB.Name_Data.String
}

// CopyBasicFieldsToClef_WOP
func (clefDB *ClefDB) CopyBasicFieldsToClef_WOP(clef *models.Clef_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	clef.Name = clefDB.Name_Data.String
}

// CopyBasicFieldsToClefWOP
func (clefDB *ClefDB) CopyBasicFieldsToClefWOP(clef *ClefWOP) {
	clef.ID = int(clefDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	clef.Name = clefDB.Name_Data.String
}

// Backup generates a json file from a slice of all ClefDB instances in the backrepo
func (backRepoClef *BackRepoClefStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ClefDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ClefDB, 0)
	for _, clefDB := range backRepoClef.Map_ClefDBID_ClefDB {
		forBackup = append(forBackup, clefDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Clef ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Clef file", err.Error())
	}
}

// Backup generates a json file from a slice of all ClefDB instances in the backrepo
func (backRepoClef *BackRepoClefStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ClefDB, 0)
	for _, clefDB := range backRepoClef.Map_ClefDBID_ClefDB {
		forBackup = append(forBackup, clefDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Clef")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Clef_Fields, -1)
	for _, clefDB := range forBackup {

		var clefWOP ClefWOP
		clefDB.CopyBasicFieldsToClefWOP(&clefWOP)

		row := sh.AddRow()
		row.WriteStruct(&clefWOP, -1)
	}
}

// RestoreXL from the "Clef" sheet all ClefDB instances
func (backRepoClef *BackRepoClefStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoClefid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Clef"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoClef.rowVisitorClef)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoClef *BackRepoClefStruct) rowVisitorClef(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var clefWOP ClefWOP
		row.ReadStruct(&clefWOP)

		// add the unmarshalled struct to the stage
		clefDB := new(ClefDB)
		clefDB.CopyBasicFieldsFromClefWOP(&clefWOP)

		clefDB_ID_atBackupTime := clefDB.ID
		clefDB.ID = 0
		query := backRepoClef.db.Create(clefDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoClef.Map_ClefDBID_ClefDB[clefDB.ID] = clefDB
		BackRepoClefid_atBckpTime_newID[clefDB_ID_atBackupTime] = clefDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ClefDB.json" in dirPath that stores an array
// of ClefDB and stores it in the database
// the map BackRepoClefid_atBckpTime_newID is updated accordingly
func (backRepoClef *BackRepoClefStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoClefid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ClefDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Clef file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ClefDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ClefDBID_ClefDB
	for _, clefDB := range forRestore {

		clefDB_ID_atBackupTime := clefDB.ID
		clefDB.ID = 0
		query := backRepoClef.db.Create(clefDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoClef.Map_ClefDBID_ClefDB[clefDB.ID] = clefDB
		BackRepoClefid_atBckpTime_newID[clefDB_ID_atBackupTime] = clefDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Clef file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Clef>id_atBckpTime_newID
// to compute new index
func (backRepoClef *BackRepoClefStruct) RestorePhaseTwo() {

	for _, clefDB := range backRepoClef.Map_ClefDBID_ClefDB {

		// next line of code is to avert unused variable compilation error
		_ = clefDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoClef.db.Model(clefDB).Updates(*clefDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoClef.ResetReversePointers commits all staged instances of Clef to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoClef *BackRepoClefStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, clef := range backRepoClef.Map_ClefDBID_ClefPtr {
		backRepoClef.ResetReversePointersInstance(backRepo, idx, clef)
	}

	return
}

func (backRepoClef *BackRepoClefStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, clef *models.Clef) (Error error) {

	// fetch matching clefDB
	if clefDB, ok := backRepoClef.Map_ClefDBID_ClefDB[idx]; ok {
		_ = clefDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoClefid_atBckpTime_newID map[uint]uint
