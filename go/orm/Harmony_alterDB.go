// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Harmony_alter_sql sql.NullBool
var dummy_Harmony_alter_time time.Duration
var dummy_Harmony_alter_sort sort.Float64Slice

// Harmony_alterAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model harmony_alterAPI
type Harmony_alterAPI struct {
	gorm.Model

	models.Harmony_alter_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Harmony_alterPointersEncoding Harmony_alterPointersEncoding
}

// Harmony_alterPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Harmony_alterPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Harmony_alterDB describes a harmony_alter in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model harmony_alterDB
type Harmony_alterDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field harmony_alterDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Harmony_alterPointersEncoding
}

// Harmony_alterDBs arrays harmony_alterDBs
// swagger:response harmony_alterDBsResponse
type Harmony_alterDBs []Harmony_alterDB

// Harmony_alterDBResponse provides response
// swagger:response harmony_alterDBResponse
type Harmony_alterDBResponse struct {
	Harmony_alterDB
}

// Harmony_alterWOP is a Harmony_alter without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Harmony_alterWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Harmony_alter_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHarmony_alterStruct struct {
	// stores Harmony_alterDB according to their gorm ID
	Map_Harmony_alterDBID_Harmony_alterDB map[uint]*Harmony_alterDB

	// stores Harmony_alterDB ID according to Harmony_alter address
	Map_Harmony_alterPtr_Harmony_alterDBID map[*models.Harmony_alter]uint

	// stores Harmony_alter according to their gorm ID
	Map_Harmony_alterDBID_Harmony_alterPtr map[uint]*models.Harmony_alter

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHarmony_alter.stage
	return
}

func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) GetDB() *gorm.DB {
	return backRepoHarmony_alter.db
}

// GetHarmony_alterDBFromHarmony_alterPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) GetHarmony_alterDBFromHarmony_alterPtr(harmony_alter *models.Harmony_alter) (harmony_alterDB *Harmony_alterDB) {
	id := backRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter]
	harmony_alterDB = backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[id]
	return
}

// BackRepoHarmony_alter.CommitPhaseOne commits all staged instances of Harmony_alter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for harmony_alter := range stage.Harmony_alters {
		backRepoHarmony_alter.CommitPhaseOneInstance(harmony_alter)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, harmony_alter := range backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr {
		if _, ok := stage.Harmony_alters[harmony_alter]; !ok {
			backRepoHarmony_alter.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHarmony_alter.CommitDeleteInstance commits deletion of Harmony_alter to the BackRepo
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CommitDeleteInstance(id uint) (Error error) {

	harmony_alter := backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[id]

	// harmony_alter is not staged anymore, remove harmony_alterDB
	harmony_alterDB := backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[id]
	query := backRepoHarmony_alter.db.Unscoped().Delete(&harmony_alterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID, harmony_alter)
	delete(backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr, id)
	delete(backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB, id)

	return
}

// BackRepoHarmony_alter.CommitPhaseOneInstance commits harmony_alter staged instances of Harmony_alter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CommitPhaseOneInstance(harmony_alter *models.Harmony_alter) (Error error) {

	// check if the harmony_alter is not commited yet
	if _, ok := backRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter]; ok {
		return
	}

	// initiate harmony_alter
	var harmony_alterDB Harmony_alterDB
	harmony_alterDB.CopyBasicFieldsFromHarmony_alter(harmony_alter)

	query := backRepoHarmony_alter.db.Create(&harmony_alterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter] = harmony_alterDB.ID
	backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[harmony_alterDB.ID] = harmony_alter
	backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[harmony_alterDB.ID] = &harmony_alterDB

	return
}

// BackRepoHarmony_alter.CommitPhaseTwo commits all staged instances of Harmony_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, harmony_alter := range backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr {
		backRepoHarmony_alter.CommitPhaseTwoInstance(backRepo, idx, harmony_alter)
	}

	return
}

// BackRepoHarmony_alter.CommitPhaseTwoInstance commits {{structname }} of models.Harmony_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, harmony_alter *models.Harmony_alter) (Error error) {

	// fetch matching harmony_alterDB
	if harmony_alterDB, ok := backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[idx]; ok {

		harmony_alterDB.CopyBasicFieldsFromHarmony_alter(harmony_alter)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHarmony_alter.db.Save(&harmony_alterDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Harmony_alter intance %s", harmony_alter.Name))
		return err
	}

	return
}

// BackRepoHarmony_alter.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CheckoutPhaseOne() (Error error) {

	harmony_alterDBArray := make([]Harmony_alterDB, 0)
	query := backRepoHarmony_alter.db.Find(&harmony_alterDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	harmony_alterInstancesToBeRemovedFromTheStage := make(map[*models.Harmony_alter]any)
	for key, value := range backRepoHarmony_alter.stage.Harmony_alters {
		harmony_alterInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, harmony_alterDB := range harmony_alterDBArray {
		backRepoHarmony_alter.CheckoutPhaseOneInstance(&harmony_alterDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		harmony_alter, ok := backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[harmony_alterDB.ID]
		if ok {
			delete(harmony_alterInstancesToBeRemovedFromTheStage, harmony_alter)
		}
	}

	// remove from stage and back repo's 3 maps all harmony_alters that are not in the checkout
	for harmony_alter := range harmony_alterInstancesToBeRemovedFromTheStage {
		harmony_alter.Unstage(backRepoHarmony_alter.GetStage())

		// remove instance from the back repo 3 maps
		harmony_alterID := backRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter]
		delete(backRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID, harmony_alter)
		delete(backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB, harmony_alterID)
		delete(backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr, harmony_alterID)
	}

	return
}

// CheckoutPhaseOneInstance takes a harmony_alterDB that has been found in the DB, updates the backRepo and stages the
// models version of the harmony_alterDB
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CheckoutPhaseOneInstance(harmony_alterDB *Harmony_alterDB) (Error error) {

	harmony_alter, ok := backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[harmony_alterDB.ID]
	if !ok {
		harmony_alter = new(models.Harmony_alter)

		backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[harmony_alterDB.ID] = harmony_alter
		backRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter] = harmony_alterDB.ID

		// append model store with the new element
		harmony_alter.Name = harmony_alterDB.Name_Data.String
		harmony_alter.Stage(backRepoHarmony_alter.GetStage())
	}
	harmony_alterDB.CopyBasicFieldsToHarmony_alter(harmony_alter)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	harmony_alter.Stage(backRepoHarmony_alter.GetStage())

	// preserve pointer to harmony_alterDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Harmony_alterDBID_Harmony_alterDB)[harmony_alterDB hold variable pointers
	harmony_alterDB_Data := *harmony_alterDB
	preservedPtrToHarmony_alter := &harmony_alterDB_Data
	backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[harmony_alterDB.ID] = preservedPtrToHarmony_alter

	return
}

// BackRepoHarmony_alter.CheckoutPhaseTwo Checkouts all staged instances of Harmony_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, harmony_alterDB := range backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB {
		backRepoHarmony_alter.CheckoutPhaseTwoInstance(backRepo, harmony_alterDB)
	}
	return
}

// BackRepoHarmony_alter.CheckoutPhaseTwoInstance Checkouts staged instances of Harmony_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, harmony_alterDB *Harmony_alterDB) (Error error) {

	harmony_alter := backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr[harmony_alterDB.ID]

	harmony_alterDB.DecodePointers(backRepo, harmony_alter)

	return
}

func (harmony_alterDB *Harmony_alterDB) DecodePointers(backRepo *BackRepoStruct, harmony_alter *models.Harmony_alter) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHarmony_alter allows commit of a single harmony_alter (if already staged)
func (backRepo *BackRepoStruct) CommitHarmony_alter(harmony_alter *models.Harmony_alter) {
	backRepo.BackRepoHarmony_alter.CommitPhaseOneInstance(harmony_alter)
	if id, ok := backRepo.BackRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter]; ok {
		backRepo.BackRepoHarmony_alter.CommitPhaseTwoInstance(backRepo, id, harmony_alter)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHarmony_alter allows checkout of a single harmony_alter (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHarmony_alter(harmony_alter *models.Harmony_alter) {
	// check if the harmony_alter is staged
	if _, ok := backRepo.BackRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter]; ok {

		if id, ok := backRepo.BackRepoHarmony_alter.Map_Harmony_alterPtr_Harmony_alterDBID[harmony_alter]; ok {
			var harmony_alterDB Harmony_alterDB
			harmony_alterDB.ID = id

			if err := backRepo.BackRepoHarmony_alter.db.First(&harmony_alterDB, id).Error; err != nil {
				log.Fatalln("CheckoutHarmony_alter : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHarmony_alter.CheckoutPhaseOneInstance(&harmony_alterDB)
			backRepo.BackRepoHarmony_alter.CheckoutPhaseTwoInstance(backRepo, &harmony_alterDB)
		}
	}
}

// CopyBasicFieldsFromHarmony_alter
func (harmony_alterDB *Harmony_alterDB) CopyBasicFieldsFromHarmony_alter(harmony_alter *models.Harmony_alter) {
	// insertion point for fields commit

	harmony_alterDB.Name_Data.String = harmony_alter.Name
	harmony_alterDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmony_alter_WOP
func (harmony_alterDB *Harmony_alterDB) CopyBasicFieldsFromHarmony_alter_WOP(harmony_alter *models.Harmony_alter_WOP) {
	// insertion point for fields commit

	harmony_alterDB.Name_Data.String = harmony_alter.Name
	harmony_alterDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHarmony_alterWOP
func (harmony_alterDB *Harmony_alterDB) CopyBasicFieldsFromHarmony_alterWOP(harmony_alter *Harmony_alterWOP) {
	// insertion point for fields commit

	harmony_alterDB.Name_Data.String = harmony_alter.Name
	harmony_alterDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHarmony_alter
func (harmony_alterDB *Harmony_alterDB) CopyBasicFieldsToHarmony_alter(harmony_alter *models.Harmony_alter) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmony_alter.Name = harmony_alterDB.Name_Data.String
}

// CopyBasicFieldsToHarmony_alter_WOP
func (harmony_alterDB *Harmony_alterDB) CopyBasicFieldsToHarmony_alter_WOP(harmony_alter *models.Harmony_alter_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	harmony_alter.Name = harmony_alterDB.Name_Data.String
}

// CopyBasicFieldsToHarmony_alterWOP
func (harmony_alterDB *Harmony_alterDB) CopyBasicFieldsToHarmony_alterWOP(harmony_alter *Harmony_alterWOP) {
	harmony_alter.ID = int(harmony_alterDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	harmony_alter.Name = harmony_alterDB.Name_Data.String
}

// Backup generates a json file from a slice of all Harmony_alterDB instances in the backrepo
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Harmony_alterDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Harmony_alterDB, 0)
	for _, harmony_alterDB := range backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB {
		forBackup = append(forBackup, harmony_alterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Harmony_alter ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Harmony_alter file", err.Error())
	}
}

// Backup generates a json file from a slice of all Harmony_alterDB instances in the backrepo
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Harmony_alterDB, 0)
	for _, harmony_alterDB := range backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB {
		forBackup = append(forBackup, harmony_alterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Harmony_alter")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Harmony_alter_Fields, -1)
	for _, harmony_alterDB := range forBackup {

		var harmony_alterWOP Harmony_alterWOP
		harmony_alterDB.CopyBasicFieldsToHarmony_alterWOP(&harmony_alterWOP)

		row := sh.AddRow()
		row.WriteStruct(&harmony_alterWOP, -1)
	}
}

// RestoreXL from the "Harmony_alter" sheet all Harmony_alterDB instances
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHarmony_alterid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Harmony_alter"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHarmony_alter.rowVisitorHarmony_alter)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) rowVisitorHarmony_alter(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var harmony_alterWOP Harmony_alterWOP
		row.ReadStruct(&harmony_alterWOP)

		// add the unmarshalled struct to the stage
		harmony_alterDB := new(Harmony_alterDB)
		harmony_alterDB.CopyBasicFieldsFromHarmony_alterWOP(&harmony_alterWOP)

		harmony_alterDB_ID_atBackupTime := harmony_alterDB.ID
		harmony_alterDB.ID = 0
		query := backRepoHarmony_alter.db.Create(harmony_alterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[harmony_alterDB.ID] = harmony_alterDB
		BackRepoHarmony_alterid_atBckpTime_newID[harmony_alterDB_ID_atBackupTime] = harmony_alterDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Harmony_alterDB.json" in dirPath that stores an array
// of Harmony_alterDB and stores it in the database
// the map BackRepoHarmony_alterid_atBckpTime_newID is updated accordingly
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHarmony_alterid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Harmony_alterDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Harmony_alter file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Harmony_alterDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Harmony_alterDBID_Harmony_alterDB
	for _, harmony_alterDB := range forRestore {

		harmony_alterDB_ID_atBackupTime := harmony_alterDB.ID
		harmony_alterDB.ID = 0
		query := backRepoHarmony_alter.db.Create(harmony_alterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[harmony_alterDB.ID] = harmony_alterDB
		BackRepoHarmony_alterid_atBckpTime_newID[harmony_alterDB_ID_atBackupTime] = harmony_alterDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Harmony_alter file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Harmony_alter>id_atBckpTime_newID
// to compute new index
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) RestorePhaseTwo() {

	for _, harmony_alterDB := range backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB {

		// next line of code is to avert unused variable compilation error
		_ = harmony_alterDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHarmony_alter.db.Model(harmony_alterDB).Updates(*harmony_alterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHarmony_alter.ResetReversePointers commits all staged instances of Harmony_alter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, harmony_alter := range backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterPtr {
		backRepoHarmony_alter.ResetReversePointersInstance(backRepo, idx, harmony_alter)
	}

	return
}

func (backRepoHarmony_alter *BackRepoHarmony_alterStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, harmony_alter *models.Harmony_alter) (Error error) {

	// fetch matching harmony_alterDB
	if harmony_alterDB, ok := backRepoHarmony_alter.Map_Harmony_alterDBID_Harmony_alterDB[idx]; ok {
		_ = harmony_alterDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHarmony_alterid_atBckpTime_newID map[uint]uint
