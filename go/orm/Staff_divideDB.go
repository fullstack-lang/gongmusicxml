// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Staff_divide_sql sql.NullBool
var dummy_Staff_divide_time time.Duration
var dummy_Staff_divide_sort sort.Float64Slice

// Staff_divideAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model staff_divideAPI
type Staff_divideAPI struct {
	gorm.Model

	models.Staff_divide_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Staff_dividePointersEncoding Staff_dividePointersEncoding
}

// Staff_dividePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Staff_dividePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Staff_divideDB describes a staff_divide in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model staff_divideDB
type Staff_divideDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field staff_divideDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Staff_dividePointersEncoding
}

// Staff_divideDBs arrays staff_divideDBs
// swagger:response staff_divideDBsResponse
type Staff_divideDBs []Staff_divideDB

// Staff_divideDBResponse provides response
// swagger:response staff_divideDBResponse
type Staff_divideDBResponse struct {
	Staff_divideDB
}

// Staff_divideWOP is a Staff_divide without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Staff_divideWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Staff_divide_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoStaff_divideStruct struct {
	// stores Staff_divideDB according to their gorm ID
	Map_Staff_divideDBID_Staff_divideDB map[uint]*Staff_divideDB

	// stores Staff_divideDB ID according to Staff_divide address
	Map_Staff_dividePtr_Staff_divideDBID map[*models.Staff_divide]uint

	// stores Staff_divide according to their gorm ID
	Map_Staff_divideDBID_Staff_dividePtr map[uint]*models.Staff_divide

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoStaff_divide *BackRepoStaff_divideStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoStaff_divide.stage
	return
}

func (backRepoStaff_divide *BackRepoStaff_divideStruct) GetDB() *gorm.DB {
	return backRepoStaff_divide.db
}

// GetStaff_divideDBFromStaff_dividePtr is a handy function to access the back repo instance from the stage instance
func (backRepoStaff_divide *BackRepoStaff_divideStruct) GetStaff_divideDBFromStaff_dividePtr(staff_divide *models.Staff_divide) (staff_divideDB *Staff_divideDB) {
	id := backRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide]
	staff_divideDB = backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[id]
	return
}

// BackRepoStaff_divide.CommitPhaseOne commits all staged instances of Staff_divide to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for staff_divide := range stage.Staff_divides {
		backRepoStaff_divide.CommitPhaseOneInstance(staff_divide)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, staff_divide := range backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr {
		if _, ok := stage.Staff_divides[staff_divide]; !ok {
			backRepoStaff_divide.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStaff_divide.CommitDeleteInstance commits deletion of Staff_divide to the BackRepo
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CommitDeleteInstance(id uint) (Error error) {

	staff_divide := backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr[id]

	// staff_divide is not staged anymore, remove staff_divideDB
	staff_divideDB := backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[id]
	query := backRepoStaff_divide.db.Unscoped().Delete(&staff_divideDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID, staff_divide)
	delete(backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr, id)
	delete(backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB, id)

	return
}

// BackRepoStaff_divide.CommitPhaseOneInstance commits staff_divide staged instances of Staff_divide to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CommitPhaseOneInstance(staff_divide *models.Staff_divide) (Error error) {

	// check if the staff_divide is not commited yet
	if _, ok := backRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide]; ok {
		return
	}

	// initiate staff_divide
	var staff_divideDB Staff_divideDB
	staff_divideDB.CopyBasicFieldsFromStaff_divide(staff_divide)

	query := backRepoStaff_divide.db.Create(&staff_divideDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide] = staff_divideDB.ID
	backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr[staff_divideDB.ID] = staff_divide
	backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[staff_divideDB.ID] = &staff_divideDB

	return
}

// BackRepoStaff_divide.CommitPhaseTwo commits all staged instances of Staff_divide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_divide := range backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr {
		backRepoStaff_divide.CommitPhaseTwoInstance(backRepo, idx, staff_divide)
	}

	return
}

// BackRepoStaff_divide.CommitPhaseTwoInstance commits {{structname }} of models.Staff_divide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, staff_divide *models.Staff_divide) (Error error) {

	// fetch matching staff_divideDB
	if staff_divideDB, ok := backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[idx]; ok {

		staff_divideDB.CopyBasicFieldsFromStaff_divide(staff_divide)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoStaff_divide.db.Save(&staff_divideDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Staff_divide intance %s", staff_divide.Name))
		return err
	}

	return
}

// BackRepoStaff_divide.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CheckoutPhaseOne() (Error error) {

	staff_divideDBArray := make([]Staff_divideDB, 0)
	query := backRepoStaff_divide.db.Find(&staff_divideDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	staff_divideInstancesToBeRemovedFromTheStage := make(map[*models.Staff_divide]any)
	for key, value := range backRepoStaff_divide.stage.Staff_divides {
		staff_divideInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, staff_divideDB := range staff_divideDBArray {
		backRepoStaff_divide.CheckoutPhaseOneInstance(&staff_divideDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		staff_divide, ok := backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr[staff_divideDB.ID]
		if ok {
			delete(staff_divideInstancesToBeRemovedFromTheStage, staff_divide)
		}
	}

	// remove from stage and back repo's 3 maps all staff_divides that are not in the checkout
	for staff_divide := range staff_divideInstancesToBeRemovedFromTheStage {
		staff_divide.Unstage(backRepoStaff_divide.GetStage())

		// remove instance from the back repo 3 maps
		staff_divideID := backRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide]
		delete(backRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID, staff_divide)
		delete(backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB, staff_divideID)
		delete(backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr, staff_divideID)
	}

	return
}

// CheckoutPhaseOneInstance takes a staff_divideDB that has been found in the DB, updates the backRepo and stages the
// models version of the staff_divideDB
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CheckoutPhaseOneInstance(staff_divideDB *Staff_divideDB) (Error error) {

	staff_divide, ok := backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr[staff_divideDB.ID]
	if !ok {
		staff_divide = new(models.Staff_divide)

		backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr[staff_divideDB.ID] = staff_divide
		backRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide] = staff_divideDB.ID

		// append model store with the new element
		staff_divide.Name = staff_divideDB.Name_Data.String
		staff_divide.Stage(backRepoStaff_divide.GetStage())
	}
	staff_divideDB.CopyBasicFieldsToStaff_divide(staff_divide)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	staff_divide.Stage(backRepoStaff_divide.GetStage())

	// preserve pointer to staff_divideDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Staff_divideDBID_Staff_divideDB)[staff_divideDB hold variable pointers
	staff_divideDB_Data := *staff_divideDB
	preservedPtrToStaff_divide := &staff_divideDB_Data
	backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[staff_divideDB.ID] = preservedPtrToStaff_divide

	return
}

// BackRepoStaff_divide.CheckoutPhaseTwo Checkouts all staged instances of Staff_divide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, staff_divideDB := range backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB {
		backRepoStaff_divide.CheckoutPhaseTwoInstance(backRepo, staff_divideDB)
	}
	return
}

// BackRepoStaff_divide.CheckoutPhaseTwoInstance Checkouts staged instances of Staff_divide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_divide *BackRepoStaff_divideStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, staff_divideDB *Staff_divideDB) (Error error) {

	staff_divide := backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr[staff_divideDB.ID]

	staff_divideDB.DecodePointers(backRepo, staff_divide)

	return
}

func (staff_divideDB *Staff_divideDB) DecodePointers(backRepo *BackRepoStruct, staff_divide *models.Staff_divide) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStaff_divide allows commit of a single staff_divide (if already staged)
func (backRepo *BackRepoStruct) CommitStaff_divide(staff_divide *models.Staff_divide) {
	backRepo.BackRepoStaff_divide.CommitPhaseOneInstance(staff_divide)
	if id, ok := backRepo.BackRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide]; ok {
		backRepo.BackRepoStaff_divide.CommitPhaseTwoInstance(backRepo, id, staff_divide)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStaff_divide allows checkout of a single staff_divide (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStaff_divide(staff_divide *models.Staff_divide) {
	// check if the staff_divide is staged
	if _, ok := backRepo.BackRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide]; ok {

		if id, ok := backRepo.BackRepoStaff_divide.Map_Staff_dividePtr_Staff_divideDBID[staff_divide]; ok {
			var staff_divideDB Staff_divideDB
			staff_divideDB.ID = id

			if err := backRepo.BackRepoStaff_divide.db.First(&staff_divideDB, id).Error; err != nil {
				log.Fatalln("CheckoutStaff_divide : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStaff_divide.CheckoutPhaseOneInstance(&staff_divideDB)
			backRepo.BackRepoStaff_divide.CheckoutPhaseTwoInstance(backRepo, &staff_divideDB)
		}
	}
}

// CopyBasicFieldsFromStaff_divide
func (staff_divideDB *Staff_divideDB) CopyBasicFieldsFromStaff_divide(staff_divide *models.Staff_divide) {
	// insertion point for fields commit

	staff_divideDB.Name_Data.String = staff_divide.Name
	staff_divideDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_divide_WOP
func (staff_divideDB *Staff_divideDB) CopyBasicFieldsFromStaff_divide_WOP(staff_divide *models.Staff_divide_WOP) {
	// insertion point for fields commit

	staff_divideDB.Name_Data.String = staff_divide.Name
	staff_divideDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStaff_divideWOP
func (staff_divideDB *Staff_divideDB) CopyBasicFieldsFromStaff_divideWOP(staff_divide *Staff_divideWOP) {
	// insertion point for fields commit

	staff_divideDB.Name_Data.String = staff_divide.Name
	staff_divideDB.Name_Data.Valid = true
}

// CopyBasicFieldsToStaff_divide
func (staff_divideDB *Staff_divideDB) CopyBasicFieldsToStaff_divide(staff_divide *models.Staff_divide) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_divide.Name = staff_divideDB.Name_Data.String
}

// CopyBasicFieldsToStaff_divide_WOP
func (staff_divideDB *Staff_divideDB) CopyBasicFieldsToStaff_divide_WOP(staff_divide *models.Staff_divide_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	staff_divide.Name = staff_divideDB.Name_Data.String
}

// CopyBasicFieldsToStaff_divideWOP
func (staff_divideDB *Staff_divideDB) CopyBasicFieldsToStaff_divideWOP(staff_divide *Staff_divideWOP) {
	staff_divide.ID = int(staff_divideDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	staff_divide.Name = staff_divideDB.Name_Data.String
}

// Backup generates a json file from a slice of all Staff_divideDB instances in the backrepo
func (backRepoStaff_divide *BackRepoStaff_divideStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Staff_divideDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_divideDB, 0)
	for _, staff_divideDB := range backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB {
		forBackup = append(forBackup, staff_divideDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Staff_divide ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Staff_divide file", err.Error())
	}
}

// Backup generates a json file from a slice of all Staff_divideDB instances in the backrepo
func (backRepoStaff_divide *BackRepoStaff_divideStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Staff_divideDB, 0)
	for _, staff_divideDB := range backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB {
		forBackup = append(forBackup, staff_divideDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Staff_divide")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Staff_divide_Fields, -1)
	for _, staff_divideDB := range forBackup {

		var staff_divideWOP Staff_divideWOP
		staff_divideDB.CopyBasicFieldsToStaff_divideWOP(&staff_divideWOP)

		row := sh.AddRow()
		row.WriteStruct(&staff_divideWOP, -1)
	}
}

// RestoreXL from the "Staff_divide" sheet all Staff_divideDB instances
func (backRepoStaff_divide *BackRepoStaff_divideStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStaff_divideid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Staff_divide"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStaff_divide.rowVisitorStaff_divide)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStaff_divide *BackRepoStaff_divideStruct) rowVisitorStaff_divide(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var staff_divideWOP Staff_divideWOP
		row.ReadStruct(&staff_divideWOP)

		// add the unmarshalled struct to the stage
		staff_divideDB := new(Staff_divideDB)
		staff_divideDB.CopyBasicFieldsFromStaff_divideWOP(&staff_divideWOP)

		staff_divideDB_ID_atBackupTime := staff_divideDB.ID
		staff_divideDB.ID = 0
		query := backRepoStaff_divide.db.Create(staff_divideDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[staff_divideDB.ID] = staff_divideDB
		BackRepoStaff_divideid_atBckpTime_newID[staff_divideDB_ID_atBackupTime] = staff_divideDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Staff_divideDB.json" in dirPath that stores an array
// of Staff_divideDB and stores it in the database
// the map BackRepoStaff_divideid_atBckpTime_newID is updated accordingly
func (backRepoStaff_divide *BackRepoStaff_divideStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStaff_divideid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Staff_divideDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Staff_divide file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Staff_divideDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Staff_divideDBID_Staff_divideDB
	for _, staff_divideDB := range forRestore {

		staff_divideDB_ID_atBackupTime := staff_divideDB.ID
		staff_divideDB.ID = 0
		query := backRepoStaff_divide.db.Create(staff_divideDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[staff_divideDB.ID] = staff_divideDB
		BackRepoStaff_divideid_atBckpTime_newID[staff_divideDB_ID_atBackupTime] = staff_divideDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Staff_divide file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Staff_divide>id_atBckpTime_newID
// to compute new index
func (backRepoStaff_divide *BackRepoStaff_divideStruct) RestorePhaseTwo() {

	for _, staff_divideDB := range backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB {

		// next line of code is to avert unused variable compilation error
		_ = staff_divideDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoStaff_divide.db.Model(staff_divideDB).Updates(*staff_divideDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoStaff_divide.ResetReversePointers commits all staged instances of Staff_divide to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStaff_divide *BackRepoStaff_divideStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, staff_divide := range backRepoStaff_divide.Map_Staff_divideDBID_Staff_dividePtr {
		backRepoStaff_divide.ResetReversePointersInstance(backRepo, idx, staff_divide)
	}

	return
}

func (backRepoStaff_divide *BackRepoStaff_divideStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, staff_divide *models.Staff_divide) (Error error) {

	// fetch matching staff_divideDB
	if staff_divideDB, ok := backRepoStaff_divide.Map_Staff_divideDBID_Staff_divideDB[idx]; ok {
		_ = staff_divideDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStaff_divideid_atBckpTime_newID map[uint]uint
