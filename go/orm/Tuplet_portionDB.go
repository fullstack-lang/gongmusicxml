// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Tuplet_portion_sql sql.NullBool
var dummy_Tuplet_portion_time time.Duration
var dummy_Tuplet_portion_sort sort.Float64Slice

// Tuplet_portionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tuplet_portionAPI
type Tuplet_portionAPI struct {
	gorm.Model

	models.Tuplet_portion_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Tuplet_portionPointersEncoding Tuplet_portionPointersEncoding
}

// Tuplet_portionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Tuplet_portionPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Tuplet_number is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Tuplet_numberID sql.NullInt64

	// field Tuplet_type is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Tuplet_typeID sql.NullInt64

	// field Tuplet_dot is a slice of pointers to another Struct (optional or 0..1)
	Tuplet_dot IntSlice `gorm:"type:TEXT"`
}

// Tuplet_portionDB describes a tuplet_portion in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tuplet_portionDB
type Tuplet_portionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tuplet_portionDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Tuplet_portionPointersEncoding
}

// Tuplet_portionDBs arrays tuplet_portionDBs
// swagger:response tuplet_portionDBsResponse
type Tuplet_portionDBs []Tuplet_portionDB

// Tuplet_portionDBResponse provides response
// swagger:response tuplet_portionDBResponse
type Tuplet_portionDBResponse struct {
	Tuplet_portionDB
}

// Tuplet_portionWOP is a Tuplet_portion without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Tuplet_portionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Tuplet_portion_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTuplet_portionStruct struct {
	// stores Tuplet_portionDB according to their gorm ID
	Map_Tuplet_portionDBID_Tuplet_portionDB map[uint]*Tuplet_portionDB

	// stores Tuplet_portionDB ID according to Tuplet_portion address
	Map_Tuplet_portionPtr_Tuplet_portionDBID map[*models.Tuplet_portion]uint

	// stores Tuplet_portion according to their gorm ID
	Map_Tuplet_portionDBID_Tuplet_portionPtr map[uint]*models.Tuplet_portion

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTuplet_portion.stage
	return
}

func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) GetDB() *gorm.DB {
	return backRepoTuplet_portion.db
}

// GetTuplet_portionDBFromTuplet_portionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) GetTuplet_portionDBFromTuplet_portionPtr(tuplet_portion *models.Tuplet_portion) (tuplet_portionDB *Tuplet_portionDB) {
	id := backRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion]
	tuplet_portionDB = backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[id]
	return
}

// BackRepoTuplet_portion.CommitPhaseOne commits all staged instances of Tuplet_portion to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tuplet_portion := range stage.Tuplet_portions {
		backRepoTuplet_portion.CommitPhaseOneInstance(tuplet_portion)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tuplet_portion := range backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr {
		if _, ok := stage.Tuplet_portions[tuplet_portion]; !ok {
			backRepoTuplet_portion.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTuplet_portion.CommitDeleteInstance commits deletion of Tuplet_portion to the BackRepo
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CommitDeleteInstance(id uint) (Error error) {

	tuplet_portion := backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[id]

	// tuplet_portion is not staged anymore, remove tuplet_portionDB
	tuplet_portionDB := backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[id]
	query := backRepoTuplet_portion.db.Unscoped().Delete(&tuplet_portionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID, tuplet_portion)
	delete(backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr, id)
	delete(backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB, id)

	return
}

// BackRepoTuplet_portion.CommitPhaseOneInstance commits tuplet_portion staged instances of Tuplet_portion to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CommitPhaseOneInstance(tuplet_portion *models.Tuplet_portion) (Error error) {

	// check if the tuplet_portion is not commited yet
	if _, ok := backRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion]; ok {
		return
	}

	// initiate tuplet_portion
	var tuplet_portionDB Tuplet_portionDB
	tuplet_portionDB.CopyBasicFieldsFromTuplet_portion(tuplet_portion)

	query := backRepoTuplet_portion.db.Create(&tuplet_portionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion] = tuplet_portionDB.ID
	backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[tuplet_portionDB.ID] = tuplet_portion
	backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[tuplet_portionDB.ID] = &tuplet_portionDB

	return
}

// BackRepoTuplet_portion.CommitPhaseTwo commits all staged instances of Tuplet_portion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet_portion := range backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr {
		backRepoTuplet_portion.CommitPhaseTwoInstance(backRepo, idx, tuplet_portion)
	}

	return
}

// BackRepoTuplet_portion.CommitPhaseTwoInstance commits {{structname }} of models.Tuplet_portion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tuplet_portion *models.Tuplet_portion) (Error error) {

	// fetch matching tuplet_portionDB
	if tuplet_portionDB, ok := backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[idx]; ok {

		tuplet_portionDB.CopyBasicFieldsFromTuplet_portion(tuplet_portion)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value tuplet_portion.Tuplet_number translates to updating the tuplet_portion.Tuplet_numberID
		tuplet_portionDB.Tuplet_numberID.Valid = true // allow for a 0 value (nil association)
		if tuplet_portion.Tuplet_number != nil {
			if Tuplet_numberId, ok := backRepo.BackRepoTuplet_number.Map_Tuplet_numberPtr_Tuplet_numberDBID[tuplet_portion.Tuplet_number]; ok {
				tuplet_portionDB.Tuplet_numberID.Int64 = int64(Tuplet_numberId)
				tuplet_portionDB.Tuplet_numberID.Valid = true
			}
		} else {
			tuplet_portionDB.Tuplet_numberID.Int64 = 0
			tuplet_portionDB.Tuplet_numberID.Valid = true
		}

		// commit pointer value tuplet_portion.Tuplet_type translates to updating the tuplet_portion.Tuplet_typeID
		tuplet_portionDB.Tuplet_typeID.Valid = true // allow for a 0 value (nil association)
		if tuplet_portion.Tuplet_type != nil {
			if Tuplet_typeId, ok := backRepo.BackRepoTuplet_type.Map_Tuplet_typePtr_Tuplet_typeDBID[tuplet_portion.Tuplet_type]; ok {
				tuplet_portionDB.Tuplet_typeID.Int64 = int64(Tuplet_typeId)
				tuplet_portionDB.Tuplet_typeID.Valid = true
			}
		} else {
			tuplet_portionDB.Tuplet_typeID.Int64 = 0
			tuplet_portionDB.Tuplet_typeID.Valid = true
		}

		// 1. reset
		tuplet_portionDB.Tuplet_portionPointersEncoding.Tuplet_dot = make([]int, 0)
		// 2. encode
		for _, tuplet_dotAssocEnd := range tuplet_portion.Tuplet_dot {
			tuplet_dotAssocEnd_DB :=
				backRepo.BackRepoTuplet_dot.GetTuplet_dotDBFromTuplet_dotPtr(tuplet_dotAssocEnd)
			
			// the stage might be inconsistant, meaning that the tuplet_dotAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if tuplet_dotAssocEnd_DB == nil {
				continue
			}
			
			tuplet_portionDB.Tuplet_portionPointersEncoding.Tuplet_dot =
				append(tuplet_portionDB.Tuplet_portionPointersEncoding.Tuplet_dot, int(tuplet_dotAssocEnd_DB.ID))
		}

		query := backRepoTuplet_portion.db.Save(&tuplet_portionDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Tuplet_portion intance %s", tuplet_portion.Name))
		return err
	}

	return
}

// BackRepoTuplet_portion.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CheckoutPhaseOne() (Error error) {

	tuplet_portionDBArray := make([]Tuplet_portionDB, 0)
	query := backRepoTuplet_portion.db.Find(&tuplet_portionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tuplet_portionInstancesToBeRemovedFromTheStage := make(map[*models.Tuplet_portion]any)
	for key, value := range backRepoTuplet_portion.stage.Tuplet_portions {
		tuplet_portionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tuplet_portionDB := range tuplet_portionDBArray {
		backRepoTuplet_portion.CheckoutPhaseOneInstance(&tuplet_portionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tuplet_portion, ok := backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[tuplet_portionDB.ID]
		if ok {
			delete(tuplet_portionInstancesToBeRemovedFromTheStage, tuplet_portion)
		}
	}

	// remove from stage and back repo's 3 maps all tuplet_portions that are not in the checkout
	for tuplet_portion := range tuplet_portionInstancesToBeRemovedFromTheStage {
		tuplet_portion.Unstage(backRepoTuplet_portion.GetStage())

		// remove instance from the back repo 3 maps
		tuplet_portionID := backRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion]
		delete(backRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID, tuplet_portion)
		delete(backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB, tuplet_portionID)
		delete(backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr, tuplet_portionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tuplet_portionDB that has been found in the DB, updates the backRepo and stages the
// models version of the tuplet_portionDB
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CheckoutPhaseOneInstance(tuplet_portionDB *Tuplet_portionDB) (Error error) {

	tuplet_portion, ok := backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[tuplet_portionDB.ID]
	if !ok {
		tuplet_portion = new(models.Tuplet_portion)

		backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[tuplet_portionDB.ID] = tuplet_portion
		backRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion] = tuplet_portionDB.ID

		// append model store with the new element
		tuplet_portion.Name = tuplet_portionDB.Name_Data.String
		tuplet_portion.Stage(backRepoTuplet_portion.GetStage())
	}
	tuplet_portionDB.CopyBasicFieldsToTuplet_portion(tuplet_portion)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tuplet_portion.Stage(backRepoTuplet_portion.GetStage())

	// preserve pointer to tuplet_portionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Tuplet_portionDBID_Tuplet_portionDB)[tuplet_portionDB hold variable pointers
	tuplet_portionDB_Data := *tuplet_portionDB
	preservedPtrToTuplet_portion := &tuplet_portionDB_Data
	backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[tuplet_portionDB.ID] = preservedPtrToTuplet_portion

	return
}

// BackRepoTuplet_portion.CheckoutPhaseTwo Checkouts all staged instances of Tuplet_portion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tuplet_portionDB := range backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB {
		backRepoTuplet_portion.CheckoutPhaseTwoInstance(backRepo, tuplet_portionDB)
	}
	return
}

// BackRepoTuplet_portion.CheckoutPhaseTwoInstance Checkouts staged instances of Tuplet_portion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tuplet_portionDB *Tuplet_portionDB) (Error error) {

	tuplet_portion := backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr[tuplet_portionDB.ID]

	tuplet_portionDB.DecodePointers(backRepo, tuplet_portion)

	return
}

func (tuplet_portionDB *Tuplet_portionDB) DecodePointers(backRepo *BackRepoStruct, tuplet_portion *models.Tuplet_portion) {

	// insertion point for checkout of pointer encoding
	// Tuplet_number field
	tuplet_portion.Tuplet_number = nil
	if tuplet_portionDB.Tuplet_numberID.Int64 != 0 {
		tuplet_portion.Tuplet_number = backRepo.BackRepoTuplet_number.Map_Tuplet_numberDBID_Tuplet_numberPtr[uint(tuplet_portionDB.Tuplet_numberID.Int64)]
	}
	// Tuplet_type field
	tuplet_portion.Tuplet_type = nil
	if tuplet_portionDB.Tuplet_typeID.Int64 != 0 {
		tuplet_portion.Tuplet_type = backRepo.BackRepoTuplet_type.Map_Tuplet_typeDBID_Tuplet_typePtr[uint(tuplet_portionDB.Tuplet_typeID.Int64)]
	}
	// This loop redeem tuplet_portion.Tuplet_dot in the stage from the encode in the back repo
	// It parses all Tuplet_dotDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	tuplet_portion.Tuplet_dot = tuplet_portion.Tuplet_dot[:0]
	for _, _Tuplet_dotid := range tuplet_portionDB.Tuplet_portionPointersEncoding.Tuplet_dot {
		tuplet_portion.Tuplet_dot = append(tuplet_portion.Tuplet_dot, backRepo.BackRepoTuplet_dot.Map_Tuplet_dotDBID_Tuplet_dotPtr[uint(_Tuplet_dotid)])
	}

	return
}

// CommitTuplet_portion allows commit of a single tuplet_portion (if already staged)
func (backRepo *BackRepoStruct) CommitTuplet_portion(tuplet_portion *models.Tuplet_portion) {
	backRepo.BackRepoTuplet_portion.CommitPhaseOneInstance(tuplet_portion)
	if id, ok := backRepo.BackRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion]; ok {
		backRepo.BackRepoTuplet_portion.CommitPhaseTwoInstance(backRepo, id, tuplet_portion)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTuplet_portion allows checkout of a single tuplet_portion (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTuplet_portion(tuplet_portion *models.Tuplet_portion) {
	// check if the tuplet_portion is staged
	if _, ok := backRepo.BackRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion]; ok {

		if id, ok := backRepo.BackRepoTuplet_portion.Map_Tuplet_portionPtr_Tuplet_portionDBID[tuplet_portion]; ok {
			var tuplet_portionDB Tuplet_portionDB
			tuplet_portionDB.ID = id

			if err := backRepo.BackRepoTuplet_portion.db.First(&tuplet_portionDB, id).Error; err != nil {
				log.Fatalln("CheckoutTuplet_portion : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTuplet_portion.CheckoutPhaseOneInstance(&tuplet_portionDB)
			backRepo.BackRepoTuplet_portion.CheckoutPhaseTwoInstance(backRepo, &tuplet_portionDB)
		}
	}
}

// CopyBasicFieldsFromTuplet_portion
func (tuplet_portionDB *Tuplet_portionDB) CopyBasicFieldsFromTuplet_portion(tuplet_portion *models.Tuplet_portion) {
	// insertion point for fields commit

	tuplet_portionDB.Name_Data.String = tuplet_portion.Name
	tuplet_portionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTuplet_portion_WOP
func (tuplet_portionDB *Tuplet_portionDB) CopyBasicFieldsFromTuplet_portion_WOP(tuplet_portion *models.Tuplet_portion_WOP) {
	// insertion point for fields commit

	tuplet_portionDB.Name_Data.String = tuplet_portion.Name
	tuplet_portionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTuplet_portionWOP
func (tuplet_portionDB *Tuplet_portionDB) CopyBasicFieldsFromTuplet_portionWOP(tuplet_portion *Tuplet_portionWOP) {
	// insertion point for fields commit

	tuplet_portionDB.Name_Data.String = tuplet_portion.Name
	tuplet_portionDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTuplet_portion
func (tuplet_portionDB *Tuplet_portionDB) CopyBasicFieldsToTuplet_portion(tuplet_portion *models.Tuplet_portion) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_portion.Name = tuplet_portionDB.Name_Data.String
}

// CopyBasicFieldsToTuplet_portion_WOP
func (tuplet_portionDB *Tuplet_portionDB) CopyBasicFieldsToTuplet_portion_WOP(tuplet_portion *models.Tuplet_portion_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_portion.Name = tuplet_portionDB.Name_Data.String
}

// CopyBasicFieldsToTuplet_portionWOP
func (tuplet_portionDB *Tuplet_portionDB) CopyBasicFieldsToTuplet_portionWOP(tuplet_portion *Tuplet_portionWOP) {
	tuplet_portion.ID = int(tuplet_portionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tuplet_portion.Name = tuplet_portionDB.Name_Data.String
}

// Backup generates a json file from a slice of all Tuplet_portionDB instances in the backrepo
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Tuplet_portionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Tuplet_portionDB, 0)
	for _, tuplet_portionDB := range backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB {
		forBackup = append(forBackup, tuplet_portionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Tuplet_portion ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Tuplet_portion file", err.Error())
	}
}

// Backup generates a json file from a slice of all Tuplet_portionDB instances in the backrepo
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Tuplet_portionDB, 0)
	for _, tuplet_portionDB := range backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB {
		forBackup = append(forBackup, tuplet_portionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Tuplet_portion")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Tuplet_portion_Fields, -1)
	for _, tuplet_portionDB := range forBackup {

		var tuplet_portionWOP Tuplet_portionWOP
		tuplet_portionDB.CopyBasicFieldsToTuplet_portionWOP(&tuplet_portionWOP)

		row := sh.AddRow()
		row.WriteStruct(&tuplet_portionWOP, -1)
	}
}

// RestoreXL from the "Tuplet_portion" sheet all Tuplet_portionDB instances
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTuplet_portionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Tuplet_portion"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTuplet_portion.rowVisitorTuplet_portion)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) rowVisitorTuplet_portion(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tuplet_portionWOP Tuplet_portionWOP
		row.ReadStruct(&tuplet_portionWOP)

		// add the unmarshalled struct to the stage
		tuplet_portionDB := new(Tuplet_portionDB)
		tuplet_portionDB.CopyBasicFieldsFromTuplet_portionWOP(&tuplet_portionWOP)

		tuplet_portionDB_ID_atBackupTime := tuplet_portionDB.ID
		tuplet_portionDB.ID = 0
		query := backRepoTuplet_portion.db.Create(tuplet_portionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[tuplet_portionDB.ID] = tuplet_portionDB
		BackRepoTuplet_portionid_atBckpTime_newID[tuplet_portionDB_ID_atBackupTime] = tuplet_portionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Tuplet_portionDB.json" in dirPath that stores an array
// of Tuplet_portionDB and stores it in the database
// the map BackRepoTuplet_portionid_atBckpTime_newID is updated accordingly
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTuplet_portionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Tuplet_portionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Tuplet_portion file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Tuplet_portionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Tuplet_portionDBID_Tuplet_portionDB
	for _, tuplet_portionDB := range forRestore {

		tuplet_portionDB_ID_atBackupTime := tuplet_portionDB.ID
		tuplet_portionDB.ID = 0
		query := backRepoTuplet_portion.db.Create(tuplet_portionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[tuplet_portionDB.ID] = tuplet_portionDB
		BackRepoTuplet_portionid_atBckpTime_newID[tuplet_portionDB_ID_atBackupTime] = tuplet_portionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Tuplet_portion file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Tuplet_portion>id_atBckpTime_newID
// to compute new index
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) RestorePhaseTwo() {

	for _, tuplet_portionDB := range backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB {

		// next line of code is to avert unused variable compilation error
		_ = tuplet_portionDB

		// insertion point for reindexing pointers encoding
		// reindexing Tuplet_number field
		if tuplet_portionDB.Tuplet_numberID.Int64 != 0 {
			tuplet_portionDB.Tuplet_numberID.Int64 = int64(BackRepoTuplet_numberid_atBckpTime_newID[uint(tuplet_portionDB.Tuplet_numberID.Int64)])
			tuplet_portionDB.Tuplet_numberID.Valid = true
		}

		// reindexing Tuplet_type field
		if tuplet_portionDB.Tuplet_typeID.Int64 != 0 {
			tuplet_portionDB.Tuplet_typeID.Int64 = int64(BackRepoTuplet_typeid_atBckpTime_newID[uint(tuplet_portionDB.Tuplet_typeID.Int64)])
			tuplet_portionDB.Tuplet_typeID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTuplet_portion.db.Model(tuplet_portionDB).Updates(*tuplet_portionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTuplet_portion.ResetReversePointers commits all staged instances of Tuplet_portion to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tuplet_portion := range backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionPtr {
		backRepoTuplet_portion.ResetReversePointersInstance(backRepo, idx, tuplet_portion)
	}

	return
}

func (backRepoTuplet_portion *BackRepoTuplet_portionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tuplet_portion *models.Tuplet_portion) (Error error) {

	// fetch matching tuplet_portionDB
	if tuplet_portionDB, ok := backRepoTuplet_portion.Map_Tuplet_portionDBID_Tuplet_portionDB[idx]; ok {
		_ = tuplet_portionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTuplet_portionid_atBckpTime_newID map[uint]uint
