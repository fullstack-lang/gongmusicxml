// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Metronome_tuplet_sql sql.NullBool
var dummy_Metronome_tuplet_time time.Duration
var dummy_Metronome_tuplet_sort sort.Float64Slice

// Metronome_tupletAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model metronome_tupletAPI
type Metronome_tupletAPI struct {
	gorm.Model

	models.Metronome_tuplet_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Metronome_tupletPointersEncoding Metronome_tupletPointersEncoding
}

// Metronome_tupletPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Metronome_tupletPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Metronome_tupletDB describes a metronome_tuplet in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model metronome_tupletDB
type Metronome_tupletDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field metronome_tupletDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Metronome_tupletPointersEncoding
}

// Metronome_tupletDBs arrays metronome_tupletDBs
// swagger:response metronome_tupletDBsResponse
type Metronome_tupletDBs []Metronome_tupletDB

// Metronome_tupletDBResponse provides response
// swagger:response metronome_tupletDBResponse
type Metronome_tupletDBResponse struct {
	Metronome_tupletDB
}

// Metronome_tupletWOP is a Metronome_tuplet without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Metronome_tupletWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Metronome_tuplet_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMetronome_tupletStruct struct {
	// stores Metronome_tupletDB according to their gorm ID
	Map_Metronome_tupletDBID_Metronome_tupletDB map[uint]*Metronome_tupletDB

	// stores Metronome_tupletDB ID according to Metronome_tuplet address
	Map_Metronome_tupletPtr_Metronome_tupletDBID map[*models.Metronome_tuplet]uint

	// stores Metronome_tuplet according to their gorm ID
	Map_Metronome_tupletDBID_Metronome_tupletPtr map[uint]*models.Metronome_tuplet

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMetronome_tuplet.stage
	return
}

func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) GetDB() *gorm.DB {
	return backRepoMetronome_tuplet.db
}

// GetMetronome_tupletDBFromMetronome_tupletPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) GetMetronome_tupletDBFromMetronome_tupletPtr(metronome_tuplet *models.Metronome_tuplet) (metronome_tupletDB *Metronome_tupletDB) {
	id := backRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet]
	metronome_tupletDB = backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[id]
	return
}

// BackRepoMetronome_tuplet.CommitPhaseOne commits all staged instances of Metronome_tuplet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for metronome_tuplet := range stage.Metronome_tuplets {
		backRepoMetronome_tuplet.CommitPhaseOneInstance(metronome_tuplet)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, metronome_tuplet := range backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr {
		if _, ok := stage.Metronome_tuplets[metronome_tuplet]; !ok {
			backRepoMetronome_tuplet.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMetronome_tuplet.CommitDeleteInstance commits deletion of Metronome_tuplet to the BackRepo
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CommitDeleteInstance(id uint) (Error error) {

	metronome_tuplet := backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr[id]

	// metronome_tuplet is not staged anymore, remove metronome_tupletDB
	metronome_tupletDB := backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[id]
	query := backRepoMetronome_tuplet.db.Unscoped().Delete(&metronome_tupletDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID, metronome_tuplet)
	delete(backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr, id)
	delete(backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB, id)

	return
}

// BackRepoMetronome_tuplet.CommitPhaseOneInstance commits metronome_tuplet staged instances of Metronome_tuplet to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CommitPhaseOneInstance(metronome_tuplet *models.Metronome_tuplet) (Error error) {

	// check if the metronome_tuplet is not commited yet
	if _, ok := backRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet]; ok {
		return
	}

	// initiate metronome_tuplet
	var metronome_tupletDB Metronome_tupletDB
	metronome_tupletDB.CopyBasicFieldsFromMetronome_tuplet(metronome_tuplet)

	query := backRepoMetronome_tuplet.db.Create(&metronome_tupletDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet] = metronome_tupletDB.ID
	backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr[metronome_tupletDB.ID] = metronome_tuplet
	backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[metronome_tupletDB.ID] = &metronome_tupletDB

	return
}

// BackRepoMetronome_tuplet.CommitPhaseTwo commits all staged instances of Metronome_tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_tuplet := range backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr {
		backRepoMetronome_tuplet.CommitPhaseTwoInstance(backRepo, idx, metronome_tuplet)
	}

	return
}

// BackRepoMetronome_tuplet.CommitPhaseTwoInstance commits {{structname }} of models.Metronome_tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, metronome_tuplet *models.Metronome_tuplet) (Error error) {

	// fetch matching metronome_tupletDB
	if metronome_tupletDB, ok := backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[idx]; ok {

		metronome_tupletDB.CopyBasicFieldsFromMetronome_tuplet(metronome_tuplet)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMetronome_tuplet.db.Save(&metronome_tupletDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Metronome_tuplet intance %s", metronome_tuplet.Name))
		return err
	}

	return
}

// BackRepoMetronome_tuplet.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CheckoutPhaseOne() (Error error) {

	metronome_tupletDBArray := make([]Metronome_tupletDB, 0)
	query := backRepoMetronome_tuplet.db.Find(&metronome_tupletDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	metronome_tupletInstancesToBeRemovedFromTheStage := make(map[*models.Metronome_tuplet]any)
	for key, value := range backRepoMetronome_tuplet.stage.Metronome_tuplets {
		metronome_tupletInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, metronome_tupletDB := range metronome_tupletDBArray {
		backRepoMetronome_tuplet.CheckoutPhaseOneInstance(&metronome_tupletDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		metronome_tuplet, ok := backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr[metronome_tupletDB.ID]
		if ok {
			delete(metronome_tupletInstancesToBeRemovedFromTheStage, metronome_tuplet)
		}
	}

	// remove from stage and back repo's 3 maps all metronome_tuplets that are not in the checkout
	for metronome_tuplet := range metronome_tupletInstancesToBeRemovedFromTheStage {
		metronome_tuplet.Unstage(backRepoMetronome_tuplet.GetStage())

		// remove instance from the back repo 3 maps
		metronome_tupletID := backRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet]
		delete(backRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID, metronome_tuplet)
		delete(backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB, metronome_tupletID)
		delete(backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr, metronome_tupletID)
	}

	return
}

// CheckoutPhaseOneInstance takes a metronome_tupletDB that has been found in the DB, updates the backRepo and stages the
// models version of the metronome_tupletDB
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CheckoutPhaseOneInstance(metronome_tupletDB *Metronome_tupletDB) (Error error) {

	metronome_tuplet, ok := backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr[metronome_tupletDB.ID]
	if !ok {
		metronome_tuplet = new(models.Metronome_tuplet)

		backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr[metronome_tupletDB.ID] = metronome_tuplet
		backRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet] = metronome_tupletDB.ID

		// append model store with the new element
		metronome_tuplet.Name = metronome_tupletDB.Name_Data.String
		metronome_tuplet.Stage(backRepoMetronome_tuplet.GetStage())
	}
	metronome_tupletDB.CopyBasicFieldsToMetronome_tuplet(metronome_tuplet)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	metronome_tuplet.Stage(backRepoMetronome_tuplet.GetStage())

	// preserve pointer to metronome_tupletDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Metronome_tupletDBID_Metronome_tupletDB)[metronome_tupletDB hold variable pointers
	metronome_tupletDB_Data := *metronome_tupletDB
	preservedPtrToMetronome_tuplet := &metronome_tupletDB_Data
	backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[metronome_tupletDB.ID] = preservedPtrToMetronome_tuplet

	return
}

// BackRepoMetronome_tuplet.CheckoutPhaseTwo Checkouts all staged instances of Metronome_tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, metronome_tupletDB := range backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB {
		backRepoMetronome_tuplet.CheckoutPhaseTwoInstance(backRepo, metronome_tupletDB)
	}
	return
}

// BackRepoMetronome_tuplet.CheckoutPhaseTwoInstance Checkouts staged instances of Metronome_tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, metronome_tupletDB *Metronome_tupletDB) (Error error) {

	metronome_tuplet := backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr[metronome_tupletDB.ID]

	metronome_tupletDB.DecodePointers(backRepo, metronome_tuplet)

	return
}

func (metronome_tupletDB *Metronome_tupletDB) DecodePointers(backRepo *BackRepoStruct, metronome_tuplet *models.Metronome_tuplet) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMetronome_tuplet allows commit of a single metronome_tuplet (if already staged)
func (backRepo *BackRepoStruct) CommitMetronome_tuplet(metronome_tuplet *models.Metronome_tuplet) {
	backRepo.BackRepoMetronome_tuplet.CommitPhaseOneInstance(metronome_tuplet)
	if id, ok := backRepo.BackRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet]; ok {
		backRepo.BackRepoMetronome_tuplet.CommitPhaseTwoInstance(backRepo, id, metronome_tuplet)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMetronome_tuplet allows checkout of a single metronome_tuplet (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMetronome_tuplet(metronome_tuplet *models.Metronome_tuplet) {
	// check if the metronome_tuplet is staged
	if _, ok := backRepo.BackRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet]; ok {

		if id, ok := backRepo.BackRepoMetronome_tuplet.Map_Metronome_tupletPtr_Metronome_tupletDBID[metronome_tuplet]; ok {
			var metronome_tupletDB Metronome_tupletDB
			metronome_tupletDB.ID = id

			if err := backRepo.BackRepoMetronome_tuplet.db.First(&metronome_tupletDB, id).Error; err != nil {
				log.Fatalln("CheckoutMetronome_tuplet : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMetronome_tuplet.CheckoutPhaseOneInstance(&metronome_tupletDB)
			backRepo.BackRepoMetronome_tuplet.CheckoutPhaseTwoInstance(backRepo, &metronome_tupletDB)
		}
	}
}

// CopyBasicFieldsFromMetronome_tuplet
func (metronome_tupletDB *Metronome_tupletDB) CopyBasicFieldsFromMetronome_tuplet(metronome_tuplet *models.Metronome_tuplet) {
	// insertion point for fields commit

	metronome_tupletDB.Name_Data.String = metronome_tuplet.Name
	metronome_tupletDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_tuplet_WOP
func (metronome_tupletDB *Metronome_tupletDB) CopyBasicFieldsFromMetronome_tuplet_WOP(metronome_tuplet *models.Metronome_tuplet_WOP) {
	// insertion point for fields commit

	metronome_tupletDB.Name_Data.String = metronome_tuplet.Name
	metronome_tupletDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMetronome_tupletWOP
func (metronome_tupletDB *Metronome_tupletDB) CopyBasicFieldsFromMetronome_tupletWOP(metronome_tuplet *Metronome_tupletWOP) {
	// insertion point for fields commit

	metronome_tupletDB.Name_Data.String = metronome_tuplet.Name
	metronome_tupletDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMetronome_tuplet
func (metronome_tupletDB *Metronome_tupletDB) CopyBasicFieldsToMetronome_tuplet(metronome_tuplet *models.Metronome_tuplet) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_tuplet.Name = metronome_tupletDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_tuplet_WOP
func (metronome_tupletDB *Metronome_tupletDB) CopyBasicFieldsToMetronome_tuplet_WOP(metronome_tuplet *models.Metronome_tuplet_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_tuplet.Name = metronome_tupletDB.Name_Data.String
}

// CopyBasicFieldsToMetronome_tupletWOP
func (metronome_tupletDB *Metronome_tupletDB) CopyBasicFieldsToMetronome_tupletWOP(metronome_tuplet *Metronome_tupletWOP) {
	metronome_tuplet.ID = int(metronome_tupletDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	metronome_tuplet.Name = metronome_tupletDB.Name_Data.String
}

// Backup generates a json file from a slice of all Metronome_tupletDB instances in the backrepo
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Metronome_tupletDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_tupletDB, 0)
	for _, metronome_tupletDB := range backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB {
		forBackup = append(forBackup, metronome_tupletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Metronome_tuplet ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Metronome_tuplet file", err.Error())
	}
}

// Backup generates a json file from a slice of all Metronome_tupletDB instances in the backrepo
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Metronome_tupletDB, 0)
	for _, metronome_tupletDB := range backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB {
		forBackup = append(forBackup, metronome_tupletDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Metronome_tuplet")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Metronome_tuplet_Fields, -1)
	for _, metronome_tupletDB := range forBackup {

		var metronome_tupletWOP Metronome_tupletWOP
		metronome_tupletDB.CopyBasicFieldsToMetronome_tupletWOP(&metronome_tupletWOP)

		row := sh.AddRow()
		row.WriteStruct(&metronome_tupletWOP, -1)
	}
}

// RestoreXL from the "Metronome_tuplet" sheet all Metronome_tupletDB instances
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMetronome_tupletid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Metronome_tuplet"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMetronome_tuplet.rowVisitorMetronome_tuplet)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) rowVisitorMetronome_tuplet(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var metronome_tupletWOP Metronome_tupletWOP
		row.ReadStruct(&metronome_tupletWOP)

		// add the unmarshalled struct to the stage
		metronome_tupletDB := new(Metronome_tupletDB)
		metronome_tupletDB.CopyBasicFieldsFromMetronome_tupletWOP(&metronome_tupletWOP)

		metronome_tupletDB_ID_atBackupTime := metronome_tupletDB.ID
		metronome_tupletDB.ID = 0
		query := backRepoMetronome_tuplet.db.Create(metronome_tupletDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[metronome_tupletDB.ID] = metronome_tupletDB
		BackRepoMetronome_tupletid_atBckpTime_newID[metronome_tupletDB_ID_atBackupTime] = metronome_tupletDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Metronome_tupletDB.json" in dirPath that stores an array
// of Metronome_tupletDB and stores it in the database
// the map BackRepoMetronome_tupletid_atBckpTime_newID is updated accordingly
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMetronome_tupletid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Metronome_tupletDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Metronome_tuplet file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Metronome_tupletDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Metronome_tupletDBID_Metronome_tupletDB
	for _, metronome_tupletDB := range forRestore {

		metronome_tupletDB_ID_atBackupTime := metronome_tupletDB.ID
		metronome_tupletDB.ID = 0
		query := backRepoMetronome_tuplet.db.Create(metronome_tupletDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[metronome_tupletDB.ID] = metronome_tupletDB
		BackRepoMetronome_tupletid_atBckpTime_newID[metronome_tupletDB_ID_atBackupTime] = metronome_tupletDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Metronome_tuplet file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Metronome_tuplet>id_atBckpTime_newID
// to compute new index
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) RestorePhaseTwo() {

	for _, metronome_tupletDB := range backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB {

		// next line of code is to avert unused variable compilation error
		_ = metronome_tupletDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMetronome_tuplet.db.Model(metronome_tupletDB).Updates(*metronome_tupletDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMetronome_tuplet.ResetReversePointers commits all staged instances of Metronome_tuplet to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, metronome_tuplet := range backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletPtr {
		backRepoMetronome_tuplet.ResetReversePointersInstance(backRepo, idx, metronome_tuplet)
	}

	return
}

func (backRepoMetronome_tuplet *BackRepoMetronome_tupletStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, metronome_tuplet *models.Metronome_tuplet) (Error error) {

	// fetch matching metronome_tupletDB
	if metronome_tupletDB, ok := backRepoMetronome_tuplet.Map_Metronome_tupletDBID_Metronome_tupletDB[idx]; ok {
		_ = metronome_tupletDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMetronome_tupletid_atBckpTime_newID map[uint]uint
