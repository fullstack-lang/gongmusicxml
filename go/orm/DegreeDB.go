// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Degree_sql sql.NullBool
var dummy_Degree_time time.Duration
var dummy_Degree_sort sort.Float64Slice

// DegreeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model degreeAPI
type DegreeAPI struct {
	gorm.Model

	models.Degree_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DegreePointersEncoding DegreePointersEncoding
}

// DegreePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DegreePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Degree_value is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Degree_valueID sql.NullInt64

	// field Degree_alter is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Degree_alterID sql.NullInt64

	// field Degree_type is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Degree_typeID sql.NullInt64
}

// DegreeDB describes a degree in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model degreeDB
type DegreeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field degreeDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DegreePointersEncoding
}

// DegreeDBs arrays degreeDBs
// swagger:response degreeDBsResponse
type DegreeDBs []DegreeDB

// DegreeDBResponse provides response
// swagger:response degreeDBResponse
type DegreeDBResponse struct {
	DegreeDB
}

// DegreeWOP is a Degree without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DegreeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Degree_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDegreeStruct struct {
	// stores DegreeDB according to their gorm ID
	Map_DegreeDBID_DegreeDB map[uint]*DegreeDB

	// stores DegreeDB ID according to Degree address
	Map_DegreePtr_DegreeDBID map[*models.Degree]uint

	// stores Degree according to their gorm ID
	Map_DegreeDBID_DegreePtr map[uint]*models.Degree

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDegree *BackRepoDegreeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDegree.stage
	return
}

func (backRepoDegree *BackRepoDegreeStruct) GetDB() *gorm.DB {
	return backRepoDegree.db
}

// GetDegreeDBFromDegreePtr is a handy function to access the back repo instance from the stage instance
func (backRepoDegree *BackRepoDegreeStruct) GetDegreeDBFromDegreePtr(degree *models.Degree) (degreeDB *DegreeDB) {
	id := backRepoDegree.Map_DegreePtr_DegreeDBID[degree]
	degreeDB = backRepoDegree.Map_DegreeDBID_DegreeDB[id]
	return
}

// BackRepoDegree.CommitPhaseOne commits all staged instances of Degree to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree *BackRepoDegreeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for degree := range stage.Degrees {
		backRepoDegree.CommitPhaseOneInstance(degree)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, degree := range backRepoDegree.Map_DegreeDBID_DegreePtr {
		if _, ok := stage.Degrees[degree]; !ok {
			backRepoDegree.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDegree.CommitDeleteInstance commits deletion of Degree to the BackRepo
func (backRepoDegree *BackRepoDegreeStruct) CommitDeleteInstance(id uint) (Error error) {

	degree := backRepoDegree.Map_DegreeDBID_DegreePtr[id]

	// degree is not staged anymore, remove degreeDB
	degreeDB := backRepoDegree.Map_DegreeDBID_DegreeDB[id]
	query := backRepoDegree.db.Unscoped().Delete(&degreeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDegree.Map_DegreePtr_DegreeDBID, degree)
	delete(backRepoDegree.Map_DegreeDBID_DegreePtr, id)
	delete(backRepoDegree.Map_DegreeDBID_DegreeDB, id)

	return
}

// BackRepoDegree.CommitPhaseOneInstance commits degree staged instances of Degree to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDegree *BackRepoDegreeStruct) CommitPhaseOneInstance(degree *models.Degree) (Error error) {

	// check if the degree is not commited yet
	if _, ok := backRepoDegree.Map_DegreePtr_DegreeDBID[degree]; ok {
		return
	}

	// initiate degree
	var degreeDB DegreeDB
	degreeDB.CopyBasicFieldsFromDegree(degree)

	query := backRepoDegree.db.Create(&degreeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDegree.Map_DegreePtr_DegreeDBID[degree] = degreeDB.ID
	backRepoDegree.Map_DegreeDBID_DegreePtr[degreeDB.ID] = degree
	backRepoDegree.Map_DegreeDBID_DegreeDB[degreeDB.ID] = &degreeDB

	return
}

// BackRepoDegree.CommitPhaseTwo commits all staged instances of Degree to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree *BackRepoDegreeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, degree := range backRepoDegree.Map_DegreeDBID_DegreePtr {
		backRepoDegree.CommitPhaseTwoInstance(backRepo, idx, degree)
	}

	return
}

// BackRepoDegree.CommitPhaseTwoInstance commits {{structname }} of models.Degree to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree *BackRepoDegreeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, degree *models.Degree) (Error error) {

	// fetch matching degreeDB
	if degreeDB, ok := backRepoDegree.Map_DegreeDBID_DegreeDB[idx]; ok {

		degreeDB.CopyBasicFieldsFromDegree(degree)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value degree.Degree_value translates to updating the degree.Degree_valueID
		degreeDB.Degree_valueID.Valid = true // allow for a 0 value (nil association)
		if degree.Degree_value != nil {
			if Degree_valueId, ok := backRepo.BackRepoDegree_value.Map_Degree_valuePtr_Degree_valueDBID[degree.Degree_value]; ok {
				degreeDB.Degree_valueID.Int64 = int64(Degree_valueId)
				degreeDB.Degree_valueID.Valid = true
			}
		} else {
			degreeDB.Degree_valueID.Int64 = 0
			degreeDB.Degree_valueID.Valid = true
		}

		// commit pointer value degree.Degree_alter translates to updating the degree.Degree_alterID
		degreeDB.Degree_alterID.Valid = true // allow for a 0 value (nil association)
		if degree.Degree_alter != nil {
			if Degree_alterId, ok := backRepo.BackRepoDegree_alter.Map_Degree_alterPtr_Degree_alterDBID[degree.Degree_alter]; ok {
				degreeDB.Degree_alterID.Int64 = int64(Degree_alterId)
				degreeDB.Degree_alterID.Valid = true
			}
		} else {
			degreeDB.Degree_alterID.Int64 = 0
			degreeDB.Degree_alterID.Valid = true
		}

		// commit pointer value degree.Degree_type translates to updating the degree.Degree_typeID
		degreeDB.Degree_typeID.Valid = true // allow for a 0 value (nil association)
		if degree.Degree_type != nil {
			if Degree_typeId, ok := backRepo.BackRepoDegree_type.Map_Degree_typePtr_Degree_typeDBID[degree.Degree_type]; ok {
				degreeDB.Degree_typeID.Int64 = int64(Degree_typeId)
				degreeDB.Degree_typeID.Valid = true
			}
		} else {
			degreeDB.Degree_typeID.Int64 = 0
			degreeDB.Degree_typeID.Valid = true
		}

		query := backRepoDegree.db.Save(&degreeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Degree intance %s", degree.Name))
		return err
	}

	return
}

// BackRepoDegree.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDegree *BackRepoDegreeStruct) CheckoutPhaseOne() (Error error) {

	degreeDBArray := make([]DegreeDB, 0)
	query := backRepoDegree.db.Find(&degreeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	degreeInstancesToBeRemovedFromTheStage := make(map[*models.Degree]any)
	for key, value := range backRepoDegree.stage.Degrees {
		degreeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, degreeDB := range degreeDBArray {
		backRepoDegree.CheckoutPhaseOneInstance(&degreeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		degree, ok := backRepoDegree.Map_DegreeDBID_DegreePtr[degreeDB.ID]
		if ok {
			delete(degreeInstancesToBeRemovedFromTheStage, degree)
		}
	}

	// remove from stage and back repo's 3 maps all degrees that are not in the checkout
	for degree := range degreeInstancesToBeRemovedFromTheStage {
		degree.Unstage(backRepoDegree.GetStage())

		// remove instance from the back repo 3 maps
		degreeID := backRepoDegree.Map_DegreePtr_DegreeDBID[degree]
		delete(backRepoDegree.Map_DegreePtr_DegreeDBID, degree)
		delete(backRepoDegree.Map_DegreeDBID_DegreeDB, degreeID)
		delete(backRepoDegree.Map_DegreeDBID_DegreePtr, degreeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a degreeDB that has been found in the DB, updates the backRepo and stages the
// models version of the degreeDB
func (backRepoDegree *BackRepoDegreeStruct) CheckoutPhaseOneInstance(degreeDB *DegreeDB) (Error error) {

	degree, ok := backRepoDegree.Map_DegreeDBID_DegreePtr[degreeDB.ID]
	if !ok {
		degree = new(models.Degree)

		backRepoDegree.Map_DegreeDBID_DegreePtr[degreeDB.ID] = degree
		backRepoDegree.Map_DegreePtr_DegreeDBID[degree] = degreeDB.ID

		// append model store with the new element
		degree.Name = degreeDB.Name_Data.String
		degree.Stage(backRepoDegree.GetStage())
	}
	degreeDB.CopyBasicFieldsToDegree(degree)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	degree.Stage(backRepoDegree.GetStage())

	// preserve pointer to degreeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DegreeDBID_DegreeDB)[degreeDB hold variable pointers
	degreeDB_Data := *degreeDB
	preservedPtrToDegree := &degreeDB_Data
	backRepoDegree.Map_DegreeDBID_DegreeDB[degreeDB.ID] = preservedPtrToDegree

	return
}

// BackRepoDegree.CheckoutPhaseTwo Checkouts all staged instances of Degree to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree *BackRepoDegreeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, degreeDB := range backRepoDegree.Map_DegreeDBID_DegreeDB {
		backRepoDegree.CheckoutPhaseTwoInstance(backRepo, degreeDB)
	}
	return
}

// BackRepoDegree.CheckoutPhaseTwoInstance Checkouts staged instances of Degree to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree *BackRepoDegreeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, degreeDB *DegreeDB) (Error error) {

	degree := backRepoDegree.Map_DegreeDBID_DegreePtr[degreeDB.ID]

	degreeDB.DecodePointers(backRepo, degree)

	return
}

func (degreeDB *DegreeDB) DecodePointers(backRepo *BackRepoStruct, degree *models.Degree) {

	// insertion point for checkout of pointer encoding
	// Degree_value field
	degree.Degree_value = nil
	if degreeDB.Degree_valueID.Int64 != 0 {
		degree.Degree_value = backRepo.BackRepoDegree_value.Map_Degree_valueDBID_Degree_valuePtr[uint(degreeDB.Degree_valueID.Int64)]
	}
	// Degree_alter field
	degree.Degree_alter = nil
	if degreeDB.Degree_alterID.Int64 != 0 {
		degree.Degree_alter = backRepo.BackRepoDegree_alter.Map_Degree_alterDBID_Degree_alterPtr[uint(degreeDB.Degree_alterID.Int64)]
	}
	// Degree_type field
	degree.Degree_type = nil
	if degreeDB.Degree_typeID.Int64 != 0 {
		degree.Degree_type = backRepo.BackRepoDegree_type.Map_Degree_typeDBID_Degree_typePtr[uint(degreeDB.Degree_typeID.Int64)]
	}
	return
}

// CommitDegree allows commit of a single degree (if already staged)
func (backRepo *BackRepoStruct) CommitDegree(degree *models.Degree) {
	backRepo.BackRepoDegree.CommitPhaseOneInstance(degree)
	if id, ok := backRepo.BackRepoDegree.Map_DegreePtr_DegreeDBID[degree]; ok {
		backRepo.BackRepoDegree.CommitPhaseTwoInstance(backRepo, id, degree)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDegree allows checkout of a single degree (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDegree(degree *models.Degree) {
	// check if the degree is staged
	if _, ok := backRepo.BackRepoDegree.Map_DegreePtr_DegreeDBID[degree]; ok {

		if id, ok := backRepo.BackRepoDegree.Map_DegreePtr_DegreeDBID[degree]; ok {
			var degreeDB DegreeDB
			degreeDB.ID = id

			if err := backRepo.BackRepoDegree.db.First(&degreeDB, id).Error; err != nil {
				log.Fatalln("CheckoutDegree : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDegree.CheckoutPhaseOneInstance(&degreeDB)
			backRepo.BackRepoDegree.CheckoutPhaseTwoInstance(backRepo, &degreeDB)
		}
	}
}

// CopyBasicFieldsFromDegree
func (degreeDB *DegreeDB) CopyBasicFieldsFromDegree(degree *models.Degree) {
	// insertion point for fields commit

	degreeDB.Name_Data.String = degree.Name
	degreeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDegree_WOP
func (degreeDB *DegreeDB) CopyBasicFieldsFromDegree_WOP(degree *models.Degree_WOP) {
	// insertion point for fields commit

	degreeDB.Name_Data.String = degree.Name
	degreeDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDegreeWOP
func (degreeDB *DegreeDB) CopyBasicFieldsFromDegreeWOP(degree *DegreeWOP) {
	// insertion point for fields commit

	degreeDB.Name_Data.String = degree.Name
	degreeDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDegree
func (degreeDB *DegreeDB) CopyBasicFieldsToDegree(degree *models.Degree) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree.Name = degreeDB.Name_Data.String
}

// CopyBasicFieldsToDegree_WOP
func (degreeDB *DegreeDB) CopyBasicFieldsToDegree_WOP(degree *models.Degree_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	degree.Name = degreeDB.Name_Data.String
}

// CopyBasicFieldsToDegreeWOP
func (degreeDB *DegreeDB) CopyBasicFieldsToDegreeWOP(degree *DegreeWOP) {
	degree.ID = int(degreeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	degree.Name = degreeDB.Name_Data.String
}

// Backup generates a json file from a slice of all DegreeDB instances in the backrepo
func (backRepoDegree *BackRepoDegreeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DegreeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DegreeDB, 0)
	for _, degreeDB := range backRepoDegree.Map_DegreeDBID_DegreeDB {
		forBackup = append(forBackup, degreeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Degree ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Degree file", err.Error())
	}
}

// Backup generates a json file from a slice of all DegreeDB instances in the backrepo
func (backRepoDegree *BackRepoDegreeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DegreeDB, 0)
	for _, degreeDB := range backRepoDegree.Map_DegreeDBID_DegreeDB {
		forBackup = append(forBackup, degreeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Degree")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Degree_Fields, -1)
	for _, degreeDB := range forBackup {

		var degreeWOP DegreeWOP
		degreeDB.CopyBasicFieldsToDegreeWOP(&degreeWOP)

		row := sh.AddRow()
		row.WriteStruct(&degreeWOP, -1)
	}
}

// RestoreXL from the "Degree" sheet all DegreeDB instances
func (backRepoDegree *BackRepoDegreeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDegreeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Degree"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDegree.rowVisitorDegree)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDegree *BackRepoDegreeStruct) rowVisitorDegree(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var degreeWOP DegreeWOP
		row.ReadStruct(&degreeWOP)

		// add the unmarshalled struct to the stage
		degreeDB := new(DegreeDB)
		degreeDB.CopyBasicFieldsFromDegreeWOP(&degreeWOP)

		degreeDB_ID_atBackupTime := degreeDB.ID
		degreeDB.ID = 0
		query := backRepoDegree.db.Create(degreeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree.Map_DegreeDBID_DegreeDB[degreeDB.ID] = degreeDB
		BackRepoDegreeid_atBckpTime_newID[degreeDB_ID_atBackupTime] = degreeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DegreeDB.json" in dirPath that stores an array
// of DegreeDB and stores it in the database
// the map BackRepoDegreeid_atBckpTime_newID is updated accordingly
func (backRepoDegree *BackRepoDegreeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDegreeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DegreeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Degree file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DegreeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DegreeDBID_DegreeDB
	for _, degreeDB := range forRestore {

		degreeDB_ID_atBackupTime := degreeDB.ID
		degreeDB.ID = 0
		query := backRepoDegree.db.Create(degreeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDegree.Map_DegreeDBID_DegreeDB[degreeDB.ID] = degreeDB
		BackRepoDegreeid_atBckpTime_newID[degreeDB_ID_atBackupTime] = degreeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Degree file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Degree>id_atBckpTime_newID
// to compute new index
func (backRepoDegree *BackRepoDegreeStruct) RestorePhaseTwo() {

	for _, degreeDB := range backRepoDegree.Map_DegreeDBID_DegreeDB {

		// next line of code is to avert unused variable compilation error
		_ = degreeDB

		// insertion point for reindexing pointers encoding
		// reindexing Degree_value field
		if degreeDB.Degree_valueID.Int64 != 0 {
			degreeDB.Degree_valueID.Int64 = int64(BackRepoDegree_valueid_atBckpTime_newID[uint(degreeDB.Degree_valueID.Int64)])
			degreeDB.Degree_valueID.Valid = true
		}

		// reindexing Degree_alter field
		if degreeDB.Degree_alterID.Int64 != 0 {
			degreeDB.Degree_alterID.Int64 = int64(BackRepoDegree_alterid_atBckpTime_newID[uint(degreeDB.Degree_alterID.Int64)])
			degreeDB.Degree_alterID.Valid = true
		}

		// reindexing Degree_type field
		if degreeDB.Degree_typeID.Int64 != 0 {
			degreeDB.Degree_typeID.Int64 = int64(BackRepoDegree_typeid_atBckpTime_newID[uint(degreeDB.Degree_typeID.Int64)])
			degreeDB.Degree_typeID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDegree.db.Model(degreeDB).Updates(*degreeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDegree.ResetReversePointers commits all staged instances of Degree to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDegree *BackRepoDegreeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, degree := range backRepoDegree.Map_DegreeDBID_DegreePtr {
		backRepoDegree.ResetReversePointersInstance(backRepo, idx, degree)
	}

	return
}

func (backRepoDegree *BackRepoDegreeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, degree *models.Degree) (Error error) {

	// fetch matching degreeDB
	if degreeDB, ok := backRepoDegree.Map_DegreeDBID_DegreeDB[idx]; ok {
		_ = degreeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDegreeid_atBckpTime_newID map[uint]uint
