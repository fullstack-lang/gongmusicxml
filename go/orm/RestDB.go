// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Rest_sql sql.NullBool
var dummy_Rest_time time.Duration
var dummy_Rest_sort sort.Float64Slice

// RestAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model restAPI
type RestAPI struct {
	gorm.Model

	models.Rest_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RestPointersEncoding RestPointersEncoding
}

// RestPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RestPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// RestDB describes a rest in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model restDB
type RestDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field restDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RestPointersEncoding
}

// RestDBs arrays restDBs
// swagger:response restDBsResponse
type RestDBs []RestDB

// RestDBResponse provides response
// swagger:response restDBResponse
type RestDBResponse struct {
	RestDB
}

// RestWOP is a Rest without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RestWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Rest_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoRestStruct struct {
	// stores RestDB according to their gorm ID
	Map_RestDBID_RestDB map[uint]*RestDB

	// stores RestDB ID according to Rest address
	Map_RestPtr_RestDBID map[*models.Rest]uint

	// stores Rest according to their gorm ID
	Map_RestDBID_RestPtr map[uint]*models.Rest

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRest *BackRepoRestStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRest.stage
	return
}

func (backRepoRest *BackRepoRestStruct) GetDB() *gorm.DB {
	return backRepoRest.db
}

// GetRestDBFromRestPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRest *BackRepoRestStruct) GetRestDBFromRestPtr(rest *models.Rest) (restDB *RestDB) {
	id := backRepoRest.Map_RestPtr_RestDBID[rest]
	restDB = backRepoRest.Map_RestDBID_RestDB[id]
	return
}

// BackRepoRest.CommitPhaseOne commits all staged instances of Rest to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRest *BackRepoRestStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for rest := range stage.Rests {
		backRepoRest.CommitPhaseOneInstance(rest)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, rest := range backRepoRest.Map_RestDBID_RestPtr {
		if _, ok := stage.Rests[rest]; !ok {
			backRepoRest.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRest.CommitDeleteInstance commits deletion of Rest to the BackRepo
func (backRepoRest *BackRepoRestStruct) CommitDeleteInstance(id uint) (Error error) {

	rest := backRepoRest.Map_RestDBID_RestPtr[id]

	// rest is not staged anymore, remove restDB
	restDB := backRepoRest.Map_RestDBID_RestDB[id]
	query := backRepoRest.db.Unscoped().Delete(&restDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRest.Map_RestPtr_RestDBID, rest)
	delete(backRepoRest.Map_RestDBID_RestPtr, id)
	delete(backRepoRest.Map_RestDBID_RestDB, id)

	return
}

// BackRepoRest.CommitPhaseOneInstance commits rest staged instances of Rest to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRest *BackRepoRestStruct) CommitPhaseOneInstance(rest *models.Rest) (Error error) {

	// check if the rest is not commited yet
	if _, ok := backRepoRest.Map_RestPtr_RestDBID[rest]; ok {
		return
	}

	// initiate rest
	var restDB RestDB
	restDB.CopyBasicFieldsFromRest(rest)

	query := backRepoRest.db.Create(&restDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRest.Map_RestPtr_RestDBID[rest] = restDB.ID
	backRepoRest.Map_RestDBID_RestPtr[restDB.ID] = rest
	backRepoRest.Map_RestDBID_RestDB[restDB.ID] = &restDB

	return
}

// BackRepoRest.CommitPhaseTwo commits all staged instances of Rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRest *BackRepoRestStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, rest := range backRepoRest.Map_RestDBID_RestPtr {
		backRepoRest.CommitPhaseTwoInstance(backRepo, idx, rest)
	}

	return
}

// BackRepoRest.CommitPhaseTwoInstance commits {{structname }} of models.Rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRest *BackRepoRestStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, rest *models.Rest) (Error error) {

	// fetch matching restDB
	if restDB, ok := backRepoRest.Map_RestDBID_RestDB[idx]; ok {

		restDB.CopyBasicFieldsFromRest(rest)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoRest.db.Save(&restDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Rest intance %s", rest.Name))
		return err
	}

	return
}

// BackRepoRest.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRest *BackRepoRestStruct) CheckoutPhaseOne() (Error error) {

	restDBArray := make([]RestDB, 0)
	query := backRepoRest.db.Find(&restDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	restInstancesToBeRemovedFromTheStage := make(map[*models.Rest]any)
	for key, value := range backRepoRest.stage.Rests {
		restInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, restDB := range restDBArray {
		backRepoRest.CheckoutPhaseOneInstance(&restDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		rest, ok := backRepoRest.Map_RestDBID_RestPtr[restDB.ID]
		if ok {
			delete(restInstancesToBeRemovedFromTheStage, rest)
		}
	}

	// remove from stage and back repo's 3 maps all rests that are not in the checkout
	for rest := range restInstancesToBeRemovedFromTheStage {
		rest.Unstage(backRepoRest.GetStage())

		// remove instance from the back repo 3 maps
		restID := backRepoRest.Map_RestPtr_RestDBID[rest]
		delete(backRepoRest.Map_RestPtr_RestDBID, rest)
		delete(backRepoRest.Map_RestDBID_RestDB, restID)
		delete(backRepoRest.Map_RestDBID_RestPtr, restID)
	}

	return
}

// CheckoutPhaseOneInstance takes a restDB that has been found in the DB, updates the backRepo and stages the
// models version of the restDB
func (backRepoRest *BackRepoRestStruct) CheckoutPhaseOneInstance(restDB *RestDB) (Error error) {

	rest, ok := backRepoRest.Map_RestDBID_RestPtr[restDB.ID]
	if !ok {
		rest = new(models.Rest)

		backRepoRest.Map_RestDBID_RestPtr[restDB.ID] = rest
		backRepoRest.Map_RestPtr_RestDBID[rest] = restDB.ID

		// append model store with the new element
		rest.Name = restDB.Name_Data.String
		rest.Stage(backRepoRest.GetStage())
	}
	restDB.CopyBasicFieldsToRest(rest)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	rest.Stage(backRepoRest.GetStage())

	// preserve pointer to restDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RestDBID_RestDB)[restDB hold variable pointers
	restDB_Data := *restDB
	preservedPtrToRest := &restDB_Data
	backRepoRest.Map_RestDBID_RestDB[restDB.ID] = preservedPtrToRest

	return
}

// BackRepoRest.CheckoutPhaseTwo Checkouts all staged instances of Rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRest *BackRepoRestStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, restDB := range backRepoRest.Map_RestDBID_RestDB {
		backRepoRest.CheckoutPhaseTwoInstance(backRepo, restDB)
	}
	return
}

// BackRepoRest.CheckoutPhaseTwoInstance Checkouts staged instances of Rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRest *BackRepoRestStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, restDB *RestDB) (Error error) {

	rest := backRepoRest.Map_RestDBID_RestPtr[restDB.ID]

	restDB.DecodePointers(backRepo, rest)

	return
}

func (restDB *RestDB) DecodePointers(backRepo *BackRepoStruct, rest *models.Rest) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitRest allows commit of a single rest (if already staged)
func (backRepo *BackRepoStruct) CommitRest(rest *models.Rest) {
	backRepo.BackRepoRest.CommitPhaseOneInstance(rest)
	if id, ok := backRepo.BackRepoRest.Map_RestPtr_RestDBID[rest]; ok {
		backRepo.BackRepoRest.CommitPhaseTwoInstance(backRepo, id, rest)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRest allows checkout of a single rest (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRest(rest *models.Rest) {
	// check if the rest is staged
	if _, ok := backRepo.BackRepoRest.Map_RestPtr_RestDBID[rest]; ok {

		if id, ok := backRepo.BackRepoRest.Map_RestPtr_RestDBID[rest]; ok {
			var restDB RestDB
			restDB.ID = id

			if err := backRepo.BackRepoRest.db.First(&restDB, id).Error; err != nil {
				log.Fatalln("CheckoutRest : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRest.CheckoutPhaseOneInstance(&restDB)
			backRepo.BackRepoRest.CheckoutPhaseTwoInstance(backRepo, &restDB)
		}
	}
}

// CopyBasicFieldsFromRest
func (restDB *RestDB) CopyBasicFieldsFromRest(rest *models.Rest) {
	// insertion point for fields commit

	restDB.Name_Data.String = rest.Name
	restDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRest_WOP
func (restDB *RestDB) CopyBasicFieldsFromRest_WOP(rest *models.Rest_WOP) {
	// insertion point for fields commit

	restDB.Name_Data.String = rest.Name
	restDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRestWOP
func (restDB *RestDB) CopyBasicFieldsFromRestWOP(rest *RestWOP) {
	// insertion point for fields commit

	restDB.Name_Data.String = rest.Name
	restDB.Name_Data.Valid = true
}

// CopyBasicFieldsToRest
func (restDB *RestDB) CopyBasicFieldsToRest(rest *models.Rest) {
	// insertion point for checkout of basic fields (back repo to stage)
	rest.Name = restDB.Name_Data.String
}

// CopyBasicFieldsToRest_WOP
func (restDB *RestDB) CopyBasicFieldsToRest_WOP(rest *models.Rest_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	rest.Name = restDB.Name_Data.String
}

// CopyBasicFieldsToRestWOP
func (restDB *RestDB) CopyBasicFieldsToRestWOP(rest *RestWOP) {
	rest.ID = int(restDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	rest.Name = restDB.Name_Data.String
}

// Backup generates a json file from a slice of all RestDB instances in the backrepo
func (backRepoRest *BackRepoRestStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RestDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RestDB, 0)
	for _, restDB := range backRepoRest.Map_RestDBID_RestDB {
		forBackup = append(forBackup, restDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Rest ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Rest file", err.Error())
	}
}

// Backup generates a json file from a slice of all RestDB instances in the backrepo
func (backRepoRest *BackRepoRestStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RestDB, 0)
	for _, restDB := range backRepoRest.Map_RestDBID_RestDB {
		forBackup = append(forBackup, restDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Rest")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Rest_Fields, -1)
	for _, restDB := range forBackup {

		var restWOP RestWOP
		restDB.CopyBasicFieldsToRestWOP(&restWOP)

		row := sh.AddRow()
		row.WriteStruct(&restWOP, -1)
	}
}

// RestoreXL from the "Rest" sheet all RestDB instances
func (backRepoRest *BackRepoRestStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRestid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Rest"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRest.rowVisitorRest)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRest *BackRepoRestStruct) rowVisitorRest(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var restWOP RestWOP
		row.ReadStruct(&restWOP)

		// add the unmarshalled struct to the stage
		restDB := new(RestDB)
		restDB.CopyBasicFieldsFromRestWOP(&restWOP)

		restDB_ID_atBackupTime := restDB.ID
		restDB.ID = 0
		query := backRepoRest.db.Create(restDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRest.Map_RestDBID_RestDB[restDB.ID] = restDB
		BackRepoRestid_atBckpTime_newID[restDB_ID_atBackupTime] = restDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RestDB.json" in dirPath that stores an array
// of RestDB and stores it in the database
// the map BackRepoRestid_atBckpTime_newID is updated accordingly
func (backRepoRest *BackRepoRestStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRestid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RestDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Rest file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RestDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RestDBID_RestDB
	for _, restDB := range forRestore {

		restDB_ID_atBackupTime := restDB.ID
		restDB.ID = 0
		query := backRepoRest.db.Create(restDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRest.Map_RestDBID_RestDB[restDB.ID] = restDB
		BackRepoRestid_atBckpTime_newID[restDB_ID_atBackupTime] = restDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Rest file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Rest>id_atBckpTime_newID
// to compute new index
func (backRepoRest *BackRepoRestStruct) RestorePhaseTwo() {

	for _, restDB := range backRepoRest.Map_RestDBID_RestDB {

		// next line of code is to avert unused variable compilation error
		_ = restDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRest.db.Model(restDB).Updates(*restDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRest.ResetReversePointers commits all staged instances of Rest to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRest *BackRepoRestStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, rest := range backRepoRest.Map_RestDBID_RestPtr {
		backRepoRest.ResetReversePointersInstance(backRepo, idx, rest)
	}

	return
}

func (backRepoRest *BackRepoRestStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, rest *models.Rest) (Error error) {

	// fetch matching restDB
	if restDB, ok := backRepoRest.Map_RestDBID_RestDB[idx]; ok {
		_ = restDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRestid_atBckpTime_newID map[uint]uint
