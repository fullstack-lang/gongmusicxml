// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Release_sql sql.NullBool
var dummy_Release_time time.Duration
var dummy_Release_sort sort.Float64Slice

// ReleaseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model releaseAPI
type ReleaseAPI struct {
	gorm.Model

	models.Release_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ReleasePointersEncoding ReleasePointersEncoding
}

// ReleasePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ReleasePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ReleaseDB describes a release in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model releaseDB
type ReleaseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field releaseDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ReleasePointersEncoding
}

// ReleaseDBs arrays releaseDBs
// swagger:response releaseDBsResponse
type ReleaseDBs []ReleaseDB

// ReleaseDBResponse provides response
// swagger:response releaseDBResponse
type ReleaseDBResponse struct {
	ReleaseDB
}

// ReleaseWOP is a Release without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ReleaseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Release_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoReleaseStruct struct {
	// stores ReleaseDB according to their gorm ID
	Map_ReleaseDBID_ReleaseDB map[uint]*ReleaseDB

	// stores ReleaseDB ID according to Release address
	Map_ReleasePtr_ReleaseDBID map[*models.Release]uint

	// stores Release according to their gorm ID
	Map_ReleaseDBID_ReleasePtr map[uint]*models.Release

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRelease *BackRepoReleaseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRelease.stage
	return
}

func (backRepoRelease *BackRepoReleaseStruct) GetDB() *gorm.DB {
	return backRepoRelease.db
}

// GetReleaseDBFromReleasePtr is a handy function to access the back repo instance from the stage instance
func (backRepoRelease *BackRepoReleaseStruct) GetReleaseDBFromReleasePtr(release *models.Release) (releaseDB *ReleaseDB) {
	id := backRepoRelease.Map_ReleasePtr_ReleaseDBID[release]
	releaseDB = backRepoRelease.Map_ReleaseDBID_ReleaseDB[id]
	return
}

// BackRepoRelease.CommitPhaseOne commits all staged instances of Release to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRelease *BackRepoReleaseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for release := range stage.Releases {
		backRepoRelease.CommitPhaseOneInstance(release)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, release := range backRepoRelease.Map_ReleaseDBID_ReleasePtr {
		if _, ok := stage.Releases[release]; !ok {
			backRepoRelease.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRelease.CommitDeleteInstance commits deletion of Release to the BackRepo
func (backRepoRelease *BackRepoReleaseStruct) CommitDeleteInstance(id uint) (Error error) {

	release := backRepoRelease.Map_ReleaseDBID_ReleasePtr[id]

	// release is not staged anymore, remove releaseDB
	releaseDB := backRepoRelease.Map_ReleaseDBID_ReleaseDB[id]
	query := backRepoRelease.db.Unscoped().Delete(&releaseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRelease.Map_ReleasePtr_ReleaseDBID, release)
	delete(backRepoRelease.Map_ReleaseDBID_ReleasePtr, id)
	delete(backRepoRelease.Map_ReleaseDBID_ReleaseDB, id)

	return
}

// BackRepoRelease.CommitPhaseOneInstance commits release staged instances of Release to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRelease *BackRepoReleaseStruct) CommitPhaseOneInstance(release *models.Release) (Error error) {

	// check if the release is not commited yet
	if _, ok := backRepoRelease.Map_ReleasePtr_ReleaseDBID[release]; ok {
		return
	}

	// initiate release
	var releaseDB ReleaseDB
	releaseDB.CopyBasicFieldsFromRelease(release)

	query := backRepoRelease.db.Create(&releaseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRelease.Map_ReleasePtr_ReleaseDBID[release] = releaseDB.ID
	backRepoRelease.Map_ReleaseDBID_ReleasePtr[releaseDB.ID] = release
	backRepoRelease.Map_ReleaseDBID_ReleaseDB[releaseDB.ID] = &releaseDB

	return
}

// BackRepoRelease.CommitPhaseTwo commits all staged instances of Release to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRelease *BackRepoReleaseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, release := range backRepoRelease.Map_ReleaseDBID_ReleasePtr {
		backRepoRelease.CommitPhaseTwoInstance(backRepo, idx, release)
	}

	return
}

// BackRepoRelease.CommitPhaseTwoInstance commits {{structname }} of models.Release to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRelease *BackRepoReleaseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, release *models.Release) (Error error) {

	// fetch matching releaseDB
	if releaseDB, ok := backRepoRelease.Map_ReleaseDBID_ReleaseDB[idx]; ok {

		releaseDB.CopyBasicFieldsFromRelease(release)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoRelease.db.Save(&releaseDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Release intance %s", release.Name))
		return err
	}

	return
}

// BackRepoRelease.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRelease *BackRepoReleaseStruct) CheckoutPhaseOne() (Error error) {

	releaseDBArray := make([]ReleaseDB, 0)
	query := backRepoRelease.db.Find(&releaseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	releaseInstancesToBeRemovedFromTheStage := make(map[*models.Release]any)
	for key, value := range backRepoRelease.stage.Releases {
		releaseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, releaseDB := range releaseDBArray {
		backRepoRelease.CheckoutPhaseOneInstance(&releaseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		release, ok := backRepoRelease.Map_ReleaseDBID_ReleasePtr[releaseDB.ID]
		if ok {
			delete(releaseInstancesToBeRemovedFromTheStage, release)
		}
	}

	// remove from stage and back repo's 3 maps all releases that are not in the checkout
	for release := range releaseInstancesToBeRemovedFromTheStage {
		release.Unstage(backRepoRelease.GetStage())

		// remove instance from the back repo 3 maps
		releaseID := backRepoRelease.Map_ReleasePtr_ReleaseDBID[release]
		delete(backRepoRelease.Map_ReleasePtr_ReleaseDBID, release)
		delete(backRepoRelease.Map_ReleaseDBID_ReleaseDB, releaseID)
		delete(backRepoRelease.Map_ReleaseDBID_ReleasePtr, releaseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a releaseDB that has been found in the DB, updates the backRepo and stages the
// models version of the releaseDB
func (backRepoRelease *BackRepoReleaseStruct) CheckoutPhaseOneInstance(releaseDB *ReleaseDB) (Error error) {

	release, ok := backRepoRelease.Map_ReleaseDBID_ReleasePtr[releaseDB.ID]
	if !ok {
		release = new(models.Release)

		backRepoRelease.Map_ReleaseDBID_ReleasePtr[releaseDB.ID] = release
		backRepoRelease.Map_ReleasePtr_ReleaseDBID[release] = releaseDB.ID

		// append model store with the new element
		release.Name = releaseDB.Name_Data.String
		release.Stage(backRepoRelease.GetStage())
	}
	releaseDB.CopyBasicFieldsToRelease(release)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	release.Stage(backRepoRelease.GetStage())

	// preserve pointer to releaseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ReleaseDBID_ReleaseDB)[releaseDB hold variable pointers
	releaseDB_Data := *releaseDB
	preservedPtrToRelease := &releaseDB_Data
	backRepoRelease.Map_ReleaseDBID_ReleaseDB[releaseDB.ID] = preservedPtrToRelease

	return
}

// BackRepoRelease.CheckoutPhaseTwo Checkouts all staged instances of Release to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRelease *BackRepoReleaseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, releaseDB := range backRepoRelease.Map_ReleaseDBID_ReleaseDB {
		backRepoRelease.CheckoutPhaseTwoInstance(backRepo, releaseDB)
	}
	return
}

// BackRepoRelease.CheckoutPhaseTwoInstance Checkouts staged instances of Release to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRelease *BackRepoReleaseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, releaseDB *ReleaseDB) (Error error) {

	release := backRepoRelease.Map_ReleaseDBID_ReleasePtr[releaseDB.ID]

	releaseDB.DecodePointers(backRepo, release)

	return
}

func (releaseDB *ReleaseDB) DecodePointers(backRepo *BackRepoStruct, release *models.Release) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitRelease allows commit of a single release (if already staged)
func (backRepo *BackRepoStruct) CommitRelease(release *models.Release) {
	backRepo.BackRepoRelease.CommitPhaseOneInstance(release)
	if id, ok := backRepo.BackRepoRelease.Map_ReleasePtr_ReleaseDBID[release]; ok {
		backRepo.BackRepoRelease.CommitPhaseTwoInstance(backRepo, id, release)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRelease allows checkout of a single release (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRelease(release *models.Release) {
	// check if the release is staged
	if _, ok := backRepo.BackRepoRelease.Map_ReleasePtr_ReleaseDBID[release]; ok {

		if id, ok := backRepo.BackRepoRelease.Map_ReleasePtr_ReleaseDBID[release]; ok {
			var releaseDB ReleaseDB
			releaseDB.ID = id

			if err := backRepo.BackRepoRelease.db.First(&releaseDB, id).Error; err != nil {
				log.Fatalln("CheckoutRelease : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRelease.CheckoutPhaseOneInstance(&releaseDB)
			backRepo.BackRepoRelease.CheckoutPhaseTwoInstance(backRepo, &releaseDB)
		}
	}
}

// CopyBasicFieldsFromRelease
func (releaseDB *ReleaseDB) CopyBasicFieldsFromRelease(release *models.Release) {
	// insertion point for fields commit

	releaseDB.Name_Data.String = release.Name
	releaseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRelease_WOP
func (releaseDB *ReleaseDB) CopyBasicFieldsFromRelease_WOP(release *models.Release_WOP) {
	// insertion point for fields commit

	releaseDB.Name_Data.String = release.Name
	releaseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromReleaseWOP
func (releaseDB *ReleaseDB) CopyBasicFieldsFromReleaseWOP(release *ReleaseWOP) {
	// insertion point for fields commit

	releaseDB.Name_Data.String = release.Name
	releaseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToRelease
func (releaseDB *ReleaseDB) CopyBasicFieldsToRelease(release *models.Release) {
	// insertion point for checkout of basic fields (back repo to stage)
	release.Name = releaseDB.Name_Data.String
}

// CopyBasicFieldsToRelease_WOP
func (releaseDB *ReleaseDB) CopyBasicFieldsToRelease_WOP(release *models.Release_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	release.Name = releaseDB.Name_Data.String
}

// CopyBasicFieldsToReleaseWOP
func (releaseDB *ReleaseDB) CopyBasicFieldsToReleaseWOP(release *ReleaseWOP) {
	release.ID = int(releaseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	release.Name = releaseDB.Name_Data.String
}

// Backup generates a json file from a slice of all ReleaseDB instances in the backrepo
func (backRepoRelease *BackRepoReleaseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ReleaseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReleaseDB, 0)
	for _, releaseDB := range backRepoRelease.Map_ReleaseDBID_ReleaseDB {
		forBackup = append(forBackup, releaseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Release ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Release file", err.Error())
	}
}

// Backup generates a json file from a slice of all ReleaseDB instances in the backrepo
func (backRepoRelease *BackRepoReleaseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ReleaseDB, 0)
	for _, releaseDB := range backRepoRelease.Map_ReleaseDBID_ReleaseDB {
		forBackup = append(forBackup, releaseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Release")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Release_Fields, -1)
	for _, releaseDB := range forBackup {

		var releaseWOP ReleaseWOP
		releaseDB.CopyBasicFieldsToReleaseWOP(&releaseWOP)

		row := sh.AddRow()
		row.WriteStruct(&releaseWOP, -1)
	}
}

// RestoreXL from the "Release" sheet all ReleaseDB instances
func (backRepoRelease *BackRepoReleaseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoReleaseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Release"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRelease.rowVisitorRelease)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRelease *BackRepoReleaseStruct) rowVisitorRelease(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var releaseWOP ReleaseWOP
		row.ReadStruct(&releaseWOP)

		// add the unmarshalled struct to the stage
		releaseDB := new(ReleaseDB)
		releaseDB.CopyBasicFieldsFromReleaseWOP(&releaseWOP)

		releaseDB_ID_atBackupTime := releaseDB.ID
		releaseDB.ID = 0
		query := backRepoRelease.db.Create(releaseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRelease.Map_ReleaseDBID_ReleaseDB[releaseDB.ID] = releaseDB
		BackRepoReleaseid_atBckpTime_newID[releaseDB_ID_atBackupTime] = releaseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ReleaseDB.json" in dirPath that stores an array
// of ReleaseDB and stores it in the database
// the map BackRepoReleaseid_atBckpTime_newID is updated accordingly
func (backRepoRelease *BackRepoReleaseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoReleaseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ReleaseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Release file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ReleaseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ReleaseDBID_ReleaseDB
	for _, releaseDB := range forRestore {

		releaseDB_ID_atBackupTime := releaseDB.ID
		releaseDB.ID = 0
		query := backRepoRelease.db.Create(releaseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRelease.Map_ReleaseDBID_ReleaseDB[releaseDB.ID] = releaseDB
		BackRepoReleaseid_atBckpTime_newID[releaseDB_ID_atBackupTime] = releaseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Release file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Release>id_atBckpTime_newID
// to compute new index
func (backRepoRelease *BackRepoReleaseStruct) RestorePhaseTwo() {

	for _, releaseDB := range backRepoRelease.Map_ReleaseDBID_ReleaseDB {

		// next line of code is to avert unused variable compilation error
		_ = releaseDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRelease.db.Model(releaseDB).Updates(*releaseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRelease.ResetReversePointers commits all staged instances of Release to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRelease *BackRepoReleaseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, release := range backRepoRelease.Map_ReleaseDBID_ReleasePtr {
		backRepoRelease.ResetReversePointersInstance(backRepo, idx, release)
	}

	return
}

func (backRepoRelease *BackRepoReleaseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, release *models.Release) (Error error) {

	// fetch matching releaseDB
	if releaseDB, ok := backRepoRelease.Map_ReleaseDBID_ReleaseDB[idx]; ok {
		_ = releaseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoReleaseid_atBckpTime_newID map[uint]uint
