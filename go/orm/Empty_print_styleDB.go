// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Empty_print_style_sql sql.NullBool
var dummy_Empty_print_style_time time.Duration
var dummy_Empty_print_style_sort sort.Float64Slice

// Empty_print_styleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model empty_print_styleAPI
type Empty_print_styleAPI struct {
	gorm.Model

	models.Empty_print_style_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Empty_print_stylePointersEncoding Empty_print_stylePointersEncoding
}

// Empty_print_stylePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Empty_print_stylePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Empty_print_styleDB describes a empty_print_style in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model empty_print_styleDB
type Empty_print_styleDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field empty_print_styleDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Empty_print_stylePointersEncoding
}

// Empty_print_styleDBs arrays empty_print_styleDBs
// swagger:response empty_print_styleDBsResponse
type Empty_print_styleDBs []Empty_print_styleDB

// Empty_print_styleDBResponse provides response
// swagger:response empty_print_styleDBResponse
type Empty_print_styleDBResponse struct {
	Empty_print_styleDB
}

// Empty_print_styleWOP is a Empty_print_style without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Empty_print_styleWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Empty_print_style_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEmpty_print_styleStruct struct {
	// stores Empty_print_styleDB according to their gorm ID
	Map_Empty_print_styleDBID_Empty_print_styleDB map[uint]*Empty_print_styleDB

	// stores Empty_print_styleDB ID according to Empty_print_style address
	Map_Empty_print_stylePtr_Empty_print_styleDBID map[*models.Empty_print_style]uint

	// stores Empty_print_style according to their gorm ID
	Map_Empty_print_styleDBID_Empty_print_stylePtr map[uint]*models.Empty_print_style

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEmpty_print_style.stage
	return
}

func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) GetDB() *gorm.DB {
	return backRepoEmpty_print_style.db
}

// GetEmpty_print_styleDBFromEmpty_print_stylePtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) GetEmpty_print_styleDBFromEmpty_print_stylePtr(empty_print_style *models.Empty_print_style) (empty_print_styleDB *Empty_print_styleDB) {
	id := backRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style]
	empty_print_styleDB = backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[id]
	return
}

// BackRepoEmpty_print_style.CommitPhaseOne commits all staged instances of Empty_print_style to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for empty_print_style := range stage.Empty_print_styles {
		backRepoEmpty_print_style.CommitPhaseOneInstance(empty_print_style)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, empty_print_style := range backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr {
		if _, ok := stage.Empty_print_styles[empty_print_style]; !ok {
			backRepoEmpty_print_style.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmpty_print_style.CommitDeleteInstance commits deletion of Empty_print_style to the BackRepo
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CommitDeleteInstance(id uint) (Error error) {

	empty_print_style := backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr[id]

	// empty_print_style is not staged anymore, remove empty_print_styleDB
	empty_print_styleDB := backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[id]
	query := backRepoEmpty_print_style.db.Unscoped().Delete(&empty_print_styleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID, empty_print_style)
	delete(backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr, id)
	delete(backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB, id)

	return
}

// BackRepoEmpty_print_style.CommitPhaseOneInstance commits empty_print_style staged instances of Empty_print_style to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CommitPhaseOneInstance(empty_print_style *models.Empty_print_style) (Error error) {

	// check if the empty_print_style is not commited yet
	if _, ok := backRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style]; ok {
		return
	}

	// initiate empty_print_style
	var empty_print_styleDB Empty_print_styleDB
	empty_print_styleDB.CopyBasicFieldsFromEmpty_print_style(empty_print_style)

	query := backRepoEmpty_print_style.db.Create(&empty_print_styleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style] = empty_print_styleDB.ID
	backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr[empty_print_styleDB.ID] = empty_print_style
	backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[empty_print_styleDB.ID] = &empty_print_styleDB

	return
}

// BackRepoEmpty_print_style.CommitPhaseTwo commits all staged instances of Empty_print_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_print_style := range backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr {
		backRepoEmpty_print_style.CommitPhaseTwoInstance(backRepo, idx, empty_print_style)
	}

	return
}

// BackRepoEmpty_print_style.CommitPhaseTwoInstance commits {{structname }} of models.Empty_print_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, empty_print_style *models.Empty_print_style) (Error error) {

	// fetch matching empty_print_styleDB
	if empty_print_styleDB, ok := backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[idx]; ok {

		empty_print_styleDB.CopyBasicFieldsFromEmpty_print_style(empty_print_style)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEmpty_print_style.db.Save(&empty_print_styleDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Empty_print_style intance %s", empty_print_style.Name))
		return err
	}

	return
}

// BackRepoEmpty_print_style.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CheckoutPhaseOne() (Error error) {

	empty_print_styleDBArray := make([]Empty_print_styleDB, 0)
	query := backRepoEmpty_print_style.db.Find(&empty_print_styleDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	empty_print_styleInstancesToBeRemovedFromTheStage := make(map[*models.Empty_print_style]any)
	for key, value := range backRepoEmpty_print_style.stage.Empty_print_styles {
		empty_print_styleInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, empty_print_styleDB := range empty_print_styleDBArray {
		backRepoEmpty_print_style.CheckoutPhaseOneInstance(&empty_print_styleDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		empty_print_style, ok := backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr[empty_print_styleDB.ID]
		if ok {
			delete(empty_print_styleInstancesToBeRemovedFromTheStage, empty_print_style)
		}
	}

	// remove from stage and back repo's 3 maps all empty_print_styles that are not in the checkout
	for empty_print_style := range empty_print_styleInstancesToBeRemovedFromTheStage {
		empty_print_style.Unstage(backRepoEmpty_print_style.GetStage())

		// remove instance from the back repo 3 maps
		empty_print_styleID := backRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style]
		delete(backRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID, empty_print_style)
		delete(backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB, empty_print_styleID)
		delete(backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr, empty_print_styleID)
	}

	return
}

// CheckoutPhaseOneInstance takes a empty_print_styleDB that has been found in the DB, updates the backRepo and stages the
// models version of the empty_print_styleDB
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CheckoutPhaseOneInstance(empty_print_styleDB *Empty_print_styleDB) (Error error) {

	empty_print_style, ok := backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr[empty_print_styleDB.ID]
	if !ok {
		empty_print_style = new(models.Empty_print_style)

		backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr[empty_print_styleDB.ID] = empty_print_style
		backRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style] = empty_print_styleDB.ID

		// append model store with the new element
		empty_print_style.Name = empty_print_styleDB.Name_Data.String
		empty_print_style.Stage(backRepoEmpty_print_style.GetStage())
	}
	empty_print_styleDB.CopyBasicFieldsToEmpty_print_style(empty_print_style)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	empty_print_style.Stage(backRepoEmpty_print_style.GetStage())

	// preserve pointer to empty_print_styleDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Empty_print_styleDBID_Empty_print_styleDB)[empty_print_styleDB hold variable pointers
	empty_print_styleDB_Data := *empty_print_styleDB
	preservedPtrToEmpty_print_style := &empty_print_styleDB_Data
	backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[empty_print_styleDB.ID] = preservedPtrToEmpty_print_style

	return
}

// BackRepoEmpty_print_style.CheckoutPhaseTwo Checkouts all staged instances of Empty_print_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, empty_print_styleDB := range backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB {
		backRepoEmpty_print_style.CheckoutPhaseTwoInstance(backRepo, empty_print_styleDB)
	}
	return
}

// BackRepoEmpty_print_style.CheckoutPhaseTwoInstance Checkouts staged instances of Empty_print_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, empty_print_styleDB *Empty_print_styleDB) (Error error) {

	empty_print_style := backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr[empty_print_styleDB.ID]

	empty_print_styleDB.DecodePointers(backRepo, empty_print_style)

	return
}

func (empty_print_styleDB *Empty_print_styleDB) DecodePointers(backRepo *BackRepoStruct, empty_print_style *models.Empty_print_style) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmpty_print_style allows commit of a single empty_print_style (if already staged)
func (backRepo *BackRepoStruct) CommitEmpty_print_style(empty_print_style *models.Empty_print_style) {
	backRepo.BackRepoEmpty_print_style.CommitPhaseOneInstance(empty_print_style)
	if id, ok := backRepo.BackRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style]; ok {
		backRepo.BackRepoEmpty_print_style.CommitPhaseTwoInstance(backRepo, id, empty_print_style)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmpty_print_style allows checkout of a single empty_print_style (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmpty_print_style(empty_print_style *models.Empty_print_style) {
	// check if the empty_print_style is staged
	if _, ok := backRepo.BackRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style]; ok {

		if id, ok := backRepo.BackRepoEmpty_print_style.Map_Empty_print_stylePtr_Empty_print_styleDBID[empty_print_style]; ok {
			var empty_print_styleDB Empty_print_styleDB
			empty_print_styleDB.ID = id

			if err := backRepo.BackRepoEmpty_print_style.db.First(&empty_print_styleDB, id).Error; err != nil {
				log.Fatalln("CheckoutEmpty_print_style : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmpty_print_style.CheckoutPhaseOneInstance(&empty_print_styleDB)
			backRepo.BackRepoEmpty_print_style.CheckoutPhaseTwoInstance(backRepo, &empty_print_styleDB)
		}
	}
}

// CopyBasicFieldsFromEmpty_print_style
func (empty_print_styleDB *Empty_print_styleDB) CopyBasicFieldsFromEmpty_print_style(empty_print_style *models.Empty_print_style) {
	// insertion point for fields commit

	empty_print_styleDB.Name_Data.String = empty_print_style.Name
	empty_print_styleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_print_style_WOP
func (empty_print_styleDB *Empty_print_styleDB) CopyBasicFieldsFromEmpty_print_style_WOP(empty_print_style *models.Empty_print_style_WOP) {
	// insertion point for fields commit

	empty_print_styleDB.Name_Data.String = empty_print_style.Name
	empty_print_styleDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_print_styleWOP
func (empty_print_styleDB *Empty_print_styleDB) CopyBasicFieldsFromEmpty_print_styleWOP(empty_print_style *Empty_print_styleWOP) {
	// insertion point for fields commit

	empty_print_styleDB.Name_Data.String = empty_print_style.Name
	empty_print_styleDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEmpty_print_style
func (empty_print_styleDB *Empty_print_styleDB) CopyBasicFieldsToEmpty_print_style(empty_print_style *models.Empty_print_style) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_print_style.Name = empty_print_styleDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_print_style_WOP
func (empty_print_styleDB *Empty_print_styleDB) CopyBasicFieldsToEmpty_print_style_WOP(empty_print_style *models.Empty_print_style_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_print_style.Name = empty_print_styleDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_print_styleWOP
func (empty_print_styleDB *Empty_print_styleDB) CopyBasicFieldsToEmpty_print_styleWOP(empty_print_style *Empty_print_styleWOP) {
	empty_print_style.ID = int(empty_print_styleDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	empty_print_style.Name = empty_print_styleDB.Name_Data.String
}

// Backup generates a json file from a slice of all Empty_print_styleDB instances in the backrepo
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Empty_print_styleDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_print_styleDB, 0)
	for _, empty_print_styleDB := range backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB {
		forBackup = append(forBackup, empty_print_styleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Empty_print_style ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Empty_print_style file", err.Error())
	}
}

// Backup generates a json file from a slice of all Empty_print_styleDB instances in the backrepo
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_print_styleDB, 0)
	for _, empty_print_styleDB := range backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB {
		forBackup = append(forBackup, empty_print_styleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Empty_print_style")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Empty_print_style_Fields, -1)
	for _, empty_print_styleDB := range forBackup {

		var empty_print_styleWOP Empty_print_styleWOP
		empty_print_styleDB.CopyBasicFieldsToEmpty_print_styleWOP(&empty_print_styleWOP)

		row := sh.AddRow()
		row.WriteStruct(&empty_print_styleWOP, -1)
	}
}

// RestoreXL from the "Empty_print_style" sheet all Empty_print_styleDB instances
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmpty_print_styleid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Empty_print_style"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmpty_print_style.rowVisitorEmpty_print_style)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) rowVisitorEmpty_print_style(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var empty_print_styleWOP Empty_print_styleWOP
		row.ReadStruct(&empty_print_styleWOP)

		// add the unmarshalled struct to the stage
		empty_print_styleDB := new(Empty_print_styleDB)
		empty_print_styleDB.CopyBasicFieldsFromEmpty_print_styleWOP(&empty_print_styleWOP)

		empty_print_styleDB_ID_atBackupTime := empty_print_styleDB.ID
		empty_print_styleDB.ID = 0
		query := backRepoEmpty_print_style.db.Create(empty_print_styleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[empty_print_styleDB.ID] = empty_print_styleDB
		BackRepoEmpty_print_styleid_atBckpTime_newID[empty_print_styleDB_ID_atBackupTime] = empty_print_styleDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Empty_print_styleDB.json" in dirPath that stores an array
// of Empty_print_styleDB and stores it in the database
// the map BackRepoEmpty_print_styleid_atBckpTime_newID is updated accordingly
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmpty_print_styleid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Empty_print_styleDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Empty_print_style file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Empty_print_styleDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Empty_print_styleDBID_Empty_print_styleDB
	for _, empty_print_styleDB := range forRestore {

		empty_print_styleDB_ID_atBackupTime := empty_print_styleDB.ID
		empty_print_styleDB.ID = 0
		query := backRepoEmpty_print_style.db.Create(empty_print_styleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[empty_print_styleDB.ID] = empty_print_styleDB
		BackRepoEmpty_print_styleid_atBckpTime_newID[empty_print_styleDB_ID_atBackupTime] = empty_print_styleDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Empty_print_style file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Empty_print_style>id_atBckpTime_newID
// to compute new index
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) RestorePhaseTwo() {

	for _, empty_print_styleDB := range backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB {

		// next line of code is to avert unused variable compilation error
		_ = empty_print_styleDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEmpty_print_style.db.Model(empty_print_styleDB).Updates(*empty_print_styleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEmpty_print_style.ResetReversePointers commits all staged instances of Empty_print_style to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_print_style := range backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_stylePtr {
		backRepoEmpty_print_style.ResetReversePointersInstance(backRepo, idx, empty_print_style)
	}

	return
}

func (backRepoEmpty_print_style *BackRepoEmpty_print_styleStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, empty_print_style *models.Empty_print_style) (Error error) {

	// fetch matching empty_print_styleDB
	if empty_print_styleDB, ok := backRepoEmpty_print_style.Map_Empty_print_styleDBID_Empty_print_styleDB[idx]; ok {
		_ = empty_print_styleDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmpty_print_styleid_atBckpTime_newID map[uint]uint
