// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Forward_sql sql.NullBool
var dummy_Forward_time time.Duration
var dummy_Forward_sort sort.Float64Slice

// ForwardAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model forwardAPI
type ForwardAPI struct {
	gorm.Model

	models.Forward_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ForwardPointersEncoding ForwardPointersEncoding
}

// ForwardPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ForwardPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ForwardDB describes a forward in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model forwardDB
type ForwardDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field forwardDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ForwardPointersEncoding
}

// ForwardDBs arrays forwardDBs
// swagger:response forwardDBsResponse
type ForwardDBs []ForwardDB

// ForwardDBResponse provides response
// swagger:response forwardDBResponse
type ForwardDBResponse struct {
	ForwardDB
}

// ForwardWOP is a Forward without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ForwardWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Forward_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoForwardStruct struct {
	// stores ForwardDB according to their gorm ID
	Map_ForwardDBID_ForwardDB map[uint]*ForwardDB

	// stores ForwardDB ID according to Forward address
	Map_ForwardPtr_ForwardDBID map[*models.Forward]uint

	// stores Forward according to their gorm ID
	Map_ForwardDBID_ForwardPtr map[uint]*models.Forward

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoForward *BackRepoForwardStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoForward.stage
	return
}

func (backRepoForward *BackRepoForwardStruct) GetDB() *gorm.DB {
	return backRepoForward.db
}

// GetForwardDBFromForwardPtr is a handy function to access the back repo instance from the stage instance
func (backRepoForward *BackRepoForwardStruct) GetForwardDBFromForwardPtr(forward *models.Forward) (forwardDB *ForwardDB) {
	id := backRepoForward.Map_ForwardPtr_ForwardDBID[forward]
	forwardDB = backRepoForward.Map_ForwardDBID_ForwardDB[id]
	return
}

// BackRepoForward.CommitPhaseOne commits all staged instances of Forward to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoForward *BackRepoForwardStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for forward := range stage.Forwards {
		backRepoForward.CommitPhaseOneInstance(forward)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, forward := range backRepoForward.Map_ForwardDBID_ForwardPtr {
		if _, ok := stage.Forwards[forward]; !ok {
			backRepoForward.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoForward.CommitDeleteInstance commits deletion of Forward to the BackRepo
func (backRepoForward *BackRepoForwardStruct) CommitDeleteInstance(id uint) (Error error) {

	forward := backRepoForward.Map_ForwardDBID_ForwardPtr[id]

	// forward is not staged anymore, remove forwardDB
	forwardDB := backRepoForward.Map_ForwardDBID_ForwardDB[id]
	query := backRepoForward.db.Unscoped().Delete(&forwardDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoForward.Map_ForwardPtr_ForwardDBID, forward)
	delete(backRepoForward.Map_ForwardDBID_ForwardPtr, id)
	delete(backRepoForward.Map_ForwardDBID_ForwardDB, id)

	return
}

// BackRepoForward.CommitPhaseOneInstance commits forward staged instances of Forward to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoForward *BackRepoForwardStruct) CommitPhaseOneInstance(forward *models.Forward) (Error error) {

	// check if the forward is not commited yet
	if _, ok := backRepoForward.Map_ForwardPtr_ForwardDBID[forward]; ok {
		return
	}

	// initiate forward
	var forwardDB ForwardDB
	forwardDB.CopyBasicFieldsFromForward(forward)

	query := backRepoForward.db.Create(&forwardDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoForward.Map_ForwardPtr_ForwardDBID[forward] = forwardDB.ID
	backRepoForward.Map_ForwardDBID_ForwardPtr[forwardDB.ID] = forward
	backRepoForward.Map_ForwardDBID_ForwardDB[forwardDB.ID] = &forwardDB

	return
}

// BackRepoForward.CommitPhaseTwo commits all staged instances of Forward to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForward *BackRepoForwardStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, forward := range backRepoForward.Map_ForwardDBID_ForwardPtr {
		backRepoForward.CommitPhaseTwoInstance(backRepo, idx, forward)
	}

	return
}

// BackRepoForward.CommitPhaseTwoInstance commits {{structname }} of models.Forward to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForward *BackRepoForwardStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, forward *models.Forward) (Error error) {

	// fetch matching forwardDB
	if forwardDB, ok := backRepoForward.Map_ForwardDBID_ForwardDB[idx]; ok {

		forwardDB.CopyBasicFieldsFromForward(forward)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoForward.db.Save(&forwardDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Forward intance %s", forward.Name))
		return err
	}

	return
}

// BackRepoForward.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoForward *BackRepoForwardStruct) CheckoutPhaseOne() (Error error) {

	forwardDBArray := make([]ForwardDB, 0)
	query := backRepoForward.db.Find(&forwardDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	forwardInstancesToBeRemovedFromTheStage := make(map[*models.Forward]any)
	for key, value := range backRepoForward.stage.Forwards {
		forwardInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, forwardDB := range forwardDBArray {
		backRepoForward.CheckoutPhaseOneInstance(&forwardDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		forward, ok := backRepoForward.Map_ForwardDBID_ForwardPtr[forwardDB.ID]
		if ok {
			delete(forwardInstancesToBeRemovedFromTheStage, forward)
		}
	}

	// remove from stage and back repo's 3 maps all forwards that are not in the checkout
	for forward := range forwardInstancesToBeRemovedFromTheStage {
		forward.Unstage(backRepoForward.GetStage())

		// remove instance from the back repo 3 maps
		forwardID := backRepoForward.Map_ForwardPtr_ForwardDBID[forward]
		delete(backRepoForward.Map_ForwardPtr_ForwardDBID, forward)
		delete(backRepoForward.Map_ForwardDBID_ForwardDB, forwardID)
		delete(backRepoForward.Map_ForwardDBID_ForwardPtr, forwardID)
	}

	return
}

// CheckoutPhaseOneInstance takes a forwardDB that has been found in the DB, updates the backRepo and stages the
// models version of the forwardDB
func (backRepoForward *BackRepoForwardStruct) CheckoutPhaseOneInstance(forwardDB *ForwardDB) (Error error) {

	forward, ok := backRepoForward.Map_ForwardDBID_ForwardPtr[forwardDB.ID]
	if !ok {
		forward = new(models.Forward)

		backRepoForward.Map_ForwardDBID_ForwardPtr[forwardDB.ID] = forward
		backRepoForward.Map_ForwardPtr_ForwardDBID[forward] = forwardDB.ID

		// append model store with the new element
		forward.Name = forwardDB.Name_Data.String
		forward.Stage(backRepoForward.GetStage())
	}
	forwardDB.CopyBasicFieldsToForward(forward)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	forward.Stage(backRepoForward.GetStage())

	// preserve pointer to forwardDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ForwardDBID_ForwardDB)[forwardDB hold variable pointers
	forwardDB_Data := *forwardDB
	preservedPtrToForward := &forwardDB_Data
	backRepoForward.Map_ForwardDBID_ForwardDB[forwardDB.ID] = preservedPtrToForward

	return
}

// BackRepoForward.CheckoutPhaseTwo Checkouts all staged instances of Forward to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForward *BackRepoForwardStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, forwardDB := range backRepoForward.Map_ForwardDBID_ForwardDB {
		backRepoForward.CheckoutPhaseTwoInstance(backRepo, forwardDB)
	}
	return
}

// BackRepoForward.CheckoutPhaseTwoInstance Checkouts staged instances of Forward to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForward *BackRepoForwardStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, forwardDB *ForwardDB) (Error error) {

	forward := backRepoForward.Map_ForwardDBID_ForwardPtr[forwardDB.ID]

	forwardDB.DecodePointers(backRepo, forward)

	return
}

func (forwardDB *ForwardDB) DecodePointers(backRepo *BackRepoStruct, forward *models.Forward) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitForward allows commit of a single forward (if already staged)
func (backRepo *BackRepoStruct) CommitForward(forward *models.Forward) {
	backRepo.BackRepoForward.CommitPhaseOneInstance(forward)
	if id, ok := backRepo.BackRepoForward.Map_ForwardPtr_ForwardDBID[forward]; ok {
		backRepo.BackRepoForward.CommitPhaseTwoInstance(backRepo, id, forward)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitForward allows checkout of a single forward (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutForward(forward *models.Forward) {
	// check if the forward is staged
	if _, ok := backRepo.BackRepoForward.Map_ForwardPtr_ForwardDBID[forward]; ok {

		if id, ok := backRepo.BackRepoForward.Map_ForwardPtr_ForwardDBID[forward]; ok {
			var forwardDB ForwardDB
			forwardDB.ID = id

			if err := backRepo.BackRepoForward.db.First(&forwardDB, id).Error; err != nil {
				log.Fatalln("CheckoutForward : Problem with getting object with id:", id)
			}
			backRepo.BackRepoForward.CheckoutPhaseOneInstance(&forwardDB)
			backRepo.BackRepoForward.CheckoutPhaseTwoInstance(backRepo, &forwardDB)
		}
	}
}

// CopyBasicFieldsFromForward
func (forwardDB *ForwardDB) CopyBasicFieldsFromForward(forward *models.Forward) {
	// insertion point for fields commit

	forwardDB.Name_Data.String = forward.Name
	forwardDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromForward_WOP
func (forwardDB *ForwardDB) CopyBasicFieldsFromForward_WOP(forward *models.Forward_WOP) {
	// insertion point for fields commit

	forwardDB.Name_Data.String = forward.Name
	forwardDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromForwardWOP
func (forwardDB *ForwardDB) CopyBasicFieldsFromForwardWOP(forward *ForwardWOP) {
	// insertion point for fields commit

	forwardDB.Name_Data.String = forward.Name
	forwardDB.Name_Data.Valid = true
}

// CopyBasicFieldsToForward
func (forwardDB *ForwardDB) CopyBasicFieldsToForward(forward *models.Forward) {
	// insertion point for checkout of basic fields (back repo to stage)
	forward.Name = forwardDB.Name_Data.String
}

// CopyBasicFieldsToForward_WOP
func (forwardDB *ForwardDB) CopyBasicFieldsToForward_WOP(forward *models.Forward_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	forward.Name = forwardDB.Name_Data.String
}

// CopyBasicFieldsToForwardWOP
func (forwardDB *ForwardDB) CopyBasicFieldsToForwardWOP(forward *ForwardWOP) {
	forward.ID = int(forwardDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	forward.Name = forwardDB.Name_Data.String
}

// Backup generates a json file from a slice of all ForwardDB instances in the backrepo
func (backRepoForward *BackRepoForwardStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ForwardDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ForwardDB, 0)
	for _, forwardDB := range backRepoForward.Map_ForwardDBID_ForwardDB {
		forBackup = append(forBackup, forwardDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Forward ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Forward file", err.Error())
	}
}

// Backup generates a json file from a slice of all ForwardDB instances in the backrepo
func (backRepoForward *BackRepoForwardStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ForwardDB, 0)
	for _, forwardDB := range backRepoForward.Map_ForwardDBID_ForwardDB {
		forBackup = append(forBackup, forwardDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Forward")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Forward_Fields, -1)
	for _, forwardDB := range forBackup {

		var forwardWOP ForwardWOP
		forwardDB.CopyBasicFieldsToForwardWOP(&forwardWOP)

		row := sh.AddRow()
		row.WriteStruct(&forwardWOP, -1)
	}
}

// RestoreXL from the "Forward" sheet all ForwardDB instances
func (backRepoForward *BackRepoForwardStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoForwardid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Forward"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoForward.rowVisitorForward)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoForward *BackRepoForwardStruct) rowVisitorForward(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var forwardWOP ForwardWOP
		row.ReadStruct(&forwardWOP)

		// add the unmarshalled struct to the stage
		forwardDB := new(ForwardDB)
		forwardDB.CopyBasicFieldsFromForwardWOP(&forwardWOP)

		forwardDB_ID_atBackupTime := forwardDB.ID
		forwardDB.ID = 0
		query := backRepoForward.db.Create(forwardDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoForward.Map_ForwardDBID_ForwardDB[forwardDB.ID] = forwardDB
		BackRepoForwardid_atBckpTime_newID[forwardDB_ID_atBackupTime] = forwardDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ForwardDB.json" in dirPath that stores an array
// of ForwardDB and stores it in the database
// the map BackRepoForwardid_atBckpTime_newID is updated accordingly
func (backRepoForward *BackRepoForwardStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoForwardid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ForwardDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Forward file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ForwardDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ForwardDBID_ForwardDB
	for _, forwardDB := range forRestore {

		forwardDB_ID_atBackupTime := forwardDB.ID
		forwardDB.ID = 0
		query := backRepoForward.db.Create(forwardDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoForward.Map_ForwardDBID_ForwardDB[forwardDB.ID] = forwardDB
		BackRepoForwardid_atBckpTime_newID[forwardDB_ID_atBackupTime] = forwardDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Forward file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Forward>id_atBckpTime_newID
// to compute new index
func (backRepoForward *BackRepoForwardStruct) RestorePhaseTwo() {

	for _, forwardDB := range backRepoForward.Map_ForwardDBID_ForwardDB {

		// next line of code is to avert unused variable compilation error
		_ = forwardDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoForward.db.Model(forwardDB).Updates(*forwardDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoForward.ResetReversePointers commits all staged instances of Forward to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForward *BackRepoForwardStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, forward := range backRepoForward.Map_ForwardDBID_ForwardPtr {
		backRepoForward.ResetReversePointersInstance(backRepo, idx, forward)
	}

	return
}

func (backRepoForward *BackRepoForwardStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, forward *models.Forward) (Error error) {

	// fetch matching forwardDB
	if forwardDB, ok := backRepoForward.Map_ForwardDBID_ForwardDB[idx]; ok {
		_ = forwardDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoForwardid_atBckpTime_newID map[uint]uint
