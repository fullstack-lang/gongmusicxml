// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Frame_sql sql.NullBool
var dummy_Frame_time time.Duration
var dummy_Frame_sort sort.Float64Slice

// FrameAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model frameAPI
type FrameAPI struct {
	gorm.Model

	models.Frame_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FramePointersEncoding FramePointersEncoding
}

// FramePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FramePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field First_fret is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	First_fretID sql.NullInt64

	// field Frame_note is a slice of pointers to another Struct (optional or 0..1)
	Frame_note IntSlice `gorm:"type:TEXT"`
}

// FrameDB describes a frame in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model frameDB
type FrameDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field frameDB.Name
	Name_Data sql.NullString

	// Declation for basic field frameDB.Unplayed
	Unplayed_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FramePointersEncoding
}

// FrameDBs arrays frameDBs
// swagger:response frameDBsResponse
type FrameDBs []FrameDB

// FrameDBResponse provides response
// swagger:response frameDBResponse
type FrameDBResponse struct {
	FrameDB
}

// FrameWOP is a Frame without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FrameWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Unplayed string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Frame_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Unplayed",
}

type BackRepoFrameStruct struct {
	// stores FrameDB according to their gorm ID
	Map_FrameDBID_FrameDB map[uint]*FrameDB

	// stores FrameDB ID according to Frame address
	Map_FramePtr_FrameDBID map[*models.Frame]uint

	// stores Frame according to their gorm ID
	Map_FrameDBID_FramePtr map[uint]*models.Frame

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFrame *BackRepoFrameStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFrame.stage
	return
}

func (backRepoFrame *BackRepoFrameStruct) GetDB() *gorm.DB {
	return backRepoFrame.db
}

// GetFrameDBFromFramePtr is a handy function to access the back repo instance from the stage instance
func (backRepoFrame *BackRepoFrameStruct) GetFrameDBFromFramePtr(frame *models.Frame) (frameDB *FrameDB) {
	id := backRepoFrame.Map_FramePtr_FrameDBID[frame]
	frameDB = backRepoFrame.Map_FrameDBID_FrameDB[id]
	return
}

// BackRepoFrame.CommitPhaseOne commits all staged instances of Frame to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrame *BackRepoFrameStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for frame := range stage.Frames {
		backRepoFrame.CommitPhaseOneInstance(frame)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, frame := range backRepoFrame.Map_FrameDBID_FramePtr {
		if _, ok := stage.Frames[frame]; !ok {
			backRepoFrame.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFrame.CommitDeleteInstance commits deletion of Frame to the BackRepo
func (backRepoFrame *BackRepoFrameStruct) CommitDeleteInstance(id uint) (Error error) {

	frame := backRepoFrame.Map_FrameDBID_FramePtr[id]

	// frame is not staged anymore, remove frameDB
	frameDB := backRepoFrame.Map_FrameDBID_FrameDB[id]
	query := backRepoFrame.db.Unscoped().Delete(&frameDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFrame.Map_FramePtr_FrameDBID, frame)
	delete(backRepoFrame.Map_FrameDBID_FramePtr, id)
	delete(backRepoFrame.Map_FrameDBID_FrameDB, id)

	return
}

// BackRepoFrame.CommitPhaseOneInstance commits frame staged instances of Frame to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFrame *BackRepoFrameStruct) CommitPhaseOneInstance(frame *models.Frame) (Error error) {

	// check if the frame is not commited yet
	if _, ok := backRepoFrame.Map_FramePtr_FrameDBID[frame]; ok {
		return
	}

	// initiate frame
	var frameDB FrameDB
	frameDB.CopyBasicFieldsFromFrame(frame)

	query := backRepoFrame.db.Create(&frameDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFrame.Map_FramePtr_FrameDBID[frame] = frameDB.ID
	backRepoFrame.Map_FrameDBID_FramePtr[frameDB.ID] = frame
	backRepoFrame.Map_FrameDBID_FrameDB[frameDB.ID] = &frameDB

	return
}

// BackRepoFrame.CommitPhaseTwo commits all staged instances of Frame to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame *BackRepoFrameStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, frame := range backRepoFrame.Map_FrameDBID_FramePtr {
		backRepoFrame.CommitPhaseTwoInstance(backRepo, idx, frame)
	}

	return
}

// BackRepoFrame.CommitPhaseTwoInstance commits {{structname }} of models.Frame to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame *BackRepoFrameStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, frame *models.Frame) (Error error) {

	// fetch matching frameDB
	if frameDB, ok := backRepoFrame.Map_FrameDBID_FrameDB[idx]; ok {

		frameDB.CopyBasicFieldsFromFrame(frame)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value frame.First_fret translates to updating the frame.First_fretID
		frameDB.First_fretID.Valid = true // allow for a 0 value (nil association)
		if frame.First_fret != nil {
			if First_fretId, ok := backRepo.BackRepoFirst_fret.Map_First_fretPtr_First_fretDBID[frame.First_fret]; ok {
				frameDB.First_fretID.Int64 = int64(First_fretId)
				frameDB.First_fretID.Valid = true
			}
		} else {
			frameDB.First_fretID.Int64 = 0
			frameDB.First_fretID.Valid = true
		}

		// 1. reset
		frameDB.FramePointersEncoding.Frame_note = make([]int, 0)
		// 2. encode
		for _, frame_noteAssocEnd := range frame.Frame_note {
			frame_noteAssocEnd_DB :=
				backRepo.BackRepoFrame_note.GetFrame_noteDBFromFrame_notePtr(frame_noteAssocEnd)
			
			// the stage might be inconsistant, meaning that the frame_noteAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if frame_noteAssocEnd_DB == nil {
				continue
			}
			
			frameDB.FramePointersEncoding.Frame_note =
				append(frameDB.FramePointersEncoding.Frame_note, int(frame_noteAssocEnd_DB.ID))
		}

		query := backRepoFrame.db.Save(&frameDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Frame intance %s", frame.Name))
		return err
	}

	return
}

// BackRepoFrame.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFrame *BackRepoFrameStruct) CheckoutPhaseOne() (Error error) {

	frameDBArray := make([]FrameDB, 0)
	query := backRepoFrame.db.Find(&frameDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	frameInstancesToBeRemovedFromTheStage := make(map[*models.Frame]any)
	for key, value := range backRepoFrame.stage.Frames {
		frameInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, frameDB := range frameDBArray {
		backRepoFrame.CheckoutPhaseOneInstance(&frameDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		frame, ok := backRepoFrame.Map_FrameDBID_FramePtr[frameDB.ID]
		if ok {
			delete(frameInstancesToBeRemovedFromTheStage, frame)
		}
	}

	// remove from stage and back repo's 3 maps all frames that are not in the checkout
	for frame := range frameInstancesToBeRemovedFromTheStage {
		frame.Unstage(backRepoFrame.GetStage())

		// remove instance from the back repo 3 maps
		frameID := backRepoFrame.Map_FramePtr_FrameDBID[frame]
		delete(backRepoFrame.Map_FramePtr_FrameDBID, frame)
		delete(backRepoFrame.Map_FrameDBID_FrameDB, frameID)
		delete(backRepoFrame.Map_FrameDBID_FramePtr, frameID)
	}

	return
}

// CheckoutPhaseOneInstance takes a frameDB that has been found in the DB, updates the backRepo and stages the
// models version of the frameDB
func (backRepoFrame *BackRepoFrameStruct) CheckoutPhaseOneInstance(frameDB *FrameDB) (Error error) {

	frame, ok := backRepoFrame.Map_FrameDBID_FramePtr[frameDB.ID]
	if !ok {
		frame = new(models.Frame)

		backRepoFrame.Map_FrameDBID_FramePtr[frameDB.ID] = frame
		backRepoFrame.Map_FramePtr_FrameDBID[frame] = frameDB.ID

		// append model store with the new element
		frame.Name = frameDB.Name_Data.String
		frame.Stage(backRepoFrame.GetStage())
	}
	frameDB.CopyBasicFieldsToFrame(frame)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	frame.Stage(backRepoFrame.GetStage())

	// preserve pointer to frameDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FrameDBID_FrameDB)[frameDB hold variable pointers
	frameDB_Data := *frameDB
	preservedPtrToFrame := &frameDB_Data
	backRepoFrame.Map_FrameDBID_FrameDB[frameDB.ID] = preservedPtrToFrame

	return
}

// BackRepoFrame.CheckoutPhaseTwo Checkouts all staged instances of Frame to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame *BackRepoFrameStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, frameDB := range backRepoFrame.Map_FrameDBID_FrameDB {
		backRepoFrame.CheckoutPhaseTwoInstance(backRepo, frameDB)
	}
	return
}

// BackRepoFrame.CheckoutPhaseTwoInstance Checkouts staged instances of Frame to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame *BackRepoFrameStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, frameDB *FrameDB) (Error error) {

	frame := backRepoFrame.Map_FrameDBID_FramePtr[frameDB.ID]

	frameDB.DecodePointers(backRepo, frame)

	return
}

func (frameDB *FrameDB) DecodePointers(backRepo *BackRepoStruct, frame *models.Frame) {

	// insertion point for checkout of pointer encoding
	// First_fret field
	frame.First_fret = nil
	if frameDB.First_fretID.Int64 != 0 {
		frame.First_fret = backRepo.BackRepoFirst_fret.Map_First_fretDBID_First_fretPtr[uint(frameDB.First_fretID.Int64)]
	}
	// This loop redeem frame.Frame_note in the stage from the encode in the back repo
	// It parses all Frame_noteDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	frame.Frame_note = frame.Frame_note[:0]
	for _, _Frame_noteid := range frameDB.FramePointersEncoding.Frame_note {
		frame.Frame_note = append(frame.Frame_note, backRepo.BackRepoFrame_note.Map_Frame_noteDBID_Frame_notePtr[uint(_Frame_noteid)])
	}

	return
}

// CommitFrame allows commit of a single frame (if already staged)
func (backRepo *BackRepoStruct) CommitFrame(frame *models.Frame) {
	backRepo.BackRepoFrame.CommitPhaseOneInstance(frame)
	if id, ok := backRepo.BackRepoFrame.Map_FramePtr_FrameDBID[frame]; ok {
		backRepo.BackRepoFrame.CommitPhaseTwoInstance(backRepo, id, frame)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFrame allows checkout of a single frame (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFrame(frame *models.Frame) {
	// check if the frame is staged
	if _, ok := backRepo.BackRepoFrame.Map_FramePtr_FrameDBID[frame]; ok {

		if id, ok := backRepo.BackRepoFrame.Map_FramePtr_FrameDBID[frame]; ok {
			var frameDB FrameDB
			frameDB.ID = id

			if err := backRepo.BackRepoFrame.db.First(&frameDB, id).Error; err != nil {
				log.Fatalln("CheckoutFrame : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFrame.CheckoutPhaseOneInstance(&frameDB)
			backRepo.BackRepoFrame.CheckoutPhaseTwoInstance(backRepo, &frameDB)
		}
	}
}

// CopyBasicFieldsFromFrame
func (frameDB *FrameDB) CopyBasicFieldsFromFrame(frame *models.Frame) {
	// insertion point for fields commit

	frameDB.Name_Data.String = frame.Name
	frameDB.Name_Data.Valid = true

	frameDB.Unplayed_Data.String = frame.Unplayed
	frameDB.Unplayed_Data.Valid = true
}

// CopyBasicFieldsFromFrame_WOP
func (frameDB *FrameDB) CopyBasicFieldsFromFrame_WOP(frame *models.Frame_WOP) {
	// insertion point for fields commit

	frameDB.Name_Data.String = frame.Name
	frameDB.Name_Data.Valid = true

	frameDB.Unplayed_Data.String = frame.Unplayed
	frameDB.Unplayed_Data.Valid = true
}

// CopyBasicFieldsFromFrameWOP
func (frameDB *FrameDB) CopyBasicFieldsFromFrameWOP(frame *FrameWOP) {
	// insertion point for fields commit

	frameDB.Name_Data.String = frame.Name
	frameDB.Name_Data.Valid = true

	frameDB.Unplayed_Data.String = frame.Unplayed
	frameDB.Unplayed_Data.Valid = true
}

// CopyBasicFieldsToFrame
func (frameDB *FrameDB) CopyBasicFieldsToFrame(frame *models.Frame) {
	// insertion point for checkout of basic fields (back repo to stage)
	frame.Name = frameDB.Name_Data.String
	frame.Unplayed = frameDB.Unplayed_Data.String
}

// CopyBasicFieldsToFrame_WOP
func (frameDB *FrameDB) CopyBasicFieldsToFrame_WOP(frame *models.Frame_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	frame.Name = frameDB.Name_Data.String
	frame.Unplayed = frameDB.Unplayed_Data.String
}

// CopyBasicFieldsToFrameWOP
func (frameDB *FrameDB) CopyBasicFieldsToFrameWOP(frame *FrameWOP) {
	frame.ID = int(frameDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	frame.Name = frameDB.Name_Data.String
	frame.Unplayed = frameDB.Unplayed_Data.String
}

// Backup generates a json file from a slice of all FrameDB instances in the backrepo
func (backRepoFrame *BackRepoFrameStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FrameDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FrameDB, 0)
	for _, frameDB := range backRepoFrame.Map_FrameDBID_FrameDB {
		forBackup = append(forBackup, frameDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Frame ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Frame file", err.Error())
	}
}

// Backup generates a json file from a slice of all FrameDB instances in the backrepo
func (backRepoFrame *BackRepoFrameStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FrameDB, 0)
	for _, frameDB := range backRepoFrame.Map_FrameDBID_FrameDB {
		forBackup = append(forBackup, frameDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Frame")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Frame_Fields, -1)
	for _, frameDB := range forBackup {

		var frameWOP FrameWOP
		frameDB.CopyBasicFieldsToFrameWOP(&frameWOP)

		row := sh.AddRow()
		row.WriteStruct(&frameWOP, -1)
	}
}

// RestoreXL from the "Frame" sheet all FrameDB instances
func (backRepoFrame *BackRepoFrameStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFrameid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Frame"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFrame.rowVisitorFrame)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFrame *BackRepoFrameStruct) rowVisitorFrame(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var frameWOP FrameWOP
		row.ReadStruct(&frameWOP)

		// add the unmarshalled struct to the stage
		frameDB := new(FrameDB)
		frameDB.CopyBasicFieldsFromFrameWOP(&frameWOP)

		frameDB_ID_atBackupTime := frameDB.ID
		frameDB.ID = 0
		query := backRepoFrame.db.Create(frameDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFrame.Map_FrameDBID_FrameDB[frameDB.ID] = frameDB
		BackRepoFrameid_atBckpTime_newID[frameDB_ID_atBackupTime] = frameDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FrameDB.json" in dirPath that stores an array
// of FrameDB and stores it in the database
// the map BackRepoFrameid_atBckpTime_newID is updated accordingly
func (backRepoFrame *BackRepoFrameStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFrameid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FrameDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Frame file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FrameDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FrameDBID_FrameDB
	for _, frameDB := range forRestore {

		frameDB_ID_atBackupTime := frameDB.ID
		frameDB.ID = 0
		query := backRepoFrame.db.Create(frameDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFrame.Map_FrameDBID_FrameDB[frameDB.ID] = frameDB
		BackRepoFrameid_atBckpTime_newID[frameDB_ID_atBackupTime] = frameDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Frame file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Frame>id_atBckpTime_newID
// to compute new index
func (backRepoFrame *BackRepoFrameStruct) RestorePhaseTwo() {

	for _, frameDB := range backRepoFrame.Map_FrameDBID_FrameDB {

		// next line of code is to avert unused variable compilation error
		_ = frameDB

		// insertion point for reindexing pointers encoding
		// reindexing First_fret field
		if frameDB.First_fretID.Int64 != 0 {
			frameDB.First_fretID.Int64 = int64(BackRepoFirst_fretid_atBckpTime_newID[uint(frameDB.First_fretID.Int64)])
			frameDB.First_fretID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoFrame.db.Model(frameDB).Updates(*frameDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFrame.ResetReversePointers commits all staged instances of Frame to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFrame *BackRepoFrameStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, frame := range backRepoFrame.Map_FrameDBID_FramePtr {
		backRepoFrame.ResetReversePointersInstance(backRepo, idx, frame)
	}

	return
}

func (backRepoFrame *BackRepoFrameStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, frame *models.Frame) (Error error) {

	// fetch matching frameDB
	if frameDB, ok := backRepoFrame.Map_FrameDBID_FrameDB[idx]; ok {
		_ = frameDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFrameid_atBckpTime_newID map[uint]uint
