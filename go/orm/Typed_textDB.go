// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Typed_text_sql sql.NullBool
var dummy_Typed_text_time time.Duration
var dummy_Typed_text_sort sort.Float64Slice

// Typed_textAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model typed_textAPI
type Typed_textAPI struct {
	gorm.Model

	models.Typed_text_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Typed_textPointersEncoding Typed_textPointersEncoding
}

// Typed_textPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Typed_textPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Typed_textDB describes a typed_text in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model typed_textDB
type Typed_textDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field typed_textDB.Name
	Name_Data sql.NullString

	// Declation for basic field typed_textDB.Value
	Value_Data sql.NullString

	// Declation for basic field typed_textDB.Type
	Type_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Typed_textPointersEncoding
}

// Typed_textDBs arrays typed_textDBs
// swagger:response typed_textDBsResponse
type Typed_textDBs []Typed_textDB

// Typed_textDBResponse provides response
// swagger:response typed_textDBResponse
type Typed_textDBResponse struct {
	Typed_textDB
}

// Typed_textWOP is a Typed_text without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Typed_textWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`

	Type string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Typed_text_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
	"Type",
}

type BackRepoTyped_textStruct struct {
	// stores Typed_textDB according to their gorm ID
	Map_Typed_textDBID_Typed_textDB map[uint]*Typed_textDB

	// stores Typed_textDB ID according to Typed_text address
	Map_Typed_textPtr_Typed_textDBID map[*models.Typed_text]uint

	// stores Typed_text according to their gorm ID
	Map_Typed_textDBID_Typed_textPtr map[uint]*models.Typed_text

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTyped_text *BackRepoTyped_textStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTyped_text.stage
	return
}

func (backRepoTyped_text *BackRepoTyped_textStruct) GetDB() *gorm.DB {
	return backRepoTyped_text.db
}

// GetTyped_textDBFromTyped_textPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTyped_text *BackRepoTyped_textStruct) GetTyped_textDBFromTyped_textPtr(typed_text *models.Typed_text) (typed_textDB *Typed_textDB) {
	id := backRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text]
	typed_textDB = backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[id]
	return
}

// BackRepoTyped_text.CommitPhaseOne commits all staged instances of Typed_text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTyped_text *BackRepoTyped_textStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for typed_text := range stage.Typed_texts {
		backRepoTyped_text.CommitPhaseOneInstance(typed_text)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, typed_text := range backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr {
		if _, ok := stage.Typed_texts[typed_text]; !ok {
			backRepoTyped_text.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTyped_text.CommitDeleteInstance commits deletion of Typed_text to the BackRepo
func (backRepoTyped_text *BackRepoTyped_textStruct) CommitDeleteInstance(id uint) (Error error) {

	typed_text := backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[id]

	// typed_text is not staged anymore, remove typed_textDB
	typed_textDB := backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[id]
	query := backRepoTyped_text.db.Unscoped().Delete(&typed_textDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTyped_text.Map_Typed_textPtr_Typed_textDBID, typed_text)
	delete(backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr, id)
	delete(backRepoTyped_text.Map_Typed_textDBID_Typed_textDB, id)

	return
}

// BackRepoTyped_text.CommitPhaseOneInstance commits typed_text staged instances of Typed_text to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTyped_text *BackRepoTyped_textStruct) CommitPhaseOneInstance(typed_text *models.Typed_text) (Error error) {

	// check if the typed_text is not commited yet
	if _, ok := backRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text]; ok {
		return
	}

	// initiate typed_text
	var typed_textDB Typed_textDB
	typed_textDB.CopyBasicFieldsFromTyped_text(typed_text)

	query := backRepoTyped_text.db.Create(&typed_textDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text] = typed_textDB.ID
	backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[typed_textDB.ID] = typed_text
	backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[typed_textDB.ID] = &typed_textDB

	return
}

// BackRepoTyped_text.CommitPhaseTwo commits all staged instances of Typed_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTyped_text *BackRepoTyped_textStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, typed_text := range backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr {
		backRepoTyped_text.CommitPhaseTwoInstance(backRepo, idx, typed_text)
	}

	return
}

// BackRepoTyped_text.CommitPhaseTwoInstance commits {{structname }} of models.Typed_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTyped_text *BackRepoTyped_textStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, typed_text *models.Typed_text) (Error error) {

	// fetch matching typed_textDB
	if typed_textDB, ok := backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[idx]; ok {

		typed_textDB.CopyBasicFieldsFromTyped_text(typed_text)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoTyped_text.db.Save(&typed_textDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Typed_text intance %s", typed_text.Name))
		return err
	}

	return
}

// BackRepoTyped_text.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTyped_text *BackRepoTyped_textStruct) CheckoutPhaseOne() (Error error) {

	typed_textDBArray := make([]Typed_textDB, 0)
	query := backRepoTyped_text.db.Find(&typed_textDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	typed_textInstancesToBeRemovedFromTheStage := make(map[*models.Typed_text]any)
	for key, value := range backRepoTyped_text.stage.Typed_texts {
		typed_textInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, typed_textDB := range typed_textDBArray {
		backRepoTyped_text.CheckoutPhaseOneInstance(&typed_textDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		typed_text, ok := backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[typed_textDB.ID]
		if ok {
			delete(typed_textInstancesToBeRemovedFromTheStage, typed_text)
		}
	}

	// remove from stage and back repo's 3 maps all typed_texts that are not in the checkout
	for typed_text := range typed_textInstancesToBeRemovedFromTheStage {
		typed_text.Unstage(backRepoTyped_text.GetStage())

		// remove instance from the back repo 3 maps
		typed_textID := backRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text]
		delete(backRepoTyped_text.Map_Typed_textPtr_Typed_textDBID, typed_text)
		delete(backRepoTyped_text.Map_Typed_textDBID_Typed_textDB, typed_textID)
		delete(backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr, typed_textID)
	}

	return
}

// CheckoutPhaseOneInstance takes a typed_textDB that has been found in the DB, updates the backRepo and stages the
// models version of the typed_textDB
func (backRepoTyped_text *BackRepoTyped_textStruct) CheckoutPhaseOneInstance(typed_textDB *Typed_textDB) (Error error) {

	typed_text, ok := backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[typed_textDB.ID]
	if !ok {
		typed_text = new(models.Typed_text)

		backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[typed_textDB.ID] = typed_text
		backRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text] = typed_textDB.ID

		// append model store with the new element
		typed_text.Name = typed_textDB.Name_Data.String
		typed_text.Stage(backRepoTyped_text.GetStage())
	}
	typed_textDB.CopyBasicFieldsToTyped_text(typed_text)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	typed_text.Stage(backRepoTyped_text.GetStage())

	// preserve pointer to typed_textDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Typed_textDBID_Typed_textDB)[typed_textDB hold variable pointers
	typed_textDB_Data := *typed_textDB
	preservedPtrToTyped_text := &typed_textDB_Data
	backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[typed_textDB.ID] = preservedPtrToTyped_text

	return
}

// BackRepoTyped_text.CheckoutPhaseTwo Checkouts all staged instances of Typed_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTyped_text *BackRepoTyped_textStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, typed_textDB := range backRepoTyped_text.Map_Typed_textDBID_Typed_textDB {
		backRepoTyped_text.CheckoutPhaseTwoInstance(backRepo, typed_textDB)
	}
	return
}

// BackRepoTyped_text.CheckoutPhaseTwoInstance Checkouts staged instances of Typed_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTyped_text *BackRepoTyped_textStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, typed_textDB *Typed_textDB) (Error error) {

	typed_text := backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[typed_textDB.ID]

	typed_textDB.DecodePointers(backRepo, typed_text)

	return
}

func (typed_textDB *Typed_textDB) DecodePointers(backRepo *BackRepoStruct, typed_text *models.Typed_text) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitTyped_text allows commit of a single typed_text (if already staged)
func (backRepo *BackRepoStruct) CommitTyped_text(typed_text *models.Typed_text) {
	backRepo.BackRepoTyped_text.CommitPhaseOneInstance(typed_text)
	if id, ok := backRepo.BackRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text]; ok {
		backRepo.BackRepoTyped_text.CommitPhaseTwoInstance(backRepo, id, typed_text)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTyped_text allows checkout of a single typed_text (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTyped_text(typed_text *models.Typed_text) {
	// check if the typed_text is staged
	if _, ok := backRepo.BackRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text]; ok {

		if id, ok := backRepo.BackRepoTyped_text.Map_Typed_textPtr_Typed_textDBID[typed_text]; ok {
			var typed_textDB Typed_textDB
			typed_textDB.ID = id

			if err := backRepo.BackRepoTyped_text.db.First(&typed_textDB, id).Error; err != nil {
				log.Fatalln("CheckoutTyped_text : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTyped_text.CheckoutPhaseOneInstance(&typed_textDB)
			backRepo.BackRepoTyped_text.CheckoutPhaseTwoInstance(backRepo, &typed_textDB)
		}
	}
}

// CopyBasicFieldsFromTyped_text
func (typed_textDB *Typed_textDB) CopyBasicFieldsFromTyped_text(typed_text *models.Typed_text) {
	// insertion point for fields commit

	typed_textDB.Name_Data.String = typed_text.Name
	typed_textDB.Name_Data.Valid = true

	typed_textDB.Value_Data.String = typed_text.Value
	typed_textDB.Value_Data.Valid = true

	typed_textDB.Type_Data.String = typed_text.Type
	typed_textDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromTyped_text_WOP
func (typed_textDB *Typed_textDB) CopyBasicFieldsFromTyped_text_WOP(typed_text *models.Typed_text_WOP) {
	// insertion point for fields commit

	typed_textDB.Name_Data.String = typed_text.Name
	typed_textDB.Name_Data.Valid = true

	typed_textDB.Value_Data.String = typed_text.Value
	typed_textDB.Value_Data.Valid = true

	typed_textDB.Type_Data.String = typed_text.Type
	typed_textDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromTyped_textWOP
func (typed_textDB *Typed_textDB) CopyBasicFieldsFromTyped_textWOP(typed_text *Typed_textWOP) {
	// insertion point for fields commit

	typed_textDB.Name_Data.String = typed_text.Name
	typed_textDB.Name_Data.Valid = true

	typed_textDB.Value_Data.String = typed_text.Value
	typed_textDB.Value_Data.Valid = true

	typed_textDB.Type_Data.String = typed_text.Type
	typed_textDB.Type_Data.Valid = true
}

// CopyBasicFieldsToTyped_text
func (typed_textDB *Typed_textDB) CopyBasicFieldsToTyped_text(typed_text *models.Typed_text) {
	// insertion point for checkout of basic fields (back repo to stage)
	typed_text.Name = typed_textDB.Name_Data.String
	typed_text.Value = typed_textDB.Value_Data.String
	typed_text.Type = typed_textDB.Type_Data.String
}

// CopyBasicFieldsToTyped_text_WOP
func (typed_textDB *Typed_textDB) CopyBasicFieldsToTyped_text_WOP(typed_text *models.Typed_text_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	typed_text.Name = typed_textDB.Name_Data.String
	typed_text.Value = typed_textDB.Value_Data.String
	typed_text.Type = typed_textDB.Type_Data.String
}

// CopyBasicFieldsToTyped_textWOP
func (typed_textDB *Typed_textDB) CopyBasicFieldsToTyped_textWOP(typed_text *Typed_textWOP) {
	typed_text.ID = int(typed_textDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	typed_text.Name = typed_textDB.Name_Data.String
	typed_text.Value = typed_textDB.Value_Data.String
	typed_text.Type = typed_textDB.Type_Data.String
}

// Backup generates a json file from a slice of all Typed_textDB instances in the backrepo
func (backRepoTyped_text *BackRepoTyped_textStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Typed_textDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Typed_textDB, 0)
	for _, typed_textDB := range backRepoTyped_text.Map_Typed_textDBID_Typed_textDB {
		forBackup = append(forBackup, typed_textDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Typed_text ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Typed_text file", err.Error())
	}
}

// Backup generates a json file from a slice of all Typed_textDB instances in the backrepo
func (backRepoTyped_text *BackRepoTyped_textStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Typed_textDB, 0)
	for _, typed_textDB := range backRepoTyped_text.Map_Typed_textDBID_Typed_textDB {
		forBackup = append(forBackup, typed_textDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Typed_text")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Typed_text_Fields, -1)
	for _, typed_textDB := range forBackup {

		var typed_textWOP Typed_textWOP
		typed_textDB.CopyBasicFieldsToTyped_textWOP(&typed_textWOP)

		row := sh.AddRow()
		row.WriteStruct(&typed_textWOP, -1)
	}
}

// RestoreXL from the "Typed_text" sheet all Typed_textDB instances
func (backRepoTyped_text *BackRepoTyped_textStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTyped_textid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Typed_text"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTyped_text.rowVisitorTyped_text)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTyped_text *BackRepoTyped_textStruct) rowVisitorTyped_text(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var typed_textWOP Typed_textWOP
		row.ReadStruct(&typed_textWOP)

		// add the unmarshalled struct to the stage
		typed_textDB := new(Typed_textDB)
		typed_textDB.CopyBasicFieldsFromTyped_textWOP(&typed_textWOP)

		typed_textDB_ID_atBackupTime := typed_textDB.ID
		typed_textDB.ID = 0
		query := backRepoTyped_text.db.Create(typed_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[typed_textDB.ID] = typed_textDB
		BackRepoTyped_textid_atBckpTime_newID[typed_textDB_ID_atBackupTime] = typed_textDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Typed_textDB.json" in dirPath that stores an array
// of Typed_textDB and stores it in the database
// the map BackRepoTyped_textid_atBckpTime_newID is updated accordingly
func (backRepoTyped_text *BackRepoTyped_textStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTyped_textid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Typed_textDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Typed_text file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Typed_textDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Typed_textDBID_Typed_textDB
	for _, typed_textDB := range forRestore {

		typed_textDB_ID_atBackupTime := typed_textDB.ID
		typed_textDB.ID = 0
		query := backRepoTyped_text.db.Create(typed_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[typed_textDB.ID] = typed_textDB
		BackRepoTyped_textid_atBckpTime_newID[typed_textDB_ID_atBackupTime] = typed_textDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Typed_text file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Typed_text>id_atBckpTime_newID
// to compute new index
func (backRepoTyped_text *BackRepoTyped_textStruct) RestorePhaseTwo() {

	for _, typed_textDB := range backRepoTyped_text.Map_Typed_textDBID_Typed_textDB {

		// next line of code is to avert unused variable compilation error
		_ = typed_textDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTyped_text.db.Model(typed_textDB).Updates(*typed_textDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTyped_text.ResetReversePointers commits all staged instances of Typed_text to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTyped_text *BackRepoTyped_textStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, typed_text := range backRepoTyped_text.Map_Typed_textDBID_Typed_textPtr {
		backRepoTyped_text.ResetReversePointersInstance(backRepo, idx, typed_text)
	}

	return
}

func (backRepoTyped_text *BackRepoTyped_textStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, typed_text *models.Typed_text) (Error error) {

	// fetch matching typed_textDB
	if typed_textDB, ok := backRepoTyped_text.Map_Typed_textDBID_Typed_textDB[idx]; ok {
		_ = typed_textDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTyped_textid_atBckpTime_newID map[uint]uint
