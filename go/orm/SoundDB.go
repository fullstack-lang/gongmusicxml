// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Sound_sql sql.NullBool
var dummy_Sound_time time.Duration
var dummy_Sound_sort sort.Float64Slice

// SoundAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model soundAPI
type SoundAPI struct {
	gorm.Model

	models.Sound_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SoundPointersEncoding SoundPointersEncoding
}

// SoundPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SoundPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Swing is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SwingID sql.NullInt64

	// field Offset is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	OffsetID sql.NullInt64
}

// SoundDB describes a sound in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model soundDB
type SoundDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field soundDB.Name
	Name_Data sql.NullString

	// Declation for basic field soundDB.Segno
	Segno_Data sql.NullString

	// Declation for basic field soundDB.Dalsegno
	Dalsegno_Data sql.NullString

	// Declation for basic field soundDB.Coda
	Coda_Data sql.NullString

	// Declation for basic field soundDB.Tocoda
	Tocoda_Data sql.NullString

	// Declation for basic field soundDB.Fine
	Fine_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SoundPointersEncoding
}

// SoundDBs arrays soundDBs
// swagger:response soundDBsResponse
type SoundDBs []SoundDB

// SoundDBResponse provides response
// swagger:response soundDBResponse
type SoundDBResponse struct {
	SoundDB
}

// SoundWOP is a Sound without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SoundWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Segno string `xlsx:"2"`

	Dalsegno string `xlsx:"3"`

	Coda string `xlsx:"4"`

	Tocoda string `xlsx:"5"`

	Fine string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var Sound_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Segno",
	"Dalsegno",
	"Coda",
	"Tocoda",
	"Fine",
}

type BackRepoSoundStruct struct {
	// stores SoundDB according to their gorm ID
	Map_SoundDBID_SoundDB map[uint]*SoundDB

	// stores SoundDB ID according to Sound address
	Map_SoundPtr_SoundDBID map[*models.Sound]uint

	// stores Sound according to their gorm ID
	Map_SoundDBID_SoundPtr map[uint]*models.Sound

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSound *BackRepoSoundStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSound.stage
	return
}

func (backRepoSound *BackRepoSoundStruct) GetDB() *gorm.DB {
	return backRepoSound.db
}

// GetSoundDBFromSoundPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSound *BackRepoSoundStruct) GetSoundDBFromSoundPtr(sound *models.Sound) (soundDB *SoundDB) {
	id := backRepoSound.Map_SoundPtr_SoundDBID[sound]
	soundDB = backRepoSound.Map_SoundDBID_SoundDB[id]
	return
}

// BackRepoSound.CommitPhaseOne commits all staged instances of Sound to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSound *BackRepoSoundStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for sound := range stage.Sounds {
		backRepoSound.CommitPhaseOneInstance(sound)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, sound := range backRepoSound.Map_SoundDBID_SoundPtr {
		if _, ok := stage.Sounds[sound]; !ok {
			backRepoSound.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSound.CommitDeleteInstance commits deletion of Sound to the BackRepo
func (backRepoSound *BackRepoSoundStruct) CommitDeleteInstance(id uint) (Error error) {

	sound := backRepoSound.Map_SoundDBID_SoundPtr[id]

	// sound is not staged anymore, remove soundDB
	soundDB := backRepoSound.Map_SoundDBID_SoundDB[id]
	query := backRepoSound.db.Unscoped().Delete(&soundDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSound.Map_SoundPtr_SoundDBID, sound)
	delete(backRepoSound.Map_SoundDBID_SoundPtr, id)
	delete(backRepoSound.Map_SoundDBID_SoundDB, id)

	return
}

// BackRepoSound.CommitPhaseOneInstance commits sound staged instances of Sound to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSound *BackRepoSoundStruct) CommitPhaseOneInstance(sound *models.Sound) (Error error) {

	// check if the sound is not commited yet
	if _, ok := backRepoSound.Map_SoundPtr_SoundDBID[sound]; ok {
		return
	}

	// initiate sound
	var soundDB SoundDB
	soundDB.CopyBasicFieldsFromSound(sound)

	query := backRepoSound.db.Create(&soundDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSound.Map_SoundPtr_SoundDBID[sound] = soundDB.ID
	backRepoSound.Map_SoundDBID_SoundPtr[soundDB.ID] = sound
	backRepoSound.Map_SoundDBID_SoundDB[soundDB.ID] = &soundDB

	return
}

// BackRepoSound.CommitPhaseTwo commits all staged instances of Sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSound *BackRepoSoundStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, sound := range backRepoSound.Map_SoundDBID_SoundPtr {
		backRepoSound.CommitPhaseTwoInstance(backRepo, idx, sound)
	}

	return
}

// BackRepoSound.CommitPhaseTwoInstance commits {{structname }} of models.Sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSound *BackRepoSoundStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, sound *models.Sound) (Error error) {

	// fetch matching soundDB
	if soundDB, ok := backRepoSound.Map_SoundDBID_SoundDB[idx]; ok {

		soundDB.CopyBasicFieldsFromSound(sound)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value sound.Swing translates to updating the sound.SwingID
		soundDB.SwingID.Valid = true // allow for a 0 value (nil association)
		if sound.Swing != nil {
			if SwingId, ok := backRepo.BackRepoSwing.Map_SwingPtr_SwingDBID[sound.Swing]; ok {
				soundDB.SwingID.Int64 = int64(SwingId)
				soundDB.SwingID.Valid = true
			}
		} else {
			soundDB.SwingID.Int64 = 0
			soundDB.SwingID.Valid = true
		}

		// commit pointer value sound.Offset translates to updating the sound.OffsetID
		soundDB.OffsetID.Valid = true // allow for a 0 value (nil association)
		if sound.Offset != nil {
			if OffsetId, ok := backRepo.BackRepoOffset.Map_OffsetPtr_OffsetDBID[sound.Offset]; ok {
				soundDB.OffsetID.Int64 = int64(OffsetId)
				soundDB.OffsetID.Valid = true
			}
		} else {
			soundDB.OffsetID.Int64 = 0
			soundDB.OffsetID.Valid = true
		}

		query := backRepoSound.db.Save(&soundDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Sound intance %s", sound.Name))
		return err
	}

	return
}

// BackRepoSound.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSound *BackRepoSoundStruct) CheckoutPhaseOne() (Error error) {

	soundDBArray := make([]SoundDB, 0)
	query := backRepoSound.db.Find(&soundDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	soundInstancesToBeRemovedFromTheStage := make(map[*models.Sound]any)
	for key, value := range backRepoSound.stage.Sounds {
		soundInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, soundDB := range soundDBArray {
		backRepoSound.CheckoutPhaseOneInstance(&soundDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		sound, ok := backRepoSound.Map_SoundDBID_SoundPtr[soundDB.ID]
		if ok {
			delete(soundInstancesToBeRemovedFromTheStage, sound)
		}
	}

	// remove from stage and back repo's 3 maps all sounds that are not in the checkout
	for sound := range soundInstancesToBeRemovedFromTheStage {
		sound.Unstage(backRepoSound.GetStage())

		// remove instance from the back repo 3 maps
		soundID := backRepoSound.Map_SoundPtr_SoundDBID[sound]
		delete(backRepoSound.Map_SoundPtr_SoundDBID, sound)
		delete(backRepoSound.Map_SoundDBID_SoundDB, soundID)
		delete(backRepoSound.Map_SoundDBID_SoundPtr, soundID)
	}

	return
}

// CheckoutPhaseOneInstance takes a soundDB that has been found in the DB, updates the backRepo and stages the
// models version of the soundDB
func (backRepoSound *BackRepoSoundStruct) CheckoutPhaseOneInstance(soundDB *SoundDB) (Error error) {

	sound, ok := backRepoSound.Map_SoundDBID_SoundPtr[soundDB.ID]
	if !ok {
		sound = new(models.Sound)

		backRepoSound.Map_SoundDBID_SoundPtr[soundDB.ID] = sound
		backRepoSound.Map_SoundPtr_SoundDBID[sound] = soundDB.ID

		// append model store with the new element
		sound.Name = soundDB.Name_Data.String
		sound.Stage(backRepoSound.GetStage())
	}
	soundDB.CopyBasicFieldsToSound(sound)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	sound.Stage(backRepoSound.GetStage())

	// preserve pointer to soundDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SoundDBID_SoundDB)[soundDB hold variable pointers
	soundDB_Data := *soundDB
	preservedPtrToSound := &soundDB_Data
	backRepoSound.Map_SoundDBID_SoundDB[soundDB.ID] = preservedPtrToSound

	return
}

// BackRepoSound.CheckoutPhaseTwo Checkouts all staged instances of Sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSound *BackRepoSoundStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, soundDB := range backRepoSound.Map_SoundDBID_SoundDB {
		backRepoSound.CheckoutPhaseTwoInstance(backRepo, soundDB)
	}
	return
}

// BackRepoSound.CheckoutPhaseTwoInstance Checkouts staged instances of Sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSound *BackRepoSoundStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, soundDB *SoundDB) (Error error) {

	sound := backRepoSound.Map_SoundDBID_SoundPtr[soundDB.ID]

	soundDB.DecodePointers(backRepo, sound)

	return
}

func (soundDB *SoundDB) DecodePointers(backRepo *BackRepoStruct, sound *models.Sound) {

	// insertion point for checkout of pointer encoding
	// Swing field
	sound.Swing = nil
	if soundDB.SwingID.Int64 != 0 {
		sound.Swing = backRepo.BackRepoSwing.Map_SwingDBID_SwingPtr[uint(soundDB.SwingID.Int64)]
	}
	// Offset field
	sound.Offset = nil
	if soundDB.OffsetID.Int64 != 0 {
		sound.Offset = backRepo.BackRepoOffset.Map_OffsetDBID_OffsetPtr[uint(soundDB.OffsetID.Int64)]
	}
	return
}

// CommitSound allows commit of a single sound (if already staged)
func (backRepo *BackRepoStruct) CommitSound(sound *models.Sound) {
	backRepo.BackRepoSound.CommitPhaseOneInstance(sound)
	if id, ok := backRepo.BackRepoSound.Map_SoundPtr_SoundDBID[sound]; ok {
		backRepo.BackRepoSound.CommitPhaseTwoInstance(backRepo, id, sound)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSound allows checkout of a single sound (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSound(sound *models.Sound) {
	// check if the sound is staged
	if _, ok := backRepo.BackRepoSound.Map_SoundPtr_SoundDBID[sound]; ok {

		if id, ok := backRepo.BackRepoSound.Map_SoundPtr_SoundDBID[sound]; ok {
			var soundDB SoundDB
			soundDB.ID = id

			if err := backRepo.BackRepoSound.db.First(&soundDB, id).Error; err != nil {
				log.Fatalln("CheckoutSound : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSound.CheckoutPhaseOneInstance(&soundDB)
			backRepo.BackRepoSound.CheckoutPhaseTwoInstance(backRepo, &soundDB)
		}
	}
}

// CopyBasicFieldsFromSound
func (soundDB *SoundDB) CopyBasicFieldsFromSound(sound *models.Sound) {
	// insertion point for fields commit

	soundDB.Name_Data.String = sound.Name
	soundDB.Name_Data.Valid = true

	soundDB.Segno_Data.String = sound.Segno
	soundDB.Segno_Data.Valid = true

	soundDB.Dalsegno_Data.String = sound.Dalsegno
	soundDB.Dalsegno_Data.Valid = true

	soundDB.Coda_Data.String = sound.Coda
	soundDB.Coda_Data.Valid = true

	soundDB.Tocoda_Data.String = sound.Tocoda
	soundDB.Tocoda_Data.Valid = true

	soundDB.Fine_Data.String = sound.Fine
	soundDB.Fine_Data.Valid = true
}

// CopyBasicFieldsFromSound_WOP
func (soundDB *SoundDB) CopyBasicFieldsFromSound_WOP(sound *models.Sound_WOP) {
	// insertion point for fields commit

	soundDB.Name_Data.String = sound.Name
	soundDB.Name_Data.Valid = true

	soundDB.Segno_Data.String = sound.Segno
	soundDB.Segno_Data.Valid = true

	soundDB.Dalsegno_Data.String = sound.Dalsegno
	soundDB.Dalsegno_Data.Valid = true

	soundDB.Coda_Data.String = sound.Coda
	soundDB.Coda_Data.Valid = true

	soundDB.Tocoda_Data.String = sound.Tocoda
	soundDB.Tocoda_Data.Valid = true

	soundDB.Fine_Data.String = sound.Fine
	soundDB.Fine_Data.Valid = true
}

// CopyBasicFieldsFromSoundWOP
func (soundDB *SoundDB) CopyBasicFieldsFromSoundWOP(sound *SoundWOP) {
	// insertion point for fields commit

	soundDB.Name_Data.String = sound.Name
	soundDB.Name_Data.Valid = true

	soundDB.Segno_Data.String = sound.Segno
	soundDB.Segno_Data.Valid = true

	soundDB.Dalsegno_Data.String = sound.Dalsegno
	soundDB.Dalsegno_Data.Valid = true

	soundDB.Coda_Data.String = sound.Coda
	soundDB.Coda_Data.Valid = true

	soundDB.Tocoda_Data.String = sound.Tocoda
	soundDB.Tocoda_Data.Valid = true

	soundDB.Fine_Data.String = sound.Fine
	soundDB.Fine_Data.Valid = true
}

// CopyBasicFieldsToSound
func (soundDB *SoundDB) CopyBasicFieldsToSound(sound *models.Sound) {
	// insertion point for checkout of basic fields (back repo to stage)
	sound.Name = soundDB.Name_Data.String
	sound.Segno = soundDB.Segno_Data.String
	sound.Dalsegno = soundDB.Dalsegno_Data.String
	sound.Coda = soundDB.Coda_Data.String
	sound.Tocoda = soundDB.Tocoda_Data.String
	sound.Fine = soundDB.Fine_Data.String
}

// CopyBasicFieldsToSound_WOP
func (soundDB *SoundDB) CopyBasicFieldsToSound_WOP(sound *models.Sound_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	sound.Name = soundDB.Name_Data.String
	sound.Segno = soundDB.Segno_Data.String
	sound.Dalsegno = soundDB.Dalsegno_Data.String
	sound.Coda = soundDB.Coda_Data.String
	sound.Tocoda = soundDB.Tocoda_Data.String
	sound.Fine = soundDB.Fine_Data.String
}

// CopyBasicFieldsToSoundWOP
func (soundDB *SoundDB) CopyBasicFieldsToSoundWOP(sound *SoundWOP) {
	sound.ID = int(soundDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	sound.Name = soundDB.Name_Data.String
	sound.Segno = soundDB.Segno_Data.String
	sound.Dalsegno = soundDB.Dalsegno_Data.String
	sound.Coda = soundDB.Coda_Data.String
	sound.Tocoda = soundDB.Tocoda_Data.String
	sound.Fine = soundDB.Fine_Data.String
}

// Backup generates a json file from a slice of all SoundDB instances in the backrepo
func (backRepoSound *BackRepoSoundStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SoundDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SoundDB, 0)
	for _, soundDB := range backRepoSound.Map_SoundDBID_SoundDB {
		forBackup = append(forBackup, soundDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Sound ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Sound file", err.Error())
	}
}

// Backup generates a json file from a slice of all SoundDB instances in the backrepo
func (backRepoSound *BackRepoSoundStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SoundDB, 0)
	for _, soundDB := range backRepoSound.Map_SoundDBID_SoundDB {
		forBackup = append(forBackup, soundDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Sound")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Sound_Fields, -1)
	for _, soundDB := range forBackup {

		var soundWOP SoundWOP
		soundDB.CopyBasicFieldsToSoundWOP(&soundWOP)

		row := sh.AddRow()
		row.WriteStruct(&soundWOP, -1)
	}
}

// RestoreXL from the "Sound" sheet all SoundDB instances
func (backRepoSound *BackRepoSoundStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSoundid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Sound"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSound.rowVisitorSound)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSound *BackRepoSoundStruct) rowVisitorSound(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var soundWOP SoundWOP
		row.ReadStruct(&soundWOP)

		// add the unmarshalled struct to the stage
		soundDB := new(SoundDB)
		soundDB.CopyBasicFieldsFromSoundWOP(&soundWOP)

		soundDB_ID_atBackupTime := soundDB.ID
		soundDB.ID = 0
		query := backRepoSound.db.Create(soundDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSound.Map_SoundDBID_SoundDB[soundDB.ID] = soundDB
		BackRepoSoundid_atBckpTime_newID[soundDB_ID_atBackupTime] = soundDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SoundDB.json" in dirPath that stores an array
// of SoundDB and stores it in the database
// the map BackRepoSoundid_atBckpTime_newID is updated accordingly
func (backRepoSound *BackRepoSoundStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSoundid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SoundDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Sound file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SoundDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SoundDBID_SoundDB
	for _, soundDB := range forRestore {

		soundDB_ID_atBackupTime := soundDB.ID
		soundDB.ID = 0
		query := backRepoSound.db.Create(soundDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSound.Map_SoundDBID_SoundDB[soundDB.ID] = soundDB
		BackRepoSoundid_atBckpTime_newID[soundDB_ID_atBackupTime] = soundDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Sound file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Sound>id_atBckpTime_newID
// to compute new index
func (backRepoSound *BackRepoSoundStruct) RestorePhaseTwo() {

	for _, soundDB := range backRepoSound.Map_SoundDBID_SoundDB {

		// next line of code is to avert unused variable compilation error
		_ = soundDB

		// insertion point for reindexing pointers encoding
		// reindexing Swing field
		if soundDB.SwingID.Int64 != 0 {
			soundDB.SwingID.Int64 = int64(BackRepoSwingid_atBckpTime_newID[uint(soundDB.SwingID.Int64)])
			soundDB.SwingID.Valid = true
		}

		// reindexing Offset field
		if soundDB.OffsetID.Int64 != 0 {
			soundDB.OffsetID.Int64 = int64(BackRepoOffsetid_atBckpTime_newID[uint(soundDB.OffsetID.Int64)])
			soundDB.OffsetID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSound.db.Model(soundDB).Updates(*soundDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSound.ResetReversePointers commits all staged instances of Sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSound *BackRepoSoundStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, sound := range backRepoSound.Map_SoundDBID_SoundPtr {
		backRepoSound.ResetReversePointersInstance(backRepo, idx, sound)
	}

	return
}

func (backRepoSound *BackRepoSoundStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, sound *models.Sound) (Error error) {

	// fetch matching soundDB
	if soundDB, ok := backRepoSound.Map_SoundDBID_SoundDB[idx]; ok {
		_ = soundDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSoundid_atBckpTime_newID map[uint]uint
