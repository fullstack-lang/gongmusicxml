// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Fret_sql sql.NullBool
var dummy_Fret_time time.Duration
var dummy_Fret_sort sort.Float64Slice

// FretAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fretAPI
type FretAPI struct {
	gorm.Model

	models.Fret_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	FretPointersEncoding FretPointersEncoding
}

// FretPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FretPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// FretDB describes a fret in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fretDB
type FretDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fretDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	FretPointersEncoding
}

// FretDBs arrays fretDBs
// swagger:response fretDBsResponse
type FretDBs []FretDB

// FretDBResponse provides response
// swagger:response fretDBResponse
type FretDBResponse struct {
	FretDB
}

// FretWOP is a Fret without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FretWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Fret_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFretStruct struct {
	// stores FretDB according to their gorm ID
	Map_FretDBID_FretDB map[uint]*FretDB

	// stores FretDB ID according to Fret address
	Map_FretPtr_FretDBID map[*models.Fret]uint

	// stores Fret according to their gorm ID
	Map_FretDBID_FretPtr map[uint]*models.Fret

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFret *BackRepoFretStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFret.stage
	return
}

func (backRepoFret *BackRepoFretStruct) GetDB() *gorm.DB {
	return backRepoFret.db
}

// GetFretDBFromFretPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFret *BackRepoFretStruct) GetFretDBFromFretPtr(fret *models.Fret) (fretDB *FretDB) {
	id := backRepoFret.Map_FretPtr_FretDBID[fret]
	fretDB = backRepoFret.Map_FretDBID_FretDB[id]
	return
}

// BackRepoFret.CommitPhaseOne commits all staged instances of Fret to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFret *BackRepoFretStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for fret := range stage.Frets {
		backRepoFret.CommitPhaseOneInstance(fret)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, fret := range backRepoFret.Map_FretDBID_FretPtr {
		if _, ok := stage.Frets[fret]; !ok {
			backRepoFret.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFret.CommitDeleteInstance commits deletion of Fret to the BackRepo
func (backRepoFret *BackRepoFretStruct) CommitDeleteInstance(id uint) (Error error) {

	fret := backRepoFret.Map_FretDBID_FretPtr[id]

	// fret is not staged anymore, remove fretDB
	fretDB := backRepoFret.Map_FretDBID_FretDB[id]
	query := backRepoFret.db.Unscoped().Delete(&fretDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoFret.Map_FretPtr_FretDBID, fret)
	delete(backRepoFret.Map_FretDBID_FretPtr, id)
	delete(backRepoFret.Map_FretDBID_FretDB, id)

	return
}

// BackRepoFret.CommitPhaseOneInstance commits fret staged instances of Fret to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFret *BackRepoFretStruct) CommitPhaseOneInstance(fret *models.Fret) (Error error) {

	// check if the fret is not commited yet
	if _, ok := backRepoFret.Map_FretPtr_FretDBID[fret]; ok {
		return
	}

	// initiate fret
	var fretDB FretDB
	fretDB.CopyBasicFieldsFromFret(fret)

	query := backRepoFret.db.Create(&fretDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoFret.Map_FretPtr_FretDBID[fret] = fretDB.ID
	backRepoFret.Map_FretDBID_FretPtr[fretDB.ID] = fret
	backRepoFret.Map_FretDBID_FretDB[fretDB.ID] = &fretDB

	return
}

// BackRepoFret.CommitPhaseTwo commits all staged instances of Fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFret *BackRepoFretStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, fret := range backRepoFret.Map_FretDBID_FretPtr {
		backRepoFret.CommitPhaseTwoInstance(backRepo, idx, fret)
	}

	return
}

// BackRepoFret.CommitPhaseTwoInstance commits {{structname }} of models.Fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFret *BackRepoFretStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, fret *models.Fret) (Error error) {

	// fetch matching fretDB
	if fretDB, ok := backRepoFret.Map_FretDBID_FretDB[idx]; ok {

		fretDB.CopyBasicFieldsFromFret(fret)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFret.db.Save(&fretDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Fret intance %s", fret.Name))
		return err
	}

	return
}

// BackRepoFret.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFret *BackRepoFretStruct) CheckoutPhaseOne() (Error error) {

	fretDBArray := make([]FretDB, 0)
	query := backRepoFret.db.Find(&fretDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fretInstancesToBeRemovedFromTheStage := make(map[*models.Fret]any)
	for key, value := range backRepoFret.stage.Frets {
		fretInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fretDB := range fretDBArray {
		backRepoFret.CheckoutPhaseOneInstance(&fretDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		fret, ok := backRepoFret.Map_FretDBID_FretPtr[fretDB.ID]
		if ok {
			delete(fretInstancesToBeRemovedFromTheStage, fret)
		}
	}

	// remove from stage and back repo's 3 maps all frets that are not in the checkout
	for fret := range fretInstancesToBeRemovedFromTheStage {
		fret.Unstage(backRepoFret.GetStage())

		// remove instance from the back repo 3 maps
		fretID := backRepoFret.Map_FretPtr_FretDBID[fret]
		delete(backRepoFret.Map_FretPtr_FretDBID, fret)
		delete(backRepoFret.Map_FretDBID_FretDB, fretID)
		delete(backRepoFret.Map_FretDBID_FretPtr, fretID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fretDB that has been found in the DB, updates the backRepo and stages the
// models version of the fretDB
func (backRepoFret *BackRepoFretStruct) CheckoutPhaseOneInstance(fretDB *FretDB) (Error error) {

	fret, ok := backRepoFret.Map_FretDBID_FretPtr[fretDB.ID]
	if !ok {
		fret = new(models.Fret)

		backRepoFret.Map_FretDBID_FretPtr[fretDB.ID] = fret
		backRepoFret.Map_FretPtr_FretDBID[fret] = fretDB.ID

		// append model store with the new element
		fret.Name = fretDB.Name_Data.String
		fret.Stage(backRepoFret.GetStage())
	}
	fretDB.CopyBasicFieldsToFret(fret)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	fret.Stage(backRepoFret.GetStage())

	// preserve pointer to fretDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FretDBID_FretDB)[fretDB hold variable pointers
	fretDB_Data := *fretDB
	preservedPtrToFret := &fretDB_Data
	backRepoFret.Map_FretDBID_FretDB[fretDB.ID] = preservedPtrToFret

	return
}

// BackRepoFret.CheckoutPhaseTwo Checkouts all staged instances of Fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFret *BackRepoFretStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fretDB := range backRepoFret.Map_FretDBID_FretDB {
		backRepoFret.CheckoutPhaseTwoInstance(backRepo, fretDB)
	}
	return
}

// BackRepoFret.CheckoutPhaseTwoInstance Checkouts staged instances of Fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFret *BackRepoFretStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fretDB *FretDB) (Error error) {

	fret := backRepoFret.Map_FretDBID_FretPtr[fretDB.ID]

	fretDB.DecodePointers(backRepo, fret)

	return
}

func (fretDB *FretDB) DecodePointers(backRepo *BackRepoStruct, fret *models.Fret) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitFret allows commit of a single fret (if already staged)
func (backRepo *BackRepoStruct) CommitFret(fret *models.Fret) {
	backRepo.BackRepoFret.CommitPhaseOneInstance(fret)
	if id, ok := backRepo.BackRepoFret.Map_FretPtr_FretDBID[fret]; ok {
		backRepo.BackRepoFret.CommitPhaseTwoInstance(backRepo, id, fret)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFret allows checkout of a single fret (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFret(fret *models.Fret) {
	// check if the fret is staged
	if _, ok := backRepo.BackRepoFret.Map_FretPtr_FretDBID[fret]; ok {

		if id, ok := backRepo.BackRepoFret.Map_FretPtr_FretDBID[fret]; ok {
			var fretDB FretDB
			fretDB.ID = id

			if err := backRepo.BackRepoFret.db.First(&fretDB, id).Error; err != nil {
				log.Fatalln("CheckoutFret : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFret.CheckoutPhaseOneInstance(&fretDB)
			backRepo.BackRepoFret.CheckoutPhaseTwoInstance(backRepo, &fretDB)
		}
	}
}

// CopyBasicFieldsFromFret
func (fretDB *FretDB) CopyBasicFieldsFromFret(fret *models.Fret) {
	// insertion point for fields commit

	fretDB.Name_Data.String = fret.Name
	fretDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFret_WOP
func (fretDB *FretDB) CopyBasicFieldsFromFret_WOP(fret *models.Fret_WOP) {
	// insertion point for fields commit

	fretDB.Name_Data.String = fret.Name
	fretDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFretWOP
func (fretDB *FretDB) CopyBasicFieldsFromFretWOP(fret *FretWOP) {
	// insertion point for fields commit

	fretDB.Name_Data.String = fret.Name
	fretDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFret
func (fretDB *FretDB) CopyBasicFieldsToFret(fret *models.Fret) {
	// insertion point for checkout of basic fields (back repo to stage)
	fret.Name = fretDB.Name_Data.String
}

// CopyBasicFieldsToFret_WOP
func (fretDB *FretDB) CopyBasicFieldsToFret_WOP(fret *models.Fret_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	fret.Name = fretDB.Name_Data.String
}

// CopyBasicFieldsToFretWOP
func (fretDB *FretDB) CopyBasicFieldsToFretWOP(fret *FretWOP) {
	fret.ID = int(fretDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	fret.Name = fretDB.Name_Data.String
}

// Backup generates a json file from a slice of all FretDB instances in the backrepo
func (backRepoFret *BackRepoFretStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FretDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FretDB, 0)
	for _, fretDB := range backRepoFret.Map_FretDBID_FretDB {
		forBackup = append(forBackup, fretDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Fret ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Fret file", err.Error())
	}
}

// Backup generates a json file from a slice of all FretDB instances in the backrepo
func (backRepoFret *BackRepoFretStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FretDB, 0)
	for _, fretDB := range backRepoFret.Map_FretDBID_FretDB {
		forBackup = append(forBackup, fretDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Fret")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Fret_Fields, -1)
	for _, fretDB := range forBackup {

		var fretWOP FretWOP
		fretDB.CopyBasicFieldsToFretWOP(&fretWOP)

		row := sh.AddRow()
		row.WriteStruct(&fretWOP, -1)
	}
}

// RestoreXL from the "Fret" sheet all FretDB instances
func (backRepoFret *BackRepoFretStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFretid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Fret"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFret.rowVisitorFret)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoFret *BackRepoFretStruct) rowVisitorFret(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fretWOP FretWOP
		row.ReadStruct(&fretWOP)

		// add the unmarshalled struct to the stage
		fretDB := new(FretDB)
		fretDB.CopyBasicFieldsFromFretWOP(&fretWOP)

		fretDB_ID_atBackupTime := fretDB.ID
		fretDB.ID = 0
		query := backRepoFret.db.Create(fretDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFret.Map_FretDBID_FretDB[fretDB.ID] = fretDB
		BackRepoFretid_atBckpTime_newID[fretDB_ID_atBackupTime] = fretDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FretDB.json" in dirPath that stores an array
// of FretDB and stores it in the database
// the map BackRepoFretid_atBckpTime_newID is updated accordingly
func (backRepoFret *BackRepoFretStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFretid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FretDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Fret file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FretDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FretDBID_FretDB
	for _, fretDB := range forRestore {

		fretDB_ID_atBackupTime := fretDB.ID
		fretDB.ID = 0
		query := backRepoFret.db.Create(fretDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoFret.Map_FretDBID_FretDB[fretDB.ID] = fretDB
		BackRepoFretid_atBckpTime_newID[fretDB_ID_atBackupTime] = fretDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Fret file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Fret>id_atBckpTime_newID
// to compute new index
func (backRepoFret *BackRepoFretStruct) RestorePhaseTwo() {

	for _, fretDB := range backRepoFret.Map_FretDBID_FretDB {

		// next line of code is to avert unused variable compilation error
		_ = fretDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFret.db.Model(fretDB).Updates(*fretDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoFret.ResetReversePointers commits all staged instances of Fret to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFret *BackRepoFretStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, fret := range backRepoFret.Map_FretDBID_FretPtr {
		backRepoFret.ResetReversePointersInstance(backRepo, idx, fret)
	}

	return
}

func (backRepoFret *BackRepoFretStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, fret *models.Fret) (Error error) {

	// fetch matching fretDB
	if fretDB, ok := backRepoFret.Map_FretDBID_FretDB[idx]; ok {
		_ = fretDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFretid_atBckpTime_newID map[uint]uint
