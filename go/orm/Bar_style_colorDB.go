// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bar_style_color_sql sql.NullBool
var dummy_Bar_style_color_time time.Duration
var dummy_Bar_style_color_sort sort.Float64Slice

// Bar_style_colorAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bar_style_colorAPI
type Bar_style_colorAPI struct {
	gorm.Model

	models.Bar_style_color_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Bar_style_colorPointersEncoding Bar_style_colorPointersEncoding
}

// Bar_style_colorPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Bar_style_colorPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Bar_style_colorDB describes a bar_style_color in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bar_style_colorDB
type Bar_style_colorDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bar_style_colorDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Bar_style_colorPointersEncoding
}

// Bar_style_colorDBs arrays bar_style_colorDBs
// swagger:response bar_style_colorDBsResponse
type Bar_style_colorDBs []Bar_style_colorDB

// Bar_style_colorDBResponse provides response
// swagger:response bar_style_colorDBResponse
type Bar_style_colorDBResponse struct {
	Bar_style_colorDB
}

// Bar_style_colorWOP is a Bar_style_color without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Bar_style_colorWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Bar_style_color_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBar_style_colorStruct struct {
	// stores Bar_style_colorDB according to their gorm ID
	Map_Bar_style_colorDBID_Bar_style_colorDB map[uint]*Bar_style_colorDB

	// stores Bar_style_colorDB ID according to Bar_style_color address
	Map_Bar_style_colorPtr_Bar_style_colorDBID map[*models.Bar_style_color]uint

	// stores Bar_style_color according to their gorm ID
	Map_Bar_style_colorDBID_Bar_style_colorPtr map[uint]*models.Bar_style_color

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBar_style_color *BackRepoBar_style_colorStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBar_style_color.stage
	return
}

func (backRepoBar_style_color *BackRepoBar_style_colorStruct) GetDB() *gorm.DB {
	return backRepoBar_style_color.db
}

// GetBar_style_colorDBFromBar_style_colorPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) GetBar_style_colorDBFromBar_style_colorPtr(bar_style_color *models.Bar_style_color) (bar_style_colorDB *Bar_style_colorDB) {
	id := backRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color]
	bar_style_colorDB = backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[id]
	return
}

// BackRepoBar_style_color.CommitPhaseOne commits all staged instances of Bar_style_color to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bar_style_color := range stage.Bar_style_colors {
		backRepoBar_style_color.CommitPhaseOneInstance(bar_style_color)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bar_style_color := range backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr {
		if _, ok := stage.Bar_style_colors[bar_style_color]; !ok {
			backRepoBar_style_color.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBar_style_color.CommitDeleteInstance commits deletion of Bar_style_color to the BackRepo
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CommitDeleteInstance(id uint) (Error error) {

	bar_style_color := backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr[id]

	// bar_style_color is not staged anymore, remove bar_style_colorDB
	bar_style_colorDB := backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[id]
	query := backRepoBar_style_color.db.Unscoped().Delete(&bar_style_colorDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID, bar_style_color)
	delete(backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr, id)
	delete(backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB, id)

	return
}

// BackRepoBar_style_color.CommitPhaseOneInstance commits bar_style_color staged instances of Bar_style_color to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CommitPhaseOneInstance(bar_style_color *models.Bar_style_color) (Error error) {

	// check if the bar_style_color is not commited yet
	if _, ok := backRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color]; ok {
		return
	}

	// initiate bar_style_color
	var bar_style_colorDB Bar_style_colorDB
	bar_style_colorDB.CopyBasicFieldsFromBar_style_color(bar_style_color)

	query := backRepoBar_style_color.db.Create(&bar_style_colorDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color] = bar_style_colorDB.ID
	backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr[bar_style_colorDB.ID] = bar_style_color
	backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[bar_style_colorDB.ID] = &bar_style_colorDB

	return
}

// BackRepoBar_style_color.CommitPhaseTwo commits all staged instances of Bar_style_color to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bar_style_color := range backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr {
		backRepoBar_style_color.CommitPhaseTwoInstance(backRepo, idx, bar_style_color)
	}

	return
}

// BackRepoBar_style_color.CommitPhaseTwoInstance commits {{structname }} of models.Bar_style_color to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bar_style_color *models.Bar_style_color) (Error error) {

	// fetch matching bar_style_colorDB
	if bar_style_colorDB, ok := backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[idx]; ok {

		bar_style_colorDB.CopyBasicFieldsFromBar_style_color(bar_style_color)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBar_style_color.db.Save(&bar_style_colorDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bar_style_color intance %s", bar_style_color.Name))
		return err
	}

	return
}

// BackRepoBar_style_color.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CheckoutPhaseOne() (Error error) {

	bar_style_colorDBArray := make([]Bar_style_colorDB, 0)
	query := backRepoBar_style_color.db.Find(&bar_style_colorDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bar_style_colorInstancesToBeRemovedFromTheStage := make(map[*models.Bar_style_color]any)
	for key, value := range backRepoBar_style_color.stage.Bar_style_colors {
		bar_style_colorInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bar_style_colorDB := range bar_style_colorDBArray {
		backRepoBar_style_color.CheckoutPhaseOneInstance(&bar_style_colorDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bar_style_color, ok := backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr[bar_style_colorDB.ID]
		if ok {
			delete(bar_style_colorInstancesToBeRemovedFromTheStage, bar_style_color)
		}
	}

	// remove from stage and back repo's 3 maps all bar_style_colors that are not in the checkout
	for bar_style_color := range bar_style_colorInstancesToBeRemovedFromTheStage {
		bar_style_color.Unstage(backRepoBar_style_color.GetStage())

		// remove instance from the back repo 3 maps
		bar_style_colorID := backRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color]
		delete(backRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID, bar_style_color)
		delete(backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB, bar_style_colorID)
		delete(backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr, bar_style_colorID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bar_style_colorDB that has been found in the DB, updates the backRepo and stages the
// models version of the bar_style_colorDB
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CheckoutPhaseOneInstance(bar_style_colorDB *Bar_style_colorDB) (Error error) {

	bar_style_color, ok := backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr[bar_style_colorDB.ID]
	if !ok {
		bar_style_color = new(models.Bar_style_color)

		backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr[bar_style_colorDB.ID] = bar_style_color
		backRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color] = bar_style_colorDB.ID

		// append model store with the new element
		bar_style_color.Name = bar_style_colorDB.Name_Data.String
		bar_style_color.Stage(backRepoBar_style_color.GetStage())
	}
	bar_style_colorDB.CopyBasicFieldsToBar_style_color(bar_style_color)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bar_style_color.Stage(backRepoBar_style_color.GetStage())

	// preserve pointer to bar_style_colorDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Bar_style_colorDBID_Bar_style_colorDB)[bar_style_colorDB hold variable pointers
	bar_style_colorDB_Data := *bar_style_colorDB
	preservedPtrToBar_style_color := &bar_style_colorDB_Data
	backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[bar_style_colorDB.ID] = preservedPtrToBar_style_color

	return
}

// BackRepoBar_style_color.CheckoutPhaseTwo Checkouts all staged instances of Bar_style_color to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bar_style_colorDB := range backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB {
		backRepoBar_style_color.CheckoutPhaseTwoInstance(backRepo, bar_style_colorDB)
	}
	return
}

// BackRepoBar_style_color.CheckoutPhaseTwoInstance Checkouts staged instances of Bar_style_color to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bar_style_colorDB *Bar_style_colorDB) (Error error) {

	bar_style_color := backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr[bar_style_colorDB.ID]

	bar_style_colorDB.DecodePointers(backRepo, bar_style_color)

	return
}

func (bar_style_colorDB *Bar_style_colorDB) DecodePointers(backRepo *BackRepoStruct, bar_style_color *models.Bar_style_color) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBar_style_color allows commit of a single bar_style_color (if already staged)
func (backRepo *BackRepoStruct) CommitBar_style_color(bar_style_color *models.Bar_style_color) {
	backRepo.BackRepoBar_style_color.CommitPhaseOneInstance(bar_style_color)
	if id, ok := backRepo.BackRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color]; ok {
		backRepo.BackRepoBar_style_color.CommitPhaseTwoInstance(backRepo, id, bar_style_color)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBar_style_color allows checkout of a single bar_style_color (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBar_style_color(bar_style_color *models.Bar_style_color) {
	// check if the bar_style_color is staged
	if _, ok := backRepo.BackRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color]; ok {

		if id, ok := backRepo.BackRepoBar_style_color.Map_Bar_style_colorPtr_Bar_style_colorDBID[bar_style_color]; ok {
			var bar_style_colorDB Bar_style_colorDB
			bar_style_colorDB.ID = id

			if err := backRepo.BackRepoBar_style_color.db.First(&bar_style_colorDB, id).Error; err != nil {
				log.Fatalln("CheckoutBar_style_color : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBar_style_color.CheckoutPhaseOneInstance(&bar_style_colorDB)
			backRepo.BackRepoBar_style_color.CheckoutPhaseTwoInstance(backRepo, &bar_style_colorDB)
		}
	}
}

// CopyBasicFieldsFromBar_style_color
func (bar_style_colorDB *Bar_style_colorDB) CopyBasicFieldsFromBar_style_color(bar_style_color *models.Bar_style_color) {
	// insertion point for fields commit

	bar_style_colorDB.Name_Data.String = bar_style_color.Name
	bar_style_colorDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBar_style_color_WOP
func (bar_style_colorDB *Bar_style_colorDB) CopyBasicFieldsFromBar_style_color_WOP(bar_style_color *models.Bar_style_color_WOP) {
	// insertion point for fields commit

	bar_style_colorDB.Name_Data.String = bar_style_color.Name
	bar_style_colorDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBar_style_colorWOP
func (bar_style_colorDB *Bar_style_colorDB) CopyBasicFieldsFromBar_style_colorWOP(bar_style_color *Bar_style_colorWOP) {
	// insertion point for fields commit

	bar_style_colorDB.Name_Data.String = bar_style_color.Name
	bar_style_colorDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBar_style_color
func (bar_style_colorDB *Bar_style_colorDB) CopyBasicFieldsToBar_style_color(bar_style_color *models.Bar_style_color) {
	// insertion point for checkout of basic fields (back repo to stage)
	bar_style_color.Name = bar_style_colorDB.Name_Data.String
}

// CopyBasicFieldsToBar_style_color_WOP
func (bar_style_colorDB *Bar_style_colorDB) CopyBasicFieldsToBar_style_color_WOP(bar_style_color *models.Bar_style_color_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bar_style_color.Name = bar_style_colorDB.Name_Data.String
}

// CopyBasicFieldsToBar_style_colorWOP
func (bar_style_colorDB *Bar_style_colorDB) CopyBasicFieldsToBar_style_colorWOP(bar_style_color *Bar_style_colorWOP) {
	bar_style_color.ID = int(bar_style_colorDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bar_style_color.Name = bar_style_colorDB.Name_Data.String
}

// Backup generates a json file from a slice of all Bar_style_colorDB instances in the backrepo
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Bar_style_colorDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Bar_style_colorDB, 0)
	for _, bar_style_colorDB := range backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB {
		forBackup = append(forBackup, bar_style_colorDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Bar_style_color ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Bar_style_color file", err.Error())
	}
}

// Backup generates a json file from a slice of all Bar_style_colorDB instances in the backrepo
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Bar_style_colorDB, 0)
	for _, bar_style_colorDB := range backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB {
		forBackup = append(forBackup, bar_style_colorDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Bar_style_color")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Bar_style_color_Fields, -1)
	for _, bar_style_colorDB := range forBackup {

		var bar_style_colorWOP Bar_style_colorWOP
		bar_style_colorDB.CopyBasicFieldsToBar_style_colorWOP(&bar_style_colorWOP)

		row := sh.AddRow()
		row.WriteStruct(&bar_style_colorWOP, -1)
	}
}

// RestoreXL from the "Bar_style_color" sheet all Bar_style_colorDB instances
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBar_style_colorid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Bar_style_color"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBar_style_color.rowVisitorBar_style_color)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBar_style_color *BackRepoBar_style_colorStruct) rowVisitorBar_style_color(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bar_style_colorWOP Bar_style_colorWOP
		row.ReadStruct(&bar_style_colorWOP)

		// add the unmarshalled struct to the stage
		bar_style_colorDB := new(Bar_style_colorDB)
		bar_style_colorDB.CopyBasicFieldsFromBar_style_colorWOP(&bar_style_colorWOP)

		bar_style_colorDB_ID_atBackupTime := bar_style_colorDB.ID
		bar_style_colorDB.ID = 0
		query := backRepoBar_style_color.db.Create(bar_style_colorDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[bar_style_colorDB.ID] = bar_style_colorDB
		BackRepoBar_style_colorid_atBckpTime_newID[bar_style_colorDB_ID_atBackupTime] = bar_style_colorDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Bar_style_colorDB.json" in dirPath that stores an array
// of Bar_style_colorDB and stores it in the database
// the map BackRepoBar_style_colorid_atBckpTime_newID is updated accordingly
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBar_style_colorid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Bar_style_colorDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Bar_style_color file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Bar_style_colorDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Bar_style_colorDBID_Bar_style_colorDB
	for _, bar_style_colorDB := range forRestore {

		bar_style_colorDB_ID_atBackupTime := bar_style_colorDB.ID
		bar_style_colorDB.ID = 0
		query := backRepoBar_style_color.db.Create(bar_style_colorDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[bar_style_colorDB.ID] = bar_style_colorDB
		BackRepoBar_style_colorid_atBckpTime_newID[bar_style_colorDB_ID_atBackupTime] = bar_style_colorDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Bar_style_color file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Bar_style_color>id_atBckpTime_newID
// to compute new index
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) RestorePhaseTwo() {

	for _, bar_style_colorDB := range backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB {

		// next line of code is to avert unused variable compilation error
		_ = bar_style_colorDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBar_style_color.db.Model(bar_style_colorDB).Updates(*bar_style_colorDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBar_style_color.ResetReversePointers commits all staged instances of Bar_style_color to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar_style_color *BackRepoBar_style_colorStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bar_style_color := range backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorPtr {
		backRepoBar_style_color.ResetReversePointersInstance(backRepo, idx, bar_style_color)
	}

	return
}

func (backRepoBar_style_color *BackRepoBar_style_colorStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bar_style_color *models.Bar_style_color) (Error error) {

	// fetch matching bar_style_colorDB
	if bar_style_colorDB, ok := backRepoBar_style_color.Map_Bar_style_colorDBID_Bar_style_colorDB[idx]; ok {
		_ = bar_style_colorDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBar_style_colorid_atBckpTime_newID map[uint]uint
