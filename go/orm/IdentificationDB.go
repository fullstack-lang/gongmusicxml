// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Identification_sql sql.NullBool
var dummy_Identification_time time.Duration
var dummy_Identification_sort sort.Float64Slice

// IdentificationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model identificationAPI
type IdentificationAPI struct {
	gorm.Model

	models.Identification_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	IdentificationPointersEncoding IdentificationPointersEncoding
}

// IdentificationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type IdentificationPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Creator is a slice of pointers to another Struct (optional or 0..1)
	Creator IntSlice `gorm:"type:TEXT"`

	// field Rights is a slice of pointers to another Struct (optional or 0..1)
	Rights IntSlice `gorm:"type:TEXT"`

	// field Encoding is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EncodingID sql.NullInt64

	// field Relation is a slice of pointers to another Struct (optional or 0..1)
	Relation IntSlice `gorm:"type:TEXT"`

	// field Miscellaneous is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MiscellaneousID sql.NullInt64
}

// IdentificationDB describes a identification in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model identificationDB
type IdentificationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field identificationDB.Name
	Name_Data sql.NullString

	// Declation for basic field identificationDB.Source
	Source_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	IdentificationPointersEncoding
}

// IdentificationDBs arrays identificationDBs
// swagger:response identificationDBsResponse
type IdentificationDBs []IdentificationDB

// IdentificationDBResponse provides response
// swagger:response identificationDBResponse
type IdentificationDBResponse struct {
	IdentificationDB
}

// IdentificationWOP is a Identification without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type IdentificationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Source string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Identification_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Source",
}

type BackRepoIdentificationStruct struct {
	// stores IdentificationDB according to their gorm ID
	Map_IdentificationDBID_IdentificationDB map[uint]*IdentificationDB

	// stores IdentificationDB ID according to Identification address
	Map_IdentificationPtr_IdentificationDBID map[*models.Identification]uint

	// stores Identification according to their gorm ID
	Map_IdentificationDBID_IdentificationPtr map[uint]*models.Identification

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoIdentification *BackRepoIdentificationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoIdentification.stage
	return
}

func (backRepoIdentification *BackRepoIdentificationStruct) GetDB() *gorm.DB {
	return backRepoIdentification.db
}

// GetIdentificationDBFromIdentificationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoIdentification *BackRepoIdentificationStruct) GetIdentificationDBFromIdentificationPtr(identification *models.Identification) (identificationDB *IdentificationDB) {
	id := backRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification]
	identificationDB = backRepoIdentification.Map_IdentificationDBID_IdentificationDB[id]
	return
}

// BackRepoIdentification.CommitPhaseOne commits all staged instances of Identification to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoIdentification *BackRepoIdentificationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for identification := range stage.Identifications {
		backRepoIdentification.CommitPhaseOneInstance(identification)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, identification := range backRepoIdentification.Map_IdentificationDBID_IdentificationPtr {
		if _, ok := stage.Identifications[identification]; !ok {
			backRepoIdentification.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoIdentification.CommitDeleteInstance commits deletion of Identification to the BackRepo
func (backRepoIdentification *BackRepoIdentificationStruct) CommitDeleteInstance(id uint) (Error error) {

	identification := backRepoIdentification.Map_IdentificationDBID_IdentificationPtr[id]

	// identification is not staged anymore, remove identificationDB
	identificationDB := backRepoIdentification.Map_IdentificationDBID_IdentificationDB[id]
	query := backRepoIdentification.db.Unscoped().Delete(&identificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoIdentification.Map_IdentificationPtr_IdentificationDBID, identification)
	delete(backRepoIdentification.Map_IdentificationDBID_IdentificationPtr, id)
	delete(backRepoIdentification.Map_IdentificationDBID_IdentificationDB, id)

	return
}

// BackRepoIdentification.CommitPhaseOneInstance commits identification staged instances of Identification to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoIdentification *BackRepoIdentificationStruct) CommitPhaseOneInstance(identification *models.Identification) (Error error) {

	// check if the identification is not commited yet
	if _, ok := backRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification]; ok {
		return
	}

	// initiate identification
	var identificationDB IdentificationDB
	identificationDB.CopyBasicFieldsFromIdentification(identification)

	query := backRepoIdentification.db.Create(&identificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification] = identificationDB.ID
	backRepoIdentification.Map_IdentificationDBID_IdentificationPtr[identificationDB.ID] = identification
	backRepoIdentification.Map_IdentificationDBID_IdentificationDB[identificationDB.ID] = &identificationDB

	return
}

// BackRepoIdentification.CommitPhaseTwo commits all staged instances of Identification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIdentification *BackRepoIdentificationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, identification := range backRepoIdentification.Map_IdentificationDBID_IdentificationPtr {
		backRepoIdentification.CommitPhaseTwoInstance(backRepo, idx, identification)
	}

	return
}

// BackRepoIdentification.CommitPhaseTwoInstance commits {{structname }} of models.Identification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIdentification *BackRepoIdentificationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, identification *models.Identification) (Error error) {

	// fetch matching identificationDB
	if identificationDB, ok := backRepoIdentification.Map_IdentificationDBID_IdentificationDB[idx]; ok {

		identificationDB.CopyBasicFieldsFromIdentification(identification)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		identificationDB.IdentificationPointersEncoding.Creator = make([]int, 0)
		// 2. encode
		for _, typed_textAssocEnd := range identification.Creator {
			typed_textAssocEnd_DB :=
				backRepo.BackRepoTyped_text.GetTyped_textDBFromTyped_textPtr(typed_textAssocEnd)
			
			// the stage might be inconsistant, meaning that the typed_textAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if typed_textAssocEnd_DB == nil {
				continue
			}
			
			identificationDB.IdentificationPointersEncoding.Creator =
				append(identificationDB.IdentificationPointersEncoding.Creator, int(typed_textAssocEnd_DB.ID))
		}

		// 1. reset
		identificationDB.IdentificationPointersEncoding.Rights = make([]int, 0)
		// 2. encode
		for _, typed_textAssocEnd := range identification.Rights {
			typed_textAssocEnd_DB :=
				backRepo.BackRepoTyped_text.GetTyped_textDBFromTyped_textPtr(typed_textAssocEnd)
			
			// the stage might be inconsistant, meaning that the typed_textAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if typed_textAssocEnd_DB == nil {
				continue
			}
			
			identificationDB.IdentificationPointersEncoding.Rights =
				append(identificationDB.IdentificationPointersEncoding.Rights, int(typed_textAssocEnd_DB.ID))
		}

		// commit pointer value identification.Encoding translates to updating the identification.EncodingID
		identificationDB.EncodingID.Valid = true // allow for a 0 value (nil association)
		if identification.Encoding != nil {
			if EncodingId, ok := backRepo.BackRepoEncoding.Map_EncodingPtr_EncodingDBID[identification.Encoding]; ok {
				identificationDB.EncodingID.Int64 = int64(EncodingId)
				identificationDB.EncodingID.Valid = true
			}
		} else {
			identificationDB.EncodingID.Int64 = 0
			identificationDB.EncodingID.Valid = true
		}

		// 1. reset
		identificationDB.IdentificationPointersEncoding.Relation = make([]int, 0)
		// 2. encode
		for _, typed_textAssocEnd := range identification.Relation {
			typed_textAssocEnd_DB :=
				backRepo.BackRepoTyped_text.GetTyped_textDBFromTyped_textPtr(typed_textAssocEnd)
			
			// the stage might be inconsistant, meaning that the typed_textAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if typed_textAssocEnd_DB == nil {
				continue
			}
			
			identificationDB.IdentificationPointersEncoding.Relation =
				append(identificationDB.IdentificationPointersEncoding.Relation, int(typed_textAssocEnd_DB.ID))
		}

		// commit pointer value identification.Miscellaneous translates to updating the identification.MiscellaneousID
		identificationDB.MiscellaneousID.Valid = true // allow for a 0 value (nil association)
		if identification.Miscellaneous != nil {
			if MiscellaneousId, ok := backRepo.BackRepoMiscellaneous.Map_MiscellaneousPtr_MiscellaneousDBID[identification.Miscellaneous]; ok {
				identificationDB.MiscellaneousID.Int64 = int64(MiscellaneousId)
				identificationDB.MiscellaneousID.Valid = true
			}
		} else {
			identificationDB.MiscellaneousID.Int64 = 0
			identificationDB.MiscellaneousID.Valid = true
		}

		query := backRepoIdentification.db.Save(&identificationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Identification intance %s", identification.Name))
		return err
	}

	return
}

// BackRepoIdentification.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoIdentification *BackRepoIdentificationStruct) CheckoutPhaseOne() (Error error) {

	identificationDBArray := make([]IdentificationDB, 0)
	query := backRepoIdentification.db.Find(&identificationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	identificationInstancesToBeRemovedFromTheStage := make(map[*models.Identification]any)
	for key, value := range backRepoIdentification.stage.Identifications {
		identificationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, identificationDB := range identificationDBArray {
		backRepoIdentification.CheckoutPhaseOneInstance(&identificationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		identification, ok := backRepoIdentification.Map_IdentificationDBID_IdentificationPtr[identificationDB.ID]
		if ok {
			delete(identificationInstancesToBeRemovedFromTheStage, identification)
		}
	}

	// remove from stage and back repo's 3 maps all identifications that are not in the checkout
	for identification := range identificationInstancesToBeRemovedFromTheStage {
		identification.Unstage(backRepoIdentification.GetStage())

		// remove instance from the back repo 3 maps
		identificationID := backRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification]
		delete(backRepoIdentification.Map_IdentificationPtr_IdentificationDBID, identification)
		delete(backRepoIdentification.Map_IdentificationDBID_IdentificationDB, identificationID)
		delete(backRepoIdentification.Map_IdentificationDBID_IdentificationPtr, identificationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a identificationDB that has been found in the DB, updates the backRepo and stages the
// models version of the identificationDB
func (backRepoIdentification *BackRepoIdentificationStruct) CheckoutPhaseOneInstance(identificationDB *IdentificationDB) (Error error) {

	identification, ok := backRepoIdentification.Map_IdentificationDBID_IdentificationPtr[identificationDB.ID]
	if !ok {
		identification = new(models.Identification)

		backRepoIdentification.Map_IdentificationDBID_IdentificationPtr[identificationDB.ID] = identification
		backRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification] = identificationDB.ID

		// append model store with the new element
		identification.Name = identificationDB.Name_Data.String
		identification.Stage(backRepoIdentification.GetStage())
	}
	identificationDB.CopyBasicFieldsToIdentification(identification)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	identification.Stage(backRepoIdentification.GetStage())

	// preserve pointer to identificationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_IdentificationDBID_IdentificationDB)[identificationDB hold variable pointers
	identificationDB_Data := *identificationDB
	preservedPtrToIdentification := &identificationDB_Data
	backRepoIdentification.Map_IdentificationDBID_IdentificationDB[identificationDB.ID] = preservedPtrToIdentification

	return
}

// BackRepoIdentification.CheckoutPhaseTwo Checkouts all staged instances of Identification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIdentification *BackRepoIdentificationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, identificationDB := range backRepoIdentification.Map_IdentificationDBID_IdentificationDB {
		backRepoIdentification.CheckoutPhaseTwoInstance(backRepo, identificationDB)
	}
	return
}

// BackRepoIdentification.CheckoutPhaseTwoInstance Checkouts staged instances of Identification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIdentification *BackRepoIdentificationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, identificationDB *IdentificationDB) (Error error) {

	identification := backRepoIdentification.Map_IdentificationDBID_IdentificationPtr[identificationDB.ID]

	identificationDB.DecodePointers(backRepo, identification)

	return
}

func (identificationDB *IdentificationDB) DecodePointers(backRepo *BackRepoStruct, identification *models.Identification) {

	// insertion point for checkout of pointer encoding
	// This loop redeem identification.Creator in the stage from the encode in the back repo
	// It parses all Typed_textDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	identification.Creator = identification.Creator[:0]
	for _, _Typed_textid := range identificationDB.IdentificationPointersEncoding.Creator {
		identification.Creator = append(identification.Creator, backRepo.BackRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[uint(_Typed_textid)])
	}

	// This loop redeem identification.Rights in the stage from the encode in the back repo
	// It parses all Typed_textDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	identification.Rights = identification.Rights[:0]
	for _, _Typed_textid := range identificationDB.IdentificationPointersEncoding.Rights {
		identification.Rights = append(identification.Rights, backRepo.BackRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[uint(_Typed_textid)])
	}

	// Encoding field
	identification.Encoding = nil
	if identificationDB.EncodingID.Int64 != 0 {
		identification.Encoding = backRepo.BackRepoEncoding.Map_EncodingDBID_EncodingPtr[uint(identificationDB.EncodingID.Int64)]
	}
	// This loop redeem identification.Relation in the stage from the encode in the back repo
	// It parses all Typed_textDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	identification.Relation = identification.Relation[:0]
	for _, _Typed_textid := range identificationDB.IdentificationPointersEncoding.Relation {
		identification.Relation = append(identification.Relation, backRepo.BackRepoTyped_text.Map_Typed_textDBID_Typed_textPtr[uint(_Typed_textid)])
	}

	// Miscellaneous field
	identification.Miscellaneous = nil
	if identificationDB.MiscellaneousID.Int64 != 0 {
		identification.Miscellaneous = backRepo.BackRepoMiscellaneous.Map_MiscellaneousDBID_MiscellaneousPtr[uint(identificationDB.MiscellaneousID.Int64)]
	}
	return
}

// CommitIdentification allows commit of a single identification (if already staged)
func (backRepo *BackRepoStruct) CommitIdentification(identification *models.Identification) {
	backRepo.BackRepoIdentification.CommitPhaseOneInstance(identification)
	if id, ok := backRepo.BackRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification]; ok {
		backRepo.BackRepoIdentification.CommitPhaseTwoInstance(backRepo, id, identification)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitIdentification allows checkout of a single identification (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutIdentification(identification *models.Identification) {
	// check if the identification is staged
	if _, ok := backRepo.BackRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification]; ok {

		if id, ok := backRepo.BackRepoIdentification.Map_IdentificationPtr_IdentificationDBID[identification]; ok {
			var identificationDB IdentificationDB
			identificationDB.ID = id

			if err := backRepo.BackRepoIdentification.db.First(&identificationDB, id).Error; err != nil {
				log.Fatalln("CheckoutIdentification : Problem with getting object with id:", id)
			}
			backRepo.BackRepoIdentification.CheckoutPhaseOneInstance(&identificationDB)
			backRepo.BackRepoIdentification.CheckoutPhaseTwoInstance(backRepo, &identificationDB)
		}
	}
}

// CopyBasicFieldsFromIdentification
func (identificationDB *IdentificationDB) CopyBasicFieldsFromIdentification(identification *models.Identification) {
	// insertion point for fields commit

	identificationDB.Name_Data.String = identification.Name
	identificationDB.Name_Data.Valid = true

	identificationDB.Source_Data.String = identification.Source
	identificationDB.Source_Data.Valid = true
}

// CopyBasicFieldsFromIdentification_WOP
func (identificationDB *IdentificationDB) CopyBasicFieldsFromIdentification_WOP(identification *models.Identification_WOP) {
	// insertion point for fields commit

	identificationDB.Name_Data.String = identification.Name
	identificationDB.Name_Data.Valid = true

	identificationDB.Source_Data.String = identification.Source
	identificationDB.Source_Data.Valid = true
}

// CopyBasicFieldsFromIdentificationWOP
func (identificationDB *IdentificationDB) CopyBasicFieldsFromIdentificationWOP(identification *IdentificationWOP) {
	// insertion point for fields commit

	identificationDB.Name_Data.String = identification.Name
	identificationDB.Name_Data.Valid = true

	identificationDB.Source_Data.String = identification.Source
	identificationDB.Source_Data.Valid = true
}

// CopyBasicFieldsToIdentification
func (identificationDB *IdentificationDB) CopyBasicFieldsToIdentification(identification *models.Identification) {
	// insertion point for checkout of basic fields (back repo to stage)
	identification.Name = identificationDB.Name_Data.String
	identification.Source = identificationDB.Source_Data.String
}

// CopyBasicFieldsToIdentification_WOP
func (identificationDB *IdentificationDB) CopyBasicFieldsToIdentification_WOP(identification *models.Identification_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	identification.Name = identificationDB.Name_Data.String
	identification.Source = identificationDB.Source_Data.String
}

// CopyBasicFieldsToIdentificationWOP
func (identificationDB *IdentificationDB) CopyBasicFieldsToIdentificationWOP(identification *IdentificationWOP) {
	identification.ID = int(identificationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	identification.Name = identificationDB.Name_Data.String
	identification.Source = identificationDB.Source_Data.String
}

// Backup generates a json file from a slice of all IdentificationDB instances in the backrepo
func (backRepoIdentification *BackRepoIdentificationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "IdentificationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*IdentificationDB, 0)
	for _, identificationDB := range backRepoIdentification.Map_IdentificationDBID_IdentificationDB {
		forBackup = append(forBackup, identificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Identification ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Identification file", err.Error())
	}
}

// Backup generates a json file from a slice of all IdentificationDB instances in the backrepo
func (backRepoIdentification *BackRepoIdentificationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*IdentificationDB, 0)
	for _, identificationDB := range backRepoIdentification.Map_IdentificationDBID_IdentificationDB {
		forBackup = append(forBackup, identificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Identification")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Identification_Fields, -1)
	for _, identificationDB := range forBackup {

		var identificationWOP IdentificationWOP
		identificationDB.CopyBasicFieldsToIdentificationWOP(&identificationWOP)

		row := sh.AddRow()
		row.WriteStruct(&identificationWOP, -1)
	}
}

// RestoreXL from the "Identification" sheet all IdentificationDB instances
func (backRepoIdentification *BackRepoIdentificationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoIdentificationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Identification"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoIdentification.rowVisitorIdentification)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoIdentification *BackRepoIdentificationStruct) rowVisitorIdentification(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var identificationWOP IdentificationWOP
		row.ReadStruct(&identificationWOP)

		// add the unmarshalled struct to the stage
		identificationDB := new(IdentificationDB)
		identificationDB.CopyBasicFieldsFromIdentificationWOP(&identificationWOP)

		identificationDB_ID_atBackupTime := identificationDB.ID
		identificationDB.ID = 0
		query := backRepoIdentification.db.Create(identificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoIdentification.Map_IdentificationDBID_IdentificationDB[identificationDB.ID] = identificationDB
		BackRepoIdentificationid_atBckpTime_newID[identificationDB_ID_atBackupTime] = identificationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "IdentificationDB.json" in dirPath that stores an array
// of IdentificationDB and stores it in the database
// the map BackRepoIdentificationid_atBckpTime_newID is updated accordingly
func (backRepoIdentification *BackRepoIdentificationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoIdentificationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "IdentificationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Identification file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*IdentificationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_IdentificationDBID_IdentificationDB
	for _, identificationDB := range forRestore {

		identificationDB_ID_atBackupTime := identificationDB.ID
		identificationDB.ID = 0
		query := backRepoIdentification.db.Create(identificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoIdentification.Map_IdentificationDBID_IdentificationDB[identificationDB.ID] = identificationDB
		BackRepoIdentificationid_atBckpTime_newID[identificationDB_ID_atBackupTime] = identificationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Identification file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Identification>id_atBckpTime_newID
// to compute new index
func (backRepoIdentification *BackRepoIdentificationStruct) RestorePhaseTwo() {

	for _, identificationDB := range backRepoIdentification.Map_IdentificationDBID_IdentificationDB {

		// next line of code is to avert unused variable compilation error
		_ = identificationDB

		// insertion point for reindexing pointers encoding
		// reindexing Encoding field
		if identificationDB.EncodingID.Int64 != 0 {
			identificationDB.EncodingID.Int64 = int64(BackRepoEncodingid_atBckpTime_newID[uint(identificationDB.EncodingID.Int64)])
			identificationDB.EncodingID.Valid = true
		}

		// reindexing Miscellaneous field
		if identificationDB.MiscellaneousID.Int64 != 0 {
			identificationDB.MiscellaneousID.Int64 = int64(BackRepoMiscellaneousid_atBckpTime_newID[uint(identificationDB.MiscellaneousID.Int64)])
			identificationDB.MiscellaneousID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoIdentification.db.Model(identificationDB).Updates(*identificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoIdentification.ResetReversePointers commits all staged instances of Identification to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoIdentification *BackRepoIdentificationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, identification := range backRepoIdentification.Map_IdentificationDBID_IdentificationPtr {
		backRepoIdentification.ResetReversePointersInstance(backRepo, idx, identification)
	}

	return
}

func (backRepoIdentification *BackRepoIdentificationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, identification *models.Identification) (Error error) {

	// fetch matching identificationDB
	if identificationDB, ok := backRepoIdentification.Map_IdentificationDBID_IdentificationDB[idx]; ok {
		_ = identificationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoIdentificationid_atBckpTime_newID map[uint]uint
