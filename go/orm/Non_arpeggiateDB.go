// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Non_arpeggiate_sql sql.NullBool
var dummy_Non_arpeggiate_time time.Duration
var dummy_Non_arpeggiate_sort sort.Float64Slice

// Non_arpeggiateAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model non_arpeggiateAPI
type Non_arpeggiateAPI struct {
	gorm.Model

	models.Non_arpeggiate_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Non_arpeggiatePointersEncoding Non_arpeggiatePointersEncoding
}

// Non_arpeggiatePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Non_arpeggiatePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Non_arpeggiateDB describes a non_arpeggiate in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model non_arpeggiateDB
type Non_arpeggiateDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field non_arpeggiateDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Non_arpeggiatePointersEncoding
}

// Non_arpeggiateDBs arrays non_arpeggiateDBs
// swagger:response non_arpeggiateDBsResponse
type Non_arpeggiateDBs []Non_arpeggiateDB

// Non_arpeggiateDBResponse provides response
// swagger:response non_arpeggiateDBResponse
type Non_arpeggiateDBResponse struct {
	Non_arpeggiateDB
}

// Non_arpeggiateWOP is a Non_arpeggiate without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Non_arpeggiateWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Non_arpeggiate_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoNon_arpeggiateStruct struct {
	// stores Non_arpeggiateDB according to their gorm ID
	Map_Non_arpeggiateDBID_Non_arpeggiateDB map[uint]*Non_arpeggiateDB

	// stores Non_arpeggiateDB ID according to Non_arpeggiate address
	Map_Non_arpeggiatePtr_Non_arpeggiateDBID map[*models.Non_arpeggiate]uint

	// stores Non_arpeggiate according to their gorm ID
	Map_Non_arpeggiateDBID_Non_arpeggiatePtr map[uint]*models.Non_arpeggiate

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoNon_arpeggiate.stage
	return
}

func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) GetDB() *gorm.DB {
	return backRepoNon_arpeggiate.db
}

// GetNon_arpeggiateDBFromNon_arpeggiatePtr is a handy function to access the back repo instance from the stage instance
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) GetNon_arpeggiateDBFromNon_arpeggiatePtr(non_arpeggiate *models.Non_arpeggiate) (non_arpeggiateDB *Non_arpeggiateDB) {
	id := backRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate]
	non_arpeggiateDB = backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[id]
	return
}

// BackRepoNon_arpeggiate.CommitPhaseOne commits all staged instances of Non_arpeggiate to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for non_arpeggiate := range stage.Non_arpeggiates {
		backRepoNon_arpeggiate.CommitPhaseOneInstance(non_arpeggiate)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, non_arpeggiate := range backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr {
		if _, ok := stage.Non_arpeggiates[non_arpeggiate]; !ok {
			backRepoNon_arpeggiate.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoNon_arpeggiate.CommitDeleteInstance commits deletion of Non_arpeggiate to the BackRepo
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CommitDeleteInstance(id uint) (Error error) {

	non_arpeggiate := backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr[id]

	// non_arpeggiate is not staged anymore, remove non_arpeggiateDB
	non_arpeggiateDB := backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[id]
	query := backRepoNon_arpeggiate.db.Unscoped().Delete(&non_arpeggiateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID, non_arpeggiate)
	delete(backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr, id)
	delete(backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB, id)

	return
}

// BackRepoNon_arpeggiate.CommitPhaseOneInstance commits non_arpeggiate staged instances of Non_arpeggiate to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CommitPhaseOneInstance(non_arpeggiate *models.Non_arpeggiate) (Error error) {

	// check if the non_arpeggiate is not commited yet
	if _, ok := backRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate]; ok {
		return
	}

	// initiate non_arpeggiate
	var non_arpeggiateDB Non_arpeggiateDB
	non_arpeggiateDB.CopyBasicFieldsFromNon_arpeggiate(non_arpeggiate)

	query := backRepoNon_arpeggiate.db.Create(&non_arpeggiateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate] = non_arpeggiateDB.ID
	backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr[non_arpeggiateDB.ID] = non_arpeggiate
	backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[non_arpeggiateDB.ID] = &non_arpeggiateDB

	return
}

// BackRepoNon_arpeggiate.CommitPhaseTwo commits all staged instances of Non_arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, non_arpeggiate := range backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr {
		backRepoNon_arpeggiate.CommitPhaseTwoInstance(backRepo, idx, non_arpeggiate)
	}

	return
}

// BackRepoNon_arpeggiate.CommitPhaseTwoInstance commits {{structname }} of models.Non_arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, non_arpeggiate *models.Non_arpeggiate) (Error error) {

	// fetch matching non_arpeggiateDB
	if non_arpeggiateDB, ok := backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[idx]; ok {

		non_arpeggiateDB.CopyBasicFieldsFromNon_arpeggiate(non_arpeggiate)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoNon_arpeggiate.db.Save(&non_arpeggiateDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Non_arpeggiate intance %s", non_arpeggiate.Name))
		return err
	}

	return
}

// BackRepoNon_arpeggiate.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CheckoutPhaseOne() (Error error) {

	non_arpeggiateDBArray := make([]Non_arpeggiateDB, 0)
	query := backRepoNon_arpeggiate.db.Find(&non_arpeggiateDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	non_arpeggiateInstancesToBeRemovedFromTheStage := make(map[*models.Non_arpeggiate]any)
	for key, value := range backRepoNon_arpeggiate.stage.Non_arpeggiates {
		non_arpeggiateInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, non_arpeggiateDB := range non_arpeggiateDBArray {
		backRepoNon_arpeggiate.CheckoutPhaseOneInstance(&non_arpeggiateDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		non_arpeggiate, ok := backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr[non_arpeggiateDB.ID]
		if ok {
			delete(non_arpeggiateInstancesToBeRemovedFromTheStage, non_arpeggiate)
		}
	}

	// remove from stage and back repo's 3 maps all non_arpeggiates that are not in the checkout
	for non_arpeggiate := range non_arpeggiateInstancesToBeRemovedFromTheStage {
		non_arpeggiate.Unstage(backRepoNon_arpeggiate.GetStage())

		// remove instance from the back repo 3 maps
		non_arpeggiateID := backRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate]
		delete(backRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID, non_arpeggiate)
		delete(backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB, non_arpeggiateID)
		delete(backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr, non_arpeggiateID)
	}

	return
}

// CheckoutPhaseOneInstance takes a non_arpeggiateDB that has been found in the DB, updates the backRepo and stages the
// models version of the non_arpeggiateDB
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CheckoutPhaseOneInstance(non_arpeggiateDB *Non_arpeggiateDB) (Error error) {

	non_arpeggiate, ok := backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr[non_arpeggiateDB.ID]
	if !ok {
		non_arpeggiate = new(models.Non_arpeggiate)

		backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr[non_arpeggiateDB.ID] = non_arpeggiate
		backRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate] = non_arpeggiateDB.ID

		// append model store with the new element
		non_arpeggiate.Name = non_arpeggiateDB.Name_Data.String
		non_arpeggiate.Stage(backRepoNon_arpeggiate.GetStage())
	}
	non_arpeggiateDB.CopyBasicFieldsToNon_arpeggiate(non_arpeggiate)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	non_arpeggiate.Stage(backRepoNon_arpeggiate.GetStage())

	// preserve pointer to non_arpeggiateDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Non_arpeggiateDBID_Non_arpeggiateDB)[non_arpeggiateDB hold variable pointers
	non_arpeggiateDB_Data := *non_arpeggiateDB
	preservedPtrToNon_arpeggiate := &non_arpeggiateDB_Data
	backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[non_arpeggiateDB.ID] = preservedPtrToNon_arpeggiate

	return
}

// BackRepoNon_arpeggiate.CheckoutPhaseTwo Checkouts all staged instances of Non_arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, non_arpeggiateDB := range backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB {
		backRepoNon_arpeggiate.CheckoutPhaseTwoInstance(backRepo, non_arpeggiateDB)
	}
	return
}

// BackRepoNon_arpeggiate.CheckoutPhaseTwoInstance Checkouts staged instances of Non_arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, non_arpeggiateDB *Non_arpeggiateDB) (Error error) {

	non_arpeggiate := backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr[non_arpeggiateDB.ID]

	non_arpeggiateDB.DecodePointers(backRepo, non_arpeggiate)

	return
}

func (non_arpeggiateDB *Non_arpeggiateDB) DecodePointers(backRepo *BackRepoStruct, non_arpeggiate *models.Non_arpeggiate) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitNon_arpeggiate allows commit of a single non_arpeggiate (if already staged)
func (backRepo *BackRepoStruct) CommitNon_arpeggiate(non_arpeggiate *models.Non_arpeggiate) {
	backRepo.BackRepoNon_arpeggiate.CommitPhaseOneInstance(non_arpeggiate)
	if id, ok := backRepo.BackRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate]; ok {
		backRepo.BackRepoNon_arpeggiate.CommitPhaseTwoInstance(backRepo, id, non_arpeggiate)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitNon_arpeggiate allows checkout of a single non_arpeggiate (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutNon_arpeggiate(non_arpeggiate *models.Non_arpeggiate) {
	// check if the non_arpeggiate is staged
	if _, ok := backRepo.BackRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate]; ok {

		if id, ok := backRepo.BackRepoNon_arpeggiate.Map_Non_arpeggiatePtr_Non_arpeggiateDBID[non_arpeggiate]; ok {
			var non_arpeggiateDB Non_arpeggiateDB
			non_arpeggiateDB.ID = id

			if err := backRepo.BackRepoNon_arpeggiate.db.First(&non_arpeggiateDB, id).Error; err != nil {
				log.Fatalln("CheckoutNon_arpeggiate : Problem with getting object with id:", id)
			}
			backRepo.BackRepoNon_arpeggiate.CheckoutPhaseOneInstance(&non_arpeggiateDB)
			backRepo.BackRepoNon_arpeggiate.CheckoutPhaseTwoInstance(backRepo, &non_arpeggiateDB)
		}
	}
}

// CopyBasicFieldsFromNon_arpeggiate
func (non_arpeggiateDB *Non_arpeggiateDB) CopyBasicFieldsFromNon_arpeggiate(non_arpeggiate *models.Non_arpeggiate) {
	// insertion point for fields commit

	non_arpeggiateDB.Name_Data.String = non_arpeggiate.Name
	non_arpeggiateDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNon_arpeggiate_WOP
func (non_arpeggiateDB *Non_arpeggiateDB) CopyBasicFieldsFromNon_arpeggiate_WOP(non_arpeggiate *models.Non_arpeggiate_WOP) {
	// insertion point for fields commit

	non_arpeggiateDB.Name_Data.String = non_arpeggiate.Name
	non_arpeggiateDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromNon_arpeggiateWOP
func (non_arpeggiateDB *Non_arpeggiateDB) CopyBasicFieldsFromNon_arpeggiateWOP(non_arpeggiate *Non_arpeggiateWOP) {
	// insertion point for fields commit

	non_arpeggiateDB.Name_Data.String = non_arpeggiate.Name
	non_arpeggiateDB.Name_Data.Valid = true
}

// CopyBasicFieldsToNon_arpeggiate
func (non_arpeggiateDB *Non_arpeggiateDB) CopyBasicFieldsToNon_arpeggiate(non_arpeggiate *models.Non_arpeggiate) {
	// insertion point for checkout of basic fields (back repo to stage)
	non_arpeggiate.Name = non_arpeggiateDB.Name_Data.String
}

// CopyBasicFieldsToNon_arpeggiate_WOP
func (non_arpeggiateDB *Non_arpeggiateDB) CopyBasicFieldsToNon_arpeggiate_WOP(non_arpeggiate *models.Non_arpeggiate_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	non_arpeggiate.Name = non_arpeggiateDB.Name_Data.String
}

// CopyBasicFieldsToNon_arpeggiateWOP
func (non_arpeggiateDB *Non_arpeggiateDB) CopyBasicFieldsToNon_arpeggiateWOP(non_arpeggiate *Non_arpeggiateWOP) {
	non_arpeggiate.ID = int(non_arpeggiateDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	non_arpeggiate.Name = non_arpeggiateDB.Name_Data.String
}

// Backup generates a json file from a slice of all Non_arpeggiateDB instances in the backrepo
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Non_arpeggiateDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Non_arpeggiateDB, 0)
	for _, non_arpeggiateDB := range backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB {
		forBackup = append(forBackup, non_arpeggiateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Non_arpeggiate ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Non_arpeggiate file", err.Error())
	}
}

// Backup generates a json file from a slice of all Non_arpeggiateDB instances in the backrepo
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Non_arpeggiateDB, 0)
	for _, non_arpeggiateDB := range backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB {
		forBackup = append(forBackup, non_arpeggiateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Non_arpeggiate")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Non_arpeggiate_Fields, -1)
	for _, non_arpeggiateDB := range forBackup {

		var non_arpeggiateWOP Non_arpeggiateWOP
		non_arpeggiateDB.CopyBasicFieldsToNon_arpeggiateWOP(&non_arpeggiateWOP)

		row := sh.AddRow()
		row.WriteStruct(&non_arpeggiateWOP, -1)
	}
}

// RestoreXL from the "Non_arpeggiate" sheet all Non_arpeggiateDB instances
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoNon_arpeggiateid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Non_arpeggiate"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoNon_arpeggiate.rowVisitorNon_arpeggiate)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) rowVisitorNon_arpeggiate(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var non_arpeggiateWOP Non_arpeggiateWOP
		row.ReadStruct(&non_arpeggiateWOP)

		// add the unmarshalled struct to the stage
		non_arpeggiateDB := new(Non_arpeggiateDB)
		non_arpeggiateDB.CopyBasicFieldsFromNon_arpeggiateWOP(&non_arpeggiateWOP)

		non_arpeggiateDB_ID_atBackupTime := non_arpeggiateDB.ID
		non_arpeggiateDB.ID = 0
		query := backRepoNon_arpeggiate.db.Create(non_arpeggiateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[non_arpeggiateDB.ID] = non_arpeggiateDB
		BackRepoNon_arpeggiateid_atBckpTime_newID[non_arpeggiateDB_ID_atBackupTime] = non_arpeggiateDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Non_arpeggiateDB.json" in dirPath that stores an array
// of Non_arpeggiateDB and stores it in the database
// the map BackRepoNon_arpeggiateid_atBckpTime_newID is updated accordingly
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoNon_arpeggiateid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Non_arpeggiateDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Non_arpeggiate file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Non_arpeggiateDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Non_arpeggiateDBID_Non_arpeggiateDB
	for _, non_arpeggiateDB := range forRestore {

		non_arpeggiateDB_ID_atBackupTime := non_arpeggiateDB.ID
		non_arpeggiateDB.ID = 0
		query := backRepoNon_arpeggiate.db.Create(non_arpeggiateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[non_arpeggiateDB.ID] = non_arpeggiateDB
		BackRepoNon_arpeggiateid_atBckpTime_newID[non_arpeggiateDB_ID_atBackupTime] = non_arpeggiateDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Non_arpeggiate file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Non_arpeggiate>id_atBckpTime_newID
// to compute new index
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) RestorePhaseTwo() {

	for _, non_arpeggiateDB := range backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB {

		// next line of code is to avert unused variable compilation error
		_ = non_arpeggiateDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoNon_arpeggiate.db.Model(non_arpeggiateDB).Updates(*non_arpeggiateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoNon_arpeggiate.ResetReversePointers commits all staged instances of Non_arpeggiate to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, non_arpeggiate := range backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiatePtr {
		backRepoNon_arpeggiate.ResetReversePointersInstance(backRepo, idx, non_arpeggiate)
	}

	return
}

func (backRepoNon_arpeggiate *BackRepoNon_arpeggiateStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, non_arpeggiate *models.Non_arpeggiate) (Error error) {

	// fetch matching non_arpeggiateDB
	if non_arpeggiateDB, ok := backRepoNon_arpeggiate.Map_Non_arpeggiateDBID_Non_arpeggiateDB[idx]; ok {
		_ = non_arpeggiateDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoNon_arpeggiateid_atBckpTime_newID map[uint]uint
