// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Score_instrument_sql sql.NullBool
var dummy_Score_instrument_time time.Duration
var dummy_Score_instrument_sort sort.Float64Slice

// Score_instrumentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model score_instrumentAPI
type Score_instrumentAPI struct {
	gorm.Model

	models.Score_instrument_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Score_instrumentPointersEncoding Score_instrumentPointersEncoding
}

// Score_instrumentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Score_instrumentPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Score_instrumentDB describes a score_instrument in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model score_instrumentDB
type Score_instrumentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field score_instrumentDB.Name
	Name_Data sql.NullString

	// Declation for basic field score_instrumentDB.Instrument_name
	Instrument_name_Data sql.NullString

	// Declation for basic field score_instrumentDB.Instrument_abbreviation
	Instrument_abbreviation_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Score_instrumentPointersEncoding
}

// Score_instrumentDBs arrays score_instrumentDBs
// swagger:response score_instrumentDBsResponse
type Score_instrumentDBs []Score_instrumentDB

// Score_instrumentDBResponse provides response
// swagger:response score_instrumentDBResponse
type Score_instrumentDBResponse struct {
	Score_instrumentDB
}

// Score_instrumentWOP is a Score_instrument without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Score_instrumentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Instrument_name string `xlsx:"2"`

	Instrument_abbreviation string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Score_instrument_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Instrument_name",
	"Instrument_abbreviation",
}

type BackRepoScore_instrumentStruct struct {
	// stores Score_instrumentDB according to their gorm ID
	Map_Score_instrumentDBID_Score_instrumentDB map[uint]*Score_instrumentDB

	// stores Score_instrumentDB ID according to Score_instrument address
	Map_Score_instrumentPtr_Score_instrumentDBID map[*models.Score_instrument]uint

	// stores Score_instrument according to their gorm ID
	Map_Score_instrumentDBID_Score_instrumentPtr map[uint]*models.Score_instrument

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoScore_instrument *BackRepoScore_instrumentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoScore_instrument.stage
	return
}

func (backRepoScore_instrument *BackRepoScore_instrumentStruct) GetDB() *gorm.DB {
	return backRepoScore_instrument.db
}

// GetScore_instrumentDBFromScore_instrumentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) GetScore_instrumentDBFromScore_instrumentPtr(score_instrument *models.Score_instrument) (score_instrumentDB *Score_instrumentDB) {
	id := backRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument]
	score_instrumentDB = backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[id]
	return
}

// BackRepoScore_instrument.CommitPhaseOne commits all staged instances of Score_instrument to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for score_instrument := range stage.Score_instruments {
		backRepoScore_instrument.CommitPhaseOneInstance(score_instrument)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, score_instrument := range backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr {
		if _, ok := stage.Score_instruments[score_instrument]; !ok {
			backRepoScore_instrument.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoScore_instrument.CommitDeleteInstance commits deletion of Score_instrument to the BackRepo
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CommitDeleteInstance(id uint) (Error error) {

	score_instrument := backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr[id]

	// score_instrument is not staged anymore, remove score_instrumentDB
	score_instrumentDB := backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[id]
	query := backRepoScore_instrument.db.Unscoped().Delete(&score_instrumentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID, score_instrument)
	delete(backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr, id)
	delete(backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB, id)

	return
}

// BackRepoScore_instrument.CommitPhaseOneInstance commits score_instrument staged instances of Score_instrument to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CommitPhaseOneInstance(score_instrument *models.Score_instrument) (Error error) {

	// check if the score_instrument is not commited yet
	if _, ok := backRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument]; ok {
		return
	}

	// initiate score_instrument
	var score_instrumentDB Score_instrumentDB
	score_instrumentDB.CopyBasicFieldsFromScore_instrument(score_instrument)

	query := backRepoScore_instrument.db.Create(&score_instrumentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument] = score_instrumentDB.ID
	backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr[score_instrumentDB.ID] = score_instrument
	backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[score_instrumentDB.ID] = &score_instrumentDB

	return
}

// BackRepoScore_instrument.CommitPhaseTwo commits all staged instances of Score_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, score_instrument := range backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr {
		backRepoScore_instrument.CommitPhaseTwoInstance(backRepo, idx, score_instrument)
	}

	return
}

// BackRepoScore_instrument.CommitPhaseTwoInstance commits {{structname }} of models.Score_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, score_instrument *models.Score_instrument) (Error error) {

	// fetch matching score_instrumentDB
	if score_instrumentDB, ok := backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[idx]; ok {

		score_instrumentDB.CopyBasicFieldsFromScore_instrument(score_instrument)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoScore_instrument.db.Save(&score_instrumentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Score_instrument intance %s", score_instrument.Name))
		return err
	}

	return
}

// BackRepoScore_instrument.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CheckoutPhaseOne() (Error error) {

	score_instrumentDBArray := make([]Score_instrumentDB, 0)
	query := backRepoScore_instrument.db.Find(&score_instrumentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	score_instrumentInstancesToBeRemovedFromTheStage := make(map[*models.Score_instrument]any)
	for key, value := range backRepoScore_instrument.stage.Score_instruments {
		score_instrumentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, score_instrumentDB := range score_instrumentDBArray {
		backRepoScore_instrument.CheckoutPhaseOneInstance(&score_instrumentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		score_instrument, ok := backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr[score_instrumentDB.ID]
		if ok {
			delete(score_instrumentInstancesToBeRemovedFromTheStage, score_instrument)
		}
	}

	// remove from stage and back repo's 3 maps all score_instruments that are not in the checkout
	for score_instrument := range score_instrumentInstancesToBeRemovedFromTheStage {
		score_instrument.Unstage(backRepoScore_instrument.GetStage())

		// remove instance from the back repo 3 maps
		score_instrumentID := backRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument]
		delete(backRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID, score_instrument)
		delete(backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB, score_instrumentID)
		delete(backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr, score_instrumentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a score_instrumentDB that has been found in the DB, updates the backRepo and stages the
// models version of the score_instrumentDB
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CheckoutPhaseOneInstance(score_instrumentDB *Score_instrumentDB) (Error error) {

	score_instrument, ok := backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr[score_instrumentDB.ID]
	if !ok {
		score_instrument = new(models.Score_instrument)

		backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr[score_instrumentDB.ID] = score_instrument
		backRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument] = score_instrumentDB.ID

		// append model store with the new element
		score_instrument.Name = score_instrumentDB.Name_Data.String
		score_instrument.Stage(backRepoScore_instrument.GetStage())
	}
	score_instrumentDB.CopyBasicFieldsToScore_instrument(score_instrument)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	score_instrument.Stage(backRepoScore_instrument.GetStage())

	// preserve pointer to score_instrumentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Score_instrumentDBID_Score_instrumentDB)[score_instrumentDB hold variable pointers
	score_instrumentDB_Data := *score_instrumentDB
	preservedPtrToScore_instrument := &score_instrumentDB_Data
	backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[score_instrumentDB.ID] = preservedPtrToScore_instrument

	return
}

// BackRepoScore_instrument.CheckoutPhaseTwo Checkouts all staged instances of Score_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, score_instrumentDB := range backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB {
		backRepoScore_instrument.CheckoutPhaseTwoInstance(backRepo, score_instrumentDB)
	}
	return
}

// BackRepoScore_instrument.CheckoutPhaseTwoInstance Checkouts staged instances of Score_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, score_instrumentDB *Score_instrumentDB) (Error error) {

	score_instrument := backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr[score_instrumentDB.ID]

	score_instrumentDB.DecodePointers(backRepo, score_instrument)

	return
}

func (score_instrumentDB *Score_instrumentDB) DecodePointers(backRepo *BackRepoStruct, score_instrument *models.Score_instrument) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitScore_instrument allows commit of a single score_instrument (if already staged)
func (backRepo *BackRepoStruct) CommitScore_instrument(score_instrument *models.Score_instrument) {
	backRepo.BackRepoScore_instrument.CommitPhaseOneInstance(score_instrument)
	if id, ok := backRepo.BackRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument]; ok {
		backRepo.BackRepoScore_instrument.CommitPhaseTwoInstance(backRepo, id, score_instrument)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitScore_instrument allows checkout of a single score_instrument (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutScore_instrument(score_instrument *models.Score_instrument) {
	// check if the score_instrument is staged
	if _, ok := backRepo.BackRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument]; ok {

		if id, ok := backRepo.BackRepoScore_instrument.Map_Score_instrumentPtr_Score_instrumentDBID[score_instrument]; ok {
			var score_instrumentDB Score_instrumentDB
			score_instrumentDB.ID = id

			if err := backRepo.BackRepoScore_instrument.db.First(&score_instrumentDB, id).Error; err != nil {
				log.Fatalln("CheckoutScore_instrument : Problem with getting object with id:", id)
			}
			backRepo.BackRepoScore_instrument.CheckoutPhaseOneInstance(&score_instrumentDB)
			backRepo.BackRepoScore_instrument.CheckoutPhaseTwoInstance(backRepo, &score_instrumentDB)
		}
	}
}

// CopyBasicFieldsFromScore_instrument
func (score_instrumentDB *Score_instrumentDB) CopyBasicFieldsFromScore_instrument(score_instrument *models.Score_instrument) {
	// insertion point for fields commit

	score_instrumentDB.Name_Data.String = score_instrument.Name
	score_instrumentDB.Name_Data.Valid = true

	score_instrumentDB.Instrument_name_Data.String = score_instrument.Instrument_name
	score_instrumentDB.Instrument_name_Data.Valid = true

	score_instrumentDB.Instrument_abbreviation_Data.String = score_instrument.Instrument_abbreviation
	score_instrumentDB.Instrument_abbreviation_Data.Valid = true
}

// CopyBasicFieldsFromScore_instrument_WOP
func (score_instrumentDB *Score_instrumentDB) CopyBasicFieldsFromScore_instrument_WOP(score_instrument *models.Score_instrument_WOP) {
	// insertion point for fields commit

	score_instrumentDB.Name_Data.String = score_instrument.Name
	score_instrumentDB.Name_Data.Valid = true

	score_instrumentDB.Instrument_name_Data.String = score_instrument.Instrument_name
	score_instrumentDB.Instrument_name_Data.Valid = true

	score_instrumentDB.Instrument_abbreviation_Data.String = score_instrument.Instrument_abbreviation
	score_instrumentDB.Instrument_abbreviation_Data.Valid = true
}

// CopyBasicFieldsFromScore_instrumentWOP
func (score_instrumentDB *Score_instrumentDB) CopyBasicFieldsFromScore_instrumentWOP(score_instrument *Score_instrumentWOP) {
	// insertion point for fields commit

	score_instrumentDB.Name_Data.String = score_instrument.Name
	score_instrumentDB.Name_Data.Valid = true

	score_instrumentDB.Instrument_name_Data.String = score_instrument.Instrument_name
	score_instrumentDB.Instrument_name_Data.Valid = true

	score_instrumentDB.Instrument_abbreviation_Data.String = score_instrument.Instrument_abbreviation
	score_instrumentDB.Instrument_abbreviation_Data.Valid = true
}

// CopyBasicFieldsToScore_instrument
func (score_instrumentDB *Score_instrumentDB) CopyBasicFieldsToScore_instrument(score_instrument *models.Score_instrument) {
	// insertion point for checkout of basic fields (back repo to stage)
	score_instrument.Name = score_instrumentDB.Name_Data.String
	score_instrument.Instrument_name = score_instrumentDB.Instrument_name_Data.String
	score_instrument.Instrument_abbreviation = score_instrumentDB.Instrument_abbreviation_Data.String
}

// CopyBasicFieldsToScore_instrument_WOP
func (score_instrumentDB *Score_instrumentDB) CopyBasicFieldsToScore_instrument_WOP(score_instrument *models.Score_instrument_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	score_instrument.Name = score_instrumentDB.Name_Data.String
	score_instrument.Instrument_name = score_instrumentDB.Instrument_name_Data.String
	score_instrument.Instrument_abbreviation = score_instrumentDB.Instrument_abbreviation_Data.String
}

// CopyBasicFieldsToScore_instrumentWOP
func (score_instrumentDB *Score_instrumentDB) CopyBasicFieldsToScore_instrumentWOP(score_instrument *Score_instrumentWOP) {
	score_instrument.ID = int(score_instrumentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	score_instrument.Name = score_instrumentDB.Name_Data.String
	score_instrument.Instrument_name = score_instrumentDB.Instrument_name_Data.String
	score_instrument.Instrument_abbreviation = score_instrumentDB.Instrument_abbreviation_Data.String
}

// Backup generates a json file from a slice of all Score_instrumentDB instances in the backrepo
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Score_instrumentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Score_instrumentDB, 0)
	for _, score_instrumentDB := range backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB {
		forBackup = append(forBackup, score_instrumentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Score_instrument ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Score_instrument file", err.Error())
	}
}

// Backup generates a json file from a slice of all Score_instrumentDB instances in the backrepo
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Score_instrumentDB, 0)
	for _, score_instrumentDB := range backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB {
		forBackup = append(forBackup, score_instrumentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Score_instrument")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Score_instrument_Fields, -1)
	for _, score_instrumentDB := range forBackup {

		var score_instrumentWOP Score_instrumentWOP
		score_instrumentDB.CopyBasicFieldsToScore_instrumentWOP(&score_instrumentWOP)

		row := sh.AddRow()
		row.WriteStruct(&score_instrumentWOP, -1)
	}
}

// RestoreXL from the "Score_instrument" sheet all Score_instrumentDB instances
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoScore_instrumentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Score_instrument"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoScore_instrument.rowVisitorScore_instrument)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoScore_instrument *BackRepoScore_instrumentStruct) rowVisitorScore_instrument(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var score_instrumentWOP Score_instrumentWOP
		row.ReadStruct(&score_instrumentWOP)

		// add the unmarshalled struct to the stage
		score_instrumentDB := new(Score_instrumentDB)
		score_instrumentDB.CopyBasicFieldsFromScore_instrumentWOP(&score_instrumentWOP)

		score_instrumentDB_ID_atBackupTime := score_instrumentDB.ID
		score_instrumentDB.ID = 0
		query := backRepoScore_instrument.db.Create(score_instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[score_instrumentDB.ID] = score_instrumentDB
		BackRepoScore_instrumentid_atBckpTime_newID[score_instrumentDB_ID_atBackupTime] = score_instrumentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Score_instrumentDB.json" in dirPath that stores an array
// of Score_instrumentDB and stores it in the database
// the map BackRepoScore_instrumentid_atBckpTime_newID is updated accordingly
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoScore_instrumentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Score_instrumentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Score_instrument file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Score_instrumentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Score_instrumentDBID_Score_instrumentDB
	for _, score_instrumentDB := range forRestore {

		score_instrumentDB_ID_atBackupTime := score_instrumentDB.ID
		score_instrumentDB.ID = 0
		query := backRepoScore_instrument.db.Create(score_instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[score_instrumentDB.ID] = score_instrumentDB
		BackRepoScore_instrumentid_atBckpTime_newID[score_instrumentDB_ID_atBackupTime] = score_instrumentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Score_instrument file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Score_instrument>id_atBckpTime_newID
// to compute new index
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) RestorePhaseTwo() {

	for _, score_instrumentDB := range backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB {

		// next line of code is to avert unused variable compilation error
		_ = score_instrumentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoScore_instrument.db.Model(score_instrumentDB).Updates(*score_instrumentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoScore_instrument.ResetReversePointers commits all staged instances of Score_instrument to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScore_instrument *BackRepoScore_instrumentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, score_instrument := range backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentPtr {
		backRepoScore_instrument.ResetReversePointersInstance(backRepo, idx, score_instrument)
	}

	return
}

func (backRepoScore_instrument *BackRepoScore_instrumentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, score_instrument *models.Score_instrument) (Error error) {

	// fetch matching score_instrumentDB
	if score_instrumentDB, ok := backRepoScore_instrument.Map_Score_instrumentDBID_Score_instrumentDB[idx]; ok {
		_ = score_instrumentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoScore_instrumentid_atBckpTime_newID map[uint]uint
