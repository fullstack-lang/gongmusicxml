// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Empty_line_sql sql.NullBool
var dummy_Empty_line_time time.Duration
var dummy_Empty_line_sort sort.Float64Slice

// Empty_lineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model empty_lineAPI
type Empty_lineAPI struct {
	gorm.Model

	models.Empty_line_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Empty_linePointersEncoding Empty_linePointersEncoding
}

// Empty_linePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Empty_linePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Empty_lineDB describes a empty_line in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model empty_lineDB
type Empty_lineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field empty_lineDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Empty_linePointersEncoding
}

// Empty_lineDBs arrays empty_lineDBs
// swagger:response empty_lineDBsResponse
type Empty_lineDBs []Empty_lineDB

// Empty_lineDBResponse provides response
// swagger:response empty_lineDBResponse
type Empty_lineDBResponse struct {
	Empty_lineDB
}

// Empty_lineWOP is a Empty_line without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Empty_lineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Empty_line_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEmpty_lineStruct struct {
	// stores Empty_lineDB according to their gorm ID
	Map_Empty_lineDBID_Empty_lineDB map[uint]*Empty_lineDB

	// stores Empty_lineDB ID according to Empty_line address
	Map_Empty_linePtr_Empty_lineDBID map[*models.Empty_line]uint

	// stores Empty_line according to their gorm ID
	Map_Empty_lineDBID_Empty_linePtr map[uint]*models.Empty_line

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEmpty_line *BackRepoEmpty_lineStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEmpty_line.stage
	return
}

func (backRepoEmpty_line *BackRepoEmpty_lineStruct) GetDB() *gorm.DB {
	return backRepoEmpty_line.db
}

// GetEmpty_lineDBFromEmpty_linePtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) GetEmpty_lineDBFromEmpty_linePtr(empty_line *models.Empty_line) (empty_lineDB *Empty_lineDB) {
	id := backRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line]
	empty_lineDB = backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[id]
	return
}

// BackRepoEmpty_line.CommitPhaseOne commits all staged instances of Empty_line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for empty_line := range stage.Empty_lines {
		backRepoEmpty_line.CommitPhaseOneInstance(empty_line)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, empty_line := range backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr {
		if _, ok := stage.Empty_lines[empty_line]; !ok {
			backRepoEmpty_line.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmpty_line.CommitDeleteInstance commits deletion of Empty_line to the BackRepo
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CommitDeleteInstance(id uint) (Error error) {

	empty_line := backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr[id]

	// empty_line is not staged anymore, remove empty_lineDB
	empty_lineDB := backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[id]
	query := backRepoEmpty_line.db.Unscoped().Delete(&empty_lineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID, empty_line)
	delete(backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr, id)
	delete(backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB, id)

	return
}

// BackRepoEmpty_line.CommitPhaseOneInstance commits empty_line staged instances of Empty_line to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CommitPhaseOneInstance(empty_line *models.Empty_line) (Error error) {

	// check if the empty_line is not commited yet
	if _, ok := backRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line]; ok {
		return
	}

	// initiate empty_line
	var empty_lineDB Empty_lineDB
	empty_lineDB.CopyBasicFieldsFromEmpty_line(empty_line)

	query := backRepoEmpty_line.db.Create(&empty_lineDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line] = empty_lineDB.ID
	backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr[empty_lineDB.ID] = empty_line
	backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[empty_lineDB.ID] = &empty_lineDB

	return
}

// BackRepoEmpty_line.CommitPhaseTwo commits all staged instances of Empty_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_line := range backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr {
		backRepoEmpty_line.CommitPhaseTwoInstance(backRepo, idx, empty_line)
	}

	return
}

// BackRepoEmpty_line.CommitPhaseTwoInstance commits {{structname }} of models.Empty_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, empty_line *models.Empty_line) (Error error) {

	// fetch matching empty_lineDB
	if empty_lineDB, ok := backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[idx]; ok {

		empty_lineDB.CopyBasicFieldsFromEmpty_line(empty_line)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEmpty_line.db.Save(&empty_lineDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Empty_line intance %s", empty_line.Name))
		return err
	}

	return
}

// BackRepoEmpty_line.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CheckoutPhaseOne() (Error error) {

	empty_lineDBArray := make([]Empty_lineDB, 0)
	query := backRepoEmpty_line.db.Find(&empty_lineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	empty_lineInstancesToBeRemovedFromTheStage := make(map[*models.Empty_line]any)
	for key, value := range backRepoEmpty_line.stage.Empty_lines {
		empty_lineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, empty_lineDB := range empty_lineDBArray {
		backRepoEmpty_line.CheckoutPhaseOneInstance(&empty_lineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		empty_line, ok := backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr[empty_lineDB.ID]
		if ok {
			delete(empty_lineInstancesToBeRemovedFromTheStage, empty_line)
		}
	}

	// remove from stage and back repo's 3 maps all empty_lines that are not in the checkout
	for empty_line := range empty_lineInstancesToBeRemovedFromTheStage {
		empty_line.Unstage(backRepoEmpty_line.GetStage())

		// remove instance from the back repo 3 maps
		empty_lineID := backRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line]
		delete(backRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID, empty_line)
		delete(backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB, empty_lineID)
		delete(backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr, empty_lineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a empty_lineDB that has been found in the DB, updates the backRepo and stages the
// models version of the empty_lineDB
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CheckoutPhaseOneInstance(empty_lineDB *Empty_lineDB) (Error error) {

	empty_line, ok := backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr[empty_lineDB.ID]
	if !ok {
		empty_line = new(models.Empty_line)

		backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr[empty_lineDB.ID] = empty_line
		backRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line] = empty_lineDB.ID

		// append model store with the new element
		empty_line.Name = empty_lineDB.Name_Data.String
		empty_line.Stage(backRepoEmpty_line.GetStage())
	}
	empty_lineDB.CopyBasicFieldsToEmpty_line(empty_line)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	empty_line.Stage(backRepoEmpty_line.GetStage())

	// preserve pointer to empty_lineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Empty_lineDBID_Empty_lineDB)[empty_lineDB hold variable pointers
	empty_lineDB_Data := *empty_lineDB
	preservedPtrToEmpty_line := &empty_lineDB_Data
	backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[empty_lineDB.ID] = preservedPtrToEmpty_line

	return
}

// BackRepoEmpty_line.CheckoutPhaseTwo Checkouts all staged instances of Empty_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, empty_lineDB := range backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB {
		backRepoEmpty_line.CheckoutPhaseTwoInstance(backRepo, empty_lineDB)
	}
	return
}

// BackRepoEmpty_line.CheckoutPhaseTwoInstance Checkouts staged instances of Empty_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, empty_lineDB *Empty_lineDB) (Error error) {

	empty_line := backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr[empty_lineDB.ID]

	empty_lineDB.DecodePointers(backRepo, empty_line)

	return
}

func (empty_lineDB *Empty_lineDB) DecodePointers(backRepo *BackRepoStruct, empty_line *models.Empty_line) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmpty_line allows commit of a single empty_line (if already staged)
func (backRepo *BackRepoStruct) CommitEmpty_line(empty_line *models.Empty_line) {
	backRepo.BackRepoEmpty_line.CommitPhaseOneInstance(empty_line)
	if id, ok := backRepo.BackRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line]; ok {
		backRepo.BackRepoEmpty_line.CommitPhaseTwoInstance(backRepo, id, empty_line)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmpty_line allows checkout of a single empty_line (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmpty_line(empty_line *models.Empty_line) {
	// check if the empty_line is staged
	if _, ok := backRepo.BackRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line]; ok {

		if id, ok := backRepo.BackRepoEmpty_line.Map_Empty_linePtr_Empty_lineDBID[empty_line]; ok {
			var empty_lineDB Empty_lineDB
			empty_lineDB.ID = id

			if err := backRepo.BackRepoEmpty_line.db.First(&empty_lineDB, id).Error; err != nil {
				log.Fatalln("CheckoutEmpty_line : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmpty_line.CheckoutPhaseOneInstance(&empty_lineDB)
			backRepo.BackRepoEmpty_line.CheckoutPhaseTwoInstance(backRepo, &empty_lineDB)
		}
	}
}

// CopyBasicFieldsFromEmpty_line
func (empty_lineDB *Empty_lineDB) CopyBasicFieldsFromEmpty_line(empty_line *models.Empty_line) {
	// insertion point for fields commit

	empty_lineDB.Name_Data.String = empty_line.Name
	empty_lineDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_line_WOP
func (empty_lineDB *Empty_lineDB) CopyBasicFieldsFromEmpty_line_WOP(empty_line *models.Empty_line_WOP) {
	// insertion point for fields commit

	empty_lineDB.Name_Data.String = empty_line.Name
	empty_lineDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_lineWOP
func (empty_lineDB *Empty_lineDB) CopyBasicFieldsFromEmpty_lineWOP(empty_line *Empty_lineWOP) {
	// insertion point for fields commit

	empty_lineDB.Name_Data.String = empty_line.Name
	empty_lineDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEmpty_line
func (empty_lineDB *Empty_lineDB) CopyBasicFieldsToEmpty_line(empty_line *models.Empty_line) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_line.Name = empty_lineDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_line_WOP
func (empty_lineDB *Empty_lineDB) CopyBasicFieldsToEmpty_line_WOP(empty_line *models.Empty_line_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_line.Name = empty_lineDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_lineWOP
func (empty_lineDB *Empty_lineDB) CopyBasicFieldsToEmpty_lineWOP(empty_line *Empty_lineWOP) {
	empty_line.ID = int(empty_lineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	empty_line.Name = empty_lineDB.Name_Data.String
}

// Backup generates a json file from a slice of all Empty_lineDB instances in the backrepo
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Empty_lineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_lineDB, 0)
	for _, empty_lineDB := range backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB {
		forBackup = append(forBackup, empty_lineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Empty_line ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Empty_line file", err.Error())
	}
}

// Backup generates a json file from a slice of all Empty_lineDB instances in the backrepo
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_lineDB, 0)
	for _, empty_lineDB := range backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB {
		forBackup = append(forBackup, empty_lineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Empty_line")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Empty_line_Fields, -1)
	for _, empty_lineDB := range forBackup {

		var empty_lineWOP Empty_lineWOP
		empty_lineDB.CopyBasicFieldsToEmpty_lineWOP(&empty_lineWOP)

		row := sh.AddRow()
		row.WriteStruct(&empty_lineWOP, -1)
	}
}

// RestoreXL from the "Empty_line" sheet all Empty_lineDB instances
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmpty_lineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Empty_line"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmpty_line.rowVisitorEmpty_line)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmpty_line *BackRepoEmpty_lineStruct) rowVisitorEmpty_line(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var empty_lineWOP Empty_lineWOP
		row.ReadStruct(&empty_lineWOP)

		// add the unmarshalled struct to the stage
		empty_lineDB := new(Empty_lineDB)
		empty_lineDB.CopyBasicFieldsFromEmpty_lineWOP(&empty_lineWOP)

		empty_lineDB_ID_atBackupTime := empty_lineDB.ID
		empty_lineDB.ID = 0
		query := backRepoEmpty_line.db.Create(empty_lineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[empty_lineDB.ID] = empty_lineDB
		BackRepoEmpty_lineid_atBckpTime_newID[empty_lineDB_ID_atBackupTime] = empty_lineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Empty_lineDB.json" in dirPath that stores an array
// of Empty_lineDB and stores it in the database
// the map BackRepoEmpty_lineid_atBckpTime_newID is updated accordingly
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmpty_lineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Empty_lineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Empty_line file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Empty_lineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Empty_lineDBID_Empty_lineDB
	for _, empty_lineDB := range forRestore {

		empty_lineDB_ID_atBackupTime := empty_lineDB.ID
		empty_lineDB.ID = 0
		query := backRepoEmpty_line.db.Create(empty_lineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[empty_lineDB.ID] = empty_lineDB
		BackRepoEmpty_lineid_atBckpTime_newID[empty_lineDB_ID_atBackupTime] = empty_lineDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Empty_line file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Empty_line>id_atBckpTime_newID
// to compute new index
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) RestorePhaseTwo() {

	for _, empty_lineDB := range backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB {

		// next line of code is to avert unused variable compilation error
		_ = empty_lineDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEmpty_line.db.Model(empty_lineDB).Updates(*empty_lineDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEmpty_line.ResetReversePointers commits all staged instances of Empty_line to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_line *BackRepoEmpty_lineStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_line := range backRepoEmpty_line.Map_Empty_lineDBID_Empty_linePtr {
		backRepoEmpty_line.ResetReversePointersInstance(backRepo, idx, empty_line)
	}

	return
}

func (backRepoEmpty_line *BackRepoEmpty_lineStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, empty_line *models.Empty_line) (Error error) {

	// fetch matching empty_lineDB
	if empty_lineDB, ok := backRepoEmpty_line.Map_Empty_lineDBID_Empty_lineDB[idx]; ok {
		_ = empty_lineDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmpty_lineid_atBckpTime_newID map[uint]uint
