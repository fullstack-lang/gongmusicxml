// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Beater_sql sql.NullBool
var dummy_Beater_time time.Duration
var dummy_Beater_sort sort.Float64Slice

// BeaterAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model beaterAPI
type BeaterAPI struct {
	gorm.Model

	models.Beater_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BeaterPointersEncoding BeaterPointersEncoding
}

// BeaterPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BeaterPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// BeaterDB describes a beater in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model beaterDB
type BeaterDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field beaterDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BeaterPointersEncoding
}

// BeaterDBs arrays beaterDBs
// swagger:response beaterDBsResponse
type BeaterDBs []BeaterDB

// BeaterDBResponse provides response
// swagger:response beaterDBResponse
type BeaterDBResponse struct {
	BeaterDB
}

// BeaterWOP is a Beater without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BeaterWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Beater_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBeaterStruct struct {
	// stores BeaterDB according to their gorm ID
	Map_BeaterDBID_BeaterDB map[uint]*BeaterDB

	// stores BeaterDB ID according to Beater address
	Map_BeaterPtr_BeaterDBID map[*models.Beater]uint

	// stores Beater according to their gorm ID
	Map_BeaterDBID_BeaterPtr map[uint]*models.Beater

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBeater *BackRepoBeaterStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBeater.stage
	return
}

func (backRepoBeater *BackRepoBeaterStruct) GetDB() *gorm.DB {
	return backRepoBeater.db
}

// GetBeaterDBFromBeaterPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBeater *BackRepoBeaterStruct) GetBeaterDBFromBeaterPtr(beater *models.Beater) (beaterDB *BeaterDB) {
	id := backRepoBeater.Map_BeaterPtr_BeaterDBID[beater]
	beaterDB = backRepoBeater.Map_BeaterDBID_BeaterDB[id]
	return
}

// BackRepoBeater.CommitPhaseOne commits all staged instances of Beater to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBeater *BackRepoBeaterStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for beater := range stage.Beaters {
		backRepoBeater.CommitPhaseOneInstance(beater)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, beater := range backRepoBeater.Map_BeaterDBID_BeaterPtr {
		if _, ok := stage.Beaters[beater]; !ok {
			backRepoBeater.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBeater.CommitDeleteInstance commits deletion of Beater to the BackRepo
func (backRepoBeater *BackRepoBeaterStruct) CommitDeleteInstance(id uint) (Error error) {

	beater := backRepoBeater.Map_BeaterDBID_BeaterPtr[id]

	// beater is not staged anymore, remove beaterDB
	beaterDB := backRepoBeater.Map_BeaterDBID_BeaterDB[id]
	query := backRepoBeater.db.Unscoped().Delete(&beaterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBeater.Map_BeaterPtr_BeaterDBID, beater)
	delete(backRepoBeater.Map_BeaterDBID_BeaterPtr, id)
	delete(backRepoBeater.Map_BeaterDBID_BeaterDB, id)

	return
}

// BackRepoBeater.CommitPhaseOneInstance commits beater staged instances of Beater to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBeater *BackRepoBeaterStruct) CommitPhaseOneInstance(beater *models.Beater) (Error error) {

	// check if the beater is not commited yet
	if _, ok := backRepoBeater.Map_BeaterPtr_BeaterDBID[beater]; ok {
		return
	}

	// initiate beater
	var beaterDB BeaterDB
	beaterDB.CopyBasicFieldsFromBeater(beater)

	query := backRepoBeater.db.Create(&beaterDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBeater.Map_BeaterPtr_BeaterDBID[beater] = beaterDB.ID
	backRepoBeater.Map_BeaterDBID_BeaterPtr[beaterDB.ID] = beater
	backRepoBeater.Map_BeaterDBID_BeaterDB[beaterDB.ID] = &beaterDB

	return
}

// BackRepoBeater.CommitPhaseTwo commits all staged instances of Beater to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeater *BackRepoBeaterStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, beater := range backRepoBeater.Map_BeaterDBID_BeaterPtr {
		backRepoBeater.CommitPhaseTwoInstance(backRepo, idx, beater)
	}

	return
}

// BackRepoBeater.CommitPhaseTwoInstance commits {{structname }} of models.Beater to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeater *BackRepoBeaterStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, beater *models.Beater) (Error error) {

	// fetch matching beaterDB
	if beaterDB, ok := backRepoBeater.Map_BeaterDBID_BeaterDB[idx]; ok {

		beaterDB.CopyBasicFieldsFromBeater(beater)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBeater.db.Save(&beaterDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Beater intance %s", beater.Name))
		return err
	}

	return
}

// BackRepoBeater.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBeater *BackRepoBeaterStruct) CheckoutPhaseOne() (Error error) {

	beaterDBArray := make([]BeaterDB, 0)
	query := backRepoBeater.db.Find(&beaterDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	beaterInstancesToBeRemovedFromTheStage := make(map[*models.Beater]any)
	for key, value := range backRepoBeater.stage.Beaters {
		beaterInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, beaterDB := range beaterDBArray {
		backRepoBeater.CheckoutPhaseOneInstance(&beaterDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		beater, ok := backRepoBeater.Map_BeaterDBID_BeaterPtr[beaterDB.ID]
		if ok {
			delete(beaterInstancesToBeRemovedFromTheStage, beater)
		}
	}

	// remove from stage and back repo's 3 maps all beaters that are not in the checkout
	for beater := range beaterInstancesToBeRemovedFromTheStage {
		beater.Unstage(backRepoBeater.GetStage())

		// remove instance from the back repo 3 maps
		beaterID := backRepoBeater.Map_BeaterPtr_BeaterDBID[beater]
		delete(backRepoBeater.Map_BeaterPtr_BeaterDBID, beater)
		delete(backRepoBeater.Map_BeaterDBID_BeaterDB, beaterID)
		delete(backRepoBeater.Map_BeaterDBID_BeaterPtr, beaterID)
	}

	return
}

// CheckoutPhaseOneInstance takes a beaterDB that has been found in the DB, updates the backRepo and stages the
// models version of the beaterDB
func (backRepoBeater *BackRepoBeaterStruct) CheckoutPhaseOneInstance(beaterDB *BeaterDB) (Error error) {

	beater, ok := backRepoBeater.Map_BeaterDBID_BeaterPtr[beaterDB.ID]
	if !ok {
		beater = new(models.Beater)

		backRepoBeater.Map_BeaterDBID_BeaterPtr[beaterDB.ID] = beater
		backRepoBeater.Map_BeaterPtr_BeaterDBID[beater] = beaterDB.ID

		// append model store with the new element
		beater.Name = beaterDB.Name_Data.String
		beater.Stage(backRepoBeater.GetStage())
	}
	beaterDB.CopyBasicFieldsToBeater(beater)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	beater.Stage(backRepoBeater.GetStage())

	// preserve pointer to beaterDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BeaterDBID_BeaterDB)[beaterDB hold variable pointers
	beaterDB_Data := *beaterDB
	preservedPtrToBeater := &beaterDB_Data
	backRepoBeater.Map_BeaterDBID_BeaterDB[beaterDB.ID] = preservedPtrToBeater

	return
}

// BackRepoBeater.CheckoutPhaseTwo Checkouts all staged instances of Beater to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeater *BackRepoBeaterStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, beaterDB := range backRepoBeater.Map_BeaterDBID_BeaterDB {
		backRepoBeater.CheckoutPhaseTwoInstance(backRepo, beaterDB)
	}
	return
}

// BackRepoBeater.CheckoutPhaseTwoInstance Checkouts staged instances of Beater to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeater *BackRepoBeaterStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, beaterDB *BeaterDB) (Error error) {

	beater := backRepoBeater.Map_BeaterDBID_BeaterPtr[beaterDB.ID]

	beaterDB.DecodePointers(backRepo, beater)

	return
}

func (beaterDB *BeaterDB) DecodePointers(backRepo *BackRepoStruct, beater *models.Beater) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBeater allows commit of a single beater (if already staged)
func (backRepo *BackRepoStruct) CommitBeater(beater *models.Beater) {
	backRepo.BackRepoBeater.CommitPhaseOneInstance(beater)
	if id, ok := backRepo.BackRepoBeater.Map_BeaterPtr_BeaterDBID[beater]; ok {
		backRepo.BackRepoBeater.CommitPhaseTwoInstance(backRepo, id, beater)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBeater allows checkout of a single beater (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBeater(beater *models.Beater) {
	// check if the beater is staged
	if _, ok := backRepo.BackRepoBeater.Map_BeaterPtr_BeaterDBID[beater]; ok {

		if id, ok := backRepo.BackRepoBeater.Map_BeaterPtr_BeaterDBID[beater]; ok {
			var beaterDB BeaterDB
			beaterDB.ID = id

			if err := backRepo.BackRepoBeater.db.First(&beaterDB, id).Error; err != nil {
				log.Fatalln("CheckoutBeater : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBeater.CheckoutPhaseOneInstance(&beaterDB)
			backRepo.BackRepoBeater.CheckoutPhaseTwoInstance(backRepo, &beaterDB)
		}
	}
}

// CopyBasicFieldsFromBeater
func (beaterDB *BeaterDB) CopyBasicFieldsFromBeater(beater *models.Beater) {
	// insertion point for fields commit

	beaterDB.Name_Data.String = beater.Name
	beaterDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBeater_WOP
func (beaterDB *BeaterDB) CopyBasicFieldsFromBeater_WOP(beater *models.Beater_WOP) {
	// insertion point for fields commit

	beaterDB.Name_Data.String = beater.Name
	beaterDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBeaterWOP
func (beaterDB *BeaterDB) CopyBasicFieldsFromBeaterWOP(beater *BeaterWOP) {
	// insertion point for fields commit

	beaterDB.Name_Data.String = beater.Name
	beaterDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBeater
func (beaterDB *BeaterDB) CopyBasicFieldsToBeater(beater *models.Beater) {
	// insertion point for checkout of basic fields (back repo to stage)
	beater.Name = beaterDB.Name_Data.String
}

// CopyBasicFieldsToBeater_WOP
func (beaterDB *BeaterDB) CopyBasicFieldsToBeater_WOP(beater *models.Beater_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	beater.Name = beaterDB.Name_Data.String
}

// CopyBasicFieldsToBeaterWOP
func (beaterDB *BeaterDB) CopyBasicFieldsToBeaterWOP(beater *BeaterWOP) {
	beater.ID = int(beaterDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	beater.Name = beaterDB.Name_Data.String
}

// Backup generates a json file from a slice of all BeaterDB instances in the backrepo
func (backRepoBeater *BackRepoBeaterStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BeaterDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BeaterDB, 0)
	for _, beaterDB := range backRepoBeater.Map_BeaterDBID_BeaterDB {
		forBackup = append(forBackup, beaterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Beater ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Beater file", err.Error())
	}
}

// Backup generates a json file from a slice of all BeaterDB instances in the backrepo
func (backRepoBeater *BackRepoBeaterStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BeaterDB, 0)
	for _, beaterDB := range backRepoBeater.Map_BeaterDBID_BeaterDB {
		forBackup = append(forBackup, beaterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Beater")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Beater_Fields, -1)
	for _, beaterDB := range forBackup {

		var beaterWOP BeaterWOP
		beaterDB.CopyBasicFieldsToBeaterWOP(&beaterWOP)

		row := sh.AddRow()
		row.WriteStruct(&beaterWOP, -1)
	}
}

// RestoreXL from the "Beater" sheet all BeaterDB instances
func (backRepoBeater *BackRepoBeaterStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBeaterid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Beater"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBeater.rowVisitorBeater)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBeater *BackRepoBeaterStruct) rowVisitorBeater(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var beaterWOP BeaterWOP
		row.ReadStruct(&beaterWOP)

		// add the unmarshalled struct to the stage
		beaterDB := new(BeaterDB)
		beaterDB.CopyBasicFieldsFromBeaterWOP(&beaterWOP)

		beaterDB_ID_atBackupTime := beaterDB.ID
		beaterDB.ID = 0
		query := backRepoBeater.db.Create(beaterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBeater.Map_BeaterDBID_BeaterDB[beaterDB.ID] = beaterDB
		BackRepoBeaterid_atBckpTime_newID[beaterDB_ID_atBackupTime] = beaterDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BeaterDB.json" in dirPath that stores an array
// of BeaterDB and stores it in the database
// the map BackRepoBeaterid_atBckpTime_newID is updated accordingly
func (backRepoBeater *BackRepoBeaterStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBeaterid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BeaterDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Beater file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BeaterDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BeaterDBID_BeaterDB
	for _, beaterDB := range forRestore {

		beaterDB_ID_atBackupTime := beaterDB.ID
		beaterDB.ID = 0
		query := backRepoBeater.db.Create(beaterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBeater.Map_BeaterDBID_BeaterDB[beaterDB.ID] = beaterDB
		BackRepoBeaterid_atBckpTime_newID[beaterDB_ID_atBackupTime] = beaterDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Beater file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Beater>id_atBckpTime_newID
// to compute new index
func (backRepoBeater *BackRepoBeaterStruct) RestorePhaseTwo() {

	for _, beaterDB := range backRepoBeater.Map_BeaterDBID_BeaterDB {

		// next line of code is to avert unused variable compilation error
		_ = beaterDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBeater.db.Model(beaterDB).Updates(*beaterDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBeater.ResetReversePointers commits all staged instances of Beater to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBeater *BackRepoBeaterStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, beater := range backRepoBeater.Map_BeaterDBID_BeaterPtr {
		backRepoBeater.ResetReversePointersInstance(backRepo, idx, beater)
	}

	return
}

func (backRepoBeater *BackRepoBeaterStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, beater *models.Beater) (Error error) {

	// fetch matching beaterDB
	if beaterDB, ok := backRepoBeater.Map_BeaterDBID_BeaterDB[idx]; ok {
		_ = beaterDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBeaterid_atBckpTime_newID map[uint]uint
