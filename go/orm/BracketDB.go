// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bracket_sql sql.NullBool
var dummy_Bracket_time time.Duration
var dummy_Bracket_sort sort.Float64Slice

// BracketAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bracketAPI
type BracketAPI struct {
	gorm.Model

	models.Bracket_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BracketPointersEncoding BracketPointersEncoding
}

// BracketPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BracketPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// BracketDB describes a bracket in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bracketDB
type BracketDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bracketDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BracketPointersEncoding
}

// BracketDBs arrays bracketDBs
// swagger:response bracketDBsResponse
type BracketDBs []BracketDB

// BracketDBResponse provides response
// swagger:response bracketDBResponse
type BracketDBResponse struct {
	BracketDB
}

// BracketWOP is a Bracket without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BracketWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Bracket_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBracketStruct struct {
	// stores BracketDB according to their gorm ID
	Map_BracketDBID_BracketDB map[uint]*BracketDB

	// stores BracketDB ID according to Bracket address
	Map_BracketPtr_BracketDBID map[*models.Bracket]uint

	// stores Bracket according to their gorm ID
	Map_BracketDBID_BracketPtr map[uint]*models.Bracket

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBracket *BackRepoBracketStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBracket.stage
	return
}

func (backRepoBracket *BackRepoBracketStruct) GetDB() *gorm.DB {
	return backRepoBracket.db
}

// GetBracketDBFromBracketPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBracket *BackRepoBracketStruct) GetBracketDBFromBracketPtr(bracket *models.Bracket) (bracketDB *BracketDB) {
	id := backRepoBracket.Map_BracketPtr_BracketDBID[bracket]
	bracketDB = backRepoBracket.Map_BracketDBID_BracketDB[id]
	return
}

// BackRepoBracket.CommitPhaseOne commits all staged instances of Bracket to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBracket *BackRepoBracketStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bracket := range stage.Brackets {
		backRepoBracket.CommitPhaseOneInstance(bracket)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bracket := range backRepoBracket.Map_BracketDBID_BracketPtr {
		if _, ok := stage.Brackets[bracket]; !ok {
			backRepoBracket.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBracket.CommitDeleteInstance commits deletion of Bracket to the BackRepo
func (backRepoBracket *BackRepoBracketStruct) CommitDeleteInstance(id uint) (Error error) {

	bracket := backRepoBracket.Map_BracketDBID_BracketPtr[id]

	// bracket is not staged anymore, remove bracketDB
	bracketDB := backRepoBracket.Map_BracketDBID_BracketDB[id]
	query := backRepoBracket.db.Unscoped().Delete(&bracketDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBracket.Map_BracketPtr_BracketDBID, bracket)
	delete(backRepoBracket.Map_BracketDBID_BracketPtr, id)
	delete(backRepoBracket.Map_BracketDBID_BracketDB, id)

	return
}

// BackRepoBracket.CommitPhaseOneInstance commits bracket staged instances of Bracket to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBracket *BackRepoBracketStruct) CommitPhaseOneInstance(bracket *models.Bracket) (Error error) {

	// check if the bracket is not commited yet
	if _, ok := backRepoBracket.Map_BracketPtr_BracketDBID[bracket]; ok {
		return
	}

	// initiate bracket
	var bracketDB BracketDB
	bracketDB.CopyBasicFieldsFromBracket(bracket)

	query := backRepoBracket.db.Create(&bracketDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBracket.Map_BracketPtr_BracketDBID[bracket] = bracketDB.ID
	backRepoBracket.Map_BracketDBID_BracketPtr[bracketDB.ID] = bracket
	backRepoBracket.Map_BracketDBID_BracketDB[bracketDB.ID] = &bracketDB

	return
}

// BackRepoBracket.CommitPhaseTwo commits all staged instances of Bracket to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBracket *BackRepoBracketStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bracket := range backRepoBracket.Map_BracketDBID_BracketPtr {
		backRepoBracket.CommitPhaseTwoInstance(backRepo, idx, bracket)
	}

	return
}

// BackRepoBracket.CommitPhaseTwoInstance commits {{structname }} of models.Bracket to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBracket *BackRepoBracketStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bracket *models.Bracket) (Error error) {

	// fetch matching bracketDB
	if bracketDB, ok := backRepoBracket.Map_BracketDBID_BracketDB[idx]; ok {

		bracketDB.CopyBasicFieldsFromBracket(bracket)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBracket.db.Save(&bracketDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bracket intance %s", bracket.Name))
		return err
	}

	return
}

// BackRepoBracket.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBracket *BackRepoBracketStruct) CheckoutPhaseOne() (Error error) {

	bracketDBArray := make([]BracketDB, 0)
	query := backRepoBracket.db.Find(&bracketDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bracketInstancesToBeRemovedFromTheStage := make(map[*models.Bracket]any)
	for key, value := range backRepoBracket.stage.Brackets {
		bracketInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bracketDB := range bracketDBArray {
		backRepoBracket.CheckoutPhaseOneInstance(&bracketDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bracket, ok := backRepoBracket.Map_BracketDBID_BracketPtr[bracketDB.ID]
		if ok {
			delete(bracketInstancesToBeRemovedFromTheStage, bracket)
		}
	}

	// remove from stage and back repo's 3 maps all brackets that are not in the checkout
	for bracket := range bracketInstancesToBeRemovedFromTheStage {
		bracket.Unstage(backRepoBracket.GetStage())

		// remove instance from the back repo 3 maps
		bracketID := backRepoBracket.Map_BracketPtr_BracketDBID[bracket]
		delete(backRepoBracket.Map_BracketPtr_BracketDBID, bracket)
		delete(backRepoBracket.Map_BracketDBID_BracketDB, bracketID)
		delete(backRepoBracket.Map_BracketDBID_BracketPtr, bracketID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bracketDB that has been found in the DB, updates the backRepo and stages the
// models version of the bracketDB
func (backRepoBracket *BackRepoBracketStruct) CheckoutPhaseOneInstance(bracketDB *BracketDB) (Error error) {

	bracket, ok := backRepoBracket.Map_BracketDBID_BracketPtr[bracketDB.ID]
	if !ok {
		bracket = new(models.Bracket)

		backRepoBracket.Map_BracketDBID_BracketPtr[bracketDB.ID] = bracket
		backRepoBracket.Map_BracketPtr_BracketDBID[bracket] = bracketDB.ID

		// append model store with the new element
		bracket.Name = bracketDB.Name_Data.String
		bracket.Stage(backRepoBracket.GetStage())
	}
	bracketDB.CopyBasicFieldsToBracket(bracket)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bracket.Stage(backRepoBracket.GetStage())

	// preserve pointer to bracketDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BracketDBID_BracketDB)[bracketDB hold variable pointers
	bracketDB_Data := *bracketDB
	preservedPtrToBracket := &bracketDB_Data
	backRepoBracket.Map_BracketDBID_BracketDB[bracketDB.ID] = preservedPtrToBracket

	return
}

// BackRepoBracket.CheckoutPhaseTwo Checkouts all staged instances of Bracket to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBracket *BackRepoBracketStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bracketDB := range backRepoBracket.Map_BracketDBID_BracketDB {
		backRepoBracket.CheckoutPhaseTwoInstance(backRepo, bracketDB)
	}
	return
}

// BackRepoBracket.CheckoutPhaseTwoInstance Checkouts staged instances of Bracket to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBracket *BackRepoBracketStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bracketDB *BracketDB) (Error error) {

	bracket := backRepoBracket.Map_BracketDBID_BracketPtr[bracketDB.ID]

	bracketDB.DecodePointers(backRepo, bracket)

	return
}

func (bracketDB *BracketDB) DecodePointers(backRepo *BackRepoStruct, bracket *models.Bracket) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBracket allows commit of a single bracket (if already staged)
func (backRepo *BackRepoStruct) CommitBracket(bracket *models.Bracket) {
	backRepo.BackRepoBracket.CommitPhaseOneInstance(bracket)
	if id, ok := backRepo.BackRepoBracket.Map_BracketPtr_BracketDBID[bracket]; ok {
		backRepo.BackRepoBracket.CommitPhaseTwoInstance(backRepo, id, bracket)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBracket allows checkout of a single bracket (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBracket(bracket *models.Bracket) {
	// check if the bracket is staged
	if _, ok := backRepo.BackRepoBracket.Map_BracketPtr_BracketDBID[bracket]; ok {

		if id, ok := backRepo.BackRepoBracket.Map_BracketPtr_BracketDBID[bracket]; ok {
			var bracketDB BracketDB
			bracketDB.ID = id

			if err := backRepo.BackRepoBracket.db.First(&bracketDB, id).Error; err != nil {
				log.Fatalln("CheckoutBracket : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBracket.CheckoutPhaseOneInstance(&bracketDB)
			backRepo.BackRepoBracket.CheckoutPhaseTwoInstance(backRepo, &bracketDB)
		}
	}
}

// CopyBasicFieldsFromBracket
func (bracketDB *BracketDB) CopyBasicFieldsFromBracket(bracket *models.Bracket) {
	// insertion point for fields commit

	bracketDB.Name_Data.String = bracket.Name
	bracketDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBracket_WOP
func (bracketDB *BracketDB) CopyBasicFieldsFromBracket_WOP(bracket *models.Bracket_WOP) {
	// insertion point for fields commit

	bracketDB.Name_Data.String = bracket.Name
	bracketDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBracketWOP
func (bracketDB *BracketDB) CopyBasicFieldsFromBracketWOP(bracket *BracketWOP) {
	// insertion point for fields commit

	bracketDB.Name_Data.String = bracket.Name
	bracketDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBracket
func (bracketDB *BracketDB) CopyBasicFieldsToBracket(bracket *models.Bracket) {
	// insertion point for checkout of basic fields (back repo to stage)
	bracket.Name = bracketDB.Name_Data.String
}

// CopyBasicFieldsToBracket_WOP
func (bracketDB *BracketDB) CopyBasicFieldsToBracket_WOP(bracket *models.Bracket_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bracket.Name = bracketDB.Name_Data.String
}

// CopyBasicFieldsToBracketWOP
func (bracketDB *BracketDB) CopyBasicFieldsToBracketWOP(bracket *BracketWOP) {
	bracket.ID = int(bracketDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bracket.Name = bracketDB.Name_Data.String
}

// Backup generates a json file from a slice of all BracketDB instances in the backrepo
func (backRepoBracket *BackRepoBracketStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BracketDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BracketDB, 0)
	for _, bracketDB := range backRepoBracket.Map_BracketDBID_BracketDB {
		forBackup = append(forBackup, bracketDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Bracket ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Bracket file", err.Error())
	}
}

// Backup generates a json file from a slice of all BracketDB instances in the backrepo
func (backRepoBracket *BackRepoBracketStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BracketDB, 0)
	for _, bracketDB := range backRepoBracket.Map_BracketDBID_BracketDB {
		forBackup = append(forBackup, bracketDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Bracket")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Bracket_Fields, -1)
	for _, bracketDB := range forBackup {

		var bracketWOP BracketWOP
		bracketDB.CopyBasicFieldsToBracketWOP(&bracketWOP)

		row := sh.AddRow()
		row.WriteStruct(&bracketWOP, -1)
	}
}

// RestoreXL from the "Bracket" sheet all BracketDB instances
func (backRepoBracket *BackRepoBracketStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBracketid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Bracket"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBracket.rowVisitorBracket)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBracket *BackRepoBracketStruct) rowVisitorBracket(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bracketWOP BracketWOP
		row.ReadStruct(&bracketWOP)

		// add the unmarshalled struct to the stage
		bracketDB := new(BracketDB)
		bracketDB.CopyBasicFieldsFromBracketWOP(&bracketWOP)

		bracketDB_ID_atBackupTime := bracketDB.ID
		bracketDB.ID = 0
		query := backRepoBracket.db.Create(bracketDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBracket.Map_BracketDBID_BracketDB[bracketDB.ID] = bracketDB
		BackRepoBracketid_atBckpTime_newID[bracketDB_ID_atBackupTime] = bracketDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BracketDB.json" in dirPath that stores an array
// of BracketDB and stores it in the database
// the map BackRepoBracketid_atBckpTime_newID is updated accordingly
func (backRepoBracket *BackRepoBracketStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBracketid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BracketDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Bracket file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BracketDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BracketDBID_BracketDB
	for _, bracketDB := range forRestore {

		bracketDB_ID_atBackupTime := bracketDB.ID
		bracketDB.ID = 0
		query := backRepoBracket.db.Create(bracketDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBracket.Map_BracketDBID_BracketDB[bracketDB.ID] = bracketDB
		BackRepoBracketid_atBckpTime_newID[bracketDB_ID_atBackupTime] = bracketDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Bracket file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Bracket>id_atBckpTime_newID
// to compute new index
func (backRepoBracket *BackRepoBracketStruct) RestorePhaseTwo() {

	for _, bracketDB := range backRepoBracket.Map_BracketDBID_BracketDB {

		// next line of code is to avert unused variable compilation error
		_ = bracketDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBracket.db.Model(bracketDB).Updates(*bracketDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBracket.ResetReversePointers commits all staged instances of Bracket to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBracket *BackRepoBracketStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bracket := range backRepoBracket.Map_BracketDBID_BracketPtr {
		backRepoBracket.ResetReversePointersInstance(backRepo, idx, bracket)
	}

	return
}

func (backRepoBracket *BackRepoBracketStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bracket *models.Bracket) (Error error) {

	// fetch matching bracketDB
	if bracketDB, ok := backRepoBracket.Map_BracketDBID_BracketDB[idx]; ok {
		_ = bracketDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBracketid_atBckpTime_newID map[uint]uint
