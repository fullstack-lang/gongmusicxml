// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Grace_sql sql.NullBool
var dummy_Grace_time time.Duration
var dummy_Grace_sort sort.Float64Slice

// GraceAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model graceAPI
type GraceAPI struct {
	gorm.Model

	models.Grace_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GracePointersEncoding GracePointersEncoding
}

// GracePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GracePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GraceDB describes a grace in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model graceDB
type GraceDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field graceDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GracePointersEncoding
}

// GraceDBs arrays graceDBs
// swagger:response graceDBsResponse
type GraceDBs []GraceDB

// GraceDBResponse provides response
// swagger:response graceDBResponse
type GraceDBResponse struct {
	GraceDB
}

// GraceWOP is a Grace without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GraceWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Grace_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGraceStruct struct {
	// stores GraceDB according to their gorm ID
	Map_GraceDBID_GraceDB map[uint]*GraceDB

	// stores GraceDB ID according to Grace address
	Map_GracePtr_GraceDBID map[*models.Grace]uint

	// stores Grace according to their gorm ID
	Map_GraceDBID_GracePtr map[uint]*models.Grace

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGrace *BackRepoGraceStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGrace.stage
	return
}

func (backRepoGrace *BackRepoGraceStruct) GetDB() *gorm.DB {
	return backRepoGrace.db
}

// GetGraceDBFromGracePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGrace *BackRepoGraceStruct) GetGraceDBFromGracePtr(grace *models.Grace) (graceDB *GraceDB) {
	id := backRepoGrace.Map_GracePtr_GraceDBID[grace]
	graceDB = backRepoGrace.Map_GraceDBID_GraceDB[id]
	return
}

// BackRepoGrace.CommitPhaseOne commits all staged instances of Grace to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGrace *BackRepoGraceStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for grace := range stage.Graces {
		backRepoGrace.CommitPhaseOneInstance(grace)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, grace := range backRepoGrace.Map_GraceDBID_GracePtr {
		if _, ok := stage.Graces[grace]; !ok {
			backRepoGrace.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGrace.CommitDeleteInstance commits deletion of Grace to the BackRepo
func (backRepoGrace *BackRepoGraceStruct) CommitDeleteInstance(id uint) (Error error) {

	grace := backRepoGrace.Map_GraceDBID_GracePtr[id]

	// grace is not staged anymore, remove graceDB
	graceDB := backRepoGrace.Map_GraceDBID_GraceDB[id]
	query := backRepoGrace.db.Unscoped().Delete(&graceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGrace.Map_GracePtr_GraceDBID, grace)
	delete(backRepoGrace.Map_GraceDBID_GracePtr, id)
	delete(backRepoGrace.Map_GraceDBID_GraceDB, id)

	return
}

// BackRepoGrace.CommitPhaseOneInstance commits grace staged instances of Grace to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGrace *BackRepoGraceStruct) CommitPhaseOneInstance(grace *models.Grace) (Error error) {

	// check if the grace is not commited yet
	if _, ok := backRepoGrace.Map_GracePtr_GraceDBID[grace]; ok {
		return
	}

	// initiate grace
	var graceDB GraceDB
	graceDB.CopyBasicFieldsFromGrace(grace)

	query := backRepoGrace.db.Create(&graceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGrace.Map_GracePtr_GraceDBID[grace] = graceDB.ID
	backRepoGrace.Map_GraceDBID_GracePtr[graceDB.ID] = grace
	backRepoGrace.Map_GraceDBID_GraceDB[graceDB.ID] = &graceDB

	return
}

// BackRepoGrace.CommitPhaseTwo commits all staged instances of Grace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrace *BackRepoGraceStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, grace := range backRepoGrace.Map_GraceDBID_GracePtr {
		backRepoGrace.CommitPhaseTwoInstance(backRepo, idx, grace)
	}

	return
}

// BackRepoGrace.CommitPhaseTwoInstance commits {{structname }} of models.Grace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrace *BackRepoGraceStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, grace *models.Grace) (Error error) {

	// fetch matching graceDB
	if graceDB, ok := backRepoGrace.Map_GraceDBID_GraceDB[idx]; ok {

		graceDB.CopyBasicFieldsFromGrace(grace)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGrace.db.Save(&graceDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Grace intance %s", grace.Name))
		return err
	}

	return
}

// BackRepoGrace.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGrace *BackRepoGraceStruct) CheckoutPhaseOne() (Error error) {

	graceDBArray := make([]GraceDB, 0)
	query := backRepoGrace.db.Find(&graceDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	graceInstancesToBeRemovedFromTheStage := make(map[*models.Grace]any)
	for key, value := range backRepoGrace.stage.Graces {
		graceInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, graceDB := range graceDBArray {
		backRepoGrace.CheckoutPhaseOneInstance(&graceDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		grace, ok := backRepoGrace.Map_GraceDBID_GracePtr[graceDB.ID]
		if ok {
			delete(graceInstancesToBeRemovedFromTheStage, grace)
		}
	}

	// remove from stage and back repo's 3 maps all graces that are not in the checkout
	for grace := range graceInstancesToBeRemovedFromTheStage {
		grace.Unstage(backRepoGrace.GetStage())

		// remove instance from the back repo 3 maps
		graceID := backRepoGrace.Map_GracePtr_GraceDBID[grace]
		delete(backRepoGrace.Map_GracePtr_GraceDBID, grace)
		delete(backRepoGrace.Map_GraceDBID_GraceDB, graceID)
		delete(backRepoGrace.Map_GraceDBID_GracePtr, graceID)
	}

	return
}

// CheckoutPhaseOneInstance takes a graceDB that has been found in the DB, updates the backRepo and stages the
// models version of the graceDB
func (backRepoGrace *BackRepoGraceStruct) CheckoutPhaseOneInstance(graceDB *GraceDB) (Error error) {

	grace, ok := backRepoGrace.Map_GraceDBID_GracePtr[graceDB.ID]
	if !ok {
		grace = new(models.Grace)

		backRepoGrace.Map_GraceDBID_GracePtr[graceDB.ID] = grace
		backRepoGrace.Map_GracePtr_GraceDBID[grace] = graceDB.ID

		// append model store with the new element
		grace.Name = graceDB.Name_Data.String
		grace.Stage(backRepoGrace.GetStage())
	}
	graceDB.CopyBasicFieldsToGrace(grace)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	grace.Stage(backRepoGrace.GetStage())

	// preserve pointer to graceDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GraceDBID_GraceDB)[graceDB hold variable pointers
	graceDB_Data := *graceDB
	preservedPtrToGrace := &graceDB_Data
	backRepoGrace.Map_GraceDBID_GraceDB[graceDB.ID] = preservedPtrToGrace

	return
}

// BackRepoGrace.CheckoutPhaseTwo Checkouts all staged instances of Grace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrace *BackRepoGraceStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, graceDB := range backRepoGrace.Map_GraceDBID_GraceDB {
		backRepoGrace.CheckoutPhaseTwoInstance(backRepo, graceDB)
	}
	return
}

// BackRepoGrace.CheckoutPhaseTwoInstance Checkouts staged instances of Grace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrace *BackRepoGraceStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, graceDB *GraceDB) (Error error) {

	grace := backRepoGrace.Map_GraceDBID_GracePtr[graceDB.ID]

	graceDB.DecodePointers(backRepo, grace)

	return
}

func (graceDB *GraceDB) DecodePointers(backRepo *BackRepoStruct, grace *models.Grace) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGrace allows commit of a single grace (if already staged)
func (backRepo *BackRepoStruct) CommitGrace(grace *models.Grace) {
	backRepo.BackRepoGrace.CommitPhaseOneInstance(grace)
	if id, ok := backRepo.BackRepoGrace.Map_GracePtr_GraceDBID[grace]; ok {
		backRepo.BackRepoGrace.CommitPhaseTwoInstance(backRepo, id, grace)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGrace allows checkout of a single grace (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGrace(grace *models.Grace) {
	// check if the grace is staged
	if _, ok := backRepo.BackRepoGrace.Map_GracePtr_GraceDBID[grace]; ok {

		if id, ok := backRepo.BackRepoGrace.Map_GracePtr_GraceDBID[grace]; ok {
			var graceDB GraceDB
			graceDB.ID = id

			if err := backRepo.BackRepoGrace.db.First(&graceDB, id).Error; err != nil {
				log.Fatalln("CheckoutGrace : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGrace.CheckoutPhaseOneInstance(&graceDB)
			backRepo.BackRepoGrace.CheckoutPhaseTwoInstance(backRepo, &graceDB)
		}
	}
}

// CopyBasicFieldsFromGrace
func (graceDB *GraceDB) CopyBasicFieldsFromGrace(grace *models.Grace) {
	// insertion point for fields commit

	graceDB.Name_Data.String = grace.Name
	graceDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGrace_WOP
func (graceDB *GraceDB) CopyBasicFieldsFromGrace_WOP(grace *models.Grace_WOP) {
	// insertion point for fields commit

	graceDB.Name_Data.String = grace.Name
	graceDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGraceWOP
func (graceDB *GraceDB) CopyBasicFieldsFromGraceWOP(grace *GraceWOP) {
	// insertion point for fields commit

	graceDB.Name_Data.String = grace.Name
	graceDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGrace
func (graceDB *GraceDB) CopyBasicFieldsToGrace(grace *models.Grace) {
	// insertion point for checkout of basic fields (back repo to stage)
	grace.Name = graceDB.Name_Data.String
}

// CopyBasicFieldsToGrace_WOP
func (graceDB *GraceDB) CopyBasicFieldsToGrace_WOP(grace *models.Grace_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	grace.Name = graceDB.Name_Data.String
}

// CopyBasicFieldsToGraceWOP
func (graceDB *GraceDB) CopyBasicFieldsToGraceWOP(grace *GraceWOP) {
	grace.ID = int(graceDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	grace.Name = graceDB.Name_Data.String
}

// Backup generates a json file from a slice of all GraceDB instances in the backrepo
func (backRepoGrace *BackRepoGraceStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GraceDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GraceDB, 0)
	for _, graceDB := range backRepoGrace.Map_GraceDBID_GraceDB {
		forBackup = append(forBackup, graceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Grace ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Grace file", err.Error())
	}
}

// Backup generates a json file from a slice of all GraceDB instances in the backrepo
func (backRepoGrace *BackRepoGraceStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GraceDB, 0)
	for _, graceDB := range backRepoGrace.Map_GraceDBID_GraceDB {
		forBackup = append(forBackup, graceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Grace")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Grace_Fields, -1)
	for _, graceDB := range forBackup {

		var graceWOP GraceWOP
		graceDB.CopyBasicFieldsToGraceWOP(&graceWOP)

		row := sh.AddRow()
		row.WriteStruct(&graceWOP, -1)
	}
}

// RestoreXL from the "Grace" sheet all GraceDB instances
func (backRepoGrace *BackRepoGraceStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGraceid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Grace"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGrace.rowVisitorGrace)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGrace *BackRepoGraceStruct) rowVisitorGrace(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var graceWOP GraceWOP
		row.ReadStruct(&graceWOP)

		// add the unmarshalled struct to the stage
		graceDB := new(GraceDB)
		graceDB.CopyBasicFieldsFromGraceWOP(&graceWOP)

		graceDB_ID_atBackupTime := graceDB.ID
		graceDB.ID = 0
		query := backRepoGrace.db.Create(graceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGrace.Map_GraceDBID_GraceDB[graceDB.ID] = graceDB
		BackRepoGraceid_atBckpTime_newID[graceDB_ID_atBackupTime] = graceDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GraceDB.json" in dirPath that stores an array
// of GraceDB and stores it in the database
// the map BackRepoGraceid_atBckpTime_newID is updated accordingly
func (backRepoGrace *BackRepoGraceStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGraceid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GraceDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Grace file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GraceDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GraceDBID_GraceDB
	for _, graceDB := range forRestore {

		graceDB_ID_atBackupTime := graceDB.ID
		graceDB.ID = 0
		query := backRepoGrace.db.Create(graceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGrace.Map_GraceDBID_GraceDB[graceDB.ID] = graceDB
		BackRepoGraceid_atBckpTime_newID[graceDB_ID_atBackupTime] = graceDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Grace file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Grace>id_atBckpTime_newID
// to compute new index
func (backRepoGrace *BackRepoGraceStruct) RestorePhaseTwo() {

	for _, graceDB := range backRepoGrace.Map_GraceDBID_GraceDB {

		// next line of code is to avert unused variable compilation error
		_ = graceDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGrace.db.Model(graceDB).Updates(*graceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGrace.ResetReversePointers commits all staged instances of Grace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGrace *BackRepoGraceStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, grace := range backRepoGrace.Map_GraceDBID_GracePtr {
		backRepoGrace.ResetReversePointersInstance(backRepo, idx, grace)
	}

	return
}

func (backRepoGrace *BackRepoGraceStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, grace *models.Grace) (Error error) {

	// fetch matching graceDB
	if graceDB, ok := backRepoGrace.Map_GraceDBID_GraceDB[idx]; ok {
		_ = graceDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGraceid_atBckpTime_newID map[uint]uint
