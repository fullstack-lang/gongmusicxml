// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bass_step_sql sql.NullBool
var dummy_Bass_step_time time.Duration
var dummy_Bass_step_sort sort.Float64Slice

// Bass_stepAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bass_stepAPI
type Bass_stepAPI struct {
	gorm.Model

	models.Bass_step_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Bass_stepPointersEncoding Bass_stepPointersEncoding
}

// Bass_stepPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Bass_stepPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Bass_stepDB describes a bass_step in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bass_stepDB
type Bass_stepDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bass_stepDB.Name
	Name_Data sql.NullString

	// Declation for basic field bass_stepDB.Text
	Text_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Bass_stepPointersEncoding
}

// Bass_stepDBs arrays bass_stepDBs
// swagger:response bass_stepDBsResponse
type Bass_stepDBs []Bass_stepDB

// Bass_stepDBResponse provides response
// swagger:response bass_stepDBResponse
type Bass_stepDBResponse struct {
	Bass_stepDB
}

// Bass_stepWOP is a Bass_step without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Bass_stepWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Text string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Bass_step_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Text",
}

type BackRepoBass_stepStruct struct {
	// stores Bass_stepDB according to their gorm ID
	Map_Bass_stepDBID_Bass_stepDB map[uint]*Bass_stepDB

	// stores Bass_stepDB ID according to Bass_step address
	Map_Bass_stepPtr_Bass_stepDBID map[*models.Bass_step]uint

	// stores Bass_step according to their gorm ID
	Map_Bass_stepDBID_Bass_stepPtr map[uint]*models.Bass_step

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBass_step *BackRepoBass_stepStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBass_step.stage
	return
}

func (backRepoBass_step *BackRepoBass_stepStruct) GetDB() *gorm.DB {
	return backRepoBass_step.db
}

// GetBass_stepDBFromBass_stepPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBass_step *BackRepoBass_stepStruct) GetBass_stepDBFromBass_stepPtr(bass_step *models.Bass_step) (bass_stepDB *Bass_stepDB) {
	id := backRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step]
	bass_stepDB = backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[id]
	return
}

// BackRepoBass_step.CommitPhaseOne commits all staged instances of Bass_step to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBass_step *BackRepoBass_stepStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bass_step := range stage.Bass_steps {
		backRepoBass_step.CommitPhaseOneInstance(bass_step)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bass_step := range backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr {
		if _, ok := stage.Bass_steps[bass_step]; !ok {
			backRepoBass_step.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBass_step.CommitDeleteInstance commits deletion of Bass_step to the BackRepo
func (backRepoBass_step *BackRepoBass_stepStruct) CommitDeleteInstance(id uint) (Error error) {

	bass_step := backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr[id]

	// bass_step is not staged anymore, remove bass_stepDB
	bass_stepDB := backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[id]
	query := backRepoBass_step.db.Unscoped().Delete(&bass_stepDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID, bass_step)
	delete(backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr, id)
	delete(backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB, id)

	return
}

// BackRepoBass_step.CommitPhaseOneInstance commits bass_step staged instances of Bass_step to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBass_step *BackRepoBass_stepStruct) CommitPhaseOneInstance(bass_step *models.Bass_step) (Error error) {

	// check if the bass_step is not commited yet
	if _, ok := backRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step]; ok {
		return
	}

	// initiate bass_step
	var bass_stepDB Bass_stepDB
	bass_stepDB.CopyBasicFieldsFromBass_step(bass_step)

	query := backRepoBass_step.db.Create(&bass_stepDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step] = bass_stepDB.ID
	backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr[bass_stepDB.ID] = bass_step
	backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[bass_stepDB.ID] = &bass_stepDB

	return
}

// BackRepoBass_step.CommitPhaseTwo commits all staged instances of Bass_step to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBass_step *BackRepoBass_stepStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bass_step := range backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr {
		backRepoBass_step.CommitPhaseTwoInstance(backRepo, idx, bass_step)
	}

	return
}

// BackRepoBass_step.CommitPhaseTwoInstance commits {{structname }} of models.Bass_step to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBass_step *BackRepoBass_stepStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bass_step *models.Bass_step) (Error error) {

	// fetch matching bass_stepDB
	if bass_stepDB, ok := backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[idx]; ok {

		bass_stepDB.CopyBasicFieldsFromBass_step(bass_step)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBass_step.db.Save(&bass_stepDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bass_step intance %s", bass_step.Name))
		return err
	}

	return
}

// BackRepoBass_step.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBass_step *BackRepoBass_stepStruct) CheckoutPhaseOne() (Error error) {

	bass_stepDBArray := make([]Bass_stepDB, 0)
	query := backRepoBass_step.db.Find(&bass_stepDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bass_stepInstancesToBeRemovedFromTheStage := make(map[*models.Bass_step]any)
	for key, value := range backRepoBass_step.stage.Bass_steps {
		bass_stepInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bass_stepDB := range bass_stepDBArray {
		backRepoBass_step.CheckoutPhaseOneInstance(&bass_stepDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bass_step, ok := backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr[bass_stepDB.ID]
		if ok {
			delete(bass_stepInstancesToBeRemovedFromTheStage, bass_step)
		}
	}

	// remove from stage and back repo's 3 maps all bass_steps that are not in the checkout
	for bass_step := range bass_stepInstancesToBeRemovedFromTheStage {
		bass_step.Unstage(backRepoBass_step.GetStage())

		// remove instance from the back repo 3 maps
		bass_stepID := backRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step]
		delete(backRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID, bass_step)
		delete(backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB, bass_stepID)
		delete(backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr, bass_stepID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bass_stepDB that has been found in the DB, updates the backRepo and stages the
// models version of the bass_stepDB
func (backRepoBass_step *BackRepoBass_stepStruct) CheckoutPhaseOneInstance(bass_stepDB *Bass_stepDB) (Error error) {

	bass_step, ok := backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr[bass_stepDB.ID]
	if !ok {
		bass_step = new(models.Bass_step)

		backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr[bass_stepDB.ID] = bass_step
		backRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step] = bass_stepDB.ID

		// append model store with the new element
		bass_step.Name = bass_stepDB.Name_Data.String
		bass_step.Stage(backRepoBass_step.GetStage())
	}
	bass_stepDB.CopyBasicFieldsToBass_step(bass_step)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bass_step.Stage(backRepoBass_step.GetStage())

	// preserve pointer to bass_stepDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Bass_stepDBID_Bass_stepDB)[bass_stepDB hold variable pointers
	bass_stepDB_Data := *bass_stepDB
	preservedPtrToBass_step := &bass_stepDB_Data
	backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[bass_stepDB.ID] = preservedPtrToBass_step

	return
}

// BackRepoBass_step.CheckoutPhaseTwo Checkouts all staged instances of Bass_step to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBass_step *BackRepoBass_stepStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bass_stepDB := range backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB {
		backRepoBass_step.CheckoutPhaseTwoInstance(backRepo, bass_stepDB)
	}
	return
}

// BackRepoBass_step.CheckoutPhaseTwoInstance Checkouts staged instances of Bass_step to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBass_step *BackRepoBass_stepStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bass_stepDB *Bass_stepDB) (Error error) {

	bass_step := backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr[bass_stepDB.ID]

	bass_stepDB.DecodePointers(backRepo, bass_step)

	return
}

func (bass_stepDB *Bass_stepDB) DecodePointers(backRepo *BackRepoStruct, bass_step *models.Bass_step) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBass_step allows commit of a single bass_step (if already staged)
func (backRepo *BackRepoStruct) CommitBass_step(bass_step *models.Bass_step) {
	backRepo.BackRepoBass_step.CommitPhaseOneInstance(bass_step)
	if id, ok := backRepo.BackRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step]; ok {
		backRepo.BackRepoBass_step.CommitPhaseTwoInstance(backRepo, id, bass_step)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBass_step allows checkout of a single bass_step (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBass_step(bass_step *models.Bass_step) {
	// check if the bass_step is staged
	if _, ok := backRepo.BackRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step]; ok {

		if id, ok := backRepo.BackRepoBass_step.Map_Bass_stepPtr_Bass_stepDBID[bass_step]; ok {
			var bass_stepDB Bass_stepDB
			bass_stepDB.ID = id

			if err := backRepo.BackRepoBass_step.db.First(&bass_stepDB, id).Error; err != nil {
				log.Fatalln("CheckoutBass_step : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBass_step.CheckoutPhaseOneInstance(&bass_stepDB)
			backRepo.BackRepoBass_step.CheckoutPhaseTwoInstance(backRepo, &bass_stepDB)
		}
	}
}

// CopyBasicFieldsFromBass_step
func (bass_stepDB *Bass_stepDB) CopyBasicFieldsFromBass_step(bass_step *models.Bass_step) {
	// insertion point for fields commit

	bass_stepDB.Name_Data.String = bass_step.Name
	bass_stepDB.Name_Data.Valid = true

	bass_stepDB.Text_Data.String = bass_step.Text
	bass_stepDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromBass_step_WOP
func (bass_stepDB *Bass_stepDB) CopyBasicFieldsFromBass_step_WOP(bass_step *models.Bass_step_WOP) {
	// insertion point for fields commit

	bass_stepDB.Name_Data.String = bass_step.Name
	bass_stepDB.Name_Data.Valid = true

	bass_stepDB.Text_Data.String = bass_step.Text
	bass_stepDB.Text_Data.Valid = true
}

// CopyBasicFieldsFromBass_stepWOP
func (bass_stepDB *Bass_stepDB) CopyBasicFieldsFromBass_stepWOP(bass_step *Bass_stepWOP) {
	// insertion point for fields commit

	bass_stepDB.Name_Data.String = bass_step.Name
	bass_stepDB.Name_Data.Valid = true

	bass_stepDB.Text_Data.String = bass_step.Text
	bass_stepDB.Text_Data.Valid = true
}

// CopyBasicFieldsToBass_step
func (bass_stepDB *Bass_stepDB) CopyBasicFieldsToBass_step(bass_step *models.Bass_step) {
	// insertion point for checkout of basic fields (back repo to stage)
	bass_step.Name = bass_stepDB.Name_Data.String
	bass_step.Text = bass_stepDB.Text_Data.String
}

// CopyBasicFieldsToBass_step_WOP
func (bass_stepDB *Bass_stepDB) CopyBasicFieldsToBass_step_WOP(bass_step *models.Bass_step_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bass_step.Name = bass_stepDB.Name_Data.String
	bass_step.Text = bass_stepDB.Text_Data.String
}

// CopyBasicFieldsToBass_stepWOP
func (bass_stepDB *Bass_stepDB) CopyBasicFieldsToBass_stepWOP(bass_step *Bass_stepWOP) {
	bass_step.ID = int(bass_stepDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bass_step.Name = bass_stepDB.Name_Data.String
	bass_step.Text = bass_stepDB.Text_Data.String
}

// Backup generates a json file from a slice of all Bass_stepDB instances in the backrepo
func (backRepoBass_step *BackRepoBass_stepStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Bass_stepDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Bass_stepDB, 0)
	for _, bass_stepDB := range backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB {
		forBackup = append(forBackup, bass_stepDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Bass_step ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Bass_step file", err.Error())
	}
}

// Backup generates a json file from a slice of all Bass_stepDB instances in the backrepo
func (backRepoBass_step *BackRepoBass_stepStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Bass_stepDB, 0)
	for _, bass_stepDB := range backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB {
		forBackup = append(forBackup, bass_stepDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Bass_step")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Bass_step_Fields, -1)
	for _, bass_stepDB := range forBackup {

		var bass_stepWOP Bass_stepWOP
		bass_stepDB.CopyBasicFieldsToBass_stepWOP(&bass_stepWOP)

		row := sh.AddRow()
		row.WriteStruct(&bass_stepWOP, -1)
	}
}

// RestoreXL from the "Bass_step" sheet all Bass_stepDB instances
func (backRepoBass_step *BackRepoBass_stepStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBass_stepid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Bass_step"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBass_step.rowVisitorBass_step)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBass_step *BackRepoBass_stepStruct) rowVisitorBass_step(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bass_stepWOP Bass_stepWOP
		row.ReadStruct(&bass_stepWOP)

		// add the unmarshalled struct to the stage
		bass_stepDB := new(Bass_stepDB)
		bass_stepDB.CopyBasicFieldsFromBass_stepWOP(&bass_stepWOP)

		bass_stepDB_ID_atBackupTime := bass_stepDB.ID
		bass_stepDB.ID = 0
		query := backRepoBass_step.db.Create(bass_stepDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[bass_stepDB.ID] = bass_stepDB
		BackRepoBass_stepid_atBckpTime_newID[bass_stepDB_ID_atBackupTime] = bass_stepDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Bass_stepDB.json" in dirPath that stores an array
// of Bass_stepDB and stores it in the database
// the map BackRepoBass_stepid_atBckpTime_newID is updated accordingly
func (backRepoBass_step *BackRepoBass_stepStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBass_stepid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Bass_stepDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Bass_step file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Bass_stepDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Bass_stepDBID_Bass_stepDB
	for _, bass_stepDB := range forRestore {

		bass_stepDB_ID_atBackupTime := bass_stepDB.ID
		bass_stepDB.ID = 0
		query := backRepoBass_step.db.Create(bass_stepDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[bass_stepDB.ID] = bass_stepDB
		BackRepoBass_stepid_atBckpTime_newID[bass_stepDB_ID_atBackupTime] = bass_stepDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Bass_step file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Bass_step>id_atBckpTime_newID
// to compute new index
func (backRepoBass_step *BackRepoBass_stepStruct) RestorePhaseTwo() {

	for _, bass_stepDB := range backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB {

		// next line of code is to avert unused variable compilation error
		_ = bass_stepDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBass_step.db.Model(bass_stepDB).Updates(*bass_stepDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBass_step.ResetReversePointers commits all staged instances of Bass_step to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBass_step *BackRepoBass_stepStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bass_step := range backRepoBass_step.Map_Bass_stepDBID_Bass_stepPtr {
		backRepoBass_step.ResetReversePointersInstance(backRepo, idx, bass_step)
	}

	return
}

func (backRepoBass_step *BackRepoBass_stepStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bass_step *models.Bass_step) (Error error) {

	// fetch matching bass_stepDB
	if bass_stepDB, ok := backRepoBass_step.Map_Bass_stepDBID_Bass_stepDB[idx]; ok {
		_ = bass_stepDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBass_stepid_atBckpTime_newID map[uint]uint
