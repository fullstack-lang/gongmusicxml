// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Stem_sql sql.NullBool
var dummy_Stem_time time.Duration
var dummy_Stem_sort sort.Float64Slice

// StemAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model stemAPI
type StemAPI struct {
	gorm.Model

	models.Stem_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	StemPointersEncoding StemPointersEncoding
}

// StemPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type StemPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// StemDB describes a stem in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model stemDB
type StemDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field stemDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	StemPointersEncoding
}

// StemDBs arrays stemDBs
// swagger:response stemDBsResponse
type StemDBs []StemDB

// StemDBResponse provides response
// swagger:response stemDBResponse
type StemDBResponse struct {
	StemDB
}

// StemWOP is a Stem without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type StemWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Stem_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoStemStruct struct {
	// stores StemDB according to their gorm ID
	Map_StemDBID_StemDB map[uint]*StemDB

	// stores StemDB ID according to Stem address
	Map_StemPtr_StemDBID map[*models.Stem]uint

	// stores Stem according to their gorm ID
	Map_StemDBID_StemPtr map[uint]*models.Stem

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoStem *BackRepoStemStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoStem.stage
	return
}

func (backRepoStem *BackRepoStemStruct) GetDB() *gorm.DB {
	return backRepoStem.db
}

// GetStemDBFromStemPtr is a handy function to access the back repo instance from the stage instance
func (backRepoStem *BackRepoStemStruct) GetStemDBFromStemPtr(stem *models.Stem) (stemDB *StemDB) {
	id := backRepoStem.Map_StemPtr_StemDBID[stem]
	stemDB = backRepoStem.Map_StemDBID_StemDB[id]
	return
}

// BackRepoStem.CommitPhaseOne commits all staged instances of Stem to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStem *BackRepoStemStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for stem := range stage.Stems {
		backRepoStem.CommitPhaseOneInstance(stem)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, stem := range backRepoStem.Map_StemDBID_StemPtr {
		if _, ok := stage.Stems[stem]; !ok {
			backRepoStem.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoStem.CommitDeleteInstance commits deletion of Stem to the BackRepo
func (backRepoStem *BackRepoStemStruct) CommitDeleteInstance(id uint) (Error error) {

	stem := backRepoStem.Map_StemDBID_StemPtr[id]

	// stem is not staged anymore, remove stemDB
	stemDB := backRepoStem.Map_StemDBID_StemDB[id]
	query := backRepoStem.db.Unscoped().Delete(&stemDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoStem.Map_StemPtr_StemDBID, stem)
	delete(backRepoStem.Map_StemDBID_StemPtr, id)
	delete(backRepoStem.Map_StemDBID_StemDB, id)

	return
}

// BackRepoStem.CommitPhaseOneInstance commits stem staged instances of Stem to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoStem *BackRepoStemStruct) CommitPhaseOneInstance(stem *models.Stem) (Error error) {

	// check if the stem is not commited yet
	if _, ok := backRepoStem.Map_StemPtr_StemDBID[stem]; ok {
		return
	}

	// initiate stem
	var stemDB StemDB
	stemDB.CopyBasicFieldsFromStem(stem)

	query := backRepoStem.db.Create(&stemDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoStem.Map_StemPtr_StemDBID[stem] = stemDB.ID
	backRepoStem.Map_StemDBID_StemPtr[stemDB.ID] = stem
	backRepoStem.Map_StemDBID_StemDB[stemDB.ID] = &stemDB

	return
}

// BackRepoStem.CommitPhaseTwo commits all staged instances of Stem to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStem *BackRepoStemStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, stem := range backRepoStem.Map_StemDBID_StemPtr {
		backRepoStem.CommitPhaseTwoInstance(backRepo, idx, stem)
	}

	return
}

// BackRepoStem.CommitPhaseTwoInstance commits {{structname }} of models.Stem to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStem *BackRepoStemStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, stem *models.Stem) (Error error) {

	// fetch matching stemDB
	if stemDB, ok := backRepoStem.Map_StemDBID_StemDB[idx]; ok {

		stemDB.CopyBasicFieldsFromStem(stem)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoStem.db.Save(&stemDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Stem intance %s", stem.Name))
		return err
	}

	return
}

// BackRepoStem.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoStem *BackRepoStemStruct) CheckoutPhaseOne() (Error error) {

	stemDBArray := make([]StemDB, 0)
	query := backRepoStem.db.Find(&stemDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	stemInstancesToBeRemovedFromTheStage := make(map[*models.Stem]any)
	for key, value := range backRepoStem.stage.Stems {
		stemInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, stemDB := range stemDBArray {
		backRepoStem.CheckoutPhaseOneInstance(&stemDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		stem, ok := backRepoStem.Map_StemDBID_StemPtr[stemDB.ID]
		if ok {
			delete(stemInstancesToBeRemovedFromTheStage, stem)
		}
	}

	// remove from stage and back repo's 3 maps all stems that are not in the checkout
	for stem := range stemInstancesToBeRemovedFromTheStage {
		stem.Unstage(backRepoStem.GetStage())

		// remove instance from the back repo 3 maps
		stemID := backRepoStem.Map_StemPtr_StemDBID[stem]
		delete(backRepoStem.Map_StemPtr_StemDBID, stem)
		delete(backRepoStem.Map_StemDBID_StemDB, stemID)
		delete(backRepoStem.Map_StemDBID_StemPtr, stemID)
	}

	return
}

// CheckoutPhaseOneInstance takes a stemDB that has been found in the DB, updates the backRepo and stages the
// models version of the stemDB
func (backRepoStem *BackRepoStemStruct) CheckoutPhaseOneInstance(stemDB *StemDB) (Error error) {

	stem, ok := backRepoStem.Map_StemDBID_StemPtr[stemDB.ID]
	if !ok {
		stem = new(models.Stem)

		backRepoStem.Map_StemDBID_StemPtr[stemDB.ID] = stem
		backRepoStem.Map_StemPtr_StemDBID[stem] = stemDB.ID

		// append model store with the new element
		stem.Name = stemDB.Name_Data.String
		stem.Stage(backRepoStem.GetStage())
	}
	stemDB.CopyBasicFieldsToStem(stem)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	stem.Stage(backRepoStem.GetStage())

	// preserve pointer to stemDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_StemDBID_StemDB)[stemDB hold variable pointers
	stemDB_Data := *stemDB
	preservedPtrToStem := &stemDB_Data
	backRepoStem.Map_StemDBID_StemDB[stemDB.ID] = preservedPtrToStem

	return
}

// BackRepoStem.CheckoutPhaseTwo Checkouts all staged instances of Stem to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStem *BackRepoStemStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, stemDB := range backRepoStem.Map_StemDBID_StemDB {
		backRepoStem.CheckoutPhaseTwoInstance(backRepo, stemDB)
	}
	return
}

// BackRepoStem.CheckoutPhaseTwoInstance Checkouts staged instances of Stem to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStem *BackRepoStemStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, stemDB *StemDB) (Error error) {

	stem := backRepoStem.Map_StemDBID_StemPtr[stemDB.ID]

	stemDB.DecodePointers(backRepo, stem)

	return
}

func (stemDB *StemDB) DecodePointers(backRepo *BackRepoStruct, stem *models.Stem) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitStem allows commit of a single stem (if already staged)
func (backRepo *BackRepoStruct) CommitStem(stem *models.Stem) {
	backRepo.BackRepoStem.CommitPhaseOneInstance(stem)
	if id, ok := backRepo.BackRepoStem.Map_StemPtr_StemDBID[stem]; ok {
		backRepo.BackRepoStem.CommitPhaseTwoInstance(backRepo, id, stem)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitStem allows checkout of a single stem (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutStem(stem *models.Stem) {
	// check if the stem is staged
	if _, ok := backRepo.BackRepoStem.Map_StemPtr_StemDBID[stem]; ok {

		if id, ok := backRepo.BackRepoStem.Map_StemPtr_StemDBID[stem]; ok {
			var stemDB StemDB
			stemDB.ID = id

			if err := backRepo.BackRepoStem.db.First(&stemDB, id).Error; err != nil {
				log.Fatalln("CheckoutStem : Problem with getting object with id:", id)
			}
			backRepo.BackRepoStem.CheckoutPhaseOneInstance(&stemDB)
			backRepo.BackRepoStem.CheckoutPhaseTwoInstance(backRepo, &stemDB)
		}
	}
}

// CopyBasicFieldsFromStem
func (stemDB *StemDB) CopyBasicFieldsFromStem(stem *models.Stem) {
	// insertion point for fields commit

	stemDB.Name_Data.String = stem.Name
	stemDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStem_WOP
func (stemDB *StemDB) CopyBasicFieldsFromStem_WOP(stem *models.Stem_WOP) {
	// insertion point for fields commit

	stemDB.Name_Data.String = stem.Name
	stemDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromStemWOP
func (stemDB *StemDB) CopyBasicFieldsFromStemWOP(stem *StemWOP) {
	// insertion point for fields commit

	stemDB.Name_Data.String = stem.Name
	stemDB.Name_Data.Valid = true
}

// CopyBasicFieldsToStem
func (stemDB *StemDB) CopyBasicFieldsToStem(stem *models.Stem) {
	// insertion point for checkout of basic fields (back repo to stage)
	stem.Name = stemDB.Name_Data.String
}

// CopyBasicFieldsToStem_WOP
func (stemDB *StemDB) CopyBasicFieldsToStem_WOP(stem *models.Stem_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	stem.Name = stemDB.Name_Data.String
}

// CopyBasicFieldsToStemWOP
func (stemDB *StemDB) CopyBasicFieldsToStemWOP(stem *StemWOP) {
	stem.ID = int(stemDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	stem.Name = stemDB.Name_Data.String
}

// Backup generates a json file from a slice of all StemDB instances in the backrepo
func (backRepoStem *BackRepoStemStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "StemDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StemDB, 0)
	for _, stemDB := range backRepoStem.Map_StemDBID_StemDB {
		forBackup = append(forBackup, stemDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Stem ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Stem file", err.Error())
	}
}

// Backup generates a json file from a slice of all StemDB instances in the backrepo
func (backRepoStem *BackRepoStemStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*StemDB, 0)
	for _, stemDB := range backRepoStem.Map_StemDBID_StemDB {
		forBackup = append(forBackup, stemDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Stem")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Stem_Fields, -1)
	for _, stemDB := range forBackup {

		var stemWOP StemWOP
		stemDB.CopyBasicFieldsToStemWOP(&stemWOP)

		row := sh.AddRow()
		row.WriteStruct(&stemWOP, -1)
	}
}

// RestoreXL from the "Stem" sheet all StemDB instances
func (backRepoStem *BackRepoStemStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoStemid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Stem"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoStem.rowVisitorStem)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoStem *BackRepoStemStruct) rowVisitorStem(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var stemWOP StemWOP
		row.ReadStruct(&stemWOP)

		// add the unmarshalled struct to the stage
		stemDB := new(StemDB)
		stemDB.CopyBasicFieldsFromStemWOP(&stemWOP)

		stemDB_ID_atBackupTime := stemDB.ID
		stemDB.ID = 0
		query := backRepoStem.db.Create(stemDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStem.Map_StemDBID_StemDB[stemDB.ID] = stemDB
		BackRepoStemid_atBckpTime_newID[stemDB_ID_atBackupTime] = stemDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "StemDB.json" in dirPath that stores an array
// of StemDB and stores it in the database
// the map BackRepoStemid_atBckpTime_newID is updated accordingly
func (backRepoStem *BackRepoStemStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoStemid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "StemDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Stem file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*StemDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_StemDBID_StemDB
	for _, stemDB := range forRestore {

		stemDB_ID_atBackupTime := stemDB.ID
		stemDB.ID = 0
		query := backRepoStem.db.Create(stemDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoStem.Map_StemDBID_StemDB[stemDB.ID] = stemDB
		BackRepoStemid_atBckpTime_newID[stemDB_ID_atBackupTime] = stemDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Stem file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Stem>id_atBckpTime_newID
// to compute new index
func (backRepoStem *BackRepoStemStruct) RestorePhaseTwo() {

	for _, stemDB := range backRepoStem.Map_StemDBID_StemDB {

		// next line of code is to avert unused variable compilation error
		_ = stemDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoStem.db.Model(stemDB).Updates(*stemDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoStem.ResetReversePointers commits all staged instances of Stem to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoStem *BackRepoStemStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, stem := range backRepoStem.Map_StemDBID_StemPtr {
		backRepoStem.ResetReversePointersInstance(backRepo, idx, stem)
	}

	return
}

func (backRepoStem *BackRepoStemStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, stem *models.Stem) (Error error) {

	// fetch matching stemDB
	if stemDB, ok := backRepoStem.Map_StemDBID_StemDB[idx]; ok {
		_ = stemDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoStemid_atBckpTime_newID map[uint]uint
