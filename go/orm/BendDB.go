// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bend_sql sql.NullBool
var dummy_Bend_time time.Duration
var dummy_Bend_sort sort.Float64Slice

// BendAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bendAPI
type BendAPI struct {
	gorm.Model

	models.Bend_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BendPointersEncoding BendPointersEncoding
}

// BendPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BendPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Pre_bend is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	Pre_bendID sql.NullInt64

	// field Release is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ReleaseID sql.NullInt64
}

// BendDB describes a bend in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bendDB
type BendDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bendDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BendPointersEncoding
}

// BendDBs arrays bendDBs
// swagger:response bendDBsResponse
type BendDBs []BendDB

// BendDBResponse provides response
// swagger:response bendDBResponse
type BendDBResponse struct {
	BendDB
}

// BendWOP is a Bend without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BendWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Bend_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBendStruct struct {
	// stores BendDB according to their gorm ID
	Map_BendDBID_BendDB map[uint]*BendDB

	// stores BendDB ID according to Bend address
	Map_BendPtr_BendDBID map[*models.Bend]uint

	// stores Bend according to their gorm ID
	Map_BendDBID_BendPtr map[uint]*models.Bend

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBend *BackRepoBendStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBend.stage
	return
}

func (backRepoBend *BackRepoBendStruct) GetDB() *gorm.DB {
	return backRepoBend.db
}

// GetBendDBFromBendPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBend *BackRepoBendStruct) GetBendDBFromBendPtr(bend *models.Bend) (bendDB *BendDB) {
	id := backRepoBend.Map_BendPtr_BendDBID[bend]
	bendDB = backRepoBend.Map_BendDBID_BendDB[id]
	return
}

// BackRepoBend.CommitPhaseOne commits all staged instances of Bend to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBend *BackRepoBendStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bend := range stage.Bends {
		backRepoBend.CommitPhaseOneInstance(bend)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bend := range backRepoBend.Map_BendDBID_BendPtr {
		if _, ok := stage.Bends[bend]; !ok {
			backRepoBend.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBend.CommitDeleteInstance commits deletion of Bend to the BackRepo
func (backRepoBend *BackRepoBendStruct) CommitDeleteInstance(id uint) (Error error) {

	bend := backRepoBend.Map_BendDBID_BendPtr[id]

	// bend is not staged anymore, remove bendDB
	bendDB := backRepoBend.Map_BendDBID_BendDB[id]
	query := backRepoBend.db.Unscoped().Delete(&bendDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBend.Map_BendPtr_BendDBID, bend)
	delete(backRepoBend.Map_BendDBID_BendPtr, id)
	delete(backRepoBend.Map_BendDBID_BendDB, id)

	return
}

// BackRepoBend.CommitPhaseOneInstance commits bend staged instances of Bend to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBend *BackRepoBendStruct) CommitPhaseOneInstance(bend *models.Bend) (Error error) {

	// check if the bend is not commited yet
	if _, ok := backRepoBend.Map_BendPtr_BendDBID[bend]; ok {
		return
	}

	// initiate bend
	var bendDB BendDB
	bendDB.CopyBasicFieldsFromBend(bend)

	query := backRepoBend.db.Create(&bendDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBend.Map_BendPtr_BendDBID[bend] = bendDB.ID
	backRepoBend.Map_BendDBID_BendPtr[bendDB.ID] = bend
	backRepoBend.Map_BendDBID_BendDB[bendDB.ID] = &bendDB

	return
}

// BackRepoBend.CommitPhaseTwo commits all staged instances of Bend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBend *BackRepoBendStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bend := range backRepoBend.Map_BendDBID_BendPtr {
		backRepoBend.CommitPhaseTwoInstance(backRepo, idx, bend)
	}

	return
}

// BackRepoBend.CommitPhaseTwoInstance commits {{structname }} of models.Bend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBend *BackRepoBendStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bend *models.Bend) (Error error) {

	// fetch matching bendDB
	if bendDB, ok := backRepoBend.Map_BendDBID_BendDB[idx]; ok {

		bendDB.CopyBasicFieldsFromBend(bend)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value bend.Pre_bend translates to updating the bend.Pre_bendID
		bendDB.Pre_bendID.Valid = true // allow for a 0 value (nil association)
		if bend.Pre_bend != nil {
			if Pre_bendId, ok := backRepo.BackRepoEmpty.Map_EmptyPtr_EmptyDBID[bend.Pre_bend]; ok {
				bendDB.Pre_bendID.Int64 = int64(Pre_bendId)
				bendDB.Pre_bendID.Valid = true
			}
		} else {
			bendDB.Pre_bendID.Int64 = 0
			bendDB.Pre_bendID.Valid = true
		}

		// commit pointer value bend.Release translates to updating the bend.ReleaseID
		bendDB.ReleaseID.Valid = true // allow for a 0 value (nil association)
		if bend.Release != nil {
			if ReleaseId, ok := backRepo.BackRepoRelease.Map_ReleasePtr_ReleaseDBID[bend.Release]; ok {
				bendDB.ReleaseID.Int64 = int64(ReleaseId)
				bendDB.ReleaseID.Valid = true
			}
		} else {
			bendDB.ReleaseID.Int64 = 0
			bendDB.ReleaseID.Valid = true
		}

		query := backRepoBend.db.Save(&bendDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bend intance %s", bend.Name))
		return err
	}

	return
}

// BackRepoBend.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBend *BackRepoBendStruct) CheckoutPhaseOne() (Error error) {

	bendDBArray := make([]BendDB, 0)
	query := backRepoBend.db.Find(&bendDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bendInstancesToBeRemovedFromTheStage := make(map[*models.Bend]any)
	for key, value := range backRepoBend.stage.Bends {
		bendInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bendDB := range bendDBArray {
		backRepoBend.CheckoutPhaseOneInstance(&bendDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bend, ok := backRepoBend.Map_BendDBID_BendPtr[bendDB.ID]
		if ok {
			delete(bendInstancesToBeRemovedFromTheStage, bend)
		}
	}

	// remove from stage and back repo's 3 maps all bends that are not in the checkout
	for bend := range bendInstancesToBeRemovedFromTheStage {
		bend.Unstage(backRepoBend.GetStage())

		// remove instance from the back repo 3 maps
		bendID := backRepoBend.Map_BendPtr_BendDBID[bend]
		delete(backRepoBend.Map_BendPtr_BendDBID, bend)
		delete(backRepoBend.Map_BendDBID_BendDB, bendID)
		delete(backRepoBend.Map_BendDBID_BendPtr, bendID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bendDB that has been found in the DB, updates the backRepo and stages the
// models version of the bendDB
func (backRepoBend *BackRepoBendStruct) CheckoutPhaseOneInstance(bendDB *BendDB) (Error error) {

	bend, ok := backRepoBend.Map_BendDBID_BendPtr[bendDB.ID]
	if !ok {
		bend = new(models.Bend)

		backRepoBend.Map_BendDBID_BendPtr[bendDB.ID] = bend
		backRepoBend.Map_BendPtr_BendDBID[bend] = bendDB.ID

		// append model store with the new element
		bend.Name = bendDB.Name_Data.String
		bend.Stage(backRepoBend.GetStage())
	}
	bendDB.CopyBasicFieldsToBend(bend)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bend.Stage(backRepoBend.GetStage())

	// preserve pointer to bendDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BendDBID_BendDB)[bendDB hold variable pointers
	bendDB_Data := *bendDB
	preservedPtrToBend := &bendDB_Data
	backRepoBend.Map_BendDBID_BendDB[bendDB.ID] = preservedPtrToBend

	return
}

// BackRepoBend.CheckoutPhaseTwo Checkouts all staged instances of Bend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBend *BackRepoBendStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bendDB := range backRepoBend.Map_BendDBID_BendDB {
		backRepoBend.CheckoutPhaseTwoInstance(backRepo, bendDB)
	}
	return
}

// BackRepoBend.CheckoutPhaseTwoInstance Checkouts staged instances of Bend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBend *BackRepoBendStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bendDB *BendDB) (Error error) {

	bend := backRepoBend.Map_BendDBID_BendPtr[bendDB.ID]

	bendDB.DecodePointers(backRepo, bend)

	return
}

func (bendDB *BendDB) DecodePointers(backRepo *BackRepoStruct, bend *models.Bend) {

	// insertion point for checkout of pointer encoding
	// Pre_bend field
	bend.Pre_bend = nil
	if bendDB.Pre_bendID.Int64 != 0 {
		bend.Pre_bend = backRepo.BackRepoEmpty.Map_EmptyDBID_EmptyPtr[uint(bendDB.Pre_bendID.Int64)]
	}
	// Release field
	bend.Release = nil
	if bendDB.ReleaseID.Int64 != 0 {
		bend.Release = backRepo.BackRepoRelease.Map_ReleaseDBID_ReleasePtr[uint(bendDB.ReleaseID.Int64)]
	}
	return
}

// CommitBend allows commit of a single bend (if already staged)
func (backRepo *BackRepoStruct) CommitBend(bend *models.Bend) {
	backRepo.BackRepoBend.CommitPhaseOneInstance(bend)
	if id, ok := backRepo.BackRepoBend.Map_BendPtr_BendDBID[bend]; ok {
		backRepo.BackRepoBend.CommitPhaseTwoInstance(backRepo, id, bend)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBend allows checkout of a single bend (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBend(bend *models.Bend) {
	// check if the bend is staged
	if _, ok := backRepo.BackRepoBend.Map_BendPtr_BendDBID[bend]; ok {

		if id, ok := backRepo.BackRepoBend.Map_BendPtr_BendDBID[bend]; ok {
			var bendDB BendDB
			bendDB.ID = id

			if err := backRepo.BackRepoBend.db.First(&bendDB, id).Error; err != nil {
				log.Fatalln("CheckoutBend : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBend.CheckoutPhaseOneInstance(&bendDB)
			backRepo.BackRepoBend.CheckoutPhaseTwoInstance(backRepo, &bendDB)
		}
	}
}

// CopyBasicFieldsFromBend
func (bendDB *BendDB) CopyBasicFieldsFromBend(bend *models.Bend) {
	// insertion point for fields commit

	bendDB.Name_Data.String = bend.Name
	bendDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBend_WOP
func (bendDB *BendDB) CopyBasicFieldsFromBend_WOP(bend *models.Bend_WOP) {
	// insertion point for fields commit

	bendDB.Name_Data.String = bend.Name
	bendDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBendWOP
func (bendDB *BendDB) CopyBasicFieldsFromBendWOP(bend *BendWOP) {
	// insertion point for fields commit

	bendDB.Name_Data.String = bend.Name
	bendDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBend
func (bendDB *BendDB) CopyBasicFieldsToBend(bend *models.Bend) {
	// insertion point for checkout of basic fields (back repo to stage)
	bend.Name = bendDB.Name_Data.String
}

// CopyBasicFieldsToBend_WOP
func (bendDB *BendDB) CopyBasicFieldsToBend_WOP(bend *models.Bend_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bend.Name = bendDB.Name_Data.String
}

// CopyBasicFieldsToBendWOP
func (bendDB *BendDB) CopyBasicFieldsToBendWOP(bend *BendWOP) {
	bend.ID = int(bendDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bend.Name = bendDB.Name_Data.String
}

// Backup generates a json file from a slice of all BendDB instances in the backrepo
func (backRepoBend *BackRepoBendStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BendDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BendDB, 0)
	for _, bendDB := range backRepoBend.Map_BendDBID_BendDB {
		forBackup = append(forBackup, bendDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Bend ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Bend file", err.Error())
	}
}

// Backup generates a json file from a slice of all BendDB instances in the backrepo
func (backRepoBend *BackRepoBendStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BendDB, 0)
	for _, bendDB := range backRepoBend.Map_BendDBID_BendDB {
		forBackup = append(forBackup, bendDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Bend")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Bend_Fields, -1)
	for _, bendDB := range forBackup {

		var bendWOP BendWOP
		bendDB.CopyBasicFieldsToBendWOP(&bendWOP)

		row := sh.AddRow()
		row.WriteStruct(&bendWOP, -1)
	}
}

// RestoreXL from the "Bend" sheet all BendDB instances
func (backRepoBend *BackRepoBendStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBendid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Bend"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBend.rowVisitorBend)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBend *BackRepoBendStruct) rowVisitorBend(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bendWOP BendWOP
		row.ReadStruct(&bendWOP)

		// add the unmarshalled struct to the stage
		bendDB := new(BendDB)
		bendDB.CopyBasicFieldsFromBendWOP(&bendWOP)

		bendDB_ID_atBackupTime := bendDB.ID
		bendDB.ID = 0
		query := backRepoBend.db.Create(bendDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBend.Map_BendDBID_BendDB[bendDB.ID] = bendDB
		BackRepoBendid_atBckpTime_newID[bendDB_ID_atBackupTime] = bendDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BendDB.json" in dirPath that stores an array
// of BendDB and stores it in the database
// the map BackRepoBendid_atBckpTime_newID is updated accordingly
func (backRepoBend *BackRepoBendStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBendid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BendDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Bend file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BendDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BendDBID_BendDB
	for _, bendDB := range forRestore {

		bendDB_ID_atBackupTime := bendDB.ID
		bendDB.ID = 0
		query := backRepoBend.db.Create(bendDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBend.Map_BendDBID_BendDB[bendDB.ID] = bendDB
		BackRepoBendid_atBckpTime_newID[bendDB_ID_atBackupTime] = bendDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Bend file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Bend>id_atBckpTime_newID
// to compute new index
func (backRepoBend *BackRepoBendStruct) RestorePhaseTwo() {

	for _, bendDB := range backRepoBend.Map_BendDBID_BendDB {

		// next line of code is to avert unused variable compilation error
		_ = bendDB

		// insertion point for reindexing pointers encoding
		// reindexing Pre_bend field
		if bendDB.Pre_bendID.Int64 != 0 {
			bendDB.Pre_bendID.Int64 = int64(BackRepoEmptyid_atBckpTime_newID[uint(bendDB.Pre_bendID.Int64)])
			bendDB.Pre_bendID.Valid = true
		}

		// reindexing Release field
		if bendDB.ReleaseID.Int64 != 0 {
			bendDB.ReleaseID.Int64 = int64(BackRepoReleaseid_atBckpTime_newID[uint(bendDB.ReleaseID.Int64)])
			bendDB.ReleaseID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoBend.db.Model(bendDB).Updates(*bendDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBend.ResetReversePointers commits all staged instances of Bend to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBend *BackRepoBendStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bend := range backRepoBend.Map_BendDBID_BendPtr {
		backRepoBend.ResetReversePointersInstance(backRepo, idx, bend)
	}

	return
}

func (backRepoBend *BackRepoBendStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bend *models.Bend) (Error error) {

	// fetch matching bendDB
	if bendDB, ok := backRepoBend.Map_BendDBID_BendDB[idx]; ok {
		_ = bendDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBendid_atBckpTime_newID map[uint]uint
