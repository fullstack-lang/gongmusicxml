// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Empty_trill_sound_sql sql.NullBool
var dummy_Empty_trill_sound_time time.Duration
var dummy_Empty_trill_sound_sort sort.Float64Slice

// Empty_trill_soundAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model empty_trill_soundAPI
type Empty_trill_soundAPI struct {
	gorm.Model

	models.Empty_trill_sound_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Empty_trill_soundPointersEncoding Empty_trill_soundPointersEncoding
}

// Empty_trill_soundPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Empty_trill_soundPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Empty_trill_soundDB describes a empty_trill_sound in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model empty_trill_soundDB
type Empty_trill_soundDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field empty_trill_soundDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Empty_trill_soundPointersEncoding
}

// Empty_trill_soundDBs arrays empty_trill_soundDBs
// swagger:response empty_trill_soundDBsResponse
type Empty_trill_soundDBs []Empty_trill_soundDB

// Empty_trill_soundDBResponse provides response
// swagger:response empty_trill_soundDBResponse
type Empty_trill_soundDBResponse struct {
	Empty_trill_soundDB
}

// Empty_trill_soundWOP is a Empty_trill_sound without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Empty_trill_soundWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Empty_trill_sound_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoEmpty_trill_soundStruct struct {
	// stores Empty_trill_soundDB according to their gorm ID
	Map_Empty_trill_soundDBID_Empty_trill_soundDB map[uint]*Empty_trill_soundDB

	// stores Empty_trill_soundDB ID according to Empty_trill_sound address
	Map_Empty_trill_soundPtr_Empty_trill_soundDBID map[*models.Empty_trill_sound]uint

	// stores Empty_trill_sound according to their gorm ID
	Map_Empty_trill_soundDBID_Empty_trill_soundPtr map[uint]*models.Empty_trill_sound

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEmpty_trill_sound.stage
	return
}

func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) GetDB() *gorm.DB {
	return backRepoEmpty_trill_sound.db
}

// GetEmpty_trill_soundDBFromEmpty_trill_soundPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) GetEmpty_trill_soundDBFromEmpty_trill_soundPtr(empty_trill_sound *models.Empty_trill_sound) (empty_trill_soundDB *Empty_trill_soundDB) {
	id := backRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound]
	empty_trill_soundDB = backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[id]
	return
}

// BackRepoEmpty_trill_sound.CommitPhaseOne commits all staged instances of Empty_trill_sound to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for empty_trill_sound := range stage.Empty_trill_sounds {
		backRepoEmpty_trill_sound.CommitPhaseOneInstance(empty_trill_sound)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, empty_trill_sound := range backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr {
		if _, ok := stage.Empty_trill_sounds[empty_trill_sound]; !ok {
			backRepoEmpty_trill_sound.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEmpty_trill_sound.CommitDeleteInstance commits deletion of Empty_trill_sound to the BackRepo
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CommitDeleteInstance(id uint) (Error error) {

	empty_trill_sound := backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr[id]

	// empty_trill_sound is not staged anymore, remove empty_trill_soundDB
	empty_trill_soundDB := backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[id]
	query := backRepoEmpty_trill_sound.db.Unscoped().Delete(&empty_trill_soundDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID, empty_trill_sound)
	delete(backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr, id)
	delete(backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB, id)

	return
}

// BackRepoEmpty_trill_sound.CommitPhaseOneInstance commits empty_trill_sound staged instances of Empty_trill_sound to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CommitPhaseOneInstance(empty_trill_sound *models.Empty_trill_sound) (Error error) {

	// check if the empty_trill_sound is not commited yet
	if _, ok := backRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound]; ok {
		return
	}

	// initiate empty_trill_sound
	var empty_trill_soundDB Empty_trill_soundDB
	empty_trill_soundDB.CopyBasicFieldsFromEmpty_trill_sound(empty_trill_sound)

	query := backRepoEmpty_trill_sound.db.Create(&empty_trill_soundDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound] = empty_trill_soundDB.ID
	backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr[empty_trill_soundDB.ID] = empty_trill_sound
	backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[empty_trill_soundDB.ID] = &empty_trill_soundDB

	return
}

// BackRepoEmpty_trill_sound.CommitPhaseTwo commits all staged instances of Empty_trill_sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_trill_sound := range backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr {
		backRepoEmpty_trill_sound.CommitPhaseTwoInstance(backRepo, idx, empty_trill_sound)
	}

	return
}

// BackRepoEmpty_trill_sound.CommitPhaseTwoInstance commits {{structname }} of models.Empty_trill_sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, empty_trill_sound *models.Empty_trill_sound) (Error error) {

	// fetch matching empty_trill_soundDB
	if empty_trill_soundDB, ok := backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[idx]; ok {

		empty_trill_soundDB.CopyBasicFieldsFromEmpty_trill_sound(empty_trill_sound)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoEmpty_trill_sound.db.Save(&empty_trill_soundDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Empty_trill_sound intance %s", empty_trill_sound.Name))
		return err
	}

	return
}

// BackRepoEmpty_trill_sound.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CheckoutPhaseOne() (Error error) {

	empty_trill_soundDBArray := make([]Empty_trill_soundDB, 0)
	query := backRepoEmpty_trill_sound.db.Find(&empty_trill_soundDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	empty_trill_soundInstancesToBeRemovedFromTheStage := make(map[*models.Empty_trill_sound]any)
	for key, value := range backRepoEmpty_trill_sound.stage.Empty_trill_sounds {
		empty_trill_soundInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, empty_trill_soundDB := range empty_trill_soundDBArray {
		backRepoEmpty_trill_sound.CheckoutPhaseOneInstance(&empty_trill_soundDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		empty_trill_sound, ok := backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr[empty_trill_soundDB.ID]
		if ok {
			delete(empty_trill_soundInstancesToBeRemovedFromTheStage, empty_trill_sound)
		}
	}

	// remove from stage and back repo's 3 maps all empty_trill_sounds that are not in the checkout
	for empty_trill_sound := range empty_trill_soundInstancesToBeRemovedFromTheStage {
		empty_trill_sound.Unstage(backRepoEmpty_trill_sound.GetStage())

		// remove instance from the back repo 3 maps
		empty_trill_soundID := backRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound]
		delete(backRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID, empty_trill_sound)
		delete(backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB, empty_trill_soundID)
		delete(backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr, empty_trill_soundID)
	}

	return
}

// CheckoutPhaseOneInstance takes a empty_trill_soundDB that has been found in the DB, updates the backRepo and stages the
// models version of the empty_trill_soundDB
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CheckoutPhaseOneInstance(empty_trill_soundDB *Empty_trill_soundDB) (Error error) {

	empty_trill_sound, ok := backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr[empty_trill_soundDB.ID]
	if !ok {
		empty_trill_sound = new(models.Empty_trill_sound)

		backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr[empty_trill_soundDB.ID] = empty_trill_sound
		backRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound] = empty_trill_soundDB.ID

		// append model store with the new element
		empty_trill_sound.Name = empty_trill_soundDB.Name_Data.String
		empty_trill_sound.Stage(backRepoEmpty_trill_sound.GetStage())
	}
	empty_trill_soundDB.CopyBasicFieldsToEmpty_trill_sound(empty_trill_sound)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	empty_trill_sound.Stage(backRepoEmpty_trill_sound.GetStage())

	// preserve pointer to empty_trill_soundDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Empty_trill_soundDBID_Empty_trill_soundDB)[empty_trill_soundDB hold variable pointers
	empty_trill_soundDB_Data := *empty_trill_soundDB
	preservedPtrToEmpty_trill_sound := &empty_trill_soundDB_Data
	backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[empty_trill_soundDB.ID] = preservedPtrToEmpty_trill_sound

	return
}

// BackRepoEmpty_trill_sound.CheckoutPhaseTwo Checkouts all staged instances of Empty_trill_sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, empty_trill_soundDB := range backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB {
		backRepoEmpty_trill_sound.CheckoutPhaseTwoInstance(backRepo, empty_trill_soundDB)
	}
	return
}

// BackRepoEmpty_trill_sound.CheckoutPhaseTwoInstance Checkouts staged instances of Empty_trill_sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, empty_trill_soundDB *Empty_trill_soundDB) (Error error) {

	empty_trill_sound := backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr[empty_trill_soundDB.ID]

	empty_trill_soundDB.DecodePointers(backRepo, empty_trill_sound)

	return
}

func (empty_trill_soundDB *Empty_trill_soundDB) DecodePointers(backRepo *BackRepoStruct, empty_trill_sound *models.Empty_trill_sound) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEmpty_trill_sound allows commit of a single empty_trill_sound (if already staged)
func (backRepo *BackRepoStruct) CommitEmpty_trill_sound(empty_trill_sound *models.Empty_trill_sound) {
	backRepo.BackRepoEmpty_trill_sound.CommitPhaseOneInstance(empty_trill_sound)
	if id, ok := backRepo.BackRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound]; ok {
		backRepo.BackRepoEmpty_trill_sound.CommitPhaseTwoInstance(backRepo, id, empty_trill_sound)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEmpty_trill_sound allows checkout of a single empty_trill_sound (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEmpty_trill_sound(empty_trill_sound *models.Empty_trill_sound) {
	// check if the empty_trill_sound is staged
	if _, ok := backRepo.BackRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound]; ok {

		if id, ok := backRepo.BackRepoEmpty_trill_sound.Map_Empty_trill_soundPtr_Empty_trill_soundDBID[empty_trill_sound]; ok {
			var empty_trill_soundDB Empty_trill_soundDB
			empty_trill_soundDB.ID = id

			if err := backRepo.BackRepoEmpty_trill_sound.db.First(&empty_trill_soundDB, id).Error; err != nil {
				log.Fatalln("CheckoutEmpty_trill_sound : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEmpty_trill_sound.CheckoutPhaseOneInstance(&empty_trill_soundDB)
			backRepo.BackRepoEmpty_trill_sound.CheckoutPhaseTwoInstance(backRepo, &empty_trill_soundDB)
		}
	}
}

// CopyBasicFieldsFromEmpty_trill_sound
func (empty_trill_soundDB *Empty_trill_soundDB) CopyBasicFieldsFromEmpty_trill_sound(empty_trill_sound *models.Empty_trill_sound) {
	// insertion point for fields commit

	empty_trill_soundDB.Name_Data.String = empty_trill_sound.Name
	empty_trill_soundDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_trill_sound_WOP
func (empty_trill_soundDB *Empty_trill_soundDB) CopyBasicFieldsFromEmpty_trill_sound_WOP(empty_trill_sound *models.Empty_trill_sound_WOP) {
	// insertion point for fields commit

	empty_trill_soundDB.Name_Data.String = empty_trill_sound.Name
	empty_trill_soundDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromEmpty_trill_soundWOP
func (empty_trill_soundDB *Empty_trill_soundDB) CopyBasicFieldsFromEmpty_trill_soundWOP(empty_trill_sound *Empty_trill_soundWOP) {
	// insertion point for fields commit

	empty_trill_soundDB.Name_Data.String = empty_trill_sound.Name
	empty_trill_soundDB.Name_Data.Valid = true
}

// CopyBasicFieldsToEmpty_trill_sound
func (empty_trill_soundDB *Empty_trill_soundDB) CopyBasicFieldsToEmpty_trill_sound(empty_trill_sound *models.Empty_trill_sound) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_trill_sound.Name = empty_trill_soundDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_trill_sound_WOP
func (empty_trill_soundDB *Empty_trill_soundDB) CopyBasicFieldsToEmpty_trill_sound_WOP(empty_trill_sound *models.Empty_trill_sound_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	empty_trill_sound.Name = empty_trill_soundDB.Name_Data.String
}

// CopyBasicFieldsToEmpty_trill_soundWOP
func (empty_trill_soundDB *Empty_trill_soundDB) CopyBasicFieldsToEmpty_trill_soundWOP(empty_trill_sound *Empty_trill_soundWOP) {
	empty_trill_sound.ID = int(empty_trill_soundDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	empty_trill_sound.Name = empty_trill_soundDB.Name_Data.String
}

// Backup generates a json file from a slice of all Empty_trill_soundDB instances in the backrepo
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Empty_trill_soundDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_trill_soundDB, 0)
	for _, empty_trill_soundDB := range backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB {
		forBackup = append(forBackup, empty_trill_soundDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Empty_trill_sound ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Empty_trill_sound file", err.Error())
	}
}

// Backup generates a json file from a slice of all Empty_trill_soundDB instances in the backrepo
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Empty_trill_soundDB, 0)
	for _, empty_trill_soundDB := range backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB {
		forBackup = append(forBackup, empty_trill_soundDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Empty_trill_sound")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Empty_trill_sound_Fields, -1)
	for _, empty_trill_soundDB := range forBackup {

		var empty_trill_soundWOP Empty_trill_soundWOP
		empty_trill_soundDB.CopyBasicFieldsToEmpty_trill_soundWOP(&empty_trill_soundWOP)

		row := sh.AddRow()
		row.WriteStruct(&empty_trill_soundWOP, -1)
	}
}

// RestoreXL from the "Empty_trill_sound" sheet all Empty_trill_soundDB instances
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEmpty_trill_soundid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Empty_trill_sound"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEmpty_trill_sound.rowVisitorEmpty_trill_sound)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) rowVisitorEmpty_trill_sound(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var empty_trill_soundWOP Empty_trill_soundWOP
		row.ReadStruct(&empty_trill_soundWOP)

		// add the unmarshalled struct to the stage
		empty_trill_soundDB := new(Empty_trill_soundDB)
		empty_trill_soundDB.CopyBasicFieldsFromEmpty_trill_soundWOP(&empty_trill_soundWOP)

		empty_trill_soundDB_ID_atBackupTime := empty_trill_soundDB.ID
		empty_trill_soundDB.ID = 0
		query := backRepoEmpty_trill_sound.db.Create(empty_trill_soundDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[empty_trill_soundDB.ID] = empty_trill_soundDB
		BackRepoEmpty_trill_soundid_atBckpTime_newID[empty_trill_soundDB_ID_atBackupTime] = empty_trill_soundDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Empty_trill_soundDB.json" in dirPath that stores an array
// of Empty_trill_soundDB and stores it in the database
// the map BackRepoEmpty_trill_soundid_atBckpTime_newID is updated accordingly
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEmpty_trill_soundid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Empty_trill_soundDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Empty_trill_sound file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Empty_trill_soundDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Empty_trill_soundDBID_Empty_trill_soundDB
	for _, empty_trill_soundDB := range forRestore {

		empty_trill_soundDB_ID_atBackupTime := empty_trill_soundDB.ID
		empty_trill_soundDB.ID = 0
		query := backRepoEmpty_trill_sound.db.Create(empty_trill_soundDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[empty_trill_soundDB.ID] = empty_trill_soundDB
		BackRepoEmpty_trill_soundid_atBckpTime_newID[empty_trill_soundDB_ID_atBackupTime] = empty_trill_soundDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Empty_trill_sound file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Empty_trill_sound>id_atBckpTime_newID
// to compute new index
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) RestorePhaseTwo() {

	for _, empty_trill_soundDB := range backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB {

		// next line of code is to avert unused variable compilation error
		_ = empty_trill_soundDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoEmpty_trill_sound.db.Model(empty_trill_soundDB).Updates(*empty_trill_soundDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEmpty_trill_sound.ResetReversePointers commits all staged instances of Empty_trill_sound to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, empty_trill_sound := range backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundPtr {
		backRepoEmpty_trill_sound.ResetReversePointersInstance(backRepo, idx, empty_trill_sound)
	}

	return
}

func (backRepoEmpty_trill_sound *BackRepoEmpty_trill_soundStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, empty_trill_sound *models.Empty_trill_sound) (Error error) {

	// fetch matching empty_trill_soundDB
	if empty_trill_soundDB, ok := backRepoEmpty_trill_sound.Map_Empty_trill_soundDBID_Empty_trill_soundDB[idx]; ok {
		_ = empty_trill_soundDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEmpty_trill_soundid_atBckpTime_newID map[uint]uint
