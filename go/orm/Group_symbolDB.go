// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmusicxml/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Group_symbol_sql sql.NullBool
var dummy_Group_symbol_time time.Duration
var dummy_Group_symbol_sort sort.Float64Slice

// Group_symbolAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model group_symbolAPI
type Group_symbolAPI struct {
	gorm.Model

	models.Group_symbol_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Group_symbolPointersEncoding Group_symbolPointersEncoding
}

// Group_symbolPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Group_symbolPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// Group_symbolDB describes a group_symbol in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model group_symbolDB
type Group_symbolDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field group_symbolDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Group_symbolPointersEncoding
}

// Group_symbolDBs arrays group_symbolDBs
// swagger:response group_symbolDBsResponse
type Group_symbolDBs []Group_symbolDB

// Group_symbolDBResponse provides response
// swagger:response group_symbolDBResponse
type Group_symbolDBResponse struct {
	Group_symbolDB
}

// Group_symbolWOP is a Group_symbol without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Group_symbolWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Group_symbol_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGroup_symbolStruct struct {
	// stores Group_symbolDB according to their gorm ID
	Map_Group_symbolDBID_Group_symbolDB map[uint]*Group_symbolDB

	// stores Group_symbolDB ID according to Group_symbol address
	Map_Group_symbolPtr_Group_symbolDBID map[*models.Group_symbol]uint

	// stores Group_symbol according to their gorm ID
	Map_Group_symbolDBID_Group_symbolPtr map[uint]*models.Group_symbol

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGroup_symbol.stage
	return
}

func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) GetDB() *gorm.DB {
	return backRepoGroup_symbol.db
}

// GetGroup_symbolDBFromGroup_symbolPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) GetGroup_symbolDBFromGroup_symbolPtr(group_symbol *models.Group_symbol) (group_symbolDB *Group_symbolDB) {
	id := backRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol]
	group_symbolDB = backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[id]
	return
}

// BackRepoGroup_symbol.CommitPhaseOne commits all staged instances of Group_symbol to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for group_symbol := range stage.Group_symbols {
		backRepoGroup_symbol.CommitPhaseOneInstance(group_symbol)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, group_symbol := range backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr {
		if _, ok := stage.Group_symbols[group_symbol]; !ok {
			backRepoGroup_symbol.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGroup_symbol.CommitDeleteInstance commits deletion of Group_symbol to the BackRepo
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CommitDeleteInstance(id uint) (Error error) {

	group_symbol := backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr[id]

	// group_symbol is not staged anymore, remove group_symbolDB
	group_symbolDB := backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[id]
	query := backRepoGroup_symbol.db.Unscoped().Delete(&group_symbolDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID, group_symbol)
	delete(backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr, id)
	delete(backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB, id)

	return
}

// BackRepoGroup_symbol.CommitPhaseOneInstance commits group_symbol staged instances of Group_symbol to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CommitPhaseOneInstance(group_symbol *models.Group_symbol) (Error error) {

	// check if the group_symbol is not commited yet
	if _, ok := backRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol]; ok {
		return
	}

	// initiate group_symbol
	var group_symbolDB Group_symbolDB
	group_symbolDB.CopyBasicFieldsFromGroup_symbol(group_symbol)

	query := backRepoGroup_symbol.db.Create(&group_symbolDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol] = group_symbolDB.ID
	backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr[group_symbolDB.ID] = group_symbol
	backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[group_symbolDB.ID] = &group_symbolDB

	return
}

// BackRepoGroup_symbol.CommitPhaseTwo commits all staged instances of Group_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, group_symbol := range backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr {
		backRepoGroup_symbol.CommitPhaseTwoInstance(backRepo, idx, group_symbol)
	}

	return
}

// BackRepoGroup_symbol.CommitPhaseTwoInstance commits {{structname }} of models.Group_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, group_symbol *models.Group_symbol) (Error error) {

	// fetch matching group_symbolDB
	if group_symbolDB, ok := backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[idx]; ok {

		group_symbolDB.CopyBasicFieldsFromGroup_symbol(group_symbol)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGroup_symbol.db.Save(&group_symbolDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Group_symbol intance %s", group_symbol.Name))
		return err
	}

	return
}

// BackRepoGroup_symbol.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CheckoutPhaseOne() (Error error) {

	group_symbolDBArray := make([]Group_symbolDB, 0)
	query := backRepoGroup_symbol.db.Find(&group_symbolDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	group_symbolInstancesToBeRemovedFromTheStage := make(map[*models.Group_symbol]any)
	for key, value := range backRepoGroup_symbol.stage.Group_symbols {
		group_symbolInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, group_symbolDB := range group_symbolDBArray {
		backRepoGroup_symbol.CheckoutPhaseOneInstance(&group_symbolDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		group_symbol, ok := backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr[group_symbolDB.ID]
		if ok {
			delete(group_symbolInstancesToBeRemovedFromTheStage, group_symbol)
		}
	}

	// remove from stage and back repo's 3 maps all group_symbols that are not in the checkout
	for group_symbol := range group_symbolInstancesToBeRemovedFromTheStage {
		group_symbol.Unstage(backRepoGroup_symbol.GetStage())

		// remove instance from the back repo 3 maps
		group_symbolID := backRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol]
		delete(backRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID, group_symbol)
		delete(backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB, group_symbolID)
		delete(backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr, group_symbolID)
	}

	return
}

// CheckoutPhaseOneInstance takes a group_symbolDB that has been found in the DB, updates the backRepo and stages the
// models version of the group_symbolDB
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CheckoutPhaseOneInstance(group_symbolDB *Group_symbolDB) (Error error) {

	group_symbol, ok := backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr[group_symbolDB.ID]
	if !ok {
		group_symbol = new(models.Group_symbol)

		backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr[group_symbolDB.ID] = group_symbol
		backRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol] = group_symbolDB.ID

		// append model store with the new element
		group_symbol.Name = group_symbolDB.Name_Data.String
		group_symbol.Stage(backRepoGroup_symbol.GetStage())
	}
	group_symbolDB.CopyBasicFieldsToGroup_symbol(group_symbol)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	group_symbol.Stage(backRepoGroup_symbol.GetStage())

	// preserve pointer to group_symbolDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Group_symbolDBID_Group_symbolDB)[group_symbolDB hold variable pointers
	group_symbolDB_Data := *group_symbolDB
	preservedPtrToGroup_symbol := &group_symbolDB_Data
	backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[group_symbolDB.ID] = preservedPtrToGroup_symbol

	return
}

// BackRepoGroup_symbol.CheckoutPhaseTwo Checkouts all staged instances of Group_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, group_symbolDB := range backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB {
		backRepoGroup_symbol.CheckoutPhaseTwoInstance(backRepo, group_symbolDB)
	}
	return
}

// BackRepoGroup_symbol.CheckoutPhaseTwoInstance Checkouts staged instances of Group_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, group_symbolDB *Group_symbolDB) (Error error) {

	group_symbol := backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr[group_symbolDB.ID]

	group_symbolDB.DecodePointers(backRepo, group_symbol)

	return
}

func (group_symbolDB *Group_symbolDB) DecodePointers(backRepo *BackRepoStruct, group_symbol *models.Group_symbol) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGroup_symbol allows commit of a single group_symbol (if already staged)
func (backRepo *BackRepoStruct) CommitGroup_symbol(group_symbol *models.Group_symbol) {
	backRepo.BackRepoGroup_symbol.CommitPhaseOneInstance(group_symbol)
	if id, ok := backRepo.BackRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol]; ok {
		backRepo.BackRepoGroup_symbol.CommitPhaseTwoInstance(backRepo, id, group_symbol)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGroup_symbol allows checkout of a single group_symbol (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGroup_symbol(group_symbol *models.Group_symbol) {
	// check if the group_symbol is staged
	if _, ok := backRepo.BackRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol]; ok {

		if id, ok := backRepo.BackRepoGroup_symbol.Map_Group_symbolPtr_Group_symbolDBID[group_symbol]; ok {
			var group_symbolDB Group_symbolDB
			group_symbolDB.ID = id

			if err := backRepo.BackRepoGroup_symbol.db.First(&group_symbolDB, id).Error; err != nil {
				log.Fatalln("CheckoutGroup_symbol : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGroup_symbol.CheckoutPhaseOneInstance(&group_symbolDB)
			backRepo.BackRepoGroup_symbol.CheckoutPhaseTwoInstance(backRepo, &group_symbolDB)
		}
	}
}

// CopyBasicFieldsFromGroup_symbol
func (group_symbolDB *Group_symbolDB) CopyBasicFieldsFromGroup_symbol(group_symbol *models.Group_symbol) {
	// insertion point for fields commit

	group_symbolDB.Name_Data.String = group_symbol.Name
	group_symbolDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGroup_symbol_WOP
func (group_symbolDB *Group_symbolDB) CopyBasicFieldsFromGroup_symbol_WOP(group_symbol *models.Group_symbol_WOP) {
	// insertion point for fields commit

	group_symbolDB.Name_Data.String = group_symbol.Name
	group_symbolDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGroup_symbolWOP
func (group_symbolDB *Group_symbolDB) CopyBasicFieldsFromGroup_symbolWOP(group_symbol *Group_symbolWOP) {
	// insertion point for fields commit

	group_symbolDB.Name_Data.String = group_symbol.Name
	group_symbolDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGroup_symbol
func (group_symbolDB *Group_symbolDB) CopyBasicFieldsToGroup_symbol(group_symbol *models.Group_symbol) {
	// insertion point for checkout of basic fields (back repo to stage)
	group_symbol.Name = group_symbolDB.Name_Data.String
}

// CopyBasicFieldsToGroup_symbol_WOP
func (group_symbolDB *Group_symbolDB) CopyBasicFieldsToGroup_symbol_WOP(group_symbol *models.Group_symbol_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	group_symbol.Name = group_symbolDB.Name_Data.String
}

// CopyBasicFieldsToGroup_symbolWOP
func (group_symbolDB *Group_symbolDB) CopyBasicFieldsToGroup_symbolWOP(group_symbol *Group_symbolWOP) {
	group_symbol.ID = int(group_symbolDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	group_symbol.Name = group_symbolDB.Name_Data.String
}

// Backup generates a json file from a slice of all Group_symbolDB instances in the backrepo
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Group_symbolDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Group_symbolDB, 0)
	for _, group_symbolDB := range backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB {
		forBackup = append(forBackup, group_symbolDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Group_symbol ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Group_symbol file", err.Error())
	}
}

// Backup generates a json file from a slice of all Group_symbolDB instances in the backrepo
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Group_symbolDB, 0)
	for _, group_symbolDB := range backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB {
		forBackup = append(forBackup, group_symbolDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Group_symbol")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Group_symbol_Fields, -1)
	for _, group_symbolDB := range forBackup {

		var group_symbolWOP Group_symbolWOP
		group_symbolDB.CopyBasicFieldsToGroup_symbolWOP(&group_symbolWOP)

		row := sh.AddRow()
		row.WriteStruct(&group_symbolWOP, -1)
	}
}

// RestoreXL from the "Group_symbol" sheet all Group_symbolDB instances
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGroup_symbolid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Group_symbol"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGroup_symbol.rowVisitorGroup_symbol)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) rowVisitorGroup_symbol(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var group_symbolWOP Group_symbolWOP
		row.ReadStruct(&group_symbolWOP)

		// add the unmarshalled struct to the stage
		group_symbolDB := new(Group_symbolDB)
		group_symbolDB.CopyBasicFieldsFromGroup_symbolWOP(&group_symbolWOP)

		group_symbolDB_ID_atBackupTime := group_symbolDB.ID
		group_symbolDB.ID = 0
		query := backRepoGroup_symbol.db.Create(group_symbolDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[group_symbolDB.ID] = group_symbolDB
		BackRepoGroup_symbolid_atBckpTime_newID[group_symbolDB_ID_atBackupTime] = group_symbolDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Group_symbolDB.json" in dirPath that stores an array
// of Group_symbolDB and stores it in the database
// the map BackRepoGroup_symbolid_atBckpTime_newID is updated accordingly
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGroup_symbolid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Group_symbolDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Group_symbol file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Group_symbolDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Group_symbolDBID_Group_symbolDB
	for _, group_symbolDB := range forRestore {

		group_symbolDB_ID_atBackupTime := group_symbolDB.ID
		group_symbolDB.ID = 0
		query := backRepoGroup_symbol.db.Create(group_symbolDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[group_symbolDB.ID] = group_symbolDB
		BackRepoGroup_symbolid_atBckpTime_newID[group_symbolDB_ID_atBackupTime] = group_symbolDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Group_symbol file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Group_symbol>id_atBckpTime_newID
// to compute new index
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) RestorePhaseTwo() {

	for _, group_symbolDB := range backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB {

		// next line of code is to avert unused variable compilation error
		_ = group_symbolDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGroup_symbol.db.Model(group_symbolDB).Updates(*group_symbolDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGroup_symbol.ResetReversePointers commits all staged instances of Group_symbol to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, group_symbol := range backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolPtr {
		backRepoGroup_symbol.ResetReversePointersInstance(backRepo, idx, group_symbol)
	}

	return
}

func (backRepoGroup_symbol *BackRepoGroup_symbolStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, group_symbol *models.Group_symbol) (Error error) {

	// fetch matching group_symbolDB
	if group_symbolDB, ok := backRepoGroup_symbol.Map_Group_symbolDBID_Group_symbolDB[idx]; ok {
		_ = group_symbolDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGroup_symbolid_atBckpTime_newID map[uint]uint
